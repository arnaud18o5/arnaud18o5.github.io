{"ast":null,"code":"/**\n * @license\n * Copyright 2010-2021 Three.js Authors\n * SPDX-License-Identifier: MIT\n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.THREE = {}));\n})(this, function (exports) {\n  'use strict';\n\n  const REVISION = '134';\n  const MOUSE = {\n    LEFT: 0,\n    MIDDLE: 1,\n    RIGHT: 2,\n    ROTATE: 0,\n    DOLLY: 1,\n    PAN: 2\n  };\n  const TOUCH = {\n    ROTATE: 0,\n    PAN: 1,\n    DOLLY_PAN: 2,\n    DOLLY_ROTATE: 3\n  };\n  const CullFaceNone = 0;\n  const CullFaceBack = 1;\n  const CullFaceFront = 2;\n  const CullFaceFrontBack = 3;\n  const BasicShadowMap = 0;\n  const PCFShadowMap = 1;\n  const PCFSoftShadowMap = 2;\n  const VSMShadowMap = 3;\n  const FrontSide = 0;\n  const BackSide = 1;\n  const DoubleSide = 2;\n  const FlatShading = 1;\n  const SmoothShading = 2;\n  const NoBlending = 0;\n  const NormalBlending = 1;\n  const AdditiveBlending = 2;\n  const SubtractiveBlending = 3;\n  const MultiplyBlending = 4;\n  const CustomBlending = 5;\n  const AddEquation = 100;\n  const SubtractEquation = 101;\n  const ReverseSubtractEquation = 102;\n  const MinEquation = 103;\n  const MaxEquation = 104;\n  const ZeroFactor = 200;\n  const OneFactor = 201;\n  const SrcColorFactor = 202;\n  const OneMinusSrcColorFactor = 203;\n  const SrcAlphaFactor = 204;\n  const OneMinusSrcAlphaFactor = 205;\n  const DstAlphaFactor = 206;\n  const OneMinusDstAlphaFactor = 207;\n  const DstColorFactor = 208;\n  const OneMinusDstColorFactor = 209;\n  const SrcAlphaSaturateFactor = 210;\n  const NeverDepth = 0;\n  const AlwaysDepth = 1;\n  const LessDepth = 2;\n  const LessEqualDepth = 3;\n  const EqualDepth = 4;\n  const GreaterEqualDepth = 5;\n  const GreaterDepth = 6;\n  const NotEqualDepth = 7;\n  const MultiplyOperation = 0;\n  const MixOperation = 1;\n  const AddOperation = 2;\n  const NoToneMapping = 0;\n  const LinearToneMapping = 1;\n  const ReinhardToneMapping = 2;\n  const CineonToneMapping = 3;\n  const ACESFilmicToneMapping = 4;\n  const CustomToneMapping = 5;\n  const UVMapping = 300;\n  const CubeReflectionMapping = 301;\n  const CubeRefractionMapping = 302;\n  const EquirectangularReflectionMapping = 303;\n  const EquirectangularRefractionMapping = 304;\n  const CubeUVReflectionMapping = 306;\n  const CubeUVRefractionMapping = 307;\n  const RepeatWrapping = 1000;\n  const ClampToEdgeWrapping = 1001;\n  const MirroredRepeatWrapping = 1002;\n  const NearestFilter = 1003;\n  const NearestMipmapNearestFilter = 1004;\n  const NearestMipMapNearestFilter = 1004;\n  const NearestMipmapLinearFilter = 1005;\n  const NearestMipMapLinearFilter = 1005;\n  const LinearFilter = 1006;\n  const LinearMipmapNearestFilter = 1007;\n  const LinearMipMapNearestFilter = 1007;\n  const LinearMipmapLinearFilter = 1008;\n  const LinearMipMapLinearFilter = 1008;\n  const UnsignedByteType = 1009;\n  const ByteType = 1010;\n  const ShortType = 1011;\n  const UnsignedShortType = 1012;\n  const IntType = 1013;\n  const UnsignedIntType = 1014;\n  const FloatType = 1015;\n  const HalfFloatType = 1016;\n  const UnsignedShort4444Type = 1017;\n  const UnsignedShort5551Type = 1018;\n  const UnsignedShort565Type = 1019;\n  const UnsignedInt248Type = 1020;\n  const AlphaFormat = 1021;\n  const RGBFormat = 1022;\n  const RGBAFormat = 1023;\n  const LuminanceFormat = 1024;\n  const LuminanceAlphaFormat = 1025;\n  const RGBEFormat = RGBAFormat;\n  const DepthFormat = 1026;\n  const DepthStencilFormat = 1027;\n  const RedFormat = 1028;\n  const RedIntegerFormat = 1029;\n  const RGFormat = 1030;\n  const RGIntegerFormat = 1031;\n  const RGBIntegerFormat = 1032;\n  const RGBAIntegerFormat = 1033;\n  const RGB_S3TC_DXT1_Format = 33776;\n  const RGBA_S3TC_DXT1_Format = 33777;\n  const RGBA_S3TC_DXT3_Format = 33778;\n  const RGBA_S3TC_DXT5_Format = 33779;\n  const RGB_PVRTC_4BPPV1_Format = 35840;\n  const RGB_PVRTC_2BPPV1_Format = 35841;\n  const RGBA_PVRTC_4BPPV1_Format = 35842;\n  const RGBA_PVRTC_2BPPV1_Format = 35843;\n  const RGB_ETC1_Format = 36196;\n  const RGB_ETC2_Format = 37492;\n  const RGBA_ETC2_EAC_Format = 37496;\n  const RGBA_ASTC_4x4_Format = 37808;\n  const RGBA_ASTC_5x4_Format = 37809;\n  const RGBA_ASTC_5x5_Format = 37810;\n  const RGBA_ASTC_6x5_Format = 37811;\n  const RGBA_ASTC_6x6_Format = 37812;\n  const RGBA_ASTC_8x5_Format = 37813;\n  const RGBA_ASTC_8x6_Format = 37814;\n  const RGBA_ASTC_8x8_Format = 37815;\n  const RGBA_ASTC_10x5_Format = 37816;\n  const RGBA_ASTC_10x6_Format = 37817;\n  const RGBA_ASTC_10x8_Format = 37818;\n  const RGBA_ASTC_10x10_Format = 37819;\n  const RGBA_ASTC_12x10_Format = 37820;\n  const RGBA_ASTC_12x12_Format = 37821;\n  const RGBA_BPTC_Format = 36492;\n  const SRGB8_ALPHA8_ASTC_4x4_Format = 37840;\n  const SRGB8_ALPHA8_ASTC_5x4_Format = 37841;\n  const SRGB8_ALPHA8_ASTC_5x5_Format = 37842;\n  const SRGB8_ALPHA8_ASTC_6x5_Format = 37843;\n  const SRGB8_ALPHA8_ASTC_6x6_Format = 37844;\n  const SRGB8_ALPHA8_ASTC_8x5_Format = 37845;\n  const SRGB8_ALPHA8_ASTC_8x6_Format = 37846;\n  const SRGB8_ALPHA8_ASTC_8x8_Format = 37847;\n  const SRGB8_ALPHA8_ASTC_10x5_Format = 37848;\n  const SRGB8_ALPHA8_ASTC_10x6_Format = 37849;\n  const SRGB8_ALPHA8_ASTC_10x8_Format = 37850;\n  const SRGB8_ALPHA8_ASTC_10x10_Format = 37851;\n  const SRGB8_ALPHA8_ASTC_12x10_Format = 37852;\n  const SRGB8_ALPHA8_ASTC_12x12_Format = 37853;\n  const LoopOnce = 2200;\n  const LoopRepeat = 2201;\n  const LoopPingPong = 2202;\n  const InterpolateDiscrete = 2300;\n  const InterpolateLinear = 2301;\n  const InterpolateSmooth = 2302;\n  const ZeroCurvatureEnding = 2400;\n  const ZeroSlopeEnding = 2401;\n  const WrapAroundEnding = 2402;\n  const NormalAnimationBlendMode = 2500;\n  const AdditiveAnimationBlendMode = 2501;\n  const TrianglesDrawMode = 0;\n  const TriangleStripDrawMode = 1;\n  const TriangleFanDrawMode = 2;\n  const LinearEncoding = 3000;\n  const sRGBEncoding = 3001;\n  const GammaEncoding = 3007;\n  const RGBEEncoding = 3002;\n  const LogLuvEncoding = 3003;\n  const RGBM7Encoding = 3004;\n  const RGBM16Encoding = 3005;\n  const RGBDEncoding = 3006;\n  const BasicDepthPacking = 3200;\n  const RGBADepthPacking = 3201;\n  const TangentSpaceNormalMap = 0;\n  const ObjectSpaceNormalMap = 1;\n  const ZeroStencilOp = 0;\n  const KeepStencilOp = 7680;\n  const ReplaceStencilOp = 7681;\n  const IncrementStencilOp = 7682;\n  const DecrementStencilOp = 7683;\n  const IncrementWrapStencilOp = 34055;\n  const DecrementWrapStencilOp = 34056;\n  const InvertStencilOp = 5386;\n  const NeverStencilFunc = 512;\n  const LessStencilFunc = 513;\n  const EqualStencilFunc = 514;\n  const LessEqualStencilFunc = 515;\n  const GreaterStencilFunc = 516;\n  const NotEqualStencilFunc = 517;\n  const GreaterEqualStencilFunc = 518;\n  const AlwaysStencilFunc = 519;\n  const StaticDrawUsage = 35044;\n  const DynamicDrawUsage = 35048;\n  const StreamDrawUsage = 35040;\n  const StaticReadUsage = 35045;\n  const DynamicReadUsage = 35049;\n  const StreamReadUsage = 35041;\n  const StaticCopyUsage = 35046;\n  const DynamicCopyUsage = 35050;\n  const StreamCopyUsage = 35042;\n  const GLSL1 = '100';\n  const GLSL3 = '300 es';\n  /**\n   * https://github.com/mrdoob/eventdispatcher.js/\n   */\n\n  class EventDispatcher {\n    addEventListener(type, listener) {\n      if (this._listeners === undefined) this._listeners = {};\n      const listeners = this._listeners;\n\n      if (listeners[type] === undefined) {\n        listeners[type] = [];\n      }\n\n      if (listeners[type].indexOf(listener) === -1) {\n        listeners[type].push(listener);\n      }\n    }\n\n    hasEventListener(type, listener) {\n      if (this._listeners === undefined) return false;\n      const listeners = this._listeners;\n      return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n    }\n\n    removeEventListener(type, listener) {\n      if (this._listeners === undefined) return;\n      const listeners = this._listeners;\n      const listenerArray = listeners[type];\n\n      if (listenerArray !== undefined) {\n        const index = listenerArray.indexOf(listener);\n\n        if (index !== -1) {\n          listenerArray.splice(index, 1);\n        }\n      }\n    }\n\n    dispatchEvent(event) {\n      if (this._listeners === undefined) return;\n      const listeners = this._listeners;\n      const listenerArray = listeners[event.type];\n\n      if (listenerArray !== undefined) {\n        event.target = this; // Make a copy, in case listeners are removed while iterating.\n\n        const array = listenerArray.slice(0);\n\n        for (let i = 0, l = array.length; i < l; i++) {\n          array[i].call(this, event);\n        }\n\n        event.target = null;\n      }\n    }\n\n  }\n\n  let _seed = 1234567;\n  const DEG2RAD = Math.PI / 180;\n  const RAD2DEG = 180 / Math.PI; //\n\n  const _lut = [];\n\n  for (let i = 0; i < 256; i++) {\n    _lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n  }\n\n  const hasRandomUUID = typeof crypto !== 'undefined' && 'randomUUID' in crypto;\n\n  function generateUUID() {\n    if (hasRandomUUID) {\n      return crypto.randomUUID().toUpperCase();\n    } // TODO Remove this code when crypto.randomUUID() is available everywhere\n    // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n\n    const d0 = Math.random() * 0xffffffff | 0;\n    const d1 = Math.random() * 0xffffffff | 0;\n    const d2 = Math.random() * 0xffffffff | 0;\n    const d3 = Math.random() * 0xffffffff | 0;\n    const uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' + _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' + _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] + _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff]; // .toUpperCase() here flattens concatenated strings to save heap memory space.\n\n    return uuid.toUpperCase();\n  }\n\n  function clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n  } // compute euclidian modulo of m % n\n  // https://en.wikipedia.org/wiki/Modulo_operation\n\n\n  function euclideanModulo(n, m) {\n    return (n % m + m) % m;\n  } // Linear mapping from range <a1, a2> to range <b1, b2>\n\n\n  function mapLinear(x, a1, a2, b1, b2) {\n    return b1 + (x - a1) * (b2 - b1) / (a2 - a1);\n  } // https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\n\n\n  function inverseLerp(x, y, value) {\n    if (x !== y) {\n      return (value - x) / (y - x);\n    } else {\n      return 0;\n    }\n  } // https://en.wikipedia.org/wiki/Linear_interpolation\n\n\n  function lerp(x, y, t) {\n    return (1 - t) * x + t * y;\n  } // http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\n\n\n  function damp(x, y, lambda, dt) {\n    return lerp(x, y, 1 - Math.exp(-lambda * dt));\n  } // https://www.desmos.com/calculator/vcsjnyz7x4\n\n\n  function pingpong(x) {\n    let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return length - Math.abs(euclideanModulo(x, length * 2) - length);\n  } // http://en.wikipedia.org/wiki/Smoothstep\n\n\n  function smoothstep(x, min, max) {\n    if (x <= min) return 0;\n    if (x >= max) return 1;\n    x = (x - min) / (max - min);\n    return x * x * (3 - 2 * x);\n  }\n\n  function smootherstep(x, min, max) {\n    if (x <= min) return 0;\n    if (x >= max) return 1;\n    x = (x - min) / (max - min);\n    return x * x * x * (x * (x * 6 - 15) + 10);\n  } // Random integer from <low, high> interval\n\n\n  function randInt(low, high) {\n    return low + Math.floor(Math.random() * (high - low + 1));\n  } // Random float from <low, high> interval\n\n\n  function randFloat(low, high) {\n    return low + Math.random() * (high - low);\n  } // Random float from <-range/2, range/2> interval\n\n\n  function randFloatSpread(range) {\n    return range * (0.5 - Math.random());\n  } // Deterministic pseudo-random float in the interval [ 0, 1 ]\n\n\n  function seededRandom(s) {\n    if (s !== undefined) _seed = s % 2147483647; // Park-Miller algorithm\n\n    _seed = _seed * 16807 % 2147483647;\n    return (_seed - 1) / 2147483646;\n  }\n\n  function degToRad(degrees) {\n    return degrees * DEG2RAD;\n  }\n\n  function radToDeg(radians) {\n    return radians * RAD2DEG;\n  }\n\n  function isPowerOfTwo(value) {\n    return (value & value - 1) === 0 && value !== 0;\n  }\n\n  function ceilPowerOfTwo(value) {\n    return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\n  }\n\n  function floorPowerOfTwo(value) {\n    return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));\n  }\n\n  function setQuaternionFromProperEuler(q, a, b, c, order) {\n    // Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n    // rotations are applied to the axes in the order specified by 'order'\n    // rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n    // angles are in radians\n    const cos = Math.cos;\n    const sin = Math.sin;\n    const c2 = cos(b / 2);\n    const s2 = sin(b / 2);\n    const c13 = cos((a + c) / 2);\n    const s13 = sin((a + c) / 2);\n    const c1_3 = cos((a - c) / 2);\n    const s1_3 = sin((a - c) / 2);\n    const c3_1 = cos((c - a) / 2);\n    const s3_1 = sin((c - a) / 2);\n\n    switch (order) {\n      case 'XYX':\n        q.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);\n        break;\n\n      case 'YZY':\n        q.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);\n        break;\n\n      case 'ZXZ':\n        q.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);\n        break;\n\n      case 'XZX':\n        q.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);\n        break;\n\n      case 'YXY':\n        q.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);\n        break;\n\n      case 'ZYZ':\n        q.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);\n        break;\n\n      default:\n        console.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order);\n    }\n  }\n\n  var MathUtils = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    DEG2RAD: DEG2RAD,\n    RAD2DEG: RAD2DEG,\n    generateUUID: generateUUID,\n    clamp: clamp,\n    euclideanModulo: euclideanModulo,\n    mapLinear: mapLinear,\n    inverseLerp: inverseLerp,\n    lerp: lerp,\n    damp: damp,\n    pingpong: pingpong,\n    smoothstep: smoothstep,\n    smootherstep: smootherstep,\n    randInt: randInt,\n    randFloat: randFloat,\n    randFloatSpread: randFloatSpread,\n    seededRandom: seededRandom,\n    degToRad: degToRad,\n    radToDeg: radToDeg,\n    isPowerOfTwo: isPowerOfTwo,\n    ceilPowerOfTwo: ceilPowerOfTwo,\n    floorPowerOfTwo: floorPowerOfTwo,\n    setQuaternionFromProperEuler: setQuaternionFromProperEuler\n  });\n\n  class Vector2 {\n    constructor() {\n      let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      this.x = x;\n      this.y = y;\n    }\n\n    get width() {\n      return this.x;\n    }\n\n    set width(value) {\n      this.x = value;\n    }\n\n    get height() {\n      return this.y;\n    }\n\n    set height(value) {\n      this.y = value;\n    }\n\n    set(x, y) {\n      this.x = x;\n      this.y = y;\n      return this;\n    }\n\n    setScalar(scalar) {\n      this.x = scalar;\n      this.y = scalar;\n      return this;\n    }\n\n    setX(x) {\n      this.x = x;\n      return this;\n    }\n\n    setY(y) {\n      this.y = y;\n      return this;\n    }\n\n    setComponent(index, value) {\n      switch (index) {\n        case 0:\n          this.x = value;\n          break;\n\n        case 1:\n          this.y = value;\n          break;\n\n        default:\n          throw new Error('index is out of range: ' + index);\n      }\n\n      return this;\n    }\n\n    getComponent(index) {\n      switch (index) {\n        case 0:\n          return this.x;\n\n        case 1:\n          return this.y;\n\n        default:\n          throw new Error('index is out of range: ' + index);\n      }\n    }\n\n    clone() {\n      return new this.constructor(this.x, this.y);\n    }\n\n    copy(v) {\n      this.x = v.x;\n      this.y = v.y;\n      return this;\n    }\n\n    add(v, w) {\n      if (w !== undefined) {\n        console.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n        return this.addVectors(v, w);\n      }\n\n      this.x += v.x;\n      this.y += v.y;\n      return this;\n    }\n\n    addScalar(s) {\n      this.x += s;\n      this.y += s;\n      return this;\n    }\n\n    addVectors(a, b) {\n      this.x = a.x + b.x;\n      this.y = a.y + b.y;\n      return this;\n    }\n\n    addScaledVector(v, s) {\n      this.x += v.x * s;\n      this.y += v.y * s;\n      return this;\n    }\n\n    sub(v, w) {\n      if (w !== undefined) {\n        console.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n        return this.subVectors(v, w);\n      }\n\n      this.x -= v.x;\n      this.y -= v.y;\n      return this;\n    }\n\n    subScalar(s) {\n      this.x -= s;\n      this.y -= s;\n      return this;\n    }\n\n    subVectors(a, b) {\n      this.x = a.x - b.x;\n      this.y = a.y - b.y;\n      return this;\n    }\n\n    multiply(v) {\n      this.x *= v.x;\n      this.y *= v.y;\n      return this;\n    }\n\n    multiplyScalar(scalar) {\n      this.x *= scalar;\n      this.y *= scalar;\n      return this;\n    }\n\n    divide(v) {\n      this.x /= v.x;\n      this.y /= v.y;\n      return this;\n    }\n\n    divideScalar(scalar) {\n      return this.multiplyScalar(1 / scalar);\n    }\n\n    applyMatrix3(m) {\n      const x = this.x,\n            y = this.y;\n      const e = m.elements;\n      this.x = e[0] * x + e[3] * y + e[6];\n      this.y = e[1] * x + e[4] * y + e[7];\n      return this;\n    }\n\n    min(v) {\n      this.x = Math.min(this.x, v.x);\n      this.y = Math.min(this.y, v.y);\n      return this;\n    }\n\n    max(v) {\n      this.x = Math.max(this.x, v.x);\n      this.y = Math.max(this.y, v.y);\n      return this;\n    }\n\n    clamp(min, max) {\n      // assumes min < max, componentwise\n      this.x = Math.max(min.x, Math.min(max.x, this.x));\n      this.y = Math.max(min.y, Math.min(max.y, this.y));\n      return this;\n    }\n\n    clampScalar(minVal, maxVal) {\n      this.x = Math.max(minVal, Math.min(maxVal, this.x));\n      this.y = Math.max(minVal, Math.min(maxVal, this.y));\n      return this;\n    }\n\n    clampLength(min, max) {\n      const length = this.length();\n      return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n    }\n\n    floor() {\n      this.x = Math.floor(this.x);\n      this.y = Math.floor(this.y);\n      return this;\n    }\n\n    ceil() {\n      this.x = Math.ceil(this.x);\n      this.y = Math.ceil(this.y);\n      return this;\n    }\n\n    round() {\n      this.x = Math.round(this.x);\n      this.y = Math.round(this.y);\n      return this;\n    }\n\n    roundToZero() {\n      this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n      this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n      return this;\n    }\n\n    negate() {\n      this.x = -this.x;\n      this.y = -this.y;\n      return this;\n    }\n\n    dot(v) {\n      return this.x * v.x + this.y * v.y;\n    }\n\n    cross(v) {\n      return this.x * v.y - this.y * v.x;\n    }\n\n    lengthSq() {\n      return this.x * this.x + this.y * this.y;\n    }\n\n    length() {\n      return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    manhattanLength() {\n      return Math.abs(this.x) + Math.abs(this.y);\n    }\n\n    normalize() {\n      return this.divideScalar(this.length() || 1);\n    }\n\n    angle() {\n      // computes the angle in radians with respect to the positive x-axis\n      const angle = Math.atan2(-this.y, -this.x) + Math.PI;\n      return angle;\n    }\n\n    distanceTo(v) {\n      return Math.sqrt(this.distanceToSquared(v));\n    }\n\n    distanceToSquared(v) {\n      const dx = this.x - v.x,\n            dy = this.y - v.y;\n      return dx * dx + dy * dy;\n    }\n\n    manhattanDistanceTo(v) {\n      return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\n    }\n\n    setLength(length) {\n      return this.normalize().multiplyScalar(length);\n    }\n\n    lerp(v, alpha) {\n      this.x += (v.x - this.x) * alpha;\n      this.y += (v.y - this.y) * alpha;\n      return this;\n    }\n\n    lerpVectors(v1, v2, alpha) {\n      this.x = v1.x + (v2.x - v1.x) * alpha;\n      this.y = v1.y + (v2.y - v1.y) * alpha;\n      return this;\n    }\n\n    equals(v) {\n      return v.x === this.x && v.y === this.y;\n    }\n\n    fromArray(array) {\n      let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      this.x = array[offset];\n      this.y = array[offset + 1];\n      return this;\n    }\n\n    toArray() {\n      let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      array[offset] = this.x;\n      array[offset + 1] = this.y;\n      return array;\n    }\n\n    fromBufferAttribute(attribute, index, offset) {\n      if (offset !== undefined) {\n        console.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');\n      }\n\n      this.x = attribute.getX(index);\n      this.y = attribute.getY(index);\n      return this;\n    }\n\n    rotateAround(center, angle) {\n      const c = Math.cos(angle),\n            s = Math.sin(angle);\n      const x = this.x - center.x;\n      const y = this.y - center.y;\n      this.x = x * c - y * s + center.x;\n      this.y = x * s + y * c + center.y;\n      return this;\n    }\n\n    random() {\n      this.x = Math.random();\n      this.y = Math.random();\n      return this;\n    }\n\n    *[Symbol.iterator]() {\n      yield this.x;\n      yield this.y;\n    }\n\n  }\n\n  Vector2.prototype.isVector2 = true;\n\n  class Matrix3 {\n    constructor() {\n      this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n      if (arguments.length > 0) {\n        console.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');\n      }\n    }\n\n    set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {\n      const te = this.elements;\n      te[0] = n11;\n      te[1] = n21;\n      te[2] = n31;\n      te[3] = n12;\n      te[4] = n22;\n      te[5] = n32;\n      te[6] = n13;\n      te[7] = n23;\n      te[8] = n33;\n      return this;\n    }\n\n    identity() {\n      this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);\n      return this;\n    }\n\n    copy(m) {\n      const te = this.elements;\n      const me = m.elements;\n      te[0] = me[0];\n      te[1] = me[1];\n      te[2] = me[2];\n      te[3] = me[3];\n      te[4] = me[4];\n      te[5] = me[5];\n      te[6] = me[6];\n      te[7] = me[7];\n      te[8] = me[8];\n      return this;\n    }\n\n    extractBasis(xAxis, yAxis, zAxis) {\n      xAxis.setFromMatrix3Column(this, 0);\n      yAxis.setFromMatrix3Column(this, 1);\n      zAxis.setFromMatrix3Column(this, 2);\n      return this;\n    }\n\n    setFromMatrix4(m) {\n      const me = m.elements;\n      this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);\n      return this;\n    }\n\n    multiply(m) {\n      return this.multiplyMatrices(this, m);\n    }\n\n    premultiply(m) {\n      return this.multiplyMatrices(m, this);\n    }\n\n    multiplyMatrices(a, b) {\n      const ae = a.elements;\n      const be = b.elements;\n      const te = this.elements;\n      const a11 = ae[0],\n            a12 = ae[3],\n            a13 = ae[6];\n      const a21 = ae[1],\n            a22 = ae[4],\n            a23 = ae[7];\n      const a31 = ae[2],\n            a32 = ae[5],\n            a33 = ae[8];\n      const b11 = be[0],\n            b12 = be[3],\n            b13 = be[6];\n      const b21 = be[1],\n            b22 = be[4],\n            b23 = be[7];\n      const b31 = be[2],\n            b32 = be[5],\n            b33 = be[8];\n      te[0] = a11 * b11 + a12 * b21 + a13 * b31;\n      te[3] = a11 * b12 + a12 * b22 + a13 * b32;\n      te[6] = a11 * b13 + a12 * b23 + a13 * b33;\n      te[1] = a21 * b11 + a22 * b21 + a23 * b31;\n      te[4] = a21 * b12 + a22 * b22 + a23 * b32;\n      te[7] = a21 * b13 + a22 * b23 + a23 * b33;\n      te[2] = a31 * b11 + a32 * b21 + a33 * b31;\n      te[5] = a31 * b12 + a32 * b22 + a33 * b32;\n      te[8] = a31 * b13 + a32 * b23 + a33 * b33;\n      return this;\n    }\n\n    multiplyScalar(s) {\n      const te = this.elements;\n      te[0] *= s;\n      te[3] *= s;\n      te[6] *= s;\n      te[1] *= s;\n      te[4] *= s;\n      te[7] *= s;\n      te[2] *= s;\n      te[5] *= s;\n      te[8] *= s;\n      return this;\n    }\n\n    determinant() {\n      const te = this.elements;\n      const a = te[0],\n            b = te[1],\n            c = te[2],\n            d = te[3],\n            e = te[4],\n            f = te[5],\n            g = te[6],\n            h = te[7],\n            i = te[8];\n      return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n    }\n\n    invert() {\n      const te = this.elements,\n            n11 = te[0],\n            n21 = te[1],\n            n31 = te[2],\n            n12 = te[3],\n            n22 = te[4],\n            n32 = te[5],\n            n13 = te[6],\n            n23 = te[7],\n            n33 = te[8],\n            t11 = n33 * n22 - n32 * n23,\n            t12 = n32 * n13 - n33 * n12,\n            t13 = n23 * n12 - n22 * n13,\n            det = n11 * t11 + n21 * t12 + n31 * t13;\n      if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);\n      const detInv = 1 / det;\n      te[0] = t11 * detInv;\n      te[1] = (n31 * n23 - n33 * n21) * detInv;\n      te[2] = (n32 * n21 - n31 * n22) * detInv;\n      te[3] = t12 * detInv;\n      te[4] = (n33 * n11 - n31 * n13) * detInv;\n      te[5] = (n31 * n12 - n32 * n11) * detInv;\n      te[6] = t13 * detInv;\n      te[7] = (n21 * n13 - n23 * n11) * detInv;\n      te[8] = (n22 * n11 - n21 * n12) * detInv;\n      return this;\n    }\n\n    transpose() {\n      let tmp;\n      const m = this.elements;\n      tmp = m[1];\n      m[1] = m[3];\n      m[3] = tmp;\n      tmp = m[2];\n      m[2] = m[6];\n      m[6] = tmp;\n      tmp = m[5];\n      m[5] = m[7];\n      m[7] = tmp;\n      return this;\n    }\n\n    getNormalMatrix(matrix4) {\n      return this.setFromMatrix4(matrix4).invert().transpose();\n    }\n\n    transposeIntoArray(r) {\n      const m = this.elements;\n      r[0] = m[0];\n      r[1] = m[3];\n      r[2] = m[6];\n      r[3] = m[1];\n      r[4] = m[4];\n      r[5] = m[7];\n      r[6] = m[2];\n      r[7] = m[5];\n      r[8] = m[8];\n      return this;\n    }\n\n    setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {\n      const c = Math.cos(rotation);\n      const s = Math.sin(rotation);\n      this.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);\n      return this;\n    }\n\n    scale(sx, sy) {\n      const te = this.elements;\n      te[0] *= sx;\n      te[3] *= sx;\n      te[6] *= sx;\n      te[1] *= sy;\n      te[4] *= sy;\n      te[7] *= sy;\n      return this;\n    }\n\n    rotate(theta) {\n      const c = Math.cos(theta);\n      const s = Math.sin(theta);\n      const te = this.elements;\n      const a11 = te[0],\n            a12 = te[3],\n            a13 = te[6];\n      const a21 = te[1],\n            a22 = te[4],\n            a23 = te[7];\n      te[0] = c * a11 + s * a21;\n      te[3] = c * a12 + s * a22;\n      te[6] = c * a13 + s * a23;\n      te[1] = -s * a11 + c * a21;\n      te[4] = -s * a12 + c * a22;\n      te[7] = -s * a13 + c * a23;\n      return this;\n    }\n\n    translate(tx, ty) {\n      const te = this.elements;\n      te[0] += tx * te[2];\n      te[3] += tx * te[5];\n      te[6] += tx * te[8];\n      te[1] += ty * te[2];\n      te[4] += ty * te[5];\n      te[7] += ty * te[8];\n      return this;\n    }\n\n    equals(matrix) {\n      const te = this.elements;\n      const me = matrix.elements;\n\n      for (let i = 0; i < 9; i++) {\n        if (te[i] !== me[i]) return false;\n      }\n\n      return true;\n    }\n\n    fromArray(array) {\n      let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      for (let i = 0; i < 9; i++) {\n        this.elements[i] = array[i + offset];\n      }\n\n      return this;\n    }\n\n    toArray() {\n      let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      const te = this.elements;\n      array[offset] = te[0];\n      array[offset + 1] = te[1];\n      array[offset + 2] = te[2];\n      array[offset + 3] = te[3];\n      array[offset + 4] = te[4];\n      array[offset + 5] = te[5];\n      array[offset + 6] = te[6];\n      array[offset + 7] = te[7];\n      array[offset + 8] = te[8];\n      return array;\n    }\n\n    clone() {\n      return new this.constructor().fromArray(this.elements);\n    }\n\n  }\n\n  Matrix3.prototype.isMatrix3 = true;\n\n  function arrayMax(array) {\n    if (array.length === 0) return -Infinity;\n    let max = array[0];\n\n    for (let i = 1, l = array.length; i < l; ++i) {\n      if (array[i] > max) max = array[i];\n    }\n\n    return max;\n  }\n\n  const TYPED_ARRAYS = {\n    Int8Array: Int8Array,\n    Uint8Array: Uint8Array,\n    Uint8ClampedArray: Uint8ClampedArray,\n    Int16Array: Int16Array,\n    Uint16Array: Uint16Array,\n    Int32Array: Int32Array,\n    Uint32Array: Uint32Array,\n    Float32Array: Float32Array,\n    Float64Array: Float64Array\n  };\n\n  function getTypedArray(type, buffer) {\n    return new TYPED_ARRAYS[type](buffer);\n  }\n\n  function createElementNS(name) {\n    return document.createElementNS('http://www.w3.org/1999/xhtml', name);\n  }\n  /**\n  \t* cyrb53 hash for string from: https://stackoverflow.com/a/52171480\n  \t*\n  \t* Public Domain, @bryc - https://stackoverflow.com/users/815680/bryc\n  \t*\n  \t* It is roughly similar to the well-known MurmurHash/xxHash algorithms. It uses a combination\n  \t* of multiplication and Xorshift to generate the hash, but not as thorough. As a result it's\n  \t* faster than either would be in JavaScript and significantly simpler to implement. Keep in\n  \t* mind this is not a secure algorithm, if privacy/security is a concern, this is not for you.\n  \t*\n  \t* @param {string} str\n  \t* @param {number} seed, default 0\n  \t* @returns number\n  \t*/\n\n\n  function hashString(str) {\n    let seed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let h1 = 0xdeadbeef ^ seed,\n        h2 = 0x41c6ce57 ^ seed;\n\n    for (let i = 0, ch; i < str.length; i++) {\n      ch = str.charCodeAt(i);\n      h1 = Math.imul(h1 ^ ch, 2654435761);\n      h2 = Math.imul(h2 ^ ch, 1597334677);\n    }\n\n    h1 = Math.imul(h1 ^ h1 >>> 16, 2246822507) ^ Math.imul(h2 ^ h2 >>> 13, 3266489909);\n    h2 = Math.imul(h2 ^ h2 >>> 16, 2246822507) ^ Math.imul(h1 ^ h1 >>> 13, 3266489909);\n    return 4294967296 * (2097151 & h2) + (h1 >>> 0);\n  }\n\n  let _canvas;\n\n  class ImageUtils {\n    static getDataURL(image) {\n      if (/^data:/i.test(image.src)) {\n        return image.src;\n      }\n\n      if (typeof HTMLCanvasElement == 'undefined') {\n        return image.src;\n      }\n\n      let canvas;\n\n      if (image instanceof HTMLCanvasElement) {\n        canvas = image;\n      } else {\n        if (_canvas === undefined) _canvas = createElementNS('canvas');\n        _canvas.width = image.width;\n        _canvas.height = image.height;\n\n        const context = _canvas.getContext('2d');\n\n        if (image instanceof ImageData) {\n          context.putImageData(image, 0, 0);\n        } else {\n          context.drawImage(image, 0, 0, image.width, image.height);\n        }\n\n        canvas = _canvas;\n      }\n\n      if (canvas.width > 2048 || canvas.height > 2048) {\n        console.warn('THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image);\n        return canvas.toDataURL('image/jpeg', 0.6);\n      } else {\n        return canvas.toDataURL('image/png');\n      }\n    }\n\n  }\n\n  let textureId = 0;\n\n  class Texture extends EventDispatcher {\n    constructor() {\n      let image = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Texture.DEFAULT_IMAGE;\n      let mapping = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Texture.DEFAULT_MAPPING;\n      let wrapS = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ClampToEdgeWrapping;\n      let wrapT = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ClampToEdgeWrapping;\n      let magFilter = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : LinearFilter;\n      let minFilter = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : LinearMipmapLinearFilter;\n      let format = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : RGBAFormat;\n      let type = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : UnsignedByteType;\n      let anisotropy = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1;\n      let encoding = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : LinearEncoding;\n      super();\n      Object.defineProperty(this, 'id', {\n        value: textureId++\n      });\n      this.uuid = generateUUID();\n      this.name = '';\n      this.image = image;\n      this.mipmaps = [];\n      this.mapping = mapping;\n      this.wrapS = wrapS;\n      this.wrapT = wrapT;\n      this.magFilter = magFilter;\n      this.minFilter = minFilter;\n      this.anisotropy = anisotropy;\n      this.format = format;\n      this.internalFormat = null;\n      this.type = type;\n      this.offset = new Vector2(0, 0);\n      this.repeat = new Vector2(1, 1);\n      this.center = new Vector2(0, 0);\n      this.rotation = 0;\n      this.matrixAutoUpdate = true;\n      this.matrix = new Matrix3();\n      this.generateMipmaps = true;\n      this.premultiplyAlpha = false;\n      this.flipY = true;\n      this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n      // Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n      //\n      // Also changing the encoding after already used by a Material will not automatically make the Material\n      // update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\n      this.encoding = encoding;\n      this.userData = {};\n      this.version = 0;\n      this.onUpdate = null;\n      this.isRenderTargetTexture = false;\n    }\n\n    updateMatrix() {\n      this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);\n    }\n\n    clone() {\n      return new this.constructor().copy(this);\n    }\n\n    copy(source) {\n      this.name = source.name;\n      this.image = source.image;\n      this.mipmaps = source.mipmaps.slice(0);\n      this.mapping = source.mapping;\n      this.wrapS = source.wrapS;\n      this.wrapT = source.wrapT;\n      this.magFilter = source.magFilter;\n      this.minFilter = source.minFilter;\n      this.anisotropy = source.anisotropy;\n      this.format = source.format;\n      this.internalFormat = source.internalFormat;\n      this.type = source.type;\n      this.offset.copy(source.offset);\n      this.repeat.copy(source.repeat);\n      this.center.copy(source.center);\n      this.rotation = source.rotation;\n      this.matrixAutoUpdate = source.matrixAutoUpdate;\n      this.matrix.copy(source.matrix);\n      this.generateMipmaps = source.generateMipmaps;\n      this.premultiplyAlpha = source.premultiplyAlpha;\n      this.flipY = source.flipY;\n      this.unpackAlignment = source.unpackAlignment;\n      this.encoding = source.encoding;\n      this.userData = JSON.parse(JSON.stringify(source.userData));\n      return this;\n    }\n\n    toJSON(meta) {\n      const isRootObject = meta === undefined || typeof meta === 'string';\n\n      if (!isRootObject && meta.textures[this.uuid] !== undefined) {\n        return meta.textures[this.uuid];\n      }\n\n      const output = {\n        metadata: {\n          version: 4.5,\n          type: 'Texture',\n          generator: 'Texture.toJSON'\n        },\n        uuid: this.uuid,\n        name: this.name,\n        mapping: this.mapping,\n        repeat: [this.repeat.x, this.repeat.y],\n        offset: [this.offset.x, this.offset.y],\n        center: [this.center.x, this.center.y],\n        rotation: this.rotation,\n        wrap: [this.wrapS, this.wrapT],\n        format: this.format,\n        type: this.type,\n        encoding: this.encoding,\n        minFilter: this.minFilter,\n        magFilter: this.magFilter,\n        anisotropy: this.anisotropy,\n        flipY: this.flipY,\n        premultiplyAlpha: this.premultiplyAlpha,\n        unpackAlignment: this.unpackAlignment\n      };\n\n      if (this.image !== undefined) {\n        // TODO: Move to THREE.Image\n        const image = this.image;\n\n        if (image.uuid === undefined) {\n          image.uuid = generateUUID(); // UGH\n        }\n\n        if (!isRootObject && meta.images[image.uuid] === undefined) {\n          let url;\n\n          if (Array.isArray(image)) {\n            // process array of images e.g. CubeTexture\n            url = [];\n\n            for (let i = 0, l = image.length; i < l; i++) {\n              // check cube texture with data textures\n              if (image[i].isDataTexture) {\n                url.push(serializeImage(image[i].image));\n              } else {\n                url.push(serializeImage(image[i]));\n              }\n            }\n          } else {\n            // process single image\n            url = serializeImage(image);\n          }\n\n          meta.images[image.uuid] = {\n            uuid: image.uuid,\n            url: url\n          };\n        }\n\n        output.image = image.uuid;\n      }\n\n      if (JSON.stringify(this.userData) !== '{}') output.userData = this.userData;\n\n      if (!isRootObject) {\n        meta.textures[this.uuid] = output;\n      }\n\n      return output;\n    }\n\n    dispose() {\n      this.dispatchEvent({\n        type: 'dispose'\n      });\n    }\n\n    transformUv(uv) {\n      if (this.mapping !== UVMapping) return uv;\n      uv.applyMatrix3(this.matrix);\n\n      if (uv.x < 0 || uv.x > 1) {\n        switch (this.wrapS) {\n          case RepeatWrapping:\n            uv.x = uv.x - Math.floor(uv.x);\n            break;\n\n          case ClampToEdgeWrapping:\n            uv.x = uv.x < 0 ? 0 : 1;\n            break;\n\n          case MirroredRepeatWrapping:\n            if (Math.abs(Math.floor(uv.x) % 2) === 1) {\n              uv.x = Math.ceil(uv.x) - uv.x;\n            } else {\n              uv.x = uv.x - Math.floor(uv.x);\n            }\n\n            break;\n        }\n      }\n\n      if (uv.y < 0 || uv.y > 1) {\n        switch (this.wrapT) {\n          case RepeatWrapping:\n            uv.y = uv.y - Math.floor(uv.y);\n            break;\n\n          case ClampToEdgeWrapping:\n            uv.y = uv.y < 0 ? 0 : 1;\n            break;\n\n          case MirroredRepeatWrapping:\n            if (Math.abs(Math.floor(uv.y) % 2) === 1) {\n              uv.y = Math.ceil(uv.y) - uv.y;\n            } else {\n              uv.y = uv.y - Math.floor(uv.y);\n            }\n\n            break;\n        }\n      }\n\n      if (this.flipY) {\n        uv.y = 1 - uv.y;\n      }\n\n      return uv;\n    }\n\n    set needsUpdate(value) {\n      if (value === true) this.version++;\n    }\n\n  }\n\n  Texture.DEFAULT_IMAGE = undefined;\n  Texture.DEFAULT_MAPPING = UVMapping;\n  Texture.prototype.isTexture = true;\n\n  function serializeImage(image) {\n    if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n      // default images\n      return ImageUtils.getDataURL(image);\n    } else {\n      if (image.data) {\n        // images of DataTexture\n        return {\n          data: Array.prototype.slice.call(image.data),\n          width: image.width,\n          height: image.height,\n          type: image.data.constructor.name\n        };\n      } else {\n        console.warn('THREE.Texture: Unable to serialize Texture.');\n        return {};\n      }\n    }\n  }\n\n  class Vector4 {\n    constructor() {\n      let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      let z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      let w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      this.w = w;\n    }\n\n    get width() {\n      return this.z;\n    }\n\n    set width(value) {\n      this.z = value;\n    }\n\n    get height() {\n      return this.w;\n    }\n\n    set height(value) {\n      this.w = value;\n    }\n\n    set(x, y, z, w) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      this.w = w;\n      return this;\n    }\n\n    setScalar(scalar) {\n      this.x = scalar;\n      this.y = scalar;\n      this.z = scalar;\n      this.w = scalar;\n      return this;\n    }\n\n    setX(x) {\n      this.x = x;\n      return this;\n    }\n\n    setY(y) {\n      this.y = y;\n      return this;\n    }\n\n    setZ(z) {\n      this.z = z;\n      return this;\n    }\n\n    setW(w) {\n      this.w = w;\n      return this;\n    }\n\n    setComponent(index, value) {\n      switch (index) {\n        case 0:\n          this.x = value;\n          break;\n\n        case 1:\n          this.y = value;\n          break;\n\n        case 2:\n          this.z = value;\n          break;\n\n        case 3:\n          this.w = value;\n          break;\n\n        default:\n          throw new Error('index is out of range: ' + index);\n      }\n\n      return this;\n    }\n\n    getComponent(index) {\n      switch (index) {\n        case 0:\n          return this.x;\n\n        case 1:\n          return this.y;\n\n        case 2:\n          return this.z;\n\n        case 3:\n          return this.w;\n\n        default:\n          throw new Error('index is out of range: ' + index);\n      }\n    }\n\n    clone() {\n      return new this.constructor(this.x, this.y, this.z, this.w);\n    }\n\n    copy(v) {\n      this.x = v.x;\n      this.y = v.y;\n      this.z = v.z;\n      this.w = v.w !== undefined ? v.w : 1;\n      return this;\n    }\n\n    add(v, w) {\n      if (w !== undefined) {\n        console.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n        return this.addVectors(v, w);\n      }\n\n      this.x += v.x;\n      this.y += v.y;\n      this.z += v.z;\n      this.w += v.w;\n      return this;\n    }\n\n    addScalar(s) {\n      this.x += s;\n      this.y += s;\n      this.z += s;\n      this.w += s;\n      return this;\n    }\n\n    addVectors(a, b) {\n      this.x = a.x + b.x;\n      this.y = a.y + b.y;\n      this.z = a.z + b.z;\n      this.w = a.w + b.w;\n      return this;\n    }\n\n    addScaledVector(v, s) {\n      this.x += v.x * s;\n      this.y += v.y * s;\n      this.z += v.z * s;\n      this.w += v.w * s;\n      return this;\n    }\n\n    sub(v, w) {\n      if (w !== undefined) {\n        console.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n        return this.subVectors(v, w);\n      }\n\n      this.x -= v.x;\n      this.y -= v.y;\n      this.z -= v.z;\n      this.w -= v.w;\n      return this;\n    }\n\n    subScalar(s) {\n      this.x -= s;\n      this.y -= s;\n      this.z -= s;\n      this.w -= s;\n      return this;\n    }\n\n    subVectors(a, b) {\n      this.x = a.x - b.x;\n      this.y = a.y - b.y;\n      this.z = a.z - b.z;\n      this.w = a.w - b.w;\n      return this;\n    }\n\n    multiply(v) {\n      this.x *= v.x;\n      this.y *= v.y;\n      this.z *= v.z;\n      this.w *= v.w;\n      return this;\n    }\n\n    multiplyScalar(scalar) {\n      this.x *= scalar;\n      this.y *= scalar;\n      this.z *= scalar;\n      this.w *= scalar;\n      return this;\n    }\n\n    applyMatrix4(m) {\n      const x = this.x,\n            y = this.y,\n            z = this.z,\n            w = this.w;\n      const e = m.elements;\n      this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;\n      this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;\n      this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;\n      this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;\n      return this;\n    }\n\n    divideScalar(scalar) {\n      return this.multiplyScalar(1 / scalar);\n    }\n\n    setAxisAngleFromQuaternion(q) {\n      // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n      // q is assumed to be normalized\n      this.w = 2 * Math.acos(q.w);\n      const s = Math.sqrt(1 - q.w * q.w);\n\n      if (s < 0.0001) {\n        this.x = 1;\n        this.y = 0;\n        this.z = 0;\n      } else {\n        this.x = q.x / s;\n        this.y = q.y / s;\n        this.z = q.z / s;\n      }\n\n      return this;\n    }\n\n    setAxisAngleFromRotationMatrix(m) {\n      // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n      // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n      let angle, x, y, z; // variables for result\n\n      const epsilon = 0.01,\n            // margin to allow for rounding errors\n      epsilon2 = 0.1,\n            // margin to distinguish between 0 and 180 degrees\n      te = m.elements,\n            m11 = te[0],\n            m12 = te[4],\n            m13 = te[8],\n            m21 = te[1],\n            m22 = te[5],\n            m23 = te[9],\n            m31 = te[2],\n            m32 = te[6],\n            m33 = te[10];\n\n      if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {\n        // singularity found\n        // first check for identity matrix which must have +1 for all terms\n        // in leading diagonal and zero in other terms\n        if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {\n          // this singularity is identity matrix so angle = 0\n          this.set(1, 0, 0, 0);\n          return this; // zero angle, arbitrary axis\n        } // otherwise this singularity is angle = 180\n\n\n        angle = Math.PI;\n        const xx = (m11 + 1) / 2;\n        const yy = (m22 + 1) / 2;\n        const zz = (m33 + 1) / 2;\n        const xy = (m12 + m21) / 4;\n        const xz = (m13 + m31) / 4;\n        const yz = (m23 + m32) / 4;\n\n        if (xx > yy && xx > zz) {\n          // m11 is the largest diagonal term\n          if (xx < epsilon) {\n            x = 0;\n            y = 0.707106781;\n            z = 0.707106781;\n          } else {\n            x = Math.sqrt(xx);\n            y = xy / x;\n            z = xz / x;\n          }\n        } else if (yy > zz) {\n          // m22 is the largest diagonal term\n          if (yy < epsilon) {\n            x = 0.707106781;\n            y = 0;\n            z = 0.707106781;\n          } else {\n            y = Math.sqrt(yy);\n            x = xy / y;\n            z = yz / y;\n          }\n        } else {\n          // m33 is the largest diagonal term so base result on this\n          if (zz < epsilon) {\n            x = 0.707106781;\n            y = 0.707106781;\n            z = 0;\n          } else {\n            z = Math.sqrt(zz);\n            x = xz / z;\n            y = yz / z;\n          }\n        }\n\n        this.set(x, y, z, angle);\n        return this; // return 180 deg rotation\n      } // as we have reached here there are no singularities so we can handle normally\n\n\n      let s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize\n\n      if (Math.abs(s) < 0.001) s = 1; // prevent divide by zero, should not happen if matrix is orthogonal and should be\n      // caught by singularity test above, but I've left it in just in case\n\n      this.x = (m32 - m23) / s;\n      this.y = (m13 - m31) / s;\n      this.z = (m21 - m12) / s;\n      this.w = Math.acos((m11 + m22 + m33 - 1) / 2);\n      return this;\n    }\n\n    min(v) {\n      this.x = Math.min(this.x, v.x);\n      this.y = Math.min(this.y, v.y);\n      this.z = Math.min(this.z, v.z);\n      this.w = Math.min(this.w, v.w);\n      return this;\n    }\n\n    max(v) {\n      this.x = Math.max(this.x, v.x);\n      this.y = Math.max(this.y, v.y);\n      this.z = Math.max(this.z, v.z);\n      this.w = Math.max(this.w, v.w);\n      return this;\n    }\n\n    clamp(min, max) {\n      // assumes min < max, componentwise\n      this.x = Math.max(min.x, Math.min(max.x, this.x));\n      this.y = Math.max(min.y, Math.min(max.y, this.y));\n      this.z = Math.max(min.z, Math.min(max.z, this.z));\n      this.w = Math.max(min.w, Math.min(max.w, this.w));\n      return this;\n    }\n\n    clampScalar(minVal, maxVal) {\n      this.x = Math.max(minVal, Math.min(maxVal, this.x));\n      this.y = Math.max(minVal, Math.min(maxVal, this.y));\n      this.z = Math.max(minVal, Math.min(maxVal, this.z));\n      this.w = Math.max(minVal, Math.min(maxVal, this.w));\n      return this;\n    }\n\n    clampLength(min, max) {\n      const length = this.length();\n      return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n    }\n\n    floor() {\n      this.x = Math.floor(this.x);\n      this.y = Math.floor(this.y);\n      this.z = Math.floor(this.z);\n      this.w = Math.floor(this.w);\n      return this;\n    }\n\n    ceil() {\n      this.x = Math.ceil(this.x);\n      this.y = Math.ceil(this.y);\n      this.z = Math.ceil(this.z);\n      this.w = Math.ceil(this.w);\n      return this;\n    }\n\n    round() {\n      this.x = Math.round(this.x);\n      this.y = Math.round(this.y);\n      this.z = Math.round(this.z);\n      this.w = Math.round(this.w);\n      return this;\n    }\n\n    roundToZero() {\n      this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n      this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n      this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n      this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);\n      return this;\n    }\n\n    negate() {\n      this.x = -this.x;\n      this.y = -this.y;\n      this.z = -this.z;\n      this.w = -this.w;\n      return this;\n    }\n\n    dot(v) {\n      return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n    }\n\n    lengthSq() {\n      return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n    }\n\n    length() {\n      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n    }\n\n    manhattanLength() {\n      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);\n    }\n\n    normalize() {\n      return this.divideScalar(this.length() || 1);\n    }\n\n    setLength(length) {\n      return this.normalize().multiplyScalar(length);\n    }\n\n    lerp(v, alpha) {\n      this.x += (v.x - this.x) * alpha;\n      this.y += (v.y - this.y) * alpha;\n      this.z += (v.z - this.z) * alpha;\n      this.w += (v.w - this.w) * alpha;\n      return this;\n    }\n\n    lerpVectors(v1, v2, alpha) {\n      this.x = v1.x + (v2.x - v1.x) * alpha;\n      this.y = v1.y + (v2.y - v1.y) * alpha;\n      this.z = v1.z + (v2.z - v1.z) * alpha;\n      this.w = v1.w + (v2.w - v1.w) * alpha;\n      return this;\n    }\n\n    equals(v) {\n      return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;\n    }\n\n    fromArray(array) {\n      let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      this.x = array[offset];\n      this.y = array[offset + 1];\n      this.z = array[offset + 2];\n      this.w = array[offset + 3];\n      return this;\n    }\n\n    toArray() {\n      let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      array[offset] = this.x;\n      array[offset + 1] = this.y;\n      array[offset + 2] = this.z;\n      array[offset + 3] = this.w;\n      return array;\n    }\n\n    fromBufferAttribute(attribute, index, offset) {\n      if (offset !== undefined) {\n        console.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().');\n      }\n\n      this.x = attribute.getX(index);\n      this.y = attribute.getY(index);\n      this.z = attribute.getZ(index);\n      this.w = attribute.getW(index);\n      return this;\n    }\n\n    random() {\n      this.x = Math.random();\n      this.y = Math.random();\n      this.z = Math.random();\n      this.w = Math.random();\n      return this;\n    }\n\n    *[Symbol.iterator]() {\n      yield this.x;\n      yield this.y;\n      yield this.z;\n      yield this.w;\n    }\n\n  }\n\n  Vector4.prototype.isVector4 = true;\n  /*\n   In options, we can specify:\n   * Texture parameters for an auto-generated target texture\n   * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n  */\n\n  class WebGLRenderTarget extends EventDispatcher {\n    constructor(width, height) {\n      let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      super();\n      this.width = width;\n      this.height = height;\n      this.depth = 1;\n      this.scissor = new Vector4(0, 0, width, height);\n      this.scissorTest = false;\n      this.viewport = new Vector4(0, 0, width, height);\n      this.texture = new Texture(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n      this.texture.isRenderTargetTexture = true;\n      this.texture.image = {\n        width: width,\n        height: height,\n        depth: 1\n      };\n      this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n      this.texture.internalFormat = options.internalFormat !== undefined ? options.internalFormat : null;\n      this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n      this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n      this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;\n      this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n    }\n\n    setTexture(texture) {\n      texture.image = {\n        width: this.width,\n        height: this.height,\n        depth: this.depth\n      };\n      this.texture = texture;\n    }\n\n    setSize(width, height) {\n      let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n      if (this.width !== width || this.height !== height || this.depth !== depth) {\n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n        this.texture.image.width = width;\n        this.texture.image.height = height;\n        this.texture.image.depth = depth;\n        this.dispose();\n      }\n\n      this.viewport.set(0, 0, width, height);\n      this.scissor.set(0, 0, width, height);\n    }\n\n    clone() {\n      return new this.constructor().copy(this);\n    }\n\n    copy(source) {\n      this.width = source.width;\n      this.height = source.height;\n      this.depth = source.depth;\n      this.viewport.copy(source.viewport);\n      this.texture = source.texture.clone();\n      this.texture.image = { ...this.texture.image\n      }; // See #20328.\n\n      this.depthBuffer = source.depthBuffer;\n      this.stencilBuffer = source.stencilBuffer;\n      this.depthTexture = source.depthTexture;\n      return this;\n    }\n\n    dispose() {\n      this.dispatchEvent({\n        type: 'dispose'\n      });\n    }\n\n  }\n\n  WebGLRenderTarget.prototype.isWebGLRenderTarget = true;\n\n  class WebGLMultipleRenderTargets extends WebGLRenderTarget {\n    constructor(width, height, count) {\n      super(width, height);\n      const texture = this.texture;\n      this.texture = [];\n\n      for (let i = 0; i < count; i++) {\n        this.texture[i] = texture.clone();\n      }\n    }\n\n    setSize(width, height) {\n      let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n      if (this.width !== width || this.height !== height || this.depth !== depth) {\n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n\n        for (let i = 0, il = this.texture.length; i < il; i++) {\n          this.texture[i].image.width = width;\n          this.texture[i].image.height = height;\n          this.texture[i].image.depth = depth;\n        }\n\n        this.dispose();\n      }\n\n      this.viewport.set(0, 0, width, height);\n      this.scissor.set(0, 0, width, height);\n      return this;\n    }\n\n    copy(source) {\n      this.dispose();\n      this.width = source.width;\n      this.height = source.height;\n      this.depth = source.depth;\n      this.viewport.set(0, 0, this.width, this.height);\n      this.scissor.set(0, 0, this.width, this.height);\n      this.depthBuffer = source.depthBuffer;\n      this.stencilBuffer = source.stencilBuffer;\n      this.depthTexture = source.depthTexture;\n      this.texture.length = 0;\n\n      for (let i = 0, il = source.texture.length; i < il; i++) {\n        this.texture[i] = source.texture[i].clone();\n      }\n\n      return this;\n    }\n\n  }\n\n  WebGLMultipleRenderTargets.prototype.isWebGLMultipleRenderTargets = true;\n\n  class WebGLMultisampleRenderTarget extends WebGLRenderTarget {\n    constructor(width, height, options) {\n      super(width, height, options);\n      this.samples = 4;\n    }\n\n    copy(source) {\n      super.copy.call(this, source);\n      this.samples = source.samples;\n      return this;\n    }\n\n  }\n\n  WebGLMultisampleRenderTarget.prototype.isWebGLMultisampleRenderTarget = true;\n\n  class Quaternion {\n    constructor() {\n      let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      let z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      let w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      this._x = x;\n      this._y = y;\n      this._z = z;\n      this._w = w;\n    }\n\n    static slerp(qa, qb, qm, t) {\n      console.warn('THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.');\n      return qm.slerpQuaternions(qa, qb, t);\n    }\n\n    static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {\n      // fuzz-free, array-based Quaternion SLERP operation\n      let x0 = src0[srcOffset0 + 0],\n          y0 = src0[srcOffset0 + 1],\n          z0 = src0[srcOffset0 + 2],\n          w0 = src0[srcOffset0 + 3];\n      const x1 = src1[srcOffset1 + 0],\n            y1 = src1[srcOffset1 + 1],\n            z1 = src1[srcOffset1 + 2],\n            w1 = src1[srcOffset1 + 3];\n\n      if (t === 0) {\n        dst[dstOffset + 0] = x0;\n        dst[dstOffset + 1] = y0;\n        dst[dstOffset + 2] = z0;\n        dst[dstOffset + 3] = w0;\n        return;\n      }\n\n      if (t === 1) {\n        dst[dstOffset + 0] = x1;\n        dst[dstOffset + 1] = y1;\n        dst[dstOffset + 2] = z1;\n        dst[dstOffset + 3] = w1;\n        return;\n      }\n\n      if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {\n        let s = 1 - t;\n        const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n              dir = cos >= 0 ? 1 : -1,\n              sqrSin = 1 - cos * cos; // Skip the Slerp for tiny steps to avoid numeric problems:\n\n        if (sqrSin > Number.EPSILON) {\n          const sin = Math.sqrt(sqrSin),\n                len = Math.atan2(sin, cos * dir);\n          s = Math.sin(s * len) / sin;\n          t = Math.sin(t * len) / sin;\n        }\n\n        const tDir = t * dir;\n        x0 = x0 * s + x1 * tDir;\n        y0 = y0 * s + y1 * tDir;\n        z0 = z0 * s + z1 * tDir;\n        w0 = w0 * s + w1 * tDir; // Normalize in case we just did a lerp:\n\n        if (s === 1 - t) {\n          const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\n          x0 *= f;\n          y0 *= f;\n          z0 *= f;\n          w0 *= f;\n        }\n      }\n\n      dst[dstOffset] = x0;\n      dst[dstOffset + 1] = y0;\n      dst[dstOffset + 2] = z0;\n      dst[dstOffset + 3] = w0;\n    }\n\n    static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {\n      const x0 = src0[srcOffset0];\n      const y0 = src0[srcOffset0 + 1];\n      const z0 = src0[srcOffset0 + 2];\n      const w0 = src0[srcOffset0 + 3];\n      const x1 = src1[srcOffset1];\n      const y1 = src1[srcOffset1 + 1];\n      const z1 = src1[srcOffset1 + 2];\n      const w1 = src1[srcOffset1 + 3];\n      dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n      dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n      dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n      dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n      return dst;\n    }\n\n    get x() {\n      return this._x;\n    }\n\n    set x(value) {\n      this._x = value;\n\n      this._onChangeCallback();\n    }\n\n    get y() {\n      return this._y;\n    }\n\n    set y(value) {\n      this._y = value;\n\n      this._onChangeCallback();\n    }\n\n    get z() {\n      return this._z;\n    }\n\n    set z(value) {\n      this._z = value;\n\n      this._onChangeCallback();\n    }\n\n    get w() {\n      return this._w;\n    }\n\n    set w(value) {\n      this._w = value;\n\n      this._onChangeCallback();\n    }\n\n    set(x, y, z, w) {\n      this._x = x;\n      this._y = y;\n      this._z = z;\n      this._w = w;\n\n      this._onChangeCallback();\n\n      return this;\n    }\n\n    clone() {\n      return new this.constructor(this._x, this._y, this._z, this._w);\n    }\n\n    copy(quaternion) {\n      this._x = quaternion.x;\n      this._y = quaternion.y;\n      this._z = quaternion.z;\n      this._w = quaternion.w;\n\n      this._onChangeCallback();\n\n      return this;\n    }\n\n    setFromEuler(euler, update) {\n      if (!(euler && euler.isEuler)) {\n        throw new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');\n      }\n\n      const x = euler._x,\n            y = euler._y,\n            z = euler._z,\n            order = euler._order; // http://www.mathworks.com/matlabcentral/fileexchange/\n      // \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n      //\tcontent/SpinCalc.m\n\n      const cos = Math.cos;\n      const sin = Math.sin;\n      const c1 = cos(x / 2);\n      const c2 = cos(y / 2);\n      const c3 = cos(z / 2);\n      const s1 = sin(x / 2);\n      const s2 = sin(y / 2);\n      const s3 = sin(z / 2);\n\n      switch (order) {\n        case 'XYZ':\n          this._x = s1 * c2 * c3 + c1 * s2 * s3;\n          this._y = c1 * s2 * c3 - s1 * c2 * s3;\n          this._z = c1 * c2 * s3 + s1 * s2 * c3;\n          this._w = c1 * c2 * c3 - s1 * s2 * s3;\n          break;\n\n        case 'YXZ':\n          this._x = s1 * c2 * c3 + c1 * s2 * s3;\n          this._y = c1 * s2 * c3 - s1 * c2 * s3;\n          this._z = c1 * c2 * s3 - s1 * s2 * c3;\n          this._w = c1 * c2 * c3 + s1 * s2 * s3;\n          break;\n\n        case 'ZXY':\n          this._x = s1 * c2 * c3 - c1 * s2 * s3;\n          this._y = c1 * s2 * c3 + s1 * c2 * s3;\n          this._z = c1 * c2 * s3 + s1 * s2 * c3;\n          this._w = c1 * c2 * c3 - s1 * s2 * s3;\n          break;\n\n        case 'ZYX':\n          this._x = s1 * c2 * c3 - c1 * s2 * s3;\n          this._y = c1 * s2 * c3 + s1 * c2 * s3;\n          this._z = c1 * c2 * s3 - s1 * s2 * c3;\n          this._w = c1 * c2 * c3 + s1 * s2 * s3;\n          break;\n\n        case 'YZX':\n          this._x = s1 * c2 * c3 + c1 * s2 * s3;\n          this._y = c1 * s2 * c3 + s1 * c2 * s3;\n          this._z = c1 * c2 * s3 - s1 * s2 * c3;\n          this._w = c1 * c2 * c3 - s1 * s2 * s3;\n          break;\n\n        case 'XZY':\n          this._x = s1 * c2 * c3 - c1 * s2 * s3;\n          this._y = c1 * s2 * c3 - s1 * c2 * s3;\n          this._z = c1 * c2 * s3 + s1 * s2 * c3;\n          this._w = c1 * c2 * c3 + s1 * s2 * s3;\n          break;\n\n        default:\n          console.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order);\n      }\n\n      if (update !== false) this._onChangeCallback();\n      return this;\n    }\n\n    setFromAxisAngle(axis, angle) {\n      // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n      // assumes axis is normalized\n      const halfAngle = angle / 2,\n            s = Math.sin(halfAngle);\n      this._x = axis.x * s;\n      this._y = axis.y * s;\n      this._z = axis.z * s;\n      this._w = Math.cos(halfAngle);\n\n      this._onChangeCallback();\n\n      return this;\n    }\n\n    setFromRotationMatrix(m) {\n      // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n      // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n      const te = m.elements,\n            m11 = te[0],\n            m12 = te[4],\n            m13 = te[8],\n            m21 = te[1],\n            m22 = te[5],\n            m23 = te[9],\n            m31 = te[2],\n            m32 = te[6],\n            m33 = te[10],\n            trace = m11 + m22 + m33;\n\n      if (trace > 0) {\n        const s = 0.5 / Math.sqrt(trace + 1.0);\n        this._w = 0.25 / s;\n        this._x = (m32 - m23) * s;\n        this._y = (m13 - m31) * s;\n        this._z = (m21 - m12) * s;\n      } else if (m11 > m22 && m11 > m33) {\n        const s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n        this._w = (m32 - m23) / s;\n        this._x = 0.25 * s;\n        this._y = (m12 + m21) / s;\n        this._z = (m13 + m31) / s;\n      } else if (m22 > m33) {\n        const s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n        this._w = (m13 - m31) / s;\n        this._x = (m12 + m21) / s;\n        this._y = 0.25 * s;\n        this._z = (m23 + m32) / s;\n      } else {\n        const s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n        this._w = (m21 - m12) / s;\n        this._x = (m13 + m31) / s;\n        this._y = (m23 + m32) / s;\n        this._z = 0.25 * s;\n      }\n\n      this._onChangeCallback();\n\n      return this;\n    }\n\n    setFromUnitVectors(vFrom, vTo) {\n      // assumes direction vectors vFrom and vTo are normalized\n      let r = vFrom.dot(vTo) + 1;\n\n      if (r < Number.EPSILON) {\n        // vFrom and vTo point in opposite directions\n        r = 0;\n\n        if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n          this._x = -vFrom.y;\n          this._y = vFrom.x;\n          this._z = 0;\n          this._w = r;\n        } else {\n          this._x = 0;\n          this._y = -vFrom.z;\n          this._z = vFrom.y;\n          this._w = r;\n        }\n      } else {\n        // crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n        this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n        this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n        this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n        this._w = r;\n      }\n\n      return this.normalize();\n    }\n\n    angleTo(q) {\n      return 2 * Math.acos(Math.abs(clamp(this.dot(q), -1, 1)));\n    }\n\n    rotateTowards(q, step) {\n      const angle = this.angleTo(q);\n      if (angle === 0) return this;\n      const t = Math.min(1, step / angle);\n      this.slerp(q, t);\n      return this;\n    }\n\n    identity() {\n      return this.set(0, 0, 0, 1);\n    }\n\n    invert() {\n      // quaternion is assumed to have unit length\n      return this.conjugate();\n    }\n\n    conjugate() {\n      this._x *= -1;\n      this._y *= -1;\n      this._z *= -1;\n\n      this._onChangeCallback();\n\n      return this;\n    }\n\n    dot(v) {\n      return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n    }\n\n    lengthSq() {\n      return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n    }\n\n    length() {\n      return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);\n    }\n\n    normalize() {\n      let l = this.length();\n\n      if (l === 0) {\n        this._x = 0;\n        this._y = 0;\n        this._z = 0;\n        this._w = 1;\n      } else {\n        l = 1 / l;\n        this._x = this._x * l;\n        this._y = this._y * l;\n        this._z = this._z * l;\n        this._w = this._w * l;\n      }\n\n      this._onChangeCallback();\n\n      return this;\n    }\n\n    multiply(q, p) {\n      if (p !== undefined) {\n        console.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');\n        return this.multiplyQuaternions(q, p);\n      }\n\n      return this.multiplyQuaternions(this, q);\n    }\n\n    premultiply(q) {\n      return this.multiplyQuaternions(q, this);\n    }\n\n    multiplyQuaternions(a, b) {\n      // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n      const qax = a._x,\n            qay = a._y,\n            qaz = a._z,\n            qaw = a._w;\n      const qbx = b._x,\n            qby = b._y,\n            qbz = b._z,\n            qbw = b._w;\n      this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n      this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n      this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n      this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n      this._onChangeCallback();\n\n      return this;\n    }\n\n    slerp(qb, t) {\n      if (t === 0) return this;\n      if (t === 1) return this.copy(qb);\n      const x = this._x,\n            y = this._y,\n            z = this._z,\n            w = this._w; // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n      let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n      if (cosHalfTheta < 0) {\n        this._w = -qb._w;\n        this._x = -qb._x;\n        this._y = -qb._y;\n        this._z = -qb._z;\n        cosHalfTheta = -cosHalfTheta;\n      } else {\n        this.copy(qb);\n      }\n\n      if (cosHalfTheta >= 1.0) {\n        this._w = w;\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        return this;\n      }\n\n      const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n      if (sqrSinHalfTheta <= Number.EPSILON) {\n        const s = 1 - t;\n        this._w = s * w + t * this._w;\n        this._x = s * x + t * this._x;\n        this._y = s * y + t * this._y;\n        this._z = s * z + t * this._z;\n        this.normalize();\n\n        this._onChangeCallback();\n\n        return this;\n      }\n\n      const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);\n      const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n      const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,\n            ratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n      this._w = w * ratioA + this._w * ratioB;\n      this._x = x * ratioA + this._x * ratioB;\n      this._y = y * ratioA + this._y * ratioB;\n      this._z = z * ratioA + this._z * ratioB;\n\n      this._onChangeCallback();\n\n      return this;\n    }\n\n    slerpQuaternions(qa, qb, t) {\n      this.copy(qa).slerp(qb, t);\n    }\n\n    random() {\n      // Derived from http://planning.cs.uiuc.edu/node198.html\n      // Note, this source uses w, x, y, z ordering,\n      // so we swap the order below.\n      const u1 = Math.random();\n      const sqrt1u1 = Math.sqrt(1 - u1);\n      const sqrtu1 = Math.sqrt(u1);\n      const u2 = 2 * Math.PI * Math.random();\n      const u3 = 2 * Math.PI * Math.random();\n      return this.set(sqrt1u1 * Math.cos(u2), sqrtu1 * Math.sin(u3), sqrtu1 * Math.cos(u3), sqrt1u1 * Math.sin(u2));\n    }\n\n    equals(quaternion) {\n      return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;\n    }\n\n    fromArray(array) {\n      let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      this._x = array[offset];\n      this._y = array[offset + 1];\n      this._z = array[offset + 2];\n      this._w = array[offset + 3];\n\n      this._onChangeCallback();\n\n      return this;\n    }\n\n    toArray() {\n      let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      array[offset] = this._x;\n      array[offset + 1] = this._y;\n      array[offset + 2] = this._z;\n      array[offset + 3] = this._w;\n      return array;\n    }\n\n    fromBufferAttribute(attribute, index) {\n      this._x = attribute.getX(index);\n      this._y = attribute.getY(index);\n      this._z = attribute.getZ(index);\n      this._w = attribute.getW(index);\n      return this;\n    }\n\n    _onChange(callback) {\n      this._onChangeCallback = callback;\n      return this;\n    }\n\n    _onChangeCallback() {}\n\n  }\n\n  Quaternion.prototype.isQuaternion = true;\n\n  class Vector3 {\n    constructor() {\n      let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      let z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      this.x = x;\n      this.y = y;\n      this.z = z;\n    }\n\n    set(x, y, z) {\n      if (z === undefined) z = this.z; // sprite.scale.set(x,y)\n\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      return this;\n    }\n\n    setScalar(scalar) {\n      this.x = scalar;\n      this.y = scalar;\n      this.z = scalar;\n      return this;\n    }\n\n    setX(x) {\n      this.x = x;\n      return this;\n    }\n\n    setY(y) {\n      this.y = y;\n      return this;\n    }\n\n    setZ(z) {\n      this.z = z;\n      return this;\n    }\n\n    setComponent(index, value) {\n      switch (index) {\n        case 0:\n          this.x = value;\n          break;\n\n        case 1:\n          this.y = value;\n          break;\n\n        case 2:\n          this.z = value;\n          break;\n\n        default:\n          throw new Error('index is out of range: ' + index);\n      }\n\n      return this;\n    }\n\n    getComponent(index) {\n      switch (index) {\n        case 0:\n          return this.x;\n\n        case 1:\n          return this.y;\n\n        case 2:\n          return this.z;\n\n        default:\n          throw new Error('index is out of range: ' + index);\n      }\n    }\n\n    clone() {\n      return new this.constructor(this.x, this.y, this.z);\n    }\n\n    copy(v) {\n      this.x = v.x;\n      this.y = v.y;\n      this.z = v.z;\n      return this;\n    }\n\n    add(v, w) {\n      if (w !== undefined) {\n        console.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n        return this.addVectors(v, w);\n      }\n\n      this.x += v.x;\n      this.y += v.y;\n      this.z += v.z;\n      return this;\n    }\n\n    addScalar(s) {\n      this.x += s;\n      this.y += s;\n      this.z += s;\n      return this;\n    }\n\n    addVectors(a, b) {\n      this.x = a.x + b.x;\n      this.y = a.y + b.y;\n      this.z = a.z + b.z;\n      return this;\n    }\n\n    addScaledVector(v, s) {\n      this.x += v.x * s;\n      this.y += v.y * s;\n      this.z += v.z * s;\n      return this;\n    }\n\n    sub(v, w) {\n      if (w !== undefined) {\n        console.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n        return this.subVectors(v, w);\n      }\n\n      this.x -= v.x;\n      this.y -= v.y;\n      this.z -= v.z;\n      return this;\n    }\n\n    subScalar(s) {\n      this.x -= s;\n      this.y -= s;\n      this.z -= s;\n      return this;\n    }\n\n    subVectors(a, b) {\n      this.x = a.x - b.x;\n      this.y = a.y - b.y;\n      this.z = a.z - b.z;\n      return this;\n    }\n\n    multiply(v, w) {\n      if (w !== undefined) {\n        console.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');\n        return this.multiplyVectors(v, w);\n      }\n\n      this.x *= v.x;\n      this.y *= v.y;\n      this.z *= v.z;\n      return this;\n    }\n\n    multiplyScalar(scalar) {\n      this.x *= scalar;\n      this.y *= scalar;\n      this.z *= scalar;\n      return this;\n    }\n\n    multiplyVectors(a, b) {\n      this.x = a.x * b.x;\n      this.y = a.y * b.y;\n      this.z = a.z * b.z;\n      return this;\n    }\n\n    applyEuler(euler) {\n      if (!(euler && euler.isEuler)) {\n        console.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');\n      }\n\n      return this.applyQuaternion(_quaternion$4.setFromEuler(euler));\n    }\n\n    applyAxisAngle(axis, angle) {\n      return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));\n    }\n\n    applyMatrix3(m) {\n      const x = this.x,\n            y = this.y,\n            z = this.z;\n      const e = m.elements;\n      this.x = e[0] * x + e[3] * y + e[6] * z;\n      this.y = e[1] * x + e[4] * y + e[7] * z;\n      this.z = e[2] * x + e[5] * y + e[8] * z;\n      return this;\n    }\n\n    applyNormalMatrix(m) {\n      return this.applyMatrix3(m).normalize();\n    }\n\n    applyMatrix4(m) {\n      const x = this.x,\n            y = this.y,\n            z = this.z;\n      const e = m.elements;\n      const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\n      this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;\n      this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;\n      this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;\n      return this;\n    }\n\n    applyQuaternion(q) {\n      const x = this.x,\n            y = this.y,\n            z = this.z;\n      const qx = q.x,\n            qy = q.y,\n            qz = q.z,\n            qw = q.w; // calculate quat * vector\n\n      const ix = qw * x + qy * z - qz * y;\n      const iy = qw * y + qz * x - qx * z;\n      const iz = qw * z + qx * y - qy * x;\n      const iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n      this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n      this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n      this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n      return this;\n    }\n\n    project(camera) {\n      return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);\n    }\n\n    unproject(camera) {\n      return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);\n    }\n\n    transformDirection(m) {\n      // input: THREE.Matrix4 affine matrix\n      // vector interpreted as a direction\n      const x = this.x,\n            y = this.y,\n            z = this.z;\n      const e = m.elements;\n      this.x = e[0] * x + e[4] * y + e[8] * z;\n      this.y = e[1] * x + e[5] * y + e[9] * z;\n      this.z = e[2] * x + e[6] * y + e[10] * z;\n      return this.normalize();\n    }\n\n    divide(v) {\n      this.x /= v.x;\n      this.y /= v.y;\n      this.z /= v.z;\n      return this;\n    }\n\n    divideScalar(scalar) {\n      return this.multiplyScalar(1 / scalar);\n    }\n\n    min(v) {\n      this.x = Math.min(this.x, v.x);\n      this.y = Math.min(this.y, v.y);\n      this.z = Math.min(this.z, v.z);\n      return this;\n    }\n\n    max(v) {\n      this.x = Math.max(this.x, v.x);\n      this.y = Math.max(this.y, v.y);\n      this.z = Math.max(this.z, v.z);\n      return this;\n    }\n\n    clamp(min, max) {\n      // assumes min < max, componentwise\n      this.x = Math.max(min.x, Math.min(max.x, this.x));\n      this.y = Math.max(min.y, Math.min(max.y, this.y));\n      this.z = Math.max(min.z, Math.min(max.z, this.z));\n      return this;\n    }\n\n    clampScalar(minVal, maxVal) {\n      this.x = Math.max(minVal, Math.min(maxVal, this.x));\n      this.y = Math.max(minVal, Math.min(maxVal, this.y));\n      this.z = Math.max(minVal, Math.min(maxVal, this.z));\n      return this;\n    }\n\n    clampLength(min, max) {\n      const length = this.length();\n      return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n    }\n\n    floor() {\n      this.x = Math.floor(this.x);\n      this.y = Math.floor(this.y);\n      this.z = Math.floor(this.z);\n      return this;\n    }\n\n    ceil() {\n      this.x = Math.ceil(this.x);\n      this.y = Math.ceil(this.y);\n      this.z = Math.ceil(this.z);\n      return this;\n    }\n\n    round() {\n      this.x = Math.round(this.x);\n      this.y = Math.round(this.y);\n      this.z = Math.round(this.z);\n      return this;\n    }\n\n    roundToZero() {\n      this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n      this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n      this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n      return this;\n    }\n\n    negate() {\n      this.x = -this.x;\n      this.y = -this.y;\n      this.z = -this.z;\n      return this;\n    }\n\n    dot(v) {\n      return this.x * v.x + this.y * v.y + this.z * v.z;\n    } // TODO lengthSquared?\n\n\n    lengthSq() {\n      return this.x * this.x + this.y * this.y + this.z * this.z;\n    }\n\n    length() {\n      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    manhattanLength() {\n      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\n    }\n\n    normalize() {\n      return this.divideScalar(this.length() || 1);\n    }\n\n    setLength(length) {\n      return this.normalize().multiplyScalar(length);\n    }\n\n    lerp(v, alpha) {\n      this.x += (v.x - this.x) * alpha;\n      this.y += (v.y - this.y) * alpha;\n      this.z += (v.z - this.z) * alpha;\n      return this;\n    }\n\n    lerpVectors(v1, v2, alpha) {\n      this.x = v1.x + (v2.x - v1.x) * alpha;\n      this.y = v1.y + (v2.y - v1.y) * alpha;\n      this.z = v1.z + (v2.z - v1.z) * alpha;\n      return this;\n    }\n\n    cross(v, w) {\n      if (w !== undefined) {\n        console.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');\n        return this.crossVectors(v, w);\n      }\n\n      return this.crossVectors(this, v);\n    }\n\n    crossVectors(a, b) {\n      const ax = a.x,\n            ay = a.y,\n            az = a.z;\n      const bx = b.x,\n            by = b.y,\n            bz = b.z;\n      this.x = ay * bz - az * by;\n      this.y = az * bx - ax * bz;\n      this.z = ax * by - ay * bx;\n      return this;\n    }\n\n    projectOnVector(v) {\n      const denominator = v.lengthSq();\n      if (denominator === 0) return this.set(0, 0, 0);\n      const scalar = v.dot(this) / denominator;\n      return this.copy(v).multiplyScalar(scalar);\n    }\n\n    projectOnPlane(planeNormal) {\n      _vector$c.copy(this).projectOnVector(planeNormal);\n\n      return this.sub(_vector$c);\n    }\n\n    reflect(normal) {\n      // reflect incident vector off plane orthogonal to normal\n      // normal is assumed to have unit length\n      return this.sub(_vector$c.copy(normal).multiplyScalar(2 * this.dot(normal)));\n    }\n\n    angleTo(v) {\n      const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());\n      if (denominator === 0) return Math.PI / 2;\n      const theta = this.dot(v) / denominator; // clamp, to handle numerical problems\n\n      return Math.acos(clamp(theta, -1, 1));\n    }\n\n    distanceTo(v) {\n      return Math.sqrt(this.distanceToSquared(v));\n    }\n\n    distanceToSquared(v) {\n      const dx = this.x - v.x,\n            dy = this.y - v.y,\n            dz = this.z - v.z;\n      return dx * dx + dy * dy + dz * dz;\n    }\n\n    manhattanDistanceTo(v) {\n      return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);\n    }\n\n    setFromSpherical(s) {\n      return this.setFromSphericalCoords(s.radius, s.phi, s.theta);\n    }\n\n    setFromSphericalCoords(radius, phi, theta) {\n      const sinPhiRadius = Math.sin(phi) * radius;\n      this.x = sinPhiRadius * Math.sin(theta);\n      this.y = Math.cos(phi) * radius;\n      this.z = sinPhiRadius * Math.cos(theta);\n      return this;\n    }\n\n    setFromCylindrical(c) {\n      return this.setFromCylindricalCoords(c.radius, c.theta, c.y);\n    }\n\n    setFromCylindricalCoords(radius, theta, y) {\n      this.x = radius * Math.sin(theta);\n      this.y = y;\n      this.z = radius * Math.cos(theta);\n      return this;\n    }\n\n    setFromMatrixPosition(m) {\n      const e = m.elements;\n      this.x = e[12];\n      this.y = e[13];\n      this.z = e[14];\n      return this;\n    }\n\n    setFromMatrixScale(m) {\n      const sx = this.setFromMatrixColumn(m, 0).length();\n      const sy = this.setFromMatrixColumn(m, 1).length();\n      const sz = this.setFromMatrixColumn(m, 2).length();\n      this.x = sx;\n      this.y = sy;\n      this.z = sz;\n      return this;\n    }\n\n    setFromMatrixColumn(m, index) {\n      return this.fromArray(m.elements, index * 4);\n    }\n\n    setFromMatrix3Column(m, index) {\n      return this.fromArray(m.elements, index * 3);\n    }\n\n    equals(v) {\n      return v.x === this.x && v.y === this.y && v.z === this.z;\n    }\n\n    fromArray(array) {\n      let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      this.x = array[offset];\n      this.y = array[offset + 1];\n      this.z = array[offset + 2];\n      return this;\n    }\n\n    toArray() {\n      let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      array[offset] = this.x;\n      array[offset + 1] = this.y;\n      array[offset + 2] = this.z;\n      return array;\n    }\n\n    fromBufferAttribute(attribute, index, offset) {\n      if (offset !== undefined) {\n        console.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');\n      }\n\n      this.x = attribute.getX(index);\n      this.y = attribute.getY(index);\n      this.z = attribute.getZ(index);\n      return this;\n    }\n\n    random() {\n      this.x = Math.random();\n      this.y = Math.random();\n      this.z = Math.random();\n      return this;\n    }\n\n    randomDirection() {\n      // Derived from https://mathworld.wolfram.com/SpherePointPicking.html\n      const u = (Math.random() - 0.5) * 2;\n      const t = Math.random() * Math.PI * 2;\n      const f = Math.sqrt(1 - u ** 2);\n      this.x = f * Math.cos(t);\n      this.y = f * Math.sin(t);\n      this.z = u;\n      return this;\n    }\n\n    *[Symbol.iterator]() {\n      yield this.x;\n      yield this.y;\n      yield this.z;\n    }\n\n  }\n\n  Vector3.prototype.isVector3 = true;\n\n  const _vector$c = /*@__PURE__*/new Vector3();\n\n  const _quaternion$4 = /*@__PURE__*/new Quaternion();\n\n  class Box3 {\n    constructor() {\n      let min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3(+Infinity, +Infinity, +Infinity);\n      let max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3(-Infinity, -Infinity, -Infinity);\n      this.min = min;\n      this.max = max;\n    }\n\n    set(min, max) {\n      this.min.copy(min);\n      this.max.copy(max);\n      return this;\n    }\n\n    setFromArray(array) {\n      let minX = +Infinity;\n      let minY = +Infinity;\n      let minZ = +Infinity;\n      let maxX = -Infinity;\n      let maxY = -Infinity;\n      let maxZ = -Infinity;\n\n      for (let i = 0, l = array.length; i < l; i += 3) {\n        const x = array[i];\n        const y = array[i + 1];\n        const z = array[i + 2];\n        if (x < minX) minX = x;\n        if (y < minY) minY = y;\n        if (z < minZ) minZ = z;\n        if (x > maxX) maxX = x;\n        if (y > maxY) maxY = y;\n        if (z > maxZ) maxZ = z;\n      }\n\n      this.min.set(minX, minY, minZ);\n      this.max.set(maxX, maxY, maxZ);\n      return this;\n    }\n\n    setFromBufferAttribute(attribute) {\n      let minX = +Infinity;\n      let minY = +Infinity;\n      let minZ = +Infinity;\n      let maxX = -Infinity;\n      let maxY = -Infinity;\n      let maxZ = -Infinity;\n\n      for (let i = 0, l = attribute.count; i < l; i++) {\n        const x = attribute.getX(i);\n        const y = attribute.getY(i);\n        const z = attribute.getZ(i);\n        if (x < minX) minX = x;\n        if (y < minY) minY = y;\n        if (z < minZ) minZ = z;\n        if (x > maxX) maxX = x;\n        if (y > maxY) maxY = y;\n        if (z > maxZ) maxZ = z;\n      }\n\n      this.min.set(minX, minY, minZ);\n      this.max.set(maxX, maxY, maxZ);\n      return this;\n    }\n\n    setFromPoints(points) {\n      this.makeEmpty();\n\n      for (let i = 0, il = points.length; i < il; i++) {\n        this.expandByPoint(points[i]);\n      }\n\n      return this;\n    }\n\n    setFromCenterAndSize(center, size) {\n      const halfSize = _vector$b.copy(size).multiplyScalar(0.5);\n\n      this.min.copy(center).sub(halfSize);\n      this.max.copy(center).add(halfSize);\n      return this;\n    }\n\n    setFromObject(object) {\n      this.makeEmpty();\n      return this.expandByObject(object);\n    }\n\n    clone() {\n      return new this.constructor().copy(this);\n    }\n\n    copy(box) {\n      this.min.copy(box.min);\n      this.max.copy(box.max);\n      return this;\n    }\n\n    makeEmpty() {\n      this.min.x = this.min.y = this.min.z = +Infinity;\n      this.max.x = this.max.y = this.max.z = -Infinity;\n      return this;\n    }\n\n    isEmpty() {\n      // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n      return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;\n    }\n\n    getCenter(target) {\n      return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n    }\n\n    getSize(target) {\n      return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);\n    }\n\n    expandByPoint(point) {\n      this.min.min(point);\n      this.max.max(point);\n      return this;\n    }\n\n    expandByVector(vector) {\n      this.min.sub(vector);\n      this.max.add(vector);\n      return this;\n    }\n\n    expandByScalar(scalar) {\n      this.min.addScalar(-scalar);\n      this.max.addScalar(scalar);\n      return this;\n    }\n\n    expandByObject(object) {\n      // Computes the world-axis-aligned bounding box of an object (including its children),\n      // accounting for both the object's, and children's, world transforms\n      object.updateWorldMatrix(false, false);\n      const geometry = object.geometry;\n\n      if (geometry !== undefined) {\n        if (geometry.boundingBox === null) {\n          geometry.computeBoundingBox();\n        }\n\n        _box$3.copy(geometry.boundingBox);\n\n        _box$3.applyMatrix4(object.matrixWorld);\n\n        this.union(_box$3);\n      }\n\n      const children = object.children;\n\n      for (let i = 0, l = children.length; i < l; i++) {\n        this.expandByObject(children[i]);\n      }\n\n      return this;\n    }\n\n    containsPoint(point) {\n      return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;\n    }\n\n    containsBox(box) {\n      return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;\n    }\n\n    getParameter(point, target) {\n      // This can potentially have a divide by zero if the box\n      // has a size dimension of 0.\n      return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));\n    }\n\n    intersectsBox(box) {\n      // using 6 splitting planes to rule out intersections.\n      return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n    }\n\n    intersectsSphere(sphere) {\n      // Find the point on the AABB closest to the sphere center.\n      this.clampPoint(sphere.center, _vector$b); // If that point is inside the sphere, the AABB and sphere intersect.\n\n      return _vector$b.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n    }\n\n    intersectsPlane(plane) {\n      // We compute the minimum and maximum dot product values. If those values\n      // are on the same side (back or front) of the plane, then there is no intersection.\n      let min, max;\n\n      if (plane.normal.x > 0) {\n        min = plane.normal.x * this.min.x;\n        max = plane.normal.x * this.max.x;\n      } else {\n        min = plane.normal.x * this.max.x;\n        max = plane.normal.x * this.min.x;\n      }\n\n      if (plane.normal.y > 0) {\n        min += plane.normal.y * this.min.y;\n        max += plane.normal.y * this.max.y;\n      } else {\n        min += plane.normal.y * this.max.y;\n        max += plane.normal.y * this.min.y;\n      }\n\n      if (plane.normal.z > 0) {\n        min += plane.normal.z * this.min.z;\n        max += plane.normal.z * this.max.z;\n      } else {\n        min += plane.normal.z * this.max.z;\n        max += plane.normal.z * this.min.z;\n      }\n\n      return min <= -plane.constant && max >= -plane.constant;\n    }\n\n    intersectsTriangle(triangle) {\n      if (this.isEmpty()) {\n        return false;\n      } // compute box center and extents\n\n\n      this.getCenter(_center);\n\n      _extents.subVectors(this.max, _center); // translate triangle to aabb origin\n\n\n      _v0$2.subVectors(triangle.a, _center);\n\n      _v1$7.subVectors(triangle.b, _center);\n\n      _v2$3.subVectors(triangle.c, _center); // compute edge vectors for triangle\n\n\n      _f0.subVectors(_v1$7, _v0$2);\n\n      _f1.subVectors(_v2$3, _v1$7);\n\n      _f2.subVectors(_v0$2, _v2$3); // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n      // make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n      // axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\n\n      let axes = [0, -_f0.z, _f0.y, 0, -_f1.z, _f1.y, 0, -_f2.z, _f2.y, _f0.z, 0, -_f0.x, _f1.z, 0, -_f1.x, _f2.z, 0, -_f2.x, -_f0.y, _f0.x, 0, -_f1.y, _f1.x, 0, -_f2.y, _f2.x, 0];\n\n      if (!satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents)) {\n        return false;\n      } // test 3 face normals from the aabb\n\n\n      axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n      if (!satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents)) {\n        return false;\n      } // finally testing the face normal of the triangle\n      // use already existing triangle edge vectors here\n\n\n      _triangleNormal.crossVectors(_f0, _f1);\n\n      axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];\n      return satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents);\n    }\n\n    clampPoint(point, target) {\n      return target.copy(point).clamp(this.min, this.max);\n    }\n\n    distanceToPoint(point) {\n      const clampedPoint = _vector$b.copy(point).clamp(this.min, this.max);\n\n      return clampedPoint.sub(point).length();\n    }\n\n    getBoundingSphere(target) {\n      this.getCenter(target.center);\n      target.radius = this.getSize(_vector$b).length() * 0.5;\n      return target;\n    }\n\n    intersect(box) {\n      this.min.max(box.min);\n      this.max.min(box.max); // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\n      if (this.isEmpty()) this.makeEmpty();\n      return this;\n    }\n\n    union(box) {\n      this.min.min(box.min);\n      this.max.max(box.max);\n      return this;\n    }\n\n    applyMatrix4(matrix) {\n      // transform of empty box is an empty box.\n      if (this.isEmpty()) return this; // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\n      _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\n\n\n      _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\n\n\n      _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\n\n\n      _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\n\n\n      _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\n\n\n      _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\n\n\n      _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\n\n\n      _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\n\n\n      this.setFromPoints(_points);\n      return this;\n    }\n\n    translate(offset) {\n      this.min.add(offset);\n      this.max.add(offset);\n      return this;\n    }\n\n    equals(box) {\n      return box.min.equals(this.min) && box.max.equals(this.max);\n    }\n\n  }\n\n  Box3.prototype.isBox3 = true;\n  const _points = [/*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3()];\n\n  const _vector$b = /*@__PURE__*/new Vector3();\n\n  const _box$3 = /*@__PURE__*/new Box3(); // triangle centered vertices\n\n\n  const _v0$2 = /*@__PURE__*/new Vector3();\n\n  const _v1$7 = /*@__PURE__*/new Vector3();\n\n  const _v2$3 = /*@__PURE__*/new Vector3(); // triangle edge vectors\n\n\n  const _f0 = /*@__PURE__*/new Vector3();\n\n  const _f1 = /*@__PURE__*/new Vector3();\n\n  const _f2 = /*@__PURE__*/new Vector3();\n\n  const _center = /*@__PURE__*/new Vector3();\n\n  const _extents = /*@__PURE__*/new Vector3();\n\n  const _triangleNormal = /*@__PURE__*/new Vector3();\n\n  const _testAxis = /*@__PURE__*/new Vector3();\n\n  function satForAxes(axes, v0, v1, v2, extents) {\n    for (let i = 0, j = axes.length - 3; i <= j; i += 3) {\n      _testAxis.fromArray(axes, i); // project the aabb onto the seperating axis\n\n\n      const r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z); // project all 3 vertices of the triangle onto the seperating axis\n\n      const p0 = v0.dot(_testAxis);\n      const p1 = v1.dot(_testAxis);\n      const p2 = v2.dot(_testAxis); // actual test, basically see if either of the most extreme of the triangle points intersects r\n\n      if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {\n        // points of the projected triangle are outside the projected half-length of the aabb\n        // the axis is seperating and we can exit\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  const _box$2 = /*@__PURE__*/new Box3();\n\n  const _v1$6 = /*@__PURE__*/new Vector3();\n\n  const _toFarthestPoint = /*@__PURE__*/new Vector3();\n\n  const _toPoint = /*@__PURE__*/new Vector3();\n\n  class Sphere {\n    constructor() {\n      let center = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n      let radius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n      this.center = center;\n      this.radius = radius;\n    }\n\n    set(center, radius) {\n      this.center.copy(center);\n      this.radius = radius;\n      return this;\n    }\n\n    setFromPoints(points, optionalCenter) {\n      const center = this.center;\n\n      if (optionalCenter !== undefined) {\n        center.copy(optionalCenter);\n      } else {\n        _box$2.setFromPoints(points).getCenter(center);\n      }\n\n      let maxRadiusSq = 0;\n\n      for (let i = 0, il = points.length; i < il; i++) {\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));\n      }\n\n      this.radius = Math.sqrt(maxRadiusSq);\n      return this;\n    }\n\n    copy(sphere) {\n      this.center.copy(sphere.center);\n      this.radius = sphere.radius;\n      return this;\n    }\n\n    isEmpty() {\n      return this.radius < 0;\n    }\n\n    makeEmpty() {\n      this.center.set(0, 0, 0);\n      this.radius = -1;\n      return this;\n    }\n\n    containsPoint(point) {\n      return point.distanceToSquared(this.center) <= this.radius * this.radius;\n    }\n\n    distanceToPoint(point) {\n      return point.distanceTo(this.center) - this.radius;\n    }\n\n    intersectsSphere(sphere) {\n      const radiusSum = this.radius + sphere.radius;\n      return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;\n    }\n\n    intersectsBox(box) {\n      return box.intersectsSphere(this);\n    }\n\n    intersectsPlane(plane) {\n      return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;\n    }\n\n    clampPoint(point, target) {\n      const deltaLengthSq = this.center.distanceToSquared(point);\n      target.copy(point);\n\n      if (deltaLengthSq > this.radius * this.radius) {\n        target.sub(this.center).normalize();\n        target.multiplyScalar(this.radius).add(this.center);\n      }\n\n      return target;\n    }\n\n    getBoundingBox(target) {\n      if (this.isEmpty()) {\n        // Empty sphere produces empty bounding box\n        target.makeEmpty();\n        return target;\n      }\n\n      target.set(this.center, this.center);\n      target.expandByScalar(this.radius);\n      return target;\n    }\n\n    applyMatrix4(matrix) {\n      this.center.applyMatrix4(matrix);\n      this.radius = this.radius * matrix.getMaxScaleOnAxis();\n      return this;\n    }\n\n    translate(offset) {\n      this.center.add(offset);\n      return this;\n    }\n\n    expandByPoint(point) {\n      // from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671\n      _toPoint.subVectors(point, this.center);\n\n      const lengthSq = _toPoint.lengthSq();\n\n      if (lengthSq > this.radius * this.radius) {\n        const length = Math.sqrt(lengthSq);\n        const missingRadiusHalf = (length - this.radius) * 0.5; // Nudge this sphere towards the target point. Add half the missing distance to radius,\n        // and the other half to position. This gives a tighter enclosure, instead of if\n        // the whole missing distance were just added to radius.\n\n        this.center.add(_toPoint.multiplyScalar(missingRadiusHalf / length));\n        this.radius += missingRadiusHalf;\n      }\n\n      return this;\n    }\n\n    union(sphere) {\n      // from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769\n      // To enclose another sphere into this sphere, we only need to enclose two points:\n      // 1) Enclose the farthest point on the other sphere into this sphere.\n      // 2) Enclose the opposite point of the farthest point into this sphere.\n      _toFarthestPoint.subVectors(sphere.center, this.center).normalize().multiplyScalar(sphere.radius);\n\n      this.expandByPoint(_v1$6.copy(sphere.center).add(_toFarthestPoint));\n      this.expandByPoint(_v1$6.copy(sphere.center).sub(_toFarthestPoint));\n      return this;\n    }\n\n    equals(sphere) {\n      return sphere.center.equals(this.center) && sphere.radius === this.radius;\n    }\n\n    clone() {\n      return new this.constructor().copy(this);\n    }\n\n  }\n\n  const _vector$a = /*@__PURE__*/new Vector3();\n\n  const _segCenter = /*@__PURE__*/new Vector3();\n\n  const _segDir = /*@__PURE__*/new Vector3();\n\n  const _diff = /*@__PURE__*/new Vector3();\n\n  const _edge1 = /*@__PURE__*/new Vector3();\n\n  const _edge2 = /*@__PURE__*/new Vector3();\n\n  const _normal$1 = /*@__PURE__*/new Vector3();\n\n  class Ray {\n    constructor() {\n      let origin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n      let direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3(0, 0, -1);\n      this.origin = origin;\n      this.direction = direction;\n    }\n\n    set(origin, direction) {\n      this.origin.copy(origin);\n      this.direction.copy(direction);\n      return this;\n    }\n\n    copy(ray) {\n      this.origin.copy(ray.origin);\n      this.direction.copy(ray.direction);\n      return this;\n    }\n\n    at(t, target) {\n      return target.copy(this.direction).multiplyScalar(t).add(this.origin);\n    }\n\n    lookAt(v) {\n      this.direction.copy(v).sub(this.origin).normalize();\n      return this;\n    }\n\n    recast(t) {\n      this.origin.copy(this.at(t, _vector$a));\n      return this;\n    }\n\n    closestPointToPoint(point, target) {\n      target.subVectors(point, this.origin);\n      const directionDistance = target.dot(this.direction);\n\n      if (directionDistance < 0) {\n        return target.copy(this.origin);\n      }\n\n      return target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n    }\n\n    distanceToPoint(point) {\n      return Math.sqrt(this.distanceSqToPoint(point));\n    }\n\n    distanceSqToPoint(point) {\n      const directionDistance = _vector$a.subVectors(point, this.origin).dot(this.direction); // point behind the ray\n\n\n      if (directionDistance < 0) {\n        return this.origin.distanceToSquared(point);\n      }\n\n      _vector$a.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n\n      return _vector$a.distanceToSquared(point);\n    }\n\n    distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {\n      // from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n      // It returns the min distance between the ray and the segment\n      // defined by v0 and v1\n      // It can also set two optional targets :\n      // - The closest point on the ray\n      // - The closest point on the segment\n      _segCenter.copy(v0).add(v1).multiplyScalar(0.5);\n\n      _segDir.copy(v1).sub(v0).normalize();\n\n      _diff.copy(this.origin).sub(_segCenter);\n\n      const segExtent = v0.distanceTo(v1) * 0.5;\n      const a01 = -this.direction.dot(_segDir);\n\n      const b0 = _diff.dot(this.direction);\n\n      const b1 = -_diff.dot(_segDir);\n\n      const c = _diff.lengthSq();\n\n      const det = Math.abs(1 - a01 * a01);\n      let s0, s1, sqrDist, extDet;\n\n      if (det > 0) {\n        // The ray and segment are not parallel.\n        s0 = a01 * b1 - b0;\n        s1 = a01 * b0 - b1;\n        extDet = segExtent * det;\n\n        if (s0 >= 0) {\n          if (s1 >= -extDet) {\n            if (s1 <= extDet) {\n              // region 0\n              // Minimum at interior points of ray and segment.\n              const invDet = 1 / det;\n              s0 *= invDet;\n              s1 *= invDet;\n              sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;\n            } else {\n              // region 1\n              s1 = segExtent;\n              s0 = Math.max(0, -(a01 * s1 + b0));\n              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n            }\n          } else {\n            // region 5\n            s1 = -segExtent;\n            s0 = Math.max(0, -(a01 * s1 + b0));\n            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n          }\n        } else {\n          if (s1 <= -extDet) {\n            // region 4\n            s0 = Math.max(0, -(-a01 * segExtent + b0));\n            s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n          } else if (s1 <= extDet) {\n            // region 3\n            s0 = 0;\n            s1 = Math.min(Math.max(-segExtent, -b1), segExtent);\n            sqrDist = s1 * (s1 + 2 * b1) + c;\n          } else {\n            // region 2\n            s0 = Math.max(0, -(a01 * segExtent + b0));\n            s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n          }\n        }\n      } else {\n        // Ray and segment are parallel.\n        s1 = a01 > 0 ? -segExtent : segExtent;\n        s0 = Math.max(0, -(a01 * s1 + b0));\n        sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n      }\n\n      if (optionalPointOnRay) {\n        optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);\n      }\n\n      if (optionalPointOnSegment) {\n        optionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);\n      }\n\n      return sqrDist;\n    }\n\n    intersectSphere(sphere, target) {\n      _vector$a.subVectors(sphere.center, this.origin);\n\n      const tca = _vector$a.dot(this.direction);\n\n      const d2 = _vector$a.dot(_vector$a) - tca * tca;\n      const radius2 = sphere.radius * sphere.radius;\n      if (d2 > radius2) return null;\n      const thc = Math.sqrt(radius2 - d2); // t0 = first intersect point - entrance on front of sphere\n\n      const t0 = tca - thc; // t1 = second intersect point - exit point on back of sphere\n\n      const t1 = tca + thc; // test to see if both t0 and t1 are behind the ray - if so, return null\n\n      if (t0 < 0 && t1 < 0) return null; // test to see if t0 is behind the ray:\n      // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n      // in order to always return an intersect point that is in front of the ray.\n\n      if (t0 < 0) return this.at(t1, target); // else t0 is in front of the ray, so return the first collision point scaled by t0\n\n      return this.at(t0, target);\n    }\n\n    intersectsSphere(sphere) {\n      return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;\n    }\n\n    distanceToPlane(plane) {\n      const denominator = plane.normal.dot(this.direction);\n\n      if (denominator === 0) {\n        // line is coplanar, return origin\n        if (plane.distanceToPoint(this.origin) === 0) {\n          return 0;\n        } // Null is preferable to undefined since undefined means.... it is undefined\n\n\n        return null;\n      }\n\n      const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator; // Return if the ray never intersects the plane\n\n      return t >= 0 ? t : null;\n    }\n\n    intersectPlane(plane, target) {\n      const t = this.distanceToPlane(plane);\n\n      if (t === null) {\n        return null;\n      }\n\n      return this.at(t, target);\n    }\n\n    intersectsPlane(plane) {\n      // check if the ray lies on the plane first\n      const distToPoint = plane.distanceToPoint(this.origin);\n\n      if (distToPoint === 0) {\n        return true;\n      }\n\n      const denominator = plane.normal.dot(this.direction);\n\n      if (denominator * distToPoint < 0) {\n        return true;\n      } // ray origin is behind the plane (and is pointing behind it)\n\n\n      return false;\n    }\n\n    intersectBox(box, target) {\n      let tmin, tmax, tymin, tymax, tzmin, tzmax;\n      const invdirx = 1 / this.direction.x,\n            invdiry = 1 / this.direction.y,\n            invdirz = 1 / this.direction.z;\n      const origin = this.origin;\n\n      if (invdirx >= 0) {\n        tmin = (box.min.x - origin.x) * invdirx;\n        tmax = (box.max.x - origin.x) * invdirx;\n      } else {\n        tmin = (box.max.x - origin.x) * invdirx;\n        tmax = (box.min.x - origin.x) * invdirx;\n      }\n\n      if (invdiry >= 0) {\n        tymin = (box.min.y - origin.y) * invdiry;\n        tymax = (box.max.y - origin.y) * invdiry;\n      } else {\n        tymin = (box.max.y - origin.y) * invdiry;\n        tymax = (box.min.y - origin.y) * invdiry;\n      }\n\n      if (tmin > tymax || tymin > tmax) return null; // These lines also handle the case where tmin or tmax is NaN\n      // (result of 0 * Infinity). x !== x returns true if x is NaN\n\n      if (tymin > tmin || tmin !== tmin) tmin = tymin;\n      if (tymax < tmax || tmax !== tmax) tmax = tymax;\n\n      if (invdirz >= 0) {\n        tzmin = (box.min.z - origin.z) * invdirz;\n        tzmax = (box.max.z - origin.z) * invdirz;\n      } else {\n        tzmin = (box.max.z - origin.z) * invdirz;\n        tzmax = (box.min.z - origin.z) * invdirz;\n      }\n\n      if (tmin > tzmax || tzmin > tmax) return null;\n      if (tzmin > tmin || tmin !== tmin) tmin = tzmin;\n      if (tzmax < tmax || tmax !== tmax) tmax = tzmax; //return point closest to the ray (positive side)\n\n      if (tmax < 0) return null;\n      return this.at(tmin >= 0 ? tmin : tmax, target);\n    }\n\n    intersectsBox(box) {\n      return this.intersectBox(box, _vector$a) !== null;\n    }\n\n    intersectTriangle(a, b, c, backfaceCulling, target) {\n      // Compute the offset origin, edges, and normal.\n      // from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n      _edge1.subVectors(b, a);\n\n      _edge2.subVectors(c, a);\n\n      _normal$1.crossVectors(_edge1, _edge2); // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n      // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n      //\t |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n      //\t |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n      //\t |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\n\n      let DdN = this.direction.dot(_normal$1);\n      let sign;\n\n      if (DdN > 0) {\n        if (backfaceCulling) return null;\n        sign = 1;\n      } else if (DdN < 0) {\n        sign = -1;\n        DdN = -DdN;\n      } else {\n        return null;\n      }\n\n      _diff.subVectors(this.origin, a);\n\n      const DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2)); // b1 < 0, no intersection\n\n      if (DdQxE2 < 0) {\n        return null;\n      }\n\n      const DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff)); // b2 < 0, no intersection\n\n      if (DdE1xQ < 0) {\n        return null;\n      } // b1+b2 > 1, no intersection\n\n\n      if (DdQxE2 + DdE1xQ > DdN) {\n        return null;\n      } // Line intersects triangle, check if ray does.\n\n\n      const QdN = -sign * _diff.dot(_normal$1); // t < 0, no intersection\n\n\n      if (QdN < 0) {\n        return null;\n      } // Ray intersects triangle.\n\n\n      return this.at(QdN / DdN, target);\n    }\n\n    applyMatrix4(matrix4) {\n      this.origin.applyMatrix4(matrix4);\n      this.direction.transformDirection(matrix4);\n      return this;\n    }\n\n    equals(ray) {\n      return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);\n    }\n\n    clone() {\n      return new this.constructor().copy(this);\n    }\n\n  }\n\n  class Matrix4 {\n    constructor() {\n      this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\n      if (arguments.length > 0) {\n        console.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');\n      }\n    }\n\n    set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {\n      const te = this.elements;\n      te[0] = n11;\n      te[4] = n12;\n      te[8] = n13;\n      te[12] = n14;\n      te[1] = n21;\n      te[5] = n22;\n      te[9] = n23;\n      te[13] = n24;\n      te[2] = n31;\n      te[6] = n32;\n      te[10] = n33;\n      te[14] = n34;\n      te[3] = n41;\n      te[7] = n42;\n      te[11] = n43;\n      te[15] = n44;\n      return this;\n    }\n\n    identity() {\n      this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n      return this;\n    }\n\n    clone() {\n      return new Matrix4().fromArray(this.elements);\n    }\n\n    copy(m) {\n      const te = this.elements;\n      const me = m.elements;\n      te[0] = me[0];\n      te[1] = me[1];\n      te[2] = me[2];\n      te[3] = me[3];\n      te[4] = me[4];\n      te[5] = me[5];\n      te[6] = me[6];\n      te[7] = me[7];\n      te[8] = me[8];\n      te[9] = me[9];\n      te[10] = me[10];\n      te[11] = me[11];\n      te[12] = me[12];\n      te[13] = me[13];\n      te[14] = me[14];\n      te[15] = me[15];\n      return this;\n    }\n\n    copyPosition(m) {\n      const te = this.elements,\n            me = m.elements;\n      te[12] = me[12];\n      te[13] = me[13];\n      te[14] = me[14];\n      return this;\n    }\n\n    setFromMatrix3(m) {\n      const me = m.elements;\n      this.set(me[0], me[3], me[6], 0, me[1], me[4], me[7], 0, me[2], me[5], me[8], 0, 0, 0, 0, 1);\n      return this;\n    }\n\n    extractBasis(xAxis, yAxis, zAxis) {\n      xAxis.setFromMatrixColumn(this, 0);\n      yAxis.setFromMatrixColumn(this, 1);\n      zAxis.setFromMatrixColumn(this, 2);\n      return this;\n    }\n\n    makeBasis(xAxis, yAxis, zAxis) {\n      this.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);\n      return this;\n    }\n\n    extractRotation(m) {\n      // this method does not support reflection matrices\n      const te = this.elements;\n      const me = m.elements;\n\n      const scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();\n\n      const scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();\n\n      const scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();\n\n      te[0] = me[0] * scaleX;\n      te[1] = me[1] * scaleX;\n      te[2] = me[2] * scaleX;\n      te[3] = 0;\n      te[4] = me[4] * scaleY;\n      te[5] = me[5] * scaleY;\n      te[6] = me[6] * scaleY;\n      te[7] = 0;\n      te[8] = me[8] * scaleZ;\n      te[9] = me[9] * scaleZ;\n      te[10] = me[10] * scaleZ;\n      te[11] = 0;\n      te[12] = 0;\n      te[13] = 0;\n      te[14] = 0;\n      te[15] = 1;\n      return this;\n    }\n\n    makeRotationFromEuler(euler) {\n      if (!(euler && euler.isEuler)) {\n        console.error('THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');\n      }\n\n      const te = this.elements;\n      const x = euler.x,\n            y = euler.y,\n            z = euler.z;\n      const a = Math.cos(x),\n            b = Math.sin(x);\n      const c = Math.cos(y),\n            d = Math.sin(y);\n      const e = Math.cos(z),\n            f = Math.sin(z);\n\n      if (euler.order === 'XYZ') {\n        const ae = a * e,\n              af = a * f,\n              be = b * e,\n              bf = b * f;\n        te[0] = c * e;\n        te[4] = -c * f;\n        te[8] = d;\n        te[1] = af + be * d;\n        te[5] = ae - bf * d;\n        te[9] = -b * c;\n        te[2] = bf - ae * d;\n        te[6] = be + af * d;\n        te[10] = a * c;\n      } else if (euler.order === 'YXZ') {\n        const ce = c * e,\n              cf = c * f,\n              de = d * e,\n              df = d * f;\n        te[0] = ce + df * b;\n        te[4] = de * b - cf;\n        te[8] = a * d;\n        te[1] = a * f;\n        te[5] = a * e;\n        te[9] = -b;\n        te[2] = cf * b - de;\n        te[6] = df + ce * b;\n        te[10] = a * c;\n      } else if (euler.order === 'ZXY') {\n        const ce = c * e,\n              cf = c * f,\n              de = d * e,\n              df = d * f;\n        te[0] = ce - df * b;\n        te[4] = -a * f;\n        te[8] = de + cf * b;\n        te[1] = cf + de * b;\n        te[5] = a * e;\n        te[9] = df - ce * b;\n        te[2] = -a * d;\n        te[6] = b;\n        te[10] = a * c;\n      } else if (euler.order === 'ZYX') {\n        const ae = a * e,\n              af = a * f,\n              be = b * e,\n              bf = b * f;\n        te[0] = c * e;\n        te[4] = be * d - af;\n        te[8] = ae * d + bf;\n        te[1] = c * f;\n        te[5] = bf * d + ae;\n        te[9] = af * d - be;\n        te[2] = -d;\n        te[6] = b * c;\n        te[10] = a * c;\n      } else if (euler.order === 'YZX') {\n        const ac = a * c,\n              ad = a * d,\n              bc = b * c,\n              bd = b * d;\n        te[0] = c * e;\n        te[4] = bd - ac * f;\n        te[8] = bc * f + ad;\n        te[1] = f;\n        te[5] = a * e;\n        te[9] = -b * e;\n        te[2] = -d * e;\n        te[6] = ad * f + bc;\n        te[10] = ac - bd * f;\n      } else if (euler.order === 'XZY') {\n        const ac = a * c,\n              ad = a * d,\n              bc = b * c,\n              bd = b * d;\n        te[0] = c * e;\n        te[4] = -f;\n        te[8] = d * e;\n        te[1] = ac * f + bd;\n        te[5] = a * e;\n        te[9] = ad * f - bc;\n        te[2] = bc * f - ad;\n        te[6] = b * e;\n        te[10] = bd * f + ac;\n      } // bottom row\n\n\n      te[3] = 0;\n      te[7] = 0;\n      te[11] = 0; // last column\n\n      te[12] = 0;\n      te[13] = 0;\n      te[14] = 0;\n      te[15] = 1;\n      return this;\n    }\n\n    makeRotationFromQuaternion(q) {\n      return this.compose(_zero, q, _one);\n    }\n\n    lookAt(eye, target, up) {\n      const te = this.elements;\n\n      _z.subVectors(eye, target);\n\n      if (_z.lengthSq() === 0) {\n        // eye and target are in the same position\n        _z.z = 1;\n      }\n\n      _z.normalize();\n\n      _x.crossVectors(up, _z);\n\n      if (_x.lengthSq() === 0) {\n        // up and z are parallel\n        if (Math.abs(up.z) === 1) {\n          _z.x += 0.0001;\n        } else {\n          _z.z += 0.0001;\n        }\n\n        _z.normalize();\n\n        _x.crossVectors(up, _z);\n      }\n\n      _x.normalize();\n\n      _y.crossVectors(_z, _x);\n\n      te[0] = _x.x;\n      te[4] = _y.x;\n      te[8] = _z.x;\n      te[1] = _x.y;\n      te[5] = _y.y;\n      te[9] = _z.y;\n      te[2] = _x.z;\n      te[6] = _y.z;\n      te[10] = _z.z;\n      return this;\n    }\n\n    multiply(m, n) {\n      if (n !== undefined) {\n        console.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');\n        return this.multiplyMatrices(m, n);\n      }\n\n      return this.multiplyMatrices(this, m);\n    }\n\n    premultiply(m) {\n      return this.multiplyMatrices(m, this);\n    }\n\n    multiplyMatrices(a, b) {\n      const ae = a.elements;\n      const be = b.elements;\n      const te = this.elements;\n      const a11 = ae[0],\n            a12 = ae[4],\n            a13 = ae[8],\n            a14 = ae[12];\n      const a21 = ae[1],\n            a22 = ae[5],\n            a23 = ae[9],\n            a24 = ae[13];\n      const a31 = ae[2],\n            a32 = ae[6],\n            a33 = ae[10],\n            a34 = ae[14];\n      const a41 = ae[3],\n            a42 = ae[7],\n            a43 = ae[11],\n            a44 = ae[15];\n      const b11 = be[0],\n            b12 = be[4],\n            b13 = be[8],\n            b14 = be[12];\n      const b21 = be[1],\n            b22 = be[5],\n            b23 = be[9],\n            b24 = be[13];\n      const b31 = be[2],\n            b32 = be[6],\n            b33 = be[10],\n            b34 = be[14];\n      const b41 = be[3],\n            b42 = be[7],\n            b43 = be[11],\n            b44 = be[15];\n      te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n      te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n      te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n      te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n      te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n      te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n      te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n      te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n      te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n      te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n      te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n      te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n      te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n      te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n      te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n      te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n      return this;\n    }\n\n    multiplyScalar(s) {\n      const te = this.elements;\n      te[0] *= s;\n      te[4] *= s;\n      te[8] *= s;\n      te[12] *= s;\n      te[1] *= s;\n      te[5] *= s;\n      te[9] *= s;\n      te[13] *= s;\n      te[2] *= s;\n      te[6] *= s;\n      te[10] *= s;\n      te[14] *= s;\n      te[3] *= s;\n      te[7] *= s;\n      te[11] *= s;\n      te[15] *= s;\n      return this;\n    }\n\n    determinant() {\n      const te = this.elements;\n      const n11 = te[0],\n            n12 = te[4],\n            n13 = te[8],\n            n14 = te[12];\n      const n21 = te[1],\n            n22 = te[5],\n            n23 = te[9],\n            n24 = te[13];\n      const n31 = te[2],\n            n32 = te[6],\n            n33 = te[10],\n            n34 = te[14];\n      const n41 = te[3],\n            n42 = te[7],\n            n43 = te[11],\n            n44 = te[15]; //TODO: make this more efficient\n      //( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n      return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);\n    }\n\n    transpose() {\n      const te = this.elements;\n      let tmp;\n      tmp = te[1];\n      te[1] = te[4];\n      te[4] = tmp;\n      tmp = te[2];\n      te[2] = te[8];\n      te[8] = tmp;\n      tmp = te[6];\n      te[6] = te[9];\n      te[9] = tmp;\n      tmp = te[3];\n      te[3] = te[12];\n      te[12] = tmp;\n      tmp = te[7];\n      te[7] = te[13];\n      te[13] = tmp;\n      tmp = te[11];\n      te[11] = te[14];\n      te[14] = tmp;\n      return this;\n    }\n\n    setPosition(x, y, z) {\n      const te = this.elements;\n\n      if (x.isVector3) {\n        te[12] = x.x;\n        te[13] = x.y;\n        te[14] = x.z;\n      } else {\n        te[12] = x;\n        te[13] = y;\n        te[14] = z;\n      }\n\n      return this;\n    }\n\n    invert() {\n      // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n      const te = this.elements,\n            n11 = te[0],\n            n21 = te[1],\n            n31 = te[2],\n            n41 = te[3],\n            n12 = te[4],\n            n22 = te[5],\n            n32 = te[6],\n            n42 = te[7],\n            n13 = te[8],\n            n23 = te[9],\n            n33 = te[10],\n            n43 = te[11],\n            n14 = te[12],\n            n24 = te[13],\n            n34 = te[14],\n            n44 = te[15],\n            t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n            t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n            t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n            t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n      const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n      if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n      const detInv = 1 / det;\n      te[0] = t11 * detInv;\n      te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;\n      te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;\n      te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;\n      te[4] = t12 * detInv;\n      te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;\n      te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;\n      te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;\n      te[8] = t13 * detInv;\n      te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;\n      te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;\n      te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;\n      te[12] = t14 * detInv;\n      te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;\n      te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;\n      te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;\n      return this;\n    }\n\n    scale(v) {\n      const te = this.elements;\n      const x = v.x,\n            y = v.y,\n            z = v.z;\n      te[0] *= x;\n      te[4] *= y;\n      te[8] *= z;\n      te[1] *= x;\n      te[5] *= y;\n      te[9] *= z;\n      te[2] *= x;\n      te[6] *= y;\n      te[10] *= z;\n      te[3] *= x;\n      te[7] *= y;\n      te[11] *= z;\n      return this;\n    }\n\n    getMaxScaleOnAxis() {\n      const te = this.elements;\n      const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\n      const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\n      const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\n      return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\n    }\n\n    makeTranslation(x, y, z) {\n      this.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);\n      return this;\n    }\n\n    makeRotationX(theta) {\n      const c = Math.cos(theta),\n            s = Math.sin(theta);\n      this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);\n      return this;\n    }\n\n    makeRotationY(theta) {\n      const c = Math.cos(theta),\n            s = Math.sin(theta);\n      this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);\n      return this;\n    }\n\n    makeRotationZ(theta) {\n      const c = Math.cos(theta),\n            s = Math.sin(theta);\n      this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n      return this;\n    }\n\n    makeRotationAxis(axis, angle) {\n      // Based on http://www.gamedev.net/reference/articles/article1199.asp\n      const c = Math.cos(angle);\n      const s = Math.sin(angle);\n      const t = 1 - c;\n      const x = axis.x,\n            y = axis.y,\n            z = axis.z;\n      const tx = t * x,\n            ty = t * y;\n      this.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);\n      return this;\n    }\n\n    makeScale(x, y, z) {\n      this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);\n      return this;\n    }\n\n    makeShear(xy, xz, yx, yz, zx, zy) {\n      this.set(1, yx, zx, 0, xy, 1, zy, 0, xz, yz, 1, 0, 0, 0, 0, 1);\n      return this;\n    }\n\n    compose(position, quaternion, scale) {\n      const te = this.elements;\n      const x = quaternion._x,\n            y = quaternion._y,\n            z = quaternion._z,\n            w = quaternion._w;\n      const x2 = x + x,\n            y2 = y + y,\n            z2 = z + z;\n      const xx = x * x2,\n            xy = x * y2,\n            xz = x * z2;\n      const yy = y * y2,\n            yz = y * z2,\n            zz = z * z2;\n      const wx = w * x2,\n            wy = w * y2,\n            wz = w * z2;\n      const sx = scale.x,\n            sy = scale.y,\n            sz = scale.z;\n      te[0] = (1 - (yy + zz)) * sx;\n      te[1] = (xy + wz) * sx;\n      te[2] = (xz - wy) * sx;\n      te[3] = 0;\n      te[4] = (xy - wz) * sy;\n      te[5] = (1 - (xx + zz)) * sy;\n      te[6] = (yz + wx) * sy;\n      te[7] = 0;\n      te[8] = (xz + wy) * sz;\n      te[9] = (yz - wx) * sz;\n      te[10] = (1 - (xx + yy)) * sz;\n      te[11] = 0;\n      te[12] = position.x;\n      te[13] = position.y;\n      te[14] = position.z;\n      te[15] = 1;\n      return this;\n    }\n\n    decompose(position, quaternion, scale) {\n      const te = this.elements;\n\n      let sx = _v1$5.set(te[0], te[1], te[2]).length();\n\n      const sy = _v1$5.set(te[4], te[5], te[6]).length();\n\n      const sz = _v1$5.set(te[8], te[9], te[10]).length(); // if determine is negative, we need to invert one scale\n\n\n      const det = this.determinant();\n      if (det < 0) sx = -sx;\n      position.x = te[12];\n      position.y = te[13];\n      position.z = te[14]; // scale the rotation part\n\n      _m1$2.copy(this);\n\n      const invSX = 1 / sx;\n      const invSY = 1 / sy;\n      const invSZ = 1 / sz;\n      _m1$2.elements[0] *= invSX;\n      _m1$2.elements[1] *= invSX;\n      _m1$2.elements[2] *= invSX;\n      _m1$2.elements[4] *= invSY;\n      _m1$2.elements[5] *= invSY;\n      _m1$2.elements[6] *= invSY;\n      _m1$2.elements[8] *= invSZ;\n      _m1$2.elements[9] *= invSZ;\n      _m1$2.elements[10] *= invSZ;\n      quaternion.setFromRotationMatrix(_m1$2);\n      scale.x = sx;\n      scale.y = sy;\n      scale.z = sz;\n      return this;\n    }\n\n    makePerspective(left, right, top, bottom, near, far) {\n      if (far === undefined) {\n        console.warn('THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.');\n      }\n\n      const te = this.elements;\n      const x = 2 * near / (right - left);\n      const y = 2 * near / (top - bottom);\n      const a = (right + left) / (right - left);\n      const b = (top + bottom) / (top - bottom);\n      const c = -(far + near) / (far - near);\n      const d = -2 * far * near / (far - near);\n      te[0] = x;\n      te[4] = 0;\n      te[8] = a;\n      te[12] = 0;\n      te[1] = 0;\n      te[5] = y;\n      te[9] = b;\n      te[13] = 0;\n      te[2] = 0;\n      te[6] = 0;\n      te[10] = c;\n      te[14] = d;\n      te[3] = 0;\n      te[7] = 0;\n      te[11] = -1;\n      te[15] = 0;\n      return this;\n    }\n\n    makeOrthographic(left, right, top, bottom, near, far) {\n      const te = this.elements;\n      const w = 1.0 / (right - left);\n      const h = 1.0 / (top - bottom);\n      const p = 1.0 / (far - near);\n      const x = (right + left) * w;\n      const y = (top + bottom) * h;\n      const z = (far + near) * p;\n      te[0] = 2 * w;\n      te[4] = 0;\n      te[8] = 0;\n      te[12] = -x;\n      te[1] = 0;\n      te[5] = 2 * h;\n      te[9] = 0;\n      te[13] = -y;\n      te[2] = 0;\n      te[6] = 0;\n      te[10] = -2 * p;\n      te[14] = -z;\n      te[3] = 0;\n      te[7] = 0;\n      te[11] = 0;\n      te[15] = 1;\n      return this;\n    }\n\n    equals(matrix) {\n      const te = this.elements;\n      const me = matrix.elements;\n\n      for (let i = 0; i < 16; i++) {\n        if (te[i] !== me[i]) return false;\n      }\n\n      return true;\n    }\n\n    fromArray(array) {\n      let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      for (let i = 0; i < 16; i++) {\n        this.elements[i] = array[i + offset];\n      }\n\n      return this;\n    }\n\n    toArray() {\n      let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      const te = this.elements;\n      array[offset] = te[0];\n      array[offset + 1] = te[1];\n      array[offset + 2] = te[2];\n      array[offset + 3] = te[3];\n      array[offset + 4] = te[4];\n      array[offset + 5] = te[5];\n      array[offset + 6] = te[6];\n      array[offset + 7] = te[7];\n      array[offset + 8] = te[8];\n      array[offset + 9] = te[9];\n      array[offset + 10] = te[10];\n      array[offset + 11] = te[11];\n      array[offset + 12] = te[12];\n      array[offset + 13] = te[13];\n      array[offset + 14] = te[14];\n      array[offset + 15] = te[15];\n      return array;\n    }\n\n  }\n\n  Matrix4.prototype.isMatrix4 = true;\n\n  const _v1$5 = /*@__PURE__*/new Vector3();\n\n  const _m1$2 = /*@__PURE__*/new Matrix4();\n\n  const _zero = /*@__PURE__*/new Vector3(0, 0, 0);\n\n  const _one = /*@__PURE__*/new Vector3(1, 1, 1);\n\n  const _x = /*@__PURE__*/new Vector3();\n\n  const _y = /*@__PURE__*/new Vector3();\n\n  const _z = /*@__PURE__*/new Vector3();\n\n  const _matrix$1 = /*@__PURE__*/new Matrix4();\n\n  const _quaternion$3 = /*@__PURE__*/new Quaternion();\n\n  class Euler {\n    constructor() {\n      let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      let z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      let order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Euler.DefaultOrder;\n      this._x = x;\n      this._y = y;\n      this._z = z;\n      this._order = order;\n    }\n\n    get x() {\n      return this._x;\n    }\n\n    set x(value) {\n      this._x = value;\n\n      this._onChangeCallback();\n    }\n\n    get y() {\n      return this._y;\n    }\n\n    set y(value) {\n      this._y = value;\n\n      this._onChangeCallback();\n    }\n\n    get z() {\n      return this._z;\n    }\n\n    set z(value) {\n      this._z = value;\n\n      this._onChangeCallback();\n    }\n\n    get order() {\n      return this._order;\n    }\n\n    set order(value) {\n      this._order = value;\n\n      this._onChangeCallback();\n    }\n\n    set(x, y, z) {\n      let order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this._order;\n      this._x = x;\n      this._y = y;\n      this._z = z;\n      this._order = order;\n\n      this._onChangeCallback();\n\n      return this;\n    }\n\n    clone() {\n      return new this.constructor(this._x, this._y, this._z, this._order);\n    }\n\n    copy(euler) {\n      this._x = euler._x;\n      this._y = euler._y;\n      this._z = euler._z;\n      this._order = euler._order;\n\n      this._onChangeCallback();\n\n      return this;\n    }\n\n    setFromRotationMatrix(m) {\n      let order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._order;\n      let update = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n      const te = m.elements;\n      const m11 = te[0],\n            m12 = te[4],\n            m13 = te[8];\n      const m21 = te[1],\n            m22 = te[5],\n            m23 = te[9];\n      const m31 = te[2],\n            m32 = te[6],\n            m33 = te[10];\n\n      switch (order) {\n        case 'XYZ':\n          this._y = Math.asin(clamp(m13, -1, 1));\n\n          if (Math.abs(m13) < 0.9999999) {\n            this._x = Math.atan2(-m23, m33);\n            this._z = Math.atan2(-m12, m11);\n          } else {\n            this._x = Math.atan2(m32, m22);\n            this._z = 0;\n          }\n\n          break;\n\n        case 'YXZ':\n          this._x = Math.asin(-clamp(m23, -1, 1));\n\n          if (Math.abs(m23) < 0.9999999) {\n            this._y = Math.atan2(m13, m33);\n            this._z = Math.atan2(m21, m22);\n          } else {\n            this._y = Math.atan2(-m31, m11);\n            this._z = 0;\n          }\n\n          break;\n\n        case 'ZXY':\n          this._x = Math.asin(clamp(m32, -1, 1));\n\n          if (Math.abs(m32) < 0.9999999) {\n            this._y = Math.atan2(-m31, m33);\n            this._z = Math.atan2(-m12, m22);\n          } else {\n            this._y = 0;\n            this._z = Math.atan2(m21, m11);\n          }\n\n          break;\n\n        case 'ZYX':\n          this._y = Math.asin(-clamp(m31, -1, 1));\n\n          if (Math.abs(m31) < 0.9999999) {\n            this._x = Math.atan2(m32, m33);\n            this._z = Math.atan2(m21, m11);\n          } else {\n            this._x = 0;\n            this._z = Math.atan2(-m12, m22);\n          }\n\n          break;\n\n        case 'YZX':\n          this._z = Math.asin(clamp(m21, -1, 1));\n\n          if (Math.abs(m21) < 0.9999999) {\n            this._x = Math.atan2(-m23, m22);\n            this._y = Math.atan2(-m31, m11);\n          } else {\n            this._x = 0;\n            this._y = Math.atan2(m13, m33);\n          }\n\n          break;\n\n        case 'XZY':\n          this._z = Math.asin(-clamp(m12, -1, 1));\n\n          if (Math.abs(m12) < 0.9999999) {\n            this._x = Math.atan2(m32, m22);\n            this._y = Math.atan2(m13, m11);\n          } else {\n            this._x = Math.atan2(-m23, m33);\n            this._y = 0;\n          }\n\n          break;\n\n        default:\n          console.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order);\n      }\n\n      this._order = order;\n      if (update === true) this._onChangeCallback();\n      return this;\n    }\n\n    setFromQuaternion(q, order, update) {\n      _matrix$1.makeRotationFromQuaternion(q);\n\n      return this.setFromRotationMatrix(_matrix$1, order, update);\n    }\n\n    setFromVector3(v) {\n      let order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._order;\n      return this.set(v.x, v.y, v.z, order);\n    }\n\n    reorder(newOrder) {\n      // WARNING: this discards revolution information -bhouston\n      _quaternion$3.setFromEuler(this);\n\n      return this.setFromQuaternion(_quaternion$3, newOrder);\n    }\n\n    equals(euler) {\n      return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;\n    }\n\n    fromArray(array) {\n      this._x = array[0];\n      this._y = array[1];\n      this._z = array[2];\n      if (array[3] !== undefined) this._order = array[3];\n\n      this._onChangeCallback();\n\n      return this;\n    }\n\n    toArray() {\n      let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      array[offset] = this._x;\n      array[offset + 1] = this._y;\n      array[offset + 2] = this._z;\n      array[offset + 3] = this._order;\n      return array;\n    }\n\n    toVector3(optionalResult) {\n      if (optionalResult) {\n        return optionalResult.set(this._x, this._y, this._z);\n      } else {\n        return new Vector3(this._x, this._y, this._z);\n      }\n    }\n\n    _onChange(callback) {\n      this._onChangeCallback = callback;\n      return this;\n    }\n\n    _onChangeCallback() {}\n\n  }\n\n  Euler.prototype.isEuler = true;\n  Euler.DefaultOrder = 'XYZ';\n  Euler.RotationOrders = ['XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX'];\n\n  class Layers {\n    constructor() {\n      this.mask = 1 | 0;\n    }\n\n    set(channel) {\n      this.mask = 1 << channel | 0;\n    }\n\n    enable(channel) {\n      this.mask |= 1 << channel | 0;\n    }\n\n    enableAll() {\n      this.mask = 0xffffffff | 0;\n    }\n\n    toggle(channel) {\n      this.mask ^= 1 << channel | 0;\n    }\n\n    disable(channel) {\n      this.mask &= ~(1 << channel | 0);\n    }\n\n    disableAll() {\n      this.mask = 0;\n    }\n\n    test(layers) {\n      return (this.mask & layers.mask) !== 0;\n    }\n\n  }\n\n  let _object3DId = 0;\n\n  const _v1$4 = /*@__PURE__*/new Vector3();\n\n  const _q1 = /*@__PURE__*/new Quaternion();\n\n  const _m1$1 = /*@__PURE__*/new Matrix4();\n\n  const _target = /*@__PURE__*/new Vector3();\n\n  const _position$3 = /*@__PURE__*/new Vector3();\n\n  const _scale$2 = /*@__PURE__*/new Vector3();\n\n  const _quaternion$2 = /*@__PURE__*/new Quaternion();\n\n  const _xAxis = /*@__PURE__*/new Vector3(1, 0, 0);\n\n  const _yAxis = /*@__PURE__*/new Vector3(0, 1, 0);\n\n  const _zAxis = /*@__PURE__*/new Vector3(0, 0, 1);\n\n  const _addedEvent = {\n    type: 'added'\n  };\n  const _removedEvent = {\n    type: 'removed'\n  };\n\n  class Object3D extends EventDispatcher {\n    constructor() {\n      super();\n      Object.defineProperty(this, 'id', {\n        value: _object3DId++\n      });\n      this.uuid = generateUUID();\n      this.name = '';\n      this.type = 'Object3D';\n      this.parent = null;\n      this.children = [];\n      this.up = Object3D.DefaultUp.clone();\n      const position = new Vector3();\n      const rotation = new Euler();\n      const quaternion = new Quaternion();\n      const scale = new Vector3(1, 1, 1);\n\n      function onRotationChange() {\n        quaternion.setFromEuler(rotation, false);\n      }\n\n      function onQuaternionChange() {\n        rotation.setFromQuaternion(quaternion, undefined, false);\n      }\n\n      rotation._onChange(onRotationChange);\n\n      quaternion._onChange(onQuaternionChange);\n\n      Object.defineProperties(this, {\n        position: {\n          configurable: true,\n          enumerable: true,\n          value: position\n        },\n        rotation: {\n          configurable: true,\n          enumerable: true,\n          value: rotation\n        },\n        quaternion: {\n          configurable: true,\n          enumerable: true,\n          value: quaternion\n        },\n        scale: {\n          configurable: true,\n          enumerable: true,\n          value: scale\n        },\n        modelViewMatrix: {\n          value: new Matrix4()\n        },\n        normalMatrix: {\n          value: new Matrix3()\n        }\n      });\n      this.matrix = new Matrix4();\n      this.matrixWorld = new Matrix4();\n      this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n      this.matrixWorldNeedsUpdate = false;\n      this.layers = new Layers();\n      this.visible = true;\n      this.castShadow = false;\n      this.receiveShadow = false;\n      this.frustumCulled = true;\n      this.renderOrder = 0;\n      this.animations = [];\n      this.userData = {};\n    }\n\n    onBeforeRender() {}\n\n    onAfterRender() {}\n\n    applyMatrix4(matrix) {\n      if (this.matrixAutoUpdate) this.updateMatrix();\n      this.matrix.premultiply(matrix);\n      this.matrix.decompose(this.position, this.quaternion, this.scale);\n    }\n\n    applyQuaternion(q) {\n      this.quaternion.premultiply(q);\n      return this;\n    }\n\n    setRotationFromAxisAngle(axis, angle) {\n      // assumes axis is normalized\n      this.quaternion.setFromAxisAngle(axis, angle);\n    }\n\n    setRotationFromEuler(euler) {\n      this.quaternion.setFromEuler(euler, true);\n    }\n\n    setRotationFromMatrix(m) {\n      // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n      this.quaternion.setFromRotationMatrix(m);\n    }\n\n    setRotationFromQuaternion(q) {\n      // assumes q is normalized\n      this.quaternion.copy(q);\n    }\n\n    rotateOnAxis(axis, angle) {\n      // rotate object on axis in object space\n      // axis is assumed to be normalized\n      _q1.setFromAxisAngle(axis, angle);\n\n      this.quaternion.multiply(_q1);\n      return this;\n    }\n\n    rotateOnWorldAxis(axis, angle) {\n      // rotate object on axis in world space\n      // axis is assumed to be normalized\n      // method assumes no rotated parent\n      _q1.setFromAxisAngle(axis, angle);\n\n      this.quaternion.premultiply(_q1);\n      return this;\n    }\n\n    rotateX(angle) {\n      return this.rotateOnAxis(_xAxis, angle);\n    }\n\n    rotateY(angle) {\n      return this.rotateOnAxis(_yAxis, angle);\n    }\n\n    rotateZ(angle) {\n      return this.rotateOnAxis(_zAxis, angle);\n    }\n\n    translateOnAxis(axis, distance) {\n      // translate object by distance along axis in object space\n      // axis is assumed to be normalized\n      _v1$4.copy(axis).applyQuaternion(this.quaternion);\n\n      this.position.add(_v1$4.multiplyScalar(distance));\n      return this;\n    }\n\n    translateX(distance) {\n      return this.translateOnAxis(_xAxis, distance);\n    }\n\n    translateY(distance) {\n      return this.translateOnAxis(_yAxis, distance);\n    }\n\n    translateZ(distance) {\n      return this.translateOnAxis(_zAxis, distance);\n    }\n\n    localToWorld(vector) {\n      return vector.applyMatrix4(this.matrixWorld);\n    }\n\n    worldToLocal(vector) {\n      return vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());\n    }\n\n    lookAt(x, y, z) {\n      // This method does not support objects having non-uniformly-scaled parent(s)\n      if (x.isVector3) {\n        _target.copy(x);\n      } else {\n        _target.set(x, y, z);\n      }\n\n      const parent = this.parent;\n      this.updateWorldMatrix(true, false);\n\n      _position$3.setFromMatrixPosition(this.matrixWorld);\n\n      if (this.isCamera || this.isLight) {\n        _m1$1.lookAt(_position$3, _target, this.up);\n      } else {\n        _m1$1.lookAt(_target, _position$3, this.up);\n      }\n\n      this.quaternion.setFromRotationMatrix(_m1$1);\n\n      if (parent) {\n        _m1$1.extractRotation(parent.matrixWorld);\n\n        _q1.setFromRotationMatrix(_m1$1);\n\n        this.quaternion.premultiply(_q1.invert());\n      }\n    }\n\n    add(object) {\n      if (arguments.length > 1) {\n        for (let i = 0; i < arguments.length; i++) {\n          this.add(arguments[i]);\n        }\n\n        return this;\n      }\n\n      if (object === this) {\n        console.error('THREE.Object3D.add: object can\\'t be added as a child of itself.', object);\n        return this;\n      }\n\n      if (object && object.isObject3D) {\n        if (object.parent !== null) {\n          object.parent.remove(object);\n        }\n\n        object.parent = this;\n        this.children.push(object);\n        object.dispatchEvent(_addedEvent);\n      } else {\n        console.error('THREE.Object3D.add: object not an instance of THREE.Object3D.', object);\n      }\n\n      return this;\n    }\n\n    remove(object) {\n      if (arguments.length > 1) {\n        for (let i = 0; i < arguments.length; i++) {\n          this.remove(arguments[i]);\n        }\n\n        return this;\n      }\n\n      const index = this.children.indexOf(object);\n\n      if (index !== -1) {\n        object.parent = null;\n        this.children.splice(index, 1);\n        object.dispatchEvent(_removedEvent);\n      }\n\n      return this;\n    }\n\n    removeFromParent() {\n      const parent = this.parent;\n\n      if (parent !== null) {\n        parent.remove(this);\n      }\n\n      return this;\n    }\n\n    clear() {\n      for (let i = 0; i < this.children.length; i++) {\n        const object = this.children[i];\n        object.parent = null;\n        object.dispatchEvent(_removedEvent);\n      }\n\n      this.children.length = 0;\n      return this;\n    }\n\n    attach(object) {\n      // adds object as a child of this, while maintaining the object's world transform\n      this.updateWorldMatrix(true, false);\n\n      _m1$1.copy(this.matrixWorld).invert();\n\n      if (object.parent !== null) {\n        object.parent.updateWorldMatrix(true, false);\n\n        _m1$1.multiply(object.parent.matrixWorld);\n      }\n\n      object.applyMatrix4(_m1$1);\n      this.add(object);\n      object.updateWorldMatrix(false, true);\n      return this;\n    }\n\n    getObjectById(id) {\n      return this.getObjectByProperty('id', id);\n    }\n\n    getObjectByName(name) {\n      return this.getObjectByProperty('name', name);\n    }\n\n    getObjectByProperty(name, value) {\n      if (this[name] === value) return this;\n\n      for (let i = 0, l = this.children.length; i < l; i++) {\n        const child = this.children[i];\n        const object = child.getObjectByProperty(name, value);\n\n        if (object !== undefined) {\n          return object;\n        }\n      }\n\n      return undefined;\n    }\n\n    getWorldPosition(target) {\n      this.updateWorldMatrix(true, false);\n      return target.setFromMatrixPosition(this.matrixWorld);\n    }\n\n    getWorldQuaternion(target) {\n      this.updateWorldMatrix(true, false);\n      this.matrixWorld.decompose(_position$3, target, _scale$2);\n      return target;\n    }\n\n    getWorldScale(target) {\n      this.updateWorldMatrix(true, false);\n      this.matrixWorld.decompose(_position$3, _quaternion$2, target);\n      return target;\n    }\n\n    getWorldDirection(target) {\n      this.updateWorldMatrix(true, false);\n      const e = this.matrixWorld.elements;\n      return target.set(e[8], e[9], e[10]).normalize();\n    }\n\n    raycast() {}\n\n    traverse(callback) {\n      callback(this);\n      const children = this.children;\n\n      for (let i = 0, l = children.length; i < l; i++) {\n        children[i].traverse(callback);\n      }\n    }\n\n    traverseVisible(callback) {\n      if (this.visible === false) return;\n      callback(this);\n      const children = this.children;\n\n      for (let i = 0, l = children.length; i < l; i++) {\n        children[i].traverseVisible(callback);\n      }\n    }\n\n    traverseAncestors(callback) {\n      const parent = this.parent;\n\n      if (parent !== null) {\n        callback(parent);\n        parent.traverseAncestors(callback);\n      }\n    }\n\n    updateMatrix() {\n      this.matrix.compose(this.position, this.quaternion, this.scale);\n      this.matrixWorldNeedsUpdate = true;\n    }\n\n    updateMatrixWorld(force) {\n      if (this.matrixAutoUpdate) this.updateMatrix();\n\n      if (this.matrixWorldNeedsUpdate || force) {\n        if (this.parent === null) {\n          this.matrixWorld.copy(this.matrix);\n        } else {\n          this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n        }\n\n        this.matrixWorldNeedsUpdate = false;\n        force = true;\n      } // update children\n\n\n      const children = this.children;\n\n      for (let i = 0, l = children.length; i < l; i++) {\n        children[i].updateMatrixWorld(force);\n      }\n    }\n\n    updateWorldMatrix(updateParents, updateChildren) {\n      const parent = this.parent;\n\n      if (updateParents === true && parent !== null) {\n        parent.updateWorldMatrix(true, false);\n      }\n\n      if (this.matrixAutoUpdate) this.updateMatrix();\n\n      if (this.parent === null) {\n        this.matrixWorld.copy(this.matrix);\n      } else {\n        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n      } // update children\n\n\n      if (updateChildren === true) {\n        const children = this.children;\n\n        for (let i = 0, l = children.length; i < l; i++) {\n          children[i].updateWorldMatrix(false, true);\n        }\n      }\n    }\n\n    toJSON(meta) {\n      // meta is a string when called from JSON.stringify\n      const isRootObject = meta === undefined || typeof meta === 'string';\n      const output = {}; // meta is a hash used to collect geometries, materials.\n      // not providing it implies that this is the root object\n      // being serialized.\n\n      if (isRootObject) {\n        // initialize meta obj\n        meta = {\n          geometries: {},\n          materials: {},\n          textures: {},\n          images: {},\n          shapes: {},\n          skeletons: {},\n          animations: {}\n        };\n        output.metadata = {\n          version: 4.5,\n          type: 'Object',\n          generator: 'Object3D.toJSON'\n        };\n      } // standard Object3D serialization\n\n\n      const object = {};\n      object.uuid = this.uuid;\n      object.type = this.type;\n      if (this.name !== '') object.name = this.name;\n      if (this.castShadow === true) object.castShadow = true;\n      if (this.receiveShadow === true) object.receiveShadow = true;\n      if (this.visible === false) object.visible = false;\n      if (this.frustumCulled === false) object.frustumCulled = false;\n      if (this.renderOrder !== 0) object.renderOrder = this.renderOrder;\n      if (JSON.stringify(this.userData) !== '{}') object.userData = this.userData;\n      object.layers = this.layers.mask;\n      object.matrix = this.matrix.toArray();\n      if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false; // object specific properties\n\n      if (this.isInstancedMesh) {\n        object.type = 'InstancedMesh';\n        object.count = this.count;\n        object.instanceMatrix = this.instanceMatrix.toJSON();\n        if (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();\n      } //\n\n\n      function serialize(library, element) {\n        if (library[element.uuid] === undefined) {\n          library[element.uuid] = element.toJSON(meta);\n        }\n\n        return element.uuid;\n      }\n\n      if (this.isScene) {\n        if (this.background) {\n          if (this.background.isColor) {\n            object.background = this.background.toJSON();\n          } else if (this.background.isTexture) {\n            object.background = this.background.toJSON(meta).uuid;\n          }\n        }\n\n        if (this.environment && this.environment.isTexture) {\n          object.environment = this.environment.toJSON(meta).uuid;\n        }\n      } else if (this.isMesh || this.isLine || this.isPoints) {\n        object.geometry = serialize(meta.geometries, this.geometry);\n        const parameters = this.geometry.parameters;\n\n        if (parameters !== undefined && parameters.shapes !== undefined) {\n          const shapes = parameters.shapes;\n\n          if (Array.isArray(shapes)) {\n            for (let i = 0, l = shapes.length; i < l; i++) {\n              const shape = shapes[i];\n              serialize(meta.shapes, shape);\n            }\n          } else {\n            serialize(meta.shapes, shapes);\n          }\n        }\n      }\n\n      if (this.isSkinnedMesh) {\n        object.bindMode = this.bindMode;\n        object.bindMatrix = this.bindMatrix.toArray();\n\n        if (this.skeleton !== undefined) {\n          serialize(meta.skeletons, this.skeleton);\n          object.skeleton = this.skeleton.uuid;\n        }\n      }\n\n      if (this.material !== undefined) {\n        if (Array.isArray(this.material)) {\n          const uuids = [];\n\n          for (let i = 0, l = this.material.length; i < l; i++) {\n            uuids.push(serialize(meta.materials, this.material[i]));\n          }\n\n          object.material = uuids;\n        } else {\n          object.material = serialize(meta.materials, this.material);\n        }\n      } //\n\n\n      if (this.children.length > 0) {\n        object.children = [];\n\n        for (let i = 0; i < this.children.length; i++) {\n          object.children.push(this.children[i].toJSON(meta).object);\n        }\n      } //\n\n\n      if (this.animations.length > 0) {\n        object.animations = [];\n\n        for (let i = 0; i < this.animations.length; i++) {\n          const animation = this.animations[i];\n          object.animations.push(serialize(meta.animations, animation));\n        }\n      }\n\n      if (isRootObject) {\n        const geometries = extractFromCache(meta.geometries);\n        const materials = extractFromCache(meta.materials);\n        const textures = extractFromCache(meta.textures);\n        const images = extractFromCache(meta.images);\n        const shapes = extractFromCache(meta.shapes);\n        const skeletons = extractFromCache(meta.skeletons);\n        const animations = extractFromCache(meta.animations);\n        if (geometries.length > 0) output.geometries = geometries;\n        if (materials.length > 0) output.materials = materials;\n        if (textures.length > 0) output.textures = textures;\n        if (images.length > 0) output.images = images;\n        if (shapes.length > 0) output.shapes = shapes;\n        if (skeletons.length > 0) output.skeletons = skeletons;\n        if (animations.length > 0) output.animations = animations;\n      }\n\n      output.object = object;\n      return output; // extract data from the cache hash\n      // remove metadata on each item\n      // and return as array\n\n      function extractFromCache(cache) {\n        const values = [];\n\n        for (const key in cache) {\n          const data = cache[key];\n          delete data.metadata;\n          values.push(data);\n        }\n\n        return values;\n      }\n    }\n\n    clone(recursive) {\n      return new this.constructor().copy(this, recursive);\n    }\n\n    copy(source) {\n      let recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      this.name = source.name;\n      this.up.copy(source.up);\n      this.position.copy(source.position);\n      this.rotation.order = source.rotation.order;\n      this.quaternion.copy(source.quaternion);\n      this.scale.copy(source.scale);\n      this.matrix.copy(source.matrix);\n      this.matrixWorld.copy(source.matrixWorld);\n      this.matrixAutoUpdate = source.matrixAutoUpdate;\n      this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n      this.layers.mask = source.layers.mask;\n      this.visible = source.visible;\n      this.castShadow = source.castShadow;\n      this.receiveShadow = source.receiveShadow;\n      this.frustumCulled = source.frustumCulled;\n      this.renderOrder = source.renderOrder;\n      this.userData = JSON.parse(JSON.stringify(source.userData));\n\n      if (recursive === true) {\n        for (let i = 0; i < source.children.length; i++) {\n          const child = source.children[i];\n          this.add(child.clone());\n        }\n      }\n\n      return this;\n    }\n\n  }\n\n  Object3D.DefaultUp = new Vector3(0, 1, 0);\n  Object3D.DefaultMatrixAutoUpdate = true;\n  Object3D.prototype.isObject3D = true;\n\n  const _v0$1 = /*@__PURE__*/new Vector3();\n\n  const _v1$3 = /*@__PURE__*/new Vector3();\n\n  const _v2$2 = /*@__PURE__*/new Vector3();\n\n  const _v3$1 = /*@__PURE__*/new Vector3();\n\n  const _vab = /*@__PURE__*/new Vector3();\n\n  const _vac = /*@__PURE__*/new Vector3();\n\n  const _vbc = /*@__PURE__*/new Vector3();\n\n  const _vap = /*@__PURE__*/new Vector3();\n\n  const _vbp = /*@__PURE__*/new Vector3();\n\n  const _vcp = /*@__PURE__*/new Vector3();\n\n  class Triangle {\n    constructor() {\n      let a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n      let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n      let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Vector3();\n      this.a = a;\n      this.b = b;\n      this.c = c;\n    }\n\n    static getNormal(a, b, c, target) {\n      target.subVectors(c, b);\n\n      _v0$1.subVectors(a, b);\n\n      target.cross(_v0$1);\n      const targetLengthSq = target.lengthSq();\n\n      if (targetLengthSq > 0) {\n        return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));\n      }\n\n      return target.set(0, 0, 0);\n    } // static/instance method to calculate barycentric coordinates\n    // based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\n\n    static getBarycoord(point, a, b, c, target) {\n      _v0$1.subVectors(c, a);\n\n      _v1$3.subVectors(b, a);\n\n      _v2$2.subVectors(point, a);\n\n      const dot00 = _v0$1.dot(_v0$1);\n\n      const dot01 = _v0$1.dot(_v1$3);\n\n      const dot02 = _v0$1.dot(_v2$2);\n\n      const dot11 = _v1$3.dot(_v1$3);\n\n      const dot12 = _v1$3.dot(_v2$2);\n\n      const denom = dot00 * dot11 - dot01 * dot01; // collinear or singular triangle\n\n      if (denom === 0) {\n        // arbitrary location outside of triangle?\n        // not sure if this is the best idea, maybe should be returning undefined\n        return target.set(-2, -1, -1);\n      }\n\n      const invDenom = 1 / denom;\n      const u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n      const v = (dot00 * dot12 - dot01 * dot02) * invDenom; // barycentric coordinates must always sum to 1\n\n      return target.set(1 - u - v, v, u);\n    }\n\n    static containsPoint(point, a, b, c) {\n      this.getBarycoord(point, a, b, c, _v3$1);\n      return _v3$1.x >= 0 && _v3$1.y >= 0 && _v3$1.x + _v3$1.y <= 1;\n    }\n\n    static getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {\n      this.getBarycoord(point, p1, p2, p3, _v3$1);\n      target.set(0, 0);\n      target.addScaledVector(uv1, _v3$1.x);\n      target.addScaledVector(uv2, _v3$1.y);\n      target.addScaledVector(uv3, _v3$1.z);\n      return target;\n    }\n\n    static isFrontFacing(a, b, c, direction) {\n      _v0$1.subVectors(c, b);\n\n      _v1$3.subVectors(a, b); // strictly front facing\n\n\n      return _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;\n    }\n\n    set(a, b, c) {\n      this.a.copy(a);\n      this.b.copy(b);\n      this.c.copy(c);\n      return this;\n    }\n\n    setFromPointsAndIndices(points, i0, i1, i2) {\n      this.a.copy(points[i0]);\n      this.b.copy(points[i1]);\n      this.c.copy(points[i2]);\n      return this;\n    }\n\n    setFromAttributeAndIndices(attribute, i0, i1, i2) {\n      this.a.fromBufferAttribute(attribute, i0);\n      this.b.fromBufferAttribute(attribute, i1);\n      this.c.fromBufferAttribute(attribute, i2);\n      return this;\n    }\n\n    clone() {\n      return new this.constructor().copy(this);\n    }\n\n    copy(triangle) {\n      this.a.copy(triangle.a);\n      this.b.copy(triangle.b);\n      this.c.copy(triangle.c);\n      return this;\n    }\n\n    getArea() {\n      _v0$1.subVectors(this.c, this.b);\n\n      _v1$3.subVectors(this.a, this.b);\n\n      return _v0$1.cross(_v1$3).length() * 0.5;\n    }\n\n    getMidpoint(target) {\n      return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);\n    }\n\n    getNormal(target) {\n      return Triangle.getNormal(this.a, this.b, this.c, target);\n    }\n\n    getPlane(target) {\n      return target.setFromCoplanarPoints(this.a, this.b, this.c);\n    }\n\n    getBarycoord(point, target) {\n      return Triangle.getBarycoord(point, this.a, this.b, this.c, target);\n    }\n\n    getUV(point, uv1, uv2, uv3, target) {\n      return Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);\n    }\n\n    containsPoint(point) {\n      return Triangle.containsPoint(point, this.a, this.b, this.c);\n    }\n\n    isFrontFacing(direction) {\n      return Triangle.isFrontFacing(this.a, this.b, this.c, direction);\n    }\n\n    intersectsBox(box) {\n      return box.intersectsTriangle(this);\n    }\n\n    closestPointToPoint(p, target) {\n      const a = this.a,\n            b = this.b,\n            c = this.c;\n      let v, w; // algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n      // published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n      // under the accompanying license; see chapter 5.1.5 for detailed explanation.\n      // basically, we're distinguishing which of the voronoi regions of the triangle\n      // the point lies in with the minimum amount of redundant computation.\n\n      _vab.subVectors(b, a);\n\n      _vac.subVectors(c, a);\n\n      _vap.subVectors(p, a);\n\n      const d1 = _vab.dot(_vap);\n\n      const d2 = _vac.dot(_vap);\n\n      if (d1 <= 0 && d2 <= 0) {\n        // vertex region of A; barycentric coords (1, 0, 0)\n        return target.copy(a);\n      }\n\n      _vbp.subVectors(p, b);\n\n      const d3 = _vab.dot(_vbp);\n\n      const d4 = _vac.dot(_vbp);\n\n      if (d3 >= 0 && d4 <= d3) {\n        // vertex region of B; barycentric coords (0, 1, 0)\n        return target.copy(b);\n      }\n\n      const vc = d1 * d4 - d3 * d2;\n\n      if (vc <= 0 && d1 >= 0 && d3 <= 0) {\n        v = d1 / (d1 - d3); // edge region of AB; barycentric coords (1-v, v, 0)\n\n        return target.copy(a).addScaledVector(_vab, v);\n      }\n\n      _vcp.subVectors(p, c);\n\n      const d5 = _vab.dot(_vcp);\n\n      const d6 = _vac.dot(_vcp);\n\n      if (d6 >= 0 && d5 <= d6) {\n        // vertex region of C; barycentric coords (0, 0, 1)\n        return target.copy(c);\n      }\n\n      const vb = d5 * d2 - d1 * d6;\n\n      if (vb <= 0 && d2 >= 0 && d6 <= 0) {\n        w = d2 / (d2 - d6); // edge region of AC; barycentric coords (1-w, 0, w)\n\n        return target.copy(a).addScaledVector(_vac, w);\n      }\n\n      const va = d3 * d6 - d5 * d4;\n\n      if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {\n        _vbc.subVectors(c, b);\n\n        w = (d4 - d3) / (d4 - d3 + (d5 - d6)); // edge region of BC; barycentric coords (0, 1-w, w)\n\n        return target.copy(b).addScaledVector(_vbc, w); // edge region of BC\n      } // face region\n\n\n      const denom = 1 / (va + vb + vc); // u = va * denom\n\n      v = vb * denom;\n      w = vc * denom;\n      return target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);\n    }\n\n    equals(triangle) {\n      return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);\n    }\n\n  }\n\n  let materialId = 0;\n\n  class Material extends EventDispatcher {\n    constructor() {\n      super();\n      Object.defineProperty(this, 'id', {\n        value: materialId++\n      });\n      this.uuid = generateUUID();\n      this.name = '';\n      this.type = 'Material';\n      this.fog = true;\n      this.blending = NormalBlending;\n      this.side = FrontSide;\n      this.vertexColors = false;\n      this.opacity = 1;\n      this.format = RGBAFormat;\n      this.transparent = false;\n      this.blendSrc = SrcAlphaFactor;\n      this.blendDst = OneMinusSrcAlphaFactor;\n      this.blendEquation = AddEquation;\n      this.blendSrcAlpha = null;\n      this.blendDstAlpha = null;\n      this.blendEquationAlpha = null;\n      this.depthFunc = LessEqualDepth;\n      this.depthTest = true;\n      this.depthWrite = true;\n      this.stencilWriteMask = 0xff;\n      this.stencilFunc = AlwaysStencilFunc;\n      this.stencilRef = 0;\n      this.stencilFuncMask = 0xff;\n      this.stencilFail = KeepStencilOp;\n      this.stencilZFail = KeepStencilOp;\n      this.stencilZPass = KeepStencilOp;\n      this.stencilWrite = false;\n      this.clippingPlanes = null;\n      this.clipIntersection = false;\n      this.clipShadows = false;\n      this.shadowSide = null;\n      this.colorWrite = true;\n      this.precision = null; // override the renderer's default precision for this material\n\n      this.polygonOffset = false;\n      this.polygonOffsetFactor = 0;\n      this.polygonOffsetUnits = 0;\n      this.dithering = false;\n      this.alphaToCoverage = false;\n      this.premultipliedAlpha = false;\n      this.visible = true;\n      this.toneMapped = true;\n      this.userData = {};\n      this.version = 0;\n      this._alphaTest = 0;\n    }\n\n    get alphaTest() {\n      return this._alphaTest;\n    }\n\n    set alphaTest(value) {\n      if (this._alphaTest > 0 !== value > 0) {\n        this.version++;\n      }\n\n      this._alphaTest = value;\n    }\n\n    onBuild() {}\n\n    onBeforeRender() {}\n\n    onBeforeCompile() {}\n\n    customProgramCacheKey() {\n      return this.onBeforeCompile.toString();\n    }\n\n    setValues(values) {\n      if (values === undefined) return;\n\n      for (const key in values) {\n        const newValue = values[key];\n\n        if (newValue === undefined) {\n          console.warn('THREE.Material: \\'' + key + '\\' parameter is undefined.');\n          continue;\n        } // for backward compatability if shading is set in the constructor\n\n\n        if (key === 'shading') {\n          console.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n          this.flatShading = newValue === FlatShading ? true : false;\n          continue;\n        }\n\n        const currentValue = this[key];\n\n        if (currentValue === undefined) {\n          console.warn('THREE.' + this.type + ': \\'' + key + '\\' is not a property of this material.');\n          continue;\n        }\n\n        if (currentValue && currentValue.isColor) {\n          currentValue.set(newValue);\n        } else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) {\n          currentValue.copy(newValue);\n        } else {\n          this[key] = newValue;\n        }\n      }\n    }\n\n    toJSON(meta) {\n      const isRoot = meta === undefined || typeof meta === 'string';\n\n      if (isRoot) {\n        meta = {\n          textures: {},\n          images: {}\n        };\n      }\n\n      const data = {\n        metadata: {\n          version: 4.5,\n          type: 'Material',\n          generator: 'Material.toJSON'\n        }\n      }; // standard Material serialization\n\n      data.uuid = this.uuid;\n      data.type = this.type;\n      if (this.name !== '') data.name = this.name;\n      if (this.color && this.color.isColor) data.color = this.color.getHex();\n      if (this.roughness !== undefined) data.roughness = this.roughness;\n      if (this.metalness !== undefined) data.metalness = this.metalness;\n      if (this.sheen !== undefined) data.sheen = this.sheen;\n      if (this.sheenColor && this.sheenColor.isColor) data.sheenColor = this.sheenColor.getHex();\n      if (this.sheenRoughness !== undefined) data.sheenRoughness = this.sheenRoughness;\n      if (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();\n      if (this.emissiveIntensity && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;\n      if (this.specular && this.specular.isColor) data.specular = this.specular.getHex();\n      if (this.specularIntensity !== undefined) data.specularIntensity = this.specularIntensity;\n      if (this.specularColor && this.specularColor.isColor) data.specularColor = this.specularColor.getHex();\n      if (this.shininess !== undefined) data.shininess = this.shininess;\n      if (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;\n      if (this.clearcoatRoughness !== undefined) data.clearcoatRoughness = this.clearcoatRoughness;\n\n      if (this.clearcoatMap && this.clearcoatMap.isTexture) {\n        data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;\n      }\n\n      if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {\n        data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;\n      }\n\n      if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {\n        data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;\n        data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n      }\n\n      if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;\n      if (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;\n      if (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;\n\n      if (this.lightMap && this.lightMap.isTexture) {\n        data.lightMap = this.lightMap.toJSON(meta).uuid;\n        data.lightMapIntensity = this.lightMapIntensity;\n      }\n\n      if (this.aoMap && this.aoMap.isTexture) {\n        data.aoMap = this.aoMap.toJSON(meta).uuid;\n        data.aoMapIntensity = this.aoMapIntensity;\n      }\n\n      if (this.bumpMap && this.bumpMap.isTexture) {\n        data.bumpMap = this.bumpMap.toJSON(meta).uuid;\n        data.bumpScale = this.bumpScale;\n      }\n\n      if (this.normalMap && this.normalMap.isTexture) {\n        data.normalMap = this.normalMap.toJSON(meta).uuid;\n        data.normalMapType = this.normalMapType;\n        data.normalScale = this.normalScale.toArray();\n      }\n\n      if (this.displacementMap && this.displacementMap.isTexture) {\n        data.displacementMap = this.displacementMap.toJSON(meta).uuid;\n        data.displacementScale = this.displacementScale;\n        data.displacementBias = this.displacementBias;\n      }\n\n      if (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;\n      if (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;\n      if (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;\n      if (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;\n      if (this.specularIntensityMap && this.specularIntensityMap.isTexture) data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;\n      if (this.specularColorMap && this.specularColorMap.isTexture) data.specularColorMap = this.specularColorMap.toJSON(meta).uuid;\n\n      if (this.envMap && this.envMap.isTexture) {\n        data.envMap = this.envMap.toJSON(meta).uuid;\n        if (this.combine !== undefined) data.combine = this.combine;\n      }\n\n      if (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;\n      if (this.reflectivity !== undefined) data.reflectivity = this.reflectivity;\n      if (this.refractionRatio !== undefined) data.refractionRatio = this.refractionRatio;\n\n      if (this.gradientMap && this.gradientMap.isTexture) {\n        data.gradientMap = this.gradientMap.toJSON(meta).uuid;\n      }\n\n      if (this.transmission !== undefined) data.transmission = this.transmission;\n      if (this.transmissionMap && this.transmissionMap.isTexture) data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;\n      if (this.thickness !== undefined) data.thickness = this.thickness;\n      if (this.thicknessMap && this.thicknessMap.isTexture) data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;\n      if (this.attenuationDistance !== undefined) data.attenuationDistance = this.attenuationDistance;\n      if (this.attenuationColor !== undefined) data.attenuationColor = this.attenuationColor.getHex();\n      if (this.size !== undefined) data.size = this.size;\n      if (this.shadowSide !== null) data.shadowSide = this.shadowSide;\n      if (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;\n      if (this.blending !== NormalBlending) data.blending = this.blending;\n      if (this.side !== FrontSide) data.side = this.side;\n      if (this.vertexColors) data.vertexColors = true;\n      if (this.opacity < 1) data.opacity = this.opacity;\n      if (this.format !== RGBAFormat) data.format = this.format;\n      if (this.transparent === true) data.transparent = this.transparent;\n      data.depthFunc = this.depthFunc;\n      data.depthTest = this.depthTest;\n      data.depthWrite = this.depthWrite;\n      data.colorWrite = this.colorWrite;\n      data.stencilWrite = this.stencilWrite;\n      data.stencilWriteMask = this.stencilWriteMask;\n      data.stencilFunc = this.stencilFunc;\n      data.stencilRef = this.stencilRef;\n      data.stencilFuncMask = this.stencilFuncMask;\n      data.stencilFail = this.stencilFail;\n      data.stencilZFail = this.stencilZFail;\n      data.stencilZPass = this.stencilZPass; // rotation (SpriteMaterial)\n\n      if (this.rotation && this.rotation !== 0) data.rotation = this.rotation;\n      if (this.polygonOffset === true) data.polygonOffset = true;\n      if (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;\n      if (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;\n      if (this.linewidth && this.linewidth !== 1) data.linewidth = this.linewidth;\n      if (this.dashSize !== undefined) data.dashSize = this.dashSize;\n      if (this.gapSize !== undefined) data.gapSize = this.gapSize;\n      if (this.scale !== undefined) data.scale = this.scale;\n      if (this.dithering === true) data.dithering = true;\n      if (this.alphaTest > 0) data.alphaTest = this.alphaTest;\n      if (this.alphaToCoverage === true) data.alphaToCoverage = this.alphaToCoverage;\n      if (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;\n      if (this.wireframe === true) data.wireframe = this.wireframe;\n      if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;\n      if (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;\n      if (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;\n      if (this.flatShading === true) data.flatShading = this.flatShading;\n      if (this.visible === false) data.visible = false;\n      if (this.toneMapped === false) data.toneMapped = false;\n      if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData; // TODO: Copied from Object3D.toJSON\n\n      function extractFromCache(cache) {\n        const values = [];\n\n        for (const key in cache) {\n          const data = cache[key];\n          delete data.metadata;\n          values.push(data);\n        }\n\n        return values;\n      }\n\n      if (isRoot) {\n        const textures = extractFromCache(meta.textures);\n        const images = extractFromCache(meta.images);\n        if (textures.length > 0) data.textures = textures;\n        if (images.length > 0) data.images = images;\n      }\n\n      return data;\n    }\n\n    clone() {\n      return new this.constructor().copy(this);\n    }\n\n    copy(source) {\n      this.name = source.name;\n      this.fog = source.fog;\n      this.blending = source.blending;\n      this.side = source.side;\n      this.vertexColors = source.vertexColors;\n      this.opacity = source.opacity;\n      this.format = source.format;\n      this.transparent = source.transparent;\n      this.blendSrc = source.blendSrc;\n      this.blendDst = source.blendDst;\n      this.blendEquation = source.blendEquation;\n      this.blendSrcAlpha = source.blendSrcAlpha;\n      this.blendDstAlpha = source.blendDstAlpha;\n      this.blendEquationAlpha = source.blendEquationAlpha;\n      this.depthFunc = source.depthFunc;\n      this.depthTest = source.depthTest;\n      this.depthWrite = source.depthWrite;\n      this.stencilWriteMask = source.stencilWriteMask;\n      this.stencilFunc = source.stencilFunc;\n      this.stencilRef = source.stencilRef;\n      this.stencilFuncMask = source.stencilFuncMask;\n      this.stencilFail = source.stencilFail;\n      this.stencilZFail = source.stencilZFail;\n      this.stencilZPass = source.stencilZPass;\n      this.stencilWrite = source.stencilWrite;\n      const srcPlanes = source.clippingPlanes;\n      let dstPlanes = null;\n\n      if (srcPlanes !== null) {\n        const n = srcPlanes.length;\n        dstPlanes = new Array(n);\n\n        for (let i = 0; i !== n; ++i) {\n          dstPlanes[i] = srcPlanes[i].clone();\n        }\n      }\n\n      this.clippingPlanes = dstPlanes;\n      this.clipIntersection = source.clipIntersection;\n      this.clipShadows = source.clipShadows;\n      this.shadowSide = source.shadowSide;\n      this.colorWrite = source.colorWrite;\n      this.precision = source.precision;\n      this.polygonOffset = source.polygonOffset;\n      this.polygonOffsetFactor = source.polygonOffsetFactor;\n      this.polygonOffsetUnits = source.polygonOffsetUnits;\n      this.dithering = source.dithering;\n      this.alphaTest = source.alphaTest;\n      this.alphaToCoverage = source.alphaToCoverage;\n      this.premultipliedAlpha = source.premultipliedAlpha;\n      this.visible = source.visible;\n      this.toneMapped = source.toneMapped;\n      this.userData = JSON.parse(JSON.stringify(source.userData));\n      return this;\n    }\n\n    dispose() {\n      this.dispatchEvent({\n        type: 'dispose'\n      });\n    }\n\n    set needsUpdate(value) {\n      if (value === true) this.version++;\n    }\n\n  }\n\n  Material.prototype.isMaterial = true;\n  const _colorKeywords = {\n    'aliceblue': 0xF0F8FF,\n    'antiquewhite': 0xFAEBD7,\n    'aqua': 0x00FFFF,\n    'aquamarine': 0x7FFFD4,\n    'azure': 0xF0FFFF,\n    'beige': 0xF5F5DC,\n    'bisque': 0xFFE4C4,\n    'black': 0x000000,\n    'blanchedalmond': 0xFFEBCD,\n    'blue': 0x0000FF,\n    'blueviolet': 0x8A2BE2,\n    'brown': 0xA52A2A,\n    'burlywood': 0xDEB887,\n    'cadetblue': 0x5F9EA0,\n    'chartreuse': 0x7FFF00,\n    'chocolate': 0xD2691E,\n    'coral': 0xFF7F50,\n    'cornflowerblue': 0x6495ED,\n    'cornsilk': 0xFFF8DC,\n    'crimson': 0xDC143C,\n    'cyan': 0x00FFFF,\n    'darkblue': 0x00008B,\n    'darkcyan': 0x008B8B,\n    'darkgoldenrod': 0xB8860B,\n    'darkgray': 0xA9A9A9,\n    'darkgreen': 0x006400,\n    'darkgrey': 0xA9A9A9,\n    'darkkhaki': 0xBDB76B,\n    'darkmagenta': 0x8B008B,\n    'darkolivegreen': 0x556B2F,\n    'darkorange': 0xFF8C00,\n    'darkorchid': 0x9932CC,\n    'darkred': 0x8B0000,\n    'darksalmon': 0xE9967A,\n    'darkseagreen': 0x8FBC8F,\n    'darkslateblue': 0x483D8B,\n    'darkslategray': 0x2F4F4F,\n    'darkslategrey': 0x2F4F4F,\n    'darkturquoise': 0x00CED1,\n    'darkviolet': 0x9400D3,\n    'deeppink': 0xFF1493,\n    'deepskyblue': 0x00BFFF,\n    'dimgray': 0x696969,\n    'dimgrey': 0x696969,\n    'dodgerblue': 0x1E90FF,\n    'firebrick': 0xB22222,\n    'floralwhite': 0xFFFAF0,\n    'forestgreen': 0x228B22,\n    'fuchsia': 0xFF00FF,\n    'gainsboro': 0xDCDCDC,\n    'ghostwhite': 0xF8F8FF,\n    'gold': 0xFFD700,\n    'goldenrod': 0xDAA520,\n    'gray': 0x808080,\n    'green': 0x008000,\n    'greenyellow': 0xADFF2F,\n    'grey': 0x808080,\n    'honeydew': 0xF0FFF0,\n    'hotpink': 0xFF69B4,\n    'indianred': 0xCD5C5C,\n    'indigo': 0x4B0082,\n    'ivory': 0xFFFFF0,\n    'khaki': 0xF0E68C,\n    'lavender': 0xE6E6FA,\n    'lavenderblush': 0xFFF0F5,\n    'lawngreen': 0x7CFC00,\n    'lemonchiffon': 0xFFFACD,\n    'lightblue': 0xADD8E6,\n    'lightcoral': 0xF08080,\n    'lightcyan': 0xE0FFFF,\n    'lightgoldenrodyellow': 0xFAFAD2,\n    'lightgray': 0xD3D3D3,\n    'lightgreen': 0x90EE90,\n    'lightgrey': 0xD3D3D3,\n    'lightpink': 0xFFB6C1,\n    'lightsalmon': 0xFFA07A,\n    'lightseagreen': 0x20B2AA,\n    'lightskyblue': 0x87CEFA,\n    'lightslategray': 0x778899,\n    'lightslategrey': 0x778899,\n    'lightsteelblue': 0xB0C4DE,\n    'lightyellow': 0xFFFFE0,\n    'lime': 0x00FF00,\n    'limegreen': 0x32CD32,\n    'linen': 0xFAF0E6,\n    'magenta': 0xFF00FF,\n    'maroon': 0x800000,\n    'mediumaquamarine': 0x66CDAA,\n    'mediumblue': 0x0000CD,\n    'mediumorchid': 0xBA55D3,\n    'mediumpurple': 0x9370DB,\n    'mediumseagreen': 0x3CB371,\n    'mediumslateblue': 0x7B68EE,\n    'mediumspringgreen': 0x00FA9A,\n    'mediumturquoise': 0x48D1CC,\n    'mediumvioletred': 0xC71585,\n    'midnightblue': 0x191970,\n    'mintcream': 0xF5FFFA,\n    'mistyrose': 0xFFE4E1,\n    'moccasin': 0xFFE4B5,\n    'navajowhite': 0xFFDEAD,\n    'navy': 0x000080,\n    'oldlace': 0xFDF5E6,\n    'olive': 0x808000,\n    'olivedrab': 0x6B8E23,\n    'orange': 0xFFA500,\n    'orangered': 0xFF4500,\n    'orchid': 0xDA70D6,\n    'palegoldenrod': 0xEEE8AA,\n    'palegreen': 0x98FB98,\n    'paleturquoise': 0xAFEEEE,\n    'palevioletred': 0xDB7093,\n    'papayawhip': 0xFFEFD5,\n    'peachpuff': 0xFFDAB9,\n    'peru': 0xCD853F,\n    'pink': 0xFFC0CB,\n    'plum': 0xDDA0DD,\n    'powderblue': 0xB0E0E6,\n    'purple': 0x800080,\n    'rebeccapurple': 0x663399,\n    'red': 0xFF0000,\n    'rosybrown': 0xBC8F8F,\n    'royalblue': 0x4169E1,\n    'saddlebrown': 0x8B4513,\n    'salmon': 0xFA8072,\n    'sandybrown': 0xF4A460,\n    'seagreen': 0x2E8B57,\n    'seashell': 0xFFF5EE,\n    'sienna': 0xA0522D,\n    'silver': 0xC0C0C0,\n    'skyblue': 0x87CEEB,\n    'slateblue': 0x6A5ACD,\n    'slategray': 0x708090,\n    'slategrey': 0x708090,\n    'snow': 0xFFFAFA,\n    'springgreen': 0x00FF7F,\n    'steelblue': 0x4682B4,\n    'tan': 0xD2B48C,\n    'teal': 0x008080,\n    'thistle': 0xD8BFD8,\n    'tomato': 0xFF6347,\n    'turquoise': 0x40E0D0,\n    'violet': 0xEE82EE,\n    'wheat': 0xF5DEB3,\n    'white': 0xFFFFFF,\n    'whitesmoke': 0xF5F5F5,\n    'yellow': 0xFFFF00,\n    'yellowgreen': 0x9ACD32\n  };\n  const _hslA = {\n    h: 0,\n    s: 0,\n    l: 0\n  };\n  const _hslB = {\n    h: 0,\n    s: 0,\n    l: 0\n  };\n\n  function hue2rgb(p, q, t) {\n    if (t < 0) t += 1;\n    if (t > 1) t -= 1;\n    if (t < 1 / 6) return p + (q - p) * 6 * t;\n    if (t < 1 / 2) return q;\n    if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);\n    return p;\n  }\n\n  function SRGBToLinear(c) {\n    return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n  }\n\n  function LinearToSRGB(c) {\n    return c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;\n  }\n\n  class Color {\n    constructor(r, g, b) {\n      if (g === undefined && b === undefined) {\n        // r is THREE.Color, hex or string\n        return this.set(r);\n      }\n\n      return this.setRGB(r, g, b);\n    }\n\n    set(value) {\n      if (value && value.isColor) {\n        this.copy(value);\n      } else if (typeof value === 'number') {\n        this.setHex(value);\n      } else if (typeof value === 'string') {\n        this.setStyle(value);\n      }\n\n      return this;\n    }\n\n    setScalar(scalar) {\n      this.r = scalar;\n      this.g = scalar;\n      this.b = scalar;\n      return this;\n    }\n\n    setHex(hex) {\n      hex = Math.floor(hex);\n      this.r = (hex >> 16 & 255) / 255;\n      this.g = (hex >> 8 & 255) / 255;\n      this.b = (hex & 255) / 255;\n      return this;\n    }\n\n    setRGB(r, g, b) {\n      this.r = r;\n      this.g = g;\n      this.b = b;\n      return this;\n    }\n\n    setHSL(h, s, l) {\n      // h,s,l ranges are in 0.0 - 1.0\n      h = euclideanModulo(h, 1);\n      s = clamp(s, 0, 1);\n      l = clamp(l, 0, 1);\n\n      if (s === 0) {\n        this.r = this.g = this.b = l;\n      } else {\n        const p = l <= 0.5 ? l * (1 + s) : l + s - l * s;\n        const q = 2 * l - p;\n        this.r = hue2rgb(q, p, h + 1 / 3);\n        this.g = hue2rgb(q, p, h);\n        this.b = hue2rgb(q, p, h - 1 / 3);\n      }\n\n      return this;\n    }\n\n    setStyle(style) {\n      function handleAlpha(string) {\n        if (string === undefined) return;\n\n        if (parseFloat(string) < 1) {\n          console.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');\n        }\n      }\n\n      let m;\n\n      if (m = /^((?:rgb|hsl)a?)\\(([^\\)]*)\\)/.exec(style)) {\n        // rgb / hsl\n        let color;\n        const name = m[1];\n        const components = m[2];\n\n        switch (name) {\n          case 'rgb':\n          case 'rgba':\n            if (color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n              // rgb(255,0,0) rgba(255,0,0,0.5)\n              this.r = Math.min(255, parseInt(color[1], 10)) / 255;\n              this.g = Math.min(255, parseInt(color[2], 10)) / 255;\n              this.b = Math.min(255, parseInt(color[3], 10)) / 255;\n              handleAlpha(color[4]);\n              return this;\n            }\n\n            if (color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n              // rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n              this.r = Math.min(100, parseInt(color[1], 10)) / 100;\n              this.g = Math.min(100, parseInt(color[2], 10)) / 100;\n              this.b = Math.min(100, parseInt(color[3], 10)) / 100;\n              handleAlpha(color[4]);\n              return this;\n            }\n\n            break;\n\n          case 'hsl':\n          case 'hsla':\n            if (color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n              // hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n              const h = parseFloat(color[1]) / 360;\n              const s = parseInt(color[2], 10) / 100;\n              const l = parseInt(color[3], 10) / 100;\n              handleAlpha(color[4]);\n              return this.setHSL(h, s, l);\n            }\n\n            break;\n        }\n      } else if (m = /^\\#([A-Fa-f\\d]+)$/.exec(style)) {\n        // hex color\n        const hex = m[1];\n        const size = hex.length;\n\n        if (size === 3) {\n          // #ff0\n          this.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;\n          this.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;\n          this.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;\n          return this;\n        } else if (size === 6) {\n          // #ff0000\n          this.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;\n          this.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;\n          this.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;\n          return this;\n        }\n      }\n\n      if (style && style.length > 0) {\n        return this.setColorName(style);\n      }\n\n      return this;\n    }\n\n    setColorName(style) {\n      // color keywords\n      const hex = _colorKeywords[style.toLowerCase()];\n\n      if (hex !== undefined) {\n        // red\n        this.setHex(hex);\n      } else {\n        // unknown color\n        console.warn('THREE.Color: Unknown color ' + style);\n      }\n\n      return this;\n    }\n\n    clone() {\n      return new this.constructor(this.r, this.g, this.b);\n    }\n\n    copy(color) {\n      this.r = color.r;\n      this.g = color.g;\n      this.b = color.b;\n      return this;\n    }\n\n    copyGammaToLinear(color) {\n      let gammaFactor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2.0;\n      this.r = Math.pow(color.r, gammaFactor);\n      this.g = Math.pow(color.g, gammaFactor);\n      this.b = Math.pow(color.b, gammaFactor);\n      return this;\n    }\n\n    copyLinearToGamma(color) {\n      let gammaFactor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2.0;\n      const safeInverse = gammaFactor > 0 ? 1.0 / gammaFactor : 1.0;\n      this.r = Math.pow(color.r, safeInverse);\n      this.g = Math.pow(color.g, safeInverse);\n      this.b = Math.pow(color.b, safeInverse);\n      return this;\n    }\n\n    convertGammaToLinear(gammaFactor) {\n      this.copyGammaToLinear(this, gammaFactor);\n      return this;\n    }\n\n    convertLinearToGamma(gammaFactor) {\n      this.copyLinearToGamma(this, gammaFactor);\n      return this;\n    }\n\n    copySRGBToLinear(color) {\n      this.r = SRGBToLinear(color.r);\n      this.g = SRGBToLinear(color.g);\n      this.b = SRGBToLinear(color.b);\n      return this;\n    }\n\n    copyLinearToSRGB(color) {\n      this.r = LinearToSRGB(color.r);\n      this.g = LinearToSRGB(color.g);\n      this.b = LinearToSRGB(color.b);\n      return this;\n    }\n\n    convertSRGBToLinear() {\n      this.copySRGBToLinear(this);\n      return this;\n    }\n\n    convertLinearToSRGB() {\n      this.copyLinearToSRGB(this);\n      return this;\n    }\n\n    getHex() {\n      return this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;\n    }\n\n    getHexString() {\n      return ('000000' + this.getHex().toString(16)).slice(-6);\n    }\n\n    getHSL(target) {\n      // h,s,l ranges are in 0.0 - 1.0\n      const r = this.r,\n            g = this.g,\n            b = this.b;\n      const max = Math.max(r, g, b);\n      const min = Math.min(r, g, b);\n      let hue, saturation;\n      const lightness = (min + max) / 2.0;\n\n      if (min === max) {\n        hue = 0;\n        saturation = 0;\n      } else {\n        const delta = max - min;\n        saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);\n\n        switch (max) {\n          case r:\n            hue = (g - b) / delta + (g < b ? 6 : 0);\n            break;\n\n          case g:\n            hue = (b - r) / delta + 2;\n            break;\n\n          case b:\n            hue = (r - g) / delta + 4;\n            break;\n        }\n\n        hue /= 6;\n      }\n\n      target.h = hue;\n      target.s = saturation;\n      target.l = lightness;\n      return target;\n    }\n\n    getStyle() {\n      return 'rgb(' + (this.r * 255 | 0) + ',' + (this.g * 255 | 0) + ',' + (this.b * 255 | 0) + ')';\n    }\n\n    offsetHSL(h, s, l) {\n      this.getHSL(_hslA);\n      _hslA.h += h;\n      _hslA.s += s;\n      _hslA.l += l;\n      this.setHSL(_hslA.h, _hslA.s, _hslA.l);\n      return this;\n    }\n\n    add(color) {\n      this.r += color.r;\n      this.g += color.g;\n      this.b += color.b;\n      return this;\n    }\n\n    addColors(color1, color2) {\n      this.r = color1.r + color2.r;\n      this.g = color1.g + color2.g;\n      this.b = color1.b + color2.b;\n      return this;\n    }\n\n    addScalar(s) {\n      this.r += s;\n      this.g += s;\n      this.b += s;\n      return this;\n    }\n\n    sub(color) {\n      this.r = Math.max(0, this.r - color.r);\n      this.g = Math.max(0, this.g - color.g);\n      this.b = Math.max(0, this.b - color.b);\n      return this;\n    }\n\n    multiply(color) {\n      this.r *= color.r;\n      this.g *= color.g;\n      this.b *= color.b;\n      return this;\n    }\n\n    multiplyScalar(s) {\n      this.r *= s;\n      this.g *= s;\n      this.b *= s;\n      return this;\n    }\n\n    lerp(color, alpha) {\n      this.r += (color.r - this.r) * alpha;\n      this.g += (color.g - this.g) * alpha;\n      this.b += (color.b - this.b) * alpha;\n      return this;\n    }\n\n    lerpColors(color1, color2, alpha) {\n      this.r = color1.r + (color2.r - color1.r) * alpha;\n      this.g = color1.g + (color2.g - color1.g) * alpha;\n      this.b = color1.b + (color2.b - color1.b) * alpha;\n      return this;\n    }\n\n    lerpHSL(color, alpha) {\n      this.getHSL(_hslA);\n      color.getHSL(_hslB);\n      const h = lerp(_hslA.h, _hslB.h, alpha);\n      const s = lerp(_hslA.s, _hslB.s, alpha);\n      const l = lerp(_hslA.l, _hslB.l, alpha);\n      this.setHSL(h, s, l);\n      return this;\n    }\n\n    equals(c) {\n      return c.r === this.r && c.g === this.g && c.b === this.b;\n    }\n\n    fromArray(array) {\n      let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      this.r = array[offset];\n      this.g = array[offset + 1];\n      this.b = array[offset + 2];\n      return this;\n    }\n\n    toArray() {\n      let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      array[offset] = this.r;\n      array[offset + 1] = this.g;\n      array[offset + 2] = this.b;\n      return array;\n    }\n\n    fromBufferAttribute(attribute, index) {\n      this.r = attribute.getX(index);\n      this.g = attribute.getY(index);\n      this.b = attribute.getZ(index);\n\n      if (attribute.normalized === true) {\n        // assuming Uint8Array\n        this.r /= 255;\n        this.g /= 255;\n        this.b /= 255;\n      }\n\n      return this;\n    }\n\n    toJSON() {\n      return this.getHex();\n    }\n\n  }\n\n  Color.NAMES = _colorKeywords;\n  Color.prototype.isColor = true;\n  Color.prototype.r = 1;\n  Color.prototype.g = 1;\n  Color.prototype.b = 1;\n  /**\n   * parameters = {\n   *\tcolor: <hex>,\n   *\topacity: <float>,\n   *\tmap: new THREE.Texture( <Image> ),\n   *\n   *\tlightMap: new THREE.Texture( <Image> ),\n   *\tlightMapIntensity: <float>\n   *\n   *\taoMap: new THREE.Texture( <Image> ),\n   *\taoMapIntensity: <float>\n   *\n   *\tspecularMap: new THREE.Texture( <Image> ),\n   *\n   *\talphaMap: new THREE.Texture( <Image> ),\n   *\n   *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n   *\tcombine: THREE.Multiply,\n   *\treflectivity: <float>,\n   *\trefractionRatio: <float>,\n   *\n   *\tdepthTest: <bool>,\n   *\tdepthWrite: <bool>,\n   *\n   *\twireframe: <boolean>,\n   *\twireframeLinewidth: <float>,\n   * }\n   */\n\n  class MeshBasicMaterial extends Material {\n    constructor(parameters) {\n      super();\n      this.type = 'MeshBasicMaterial';\n      this.color = new Color(0xffffff); // emissive\n\n      this.map = null;\n      this.lightMap = null;\n      this.lightMapIntensity = 1.0;\n      this.aoMap = null;\n      this.aoMapIntensity = 1.0;\n      this.specularMap = null;\n      this.alphaMap = null;\n      this.envMap = null;\n      this.combine = MultiplyOperation;\n      this.reflectivity = 1;\n      this.refractionRatio = 0.98;\n      this.wireframe = false;\n      this.wireframeLinewidth = 1;\n      this.wireframeLinecap = 'round';\n      this.wireframeLinejoin = 'round';\n      this.setValues(parameters);\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.color.copy(source.color);\n      this.map = source.map;\n      this.lightMap = source.lightMap;\n      this.lightMapIntensity = source.lightMapIntensity;\n      this.aoMap = source.aoMap;\n      this.aoMapIntensity = source.aoMapIntensity;\n      this.specularMap = source.specularMap;\n      this.alphaMap = source.alphaMap;\n      this.envMap = source.envMap;\n      this.combine = source.combine;\n      this.reflectivity = source.reflectivity;\n      this.refractionRatio = source.refractionRatio;\n      this.wireframe = source.wireframe;\n      this.wireframeLinewidth = source.wireframeLinewidth;\n      this.wireframeLinecap = source.wireframeLinecap;\n      this.wireframeLinejoin = source.wireframeLinejoin;\n      return this;\n    }\n\n  }\n\n  MeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n  const _vector$9 = /*@__PURE__*/new Vector3();\n\n  const _vector2$1 = /*@__PURE__*/new Vector2();\n\n  class BufferAttribute {\n    constructor(array, itemSize, normalized) {\n      if (Array.isArray(array)) {\n        throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');\n      }\n\n      this.name = '';\n      this.array = array;\n      this.itemSize = itemSize;\n      this.count = array !== undefined ? array.length / itemSize : 0;\n      this.normalized = normalized === true;\n      this.usage = StaticDrawUsage;\n      this.updateRange = {\n        offset: 0,\n        count: -1\n      };\n      this.version = 0;\n    }\n\n    onUploadCallback() {}\n\n    set needsUpdate(value) {\n      if (value === true) this.version++;\n    }\n\n    setUsage(value) {\n      this.usage = value;\n      return this;\n    }\n\n    copy(source) {\n      this.name = source.name;\n      this.array = new source.array.constructor(source.array);\n      this.itemSize = source.itemSize;\n      this.count = source.count;\n      this.normalized = source.normalized;\n      this.usage = source.usage;\n      return this;\n    }\n\n    copyAt(index1, attribute, index2) {\n      index1 *= this.itemSize;\n      index2 *= attribute.itemSize;\n\n      for (let i = 0, l = this.itemSize; i < l; i++) {\n        this.array[index1 + i] = attribute.array[index2 + i];\n      }\n\n      return this;\n    }\n\n    copyArray(array) {\n      this.array.set(array);\n      return this;\n    }\n\n    copyColorsArray(colors) {\n      const array = this.array;\n      let offset = 0;\n\n      for (let i = 0, l = colors.length; i < l; i++) {\n        let color = colors[i];\n\n        if (color === undefined) {\n          console.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined', i);\n          color = new Color();\n        }\n\n        array[offset++] = color.r;\n        array[offset++] = color.g;\n        array[offset++] = color.b;\n      }\n\n      return this;\n    }\n\n    copyVector2sArray(vectors) {\n      const array = this.array;\n      let offset = 0;\n\n      for (let i = 0, l = vectors.length; i < l; i++) {\n        let vector = vectors[i];\n\n        if (vector === undefined) {\n          console.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i);\n          vector = new Vector2();\n        }\n\n        array[offset++] = vector.x;\n        array[offset++] = vector.y;\n      }\n\n      return this;\n    }\n\n    copyVector3sArray(vectors) {\n      const array = this.array;\n      let offset = 0;\n\n      for (let i = 0, l = vectors.length; i < l; i++) {\n        let vector = vectors[i];\n\n        if (vector === undefined) {\n          console.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i);\n          vector = new Vector3();\n        }\n\n        array[offset++] = vector.x;\n        array[offset++] = vector.y;\n        array[offset++] = vector.z;\n      }\n\n      return this;\n    }\n\n    copyVector4sArray(vectors) {\n      const array = this.array;\n      let offset = 0;\n\n      for (let i = 0, l = vectors.length; i < l; i++) {\n        let vector = vectors[i];\n\n        if (vector === undefined) {\n          console.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i);\n          vector = new Vector4();\n        }\n\n        array[offset++] = vector.x;\n        array[offset++] = vector.y;\n        array[offset++] = vector.z;\n        array[offset++] = vector.w;\n      }\n\n      return this;\n    }\n\n    applyMatrix3(m) {\n      if (this.itemSize === 2) {\n        for (let i = 0, l = this.count; i < l; i++) {\n          _vector2$1.fromBufferAttribute(this, i);\n\n          _vector2$1.applyMatrix3(m);\n\n          this.setXY(i, _vector2$1.x, _vector2$1.y);\n        }\n      } else if (this.itemSize === 3) {\n        for (let i = 0, l = this.count; i < l; i++) {\n          _vector$9.fromBufferAttribute(this, i);\n\n          _vector$9.applyMatrix3(m);\n\n          this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n        }\n      }\n\n      return this;\n    }\n\n    applyMatrix4(m) {\n      for (let i = 0, l = this.count; i < l; i++) {\n        _vector$9.x = this.getX(i);\n        _vector$9.y = this.getY(i);\n        _vector$9.z = this.getZ(i);\n\n        _vector$9.applyMatrix4(m);\n\n        this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n      }\n\n      return this;\n    }\n\n    applyNormalMatrix(m) {\n      for (let i = 0, l = this.count; i < l; i++) {\n        _vector$9.x = this.getX(i);\n        _vector$9.y = this.getY(i);\n        _vector$9.z = this.getZ(i);\n\n        _vector$9.applyNormalMatrix(m);\n\n        this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n      }\n\n      return this;\n    }\n\n    transformDirection(m) {\n      for (let i = 0, l = this.count; i < l; i++) {\n        _vector$9.x = this.getX(i);\n        _vector$9.y = this.getY(i);\n        _vector$9.z = this.getZ(i);\n\n        _vector$9.transformDirection(m);\n\n        this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n      }\n\n      return this;\n    }\n\n    set(value) {\n      let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      this.array.set(value, offset);\n      return this;\n    }\n\n    getX(index) {\n      return this.array[index * this.itemSize];\n    }\n\n    setX(index, x) {\n      this.array[index * this.itemSize] = x;\n      return this;\n    }\n\n    getY(index) {\n      return this.array[index * this.itemSize + 1];\n    }\n\n    setY(index, y) {\n      this.array[index * this.itemSize + 1] = y;\n      return this;\n    }\n\n    getZ(index) {\n      return this.array[index * this.itemSize + 2];\n    }\n\n    setZ(index, z) {\n      this.array[index * this.itemSize + 2] = z;\n      return this;\n    }\n\n    getW(index) {\n      return this.array[index * this.itemSize + 3];\n    }\n\n    setW(index, w) {\n      this.array[index * this.itemSize + 3] = w;\n      return this;\n    }\n\n    setXY(index, x, y) {\n      index *= this.itemSize;\n      this.array[index + 0] = x;\n      this.array[index + 1] = y;\n      return this;\n    }\n\n    setXYZ(index, x, y, z) {\n      index *= this.itemSize;\n      this.array[index + 0] = x;\n      this.array[index + 1] = y;\n      this.array[index + 2] = z;\n      return this;\n    }\n\n    setXYZW(index, x, y, z, w) {\n      index *= this.itemSize;\n      this.array[index + 0] = x;\n      this.array[index + 1] = y;\n      this.array[index + 2] = z;\n      this.array[index + 3] = w;\n      return this;\n    }\n\n    onUpload(callback) {\n      this.onUploadCallback = callback;\n      return this;\n    }\n\n    clone() {\n      return new this.constructor(this.array, this.itemSize).copy(this);\n    }\n\n    toJSON() {\n      const data = {\n        itemSize: this.itemSize,\n        type: this.array.constructor.name,\n        array: Array.prototype.slice.call(this.array),\n        normalized: this.normalized\n      };\n      if (this.name !== '') data.name = this.name;\n      if (this.usage !== StaticDrawUsage) data.usage = this.usage;\n      if (this.updateRange.offset !== 0 || this.updateRange.count !== -1) data.updateRange = this.updateRange;\n      return data;\n    }\n\n  }\n\n  BufferAttribute.prototype.isBufferAttribute = true; //\n\n  class Int8BufferAttribute extends BufferAttribute {\n    constructor(array, itemSize, normalized) {\n      super(new Int8Array(array), itemSize, normalized);\n    }\n\n  }\n\n  class Uint8BufferAttribute extends BufferAttribute {\n    constructor(array, itemSize, normalized) {\n      super(new Uint8Array(array), itemSize, normalized);\n    }\n\n  }\n\n  class Uint8ClampedBufferAttribute extends BufferAttribute {\n    constructor(array, itemSize, normalized) {\n      super(new Uint8ClampedArray(array), itemSize, normalized);\n    }\n\n  }\n\n  class Int16BufferAttribute extends BufferAttribute {\n    constructor(array, itemSize, normalized) {\n      super(new Int16Array(array), itemSize, normalized);\n    }\n\n  }\n\n  class Uint16BufferAttribute extends BufferAttribute {\n    constructor(array, itemSize, normalized) {\n      super(new Uint16Array(array), itemSize, normalized);\n    }\n\n  }\n\n  class Int32BufferAttribute extends BufferAttribute {\n    constructor(array, itemSize, normalized) {\n      super(new Int32Array(array), itemSize, normalized);\n    }\n\n  }\n\n  class Uint32BufferAttribute extends BufferAttribute {\n    constructor(array, itemSize, normalized) {\n      super(new Uint32Array(array), itemSize, normalized);\n    }\n\n  }\n\n  class Float16BufferAttribute extends BufferAttribute {\n    constructor(array, itemSize, normalized) {\n      super(new Uint16Array(array), itemSize, normalized);\n    }\n\n  }\n\n  Float16BufferAttribute.prototype.isFloat16BufferAttribute = true;\n\n  class Float32BufferAttribute extends BufferAttribute {\n    constructor(array, itemSize, normalized) {\n      super(new Float32Array(array), itemSize, normalized);\n    }\n\n  }\n\n  class Float64BufferAttribute extends BufferAttribute {\n    constructor(array, itemSize, normalized) {\n      super(new Float64Array(array), itemSize, normalized);\n    }\n\n  } //\n\n\n  let _id = 0;\n\n  const _m1 = /*@__PURE__*/new Matrix4();\n\n  const _obj = /*@__PURE__*/new Object3D();\n\n  const _offset = /*@__PURE__*/new Vector3();\n\n  const _box$1 = /*@__PURE__*/new Box3();\n\n  const _boxMorphTargets = /*@__PURE__*/new Box3();\n\n  const _vector$8 = /*@__PURE__*/new Vector3();\n\n  class BufferGeometry extends EventDispatcher {\n    constructor() {\n      super();\n      Object.defineProperty(this, 'id', {\n        value: _id++\n      });\n      this.uuid = generateUUID();\n      this.name = '';\n      this.type = 'BufferGeometry';\n      this.index = null;\n      this.attributes = {};\n      this.morphAttributes = {};\n      this.morphTargetsRelative = false;\n      this.groups = [];\n      this.boundingBox = null;\n      this.boundingSphere = null;\n      this.drawRange = {\n        start: 0,\n        count: Infinity\n      };\n      this.userData = {};\n    }\n\n    getIndex() {\n      return this.index;\n    }\n\n    setIndex(index) {\n      if (Array.isArray(index)) {\n        this.index = new (arrayMax(index) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);\n      } else {\n        this.index = index;\n      }\n\n      return this;\n    }\n\n    getAttribute(name) {\n      return this.attributes[name];\n    }\n\n    setAttribute(name, attribute) {\n      this.attributes[name] = attribute;\n      return this;\n    }\n\n    deleteAttribute(name) {\n      delete this.attributes[name];\n      return this;\n    }\n\n    hasAttribute(name) {\n      return this.attributes[name] !== undefined;\n    }\n\n    addGroup(start, count) {\n      let materialIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      this.groups.push({\n        start: start,\n        count: count,\n        materialIndex: materialIndex\n      });\n    }\n\n    clearGroups() {\n      this.groups = [];\n    }\n\n    setDrawRange(start, count) {\n      this.drawRange.start = start;\n      this.drawRange.count = count;\n    }\n\n    applyMatrix4(matrix) {\n      const position = this.attributes.position;\n\n      if (position !== undefined) {\n        position.applyMatrix4(matrix);\n        position.needsUpdate = true;\n      }\n\n      const normal = this.attributes.normal;\n\n      if (normal !== undefined) {\n        const normalMatrix = new Matrix3().getNormalMatrix(matrix);\n        normal.applyNormalMatrix(normalMatrix);\n        normal.needsUpdate = true;\n      }\n\n      const tangent = this.attributes.tangent;\n\n      if (tangent !== undefined) {\n        tangent.transformDirection(matrix);\n        tangent.needsUpdate = true;\n      }\n\n      if (this.boundingBox !== null) {\n        this.computeBoundingBox();\n      }\n\n      if (this.boundingSphere !== null) {\n        this.computeBoundingSphere();\n      }\n\n      return this;\n    }\n\n    applyQuaternion(q) {\n      _m1.makeRotationFromQuaternion(q);\n\n      this.applyMatrix4(_m1);\n      return this;\n    }\n\n    rotateX(angle) {\n      // rotate geometry around world x-axis\n      _m1.makeRotationX(angle);\n\n      this.applyMatrix4(_m1);\n      return this;\n    }\n\n    rotateY(angle) {\n      // rotate geometry around world y-axis\n      _m1.makeRotationY(angle);\n\n      this.applyMatrix4(_m1);\n      return this;\n    }\n\n    rotateZ(angle) {\n      // rotate geometry around world z-axis\n      _m1.makeRotationZ(angle);\n\n      this.applyMatrix4(_m1);\n      return this;\n    }\n\n    translate(x, y, z) {\n      // translate geometry\n      _m1.makeTranslation(x, y, z);\n\n      this.applyMatrix4(_m1);\n      return this;\n    }\n\n    scale(x, y, z) {\n      // scale geometry\n      _m1.makeScale(x, y, z);\n\n      this.applyMatrix4(_m1);\n      return this;\n    }\n\n    lookAt(vector) {\n      _obj.lookAt(vector);\n\n      _obj.updateMatrix();\n\n      this.applyMatrix4(_obj.matrix);\n      return this;\n    }\n\n    center() {\n      this.computeBoundingBox();\n      this.boundingBox.getCenter(_offset).negate();\n      this.translate(_offset.x, _offset.y, _offset.z);\n      return this;\n    }\n\n    setFromPoints(points) {\n      const position = [];\n\n      for (let i = 0, l = points.length; i < l; i++) {\n        const point = points[i];\n        position.push(point.x, point.y, point.z || 0);\n      }\n\n      this.setAttribute('position', new Float32BufferAttribute(position, 3));\n      return this;\n    }\n\n    computeBoundingBox() {\n      if (this.boundingBox === null) {\n        this.boundingBox = new Box3();\n      }\n\n      const position = this.attributes.position;\n      const morphAttributesPosition = this.morphAttributes.position;\n\n      if (position && position.isGLBufferAttribute) {\n        console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set \"mesh.frustumCulled\" to \"false\".', this);\n        this.boundingBox.set(new Vector3(-Infinity, -Infinity, -Infinity), new Vector3(+Infinity, +Infinity, +Infinity));\n        return;\n      }\n\n      if (position !== undefined) {\n        this.boundingBox.setFromBufferAttribute(position); // process morph attributes if present\n\n        if (morphAttributesPosition) {\n          for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\n            const morphAttribute = morphAttributesPosition[i];\n\n            _box$1.setFromBufferAttribute(morphAttribute);\n\n            if (this.morphTargetsRelative) {\n              _vector$8.addVectors(this.boundingBox.min, _box$1.min);\n\n              this.boundingBox.expandByPoint(_vector$8);\n\n              _vector$8.addVectors(this.boundingBox.max, _box$1.max);\n\n              this.boundingBox.expandByPoint(_vector$8);\n            } else {\n              this.boundingBox.expandByPoint(_box$1.min);\n              this.boundingBox.expandByPoint(_box$1.max);\n            }\n          }\n        }\n      } else {\n        this.boundingBox.makeEmpty();\n      }\n\n      if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {\n        console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this);\n      }\n    }\n\n    computeBoundingSphere() {\n      if (this.boundingSphere === null) {\n        this.boundingSphere = new Sphere();\n      }\n\n      const position = this.attributes.position;\n      const morphAttributesPosition = this.morphAttributes.position;\n\n      if (position && position.isGLBufferAttribute) {\n        console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set \"mesh.frustumCulled\" to \"false\".', this);\n        this.boundingSphere.set(new Vector3(), Infinity);\n        return;\n      }\n\n      if (position) {\n        // first, find the center of the bounding sphere\n        const center = this.boundingSphere.center;\n\n        _box$1.setFromBufferAttribute(position); // process morph attributes if present\n\n\n        if (morphAttributesPosition) {\n          for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\n            const morphAttribute = morphAttributesPosition[i];\n\n            _boxMorphTargets.setFromBufferAttribute(morphAttribute);\n\n            if (this.morphTargetsRelative) {\n              _vector$8.addVectors(_box$1.min, _boxMorphTargets.min);\n\n              _box$1.expandByPoint(_vector$8);\n\n              _vector$8.addVectors(_box$1.max, _boxMorphTargets.max);\n\n              _box$1.expandByPoint(_vector$8);\n            } else {\n              _box$1.expandByPoint(_boxMorphTargets.min);\n\n              _box$1.expandByPoint(_boxMorphTargets.max);\n            }\n          }\n        }\n\n        _box$1.getCenter(center); // second, try to find a boundingSphere with a radius smaller than the\n        // boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\n        let maxRadiusSq = 0;\n\n        for (let i = 0, il = position.count; i < il; i++) {\n          _vector$8.fromBufferAttribute(position, i);\n\n          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));\n        } // process morph attributes if present\n\n\n        if (morphAttributesPosition) {\n          for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\n            const morphAttribute = morphAttributesPosition[i];\n            const morphTargetsRelative = this.morphTargetsRelative;\n\n            for (let j = 0, jl = morphAttribute.count; j < jl; j++) {\n              _vector$8.fromBufferAttribute(morphAttribute, j);\n\n              if (morphTargetsRelative) {\n                _offset.fromBufferAttribute(position, j);\n\n                _vector$8.add(_offset);\n              }\n\n              maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));\n            }\n          }\n        }\n\n        this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n\n        if (isNaN(this.boundingSphere.radius)) {\n          console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this);\n        }\n      }\n    }\n\n    computeTangents() {\n      const index = this.index;\n      const attributes = this.attributes; // based on http://www.terathon.com/code/tangent.html\n      // (per vertex tangents)\n\n      if (index === null || attributes.position === undefined || attributes.normal === undefined || attributes.uv === undefined) {\n        console.error('THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)');\n        return;\n      }\n\n      const indices = index.array;\n      const positions = attributes.position.array;\n      const normals = attributes.normal.array;\n      const uvs = attributes.uv.array;\n      const nVertices = positions.length / 3;\n\n      if (attributes.tangent === undefined) {\n        this.setAttribute('tangent', new BufferAttribute(new Float32Array(4 * nVertices), 4));\n      }\n\n      const tangents = attributes.tangent.array;\n      const tan1 = [],\n            tan2 = [];\n\n      for (let i = 0; i < nVertices; i++) {\n        tan1[i] = new Vector3();\n        tan2[i] = new Vector3();\n      }\n\n      const vA = new Vector3(),\n            vB = new Vector3(),\n            vC = new Vector3(),\n            uvA = new Vector2(),\n            uvB = new Vector2(),\n            uvC = new Vector2(),\n            sdir = new Vector3(),\n            tdir = new Vector3();\n\n      function handleTriangle(a, b, c) {\n        vA.fromArray(positions, a * 3);\n        vB.fromArray(positions, b * 3);\n        vC.fromArray(positions, c * 3);\n        uvA.fromArray(uvs, a * 2);\n        uvB.fromArray(uvs, b * 2);\n        uvC.fromArray(uvs, c * 2);\n        vB.sub(vA);\n        vC.sub(vA);\n        uvB.sub(uvA);\n        uvC.sub(uvA);\n        const r = 1.0 / (uvB.x * uvC.y - uvC.x * uvB.y); // silently ignore degenerate uv triangles having coincident or colinear vertices\n\n        if (!isFinite(r)) return;\n        sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);\n        tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);\n        tan1[a].add(sdir);\n        tan1[b].add(sdir);\n        tan1[c].add(sdir);\n        tan2[a].add(tdir);\n        tan2[b].add(tdir);\n        tan2[c].add(tdir);\n      }\n\n      let groups = this.groups;\n\n      if (groups.length === 0) {\n        groups = [{\n          start: 0,\n          count: indices.length\n        }];\n      }\n\n      for (let i = 0, il = groups.length; i < il; ++i) {\n        const group = groups[i];\n        const start = group.start;\n        const count = group.count;\n\n        for (let j = start, jl = start + count; j < jl; j += 3) {\n          handleTriangle(indices[j + 0], indices[j + 1], indices[j + 2]);\n        }\n      }\n\n      const tmp = new Vector3(),\n            tmp2 = new Vector3();\n      const n = new Vector3(),\n            n2 = new Vector3();\n\n      function handleVertex(v) {\n        n.fromArray(normals, v * 3);\n        n2.copy(n);\n        const t = tan1[v]; // Gram-Schmidt orthogonalize\n\n        tmp.copy(t);\n        tmp.sub(n.multiplyScalar(n.dot(t))).normalize(); // Calculate handedness\n\n        tmp2.crossVectors(n2, t);\n        const test = tmp2.dot(tan2[v]);\n        const w = test < 0.0 ? -1.0 : 1.0;\n        tangents[v * 4] = tmp.x;\n        tangents[v * 4 + 1] = tmp.y;\n        tangents[v * 4 + 2] = tmp.z;\n        tangents[v * 4 + 3] = w;\n      }\n\n      for (let i = 0, il = groups.length; i < il; ++i) {\n        const group = groups[i];\n        const start = group.start;\n        const count = group.count;\n\n        for (let j = start, jl = start + count; j < jl; j += 3) {\n          handleVertex(indices[j + 0]);\n          handleVertex(indices[j + 1]);\n          handleVertex(indices[j + 2]);\n        }\n      }\n    }\n\n    computeVertexNormals() {\n      const index = this.index;\n      const positionAttribute = this.getAttribute('position');\n\n      if (positionAttribute !== undefined) {\n        let normalAttribute = this.getAttribute('normal');\n\n        if (normalAttribute === undefined) {\n          normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);\n          this.setAttribute('normal', normalAttribute);\n        } else {\n          // reset existing normals to zero\n          for (let i = 0, il = normalAttribute.count; i < il; i++) {\n            normalAttribute.setXYZ(i, 0, 0, 0);\n          }\n        }\n\n        const pA = new Vector3(),\n              pB = new Vector3(),\n              pC = new Vector3();\n        const nA = new Vector3(),\n              nB = new Vector3(),\n              nC = new Vector3();\n        const cb = new Vector3(),\n              ab = new Vector3(); // indexed elements\n\n        if (index) {\n          for (let i = 0, il = index.count; i < il; i += 3) {\n            const vA = index.getX(i + 0);\n            const vB = index.getX(i + 1);\n            const vC = index.getX(i + 2);\n            pA.fromBufferAttribute(positionAttribute, vA);\n            pB.fromBufferAttribute(positionAttribute, vB);\n            pC.fromBufferAttribute(positionAttribute, vC);\n            cb.subVectors(pC, pB);\n            ab.subVectors(pA, pB);\n            cb.cross(ab);\n            nA.fromBufferAttribute(normalAttribute, vA);\n            nB.fromBufferAttribute(normalAttribute, vB);\n            nC.fromBufferAttribute(normalAttribute, vC);\n            nA.add(cb);\n            nB.add(cb);\n            nC.add(cb);\n            normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);\n            normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);\n            normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);\n          }\n        } else {\n          // non-indexed elements (unconnected triangle soup)\n          for (let i = 0, il = positionAttribute.count; i < il; i += 3) {\n            pA.fromBufferAttribute(positionAttribute, i + 0);\n            pB.fromBufferAttribute(positionAttribute, i + 1);\n            pC.fromBufferAttribute(positionAttribute, i + 2);\n            cb.subVectors(pC, pB);\n            ab.subVectors(pA, pB);\n            cb.cross(ab);\n            normalAttribute.setXYZ(i + 0, cb.x, cb.y, cb.z);\n            normalAttribute.setXYZ(i + 1, cb.x, cb.y, cb.z);\n            normalAttribute.setXYZ(i + 2, cb.x, cb.y, cb.z);\n          }\n        }\n\n        this.normalizeNormals();\n        normalAttribute.needsUpdate = true;\n      }\n    }\n\n    merge(geometry, offset) {\n      if (!(geometry && geometry.isBufferGeometry)) {\n        console.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry);\n        return;\n      }\n\n      if (offset === undefined) {\n        offset = 0;\n        console.warn('THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. ' + 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.');\n      }\n\n      const attributes = this.attributes;\n\n      for (const key in attributes) {\n        if (geometry.attributes[key] === undefined) continue;\n        const attribute1 = attributes[key];\n        const attributeArray1 = attribute1.array;\n        const attribute2 = geometry.attributes[key];\n        const attributeArray2 = attribute2.array;\n        const attributeOffset = attribute2.itemSize * offset;\n        const length = Math.min(attributeArray2.length, attributeArray1.length - attributeOffset);\n\n        for (let i = 0, j = attributeOffset; i < length; i++, j++) {\n          attributeArray1[j] = attributeArray2[i];\n        }\n      }\n\n      return this;\n    }\n\n    normalizeNormals() {\n      const normals = this.attributes.normal;\n\n      for (let i = 0, il = normals.count; i < il; i++) {\n        _vector$8.fromBufferAttribute(normals, i);\n\n        _vector$8.normalize();\n\n        normals.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);\n      }\n    }\n\n    toNonIndexed() {\n      function convertBufferAttribute(attribute, indices) {\n        const array = attribute.array;\n        const itemSize = attribute.itemSize;\n        const normalized = attribute.normalized;\n        const array2 = new array.constructor(indices.length * itemSize);\n        let index = 0,\n            index2 = 0;\n\n        for (let i = 0, l = indices.length; i < l; i++) {\n          if (attribute.isInterleavedBufferAttribute) {\n            index = indices[i] * attribute.data.stride + attribute.offset;\n          } else {\n            index = indices[i] * itemSize;\n          }\n\n          for (let j = 0; j < itemSize; j++) {\n            array2[index2++] = array[index++];\n          }\n        }\n\n        return new BufferAttribute(array2, itemSize, normalized);\n      } //\n\n\n      if (this.index === null) {\n        console.warn('THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.');\n        return this;\n      }\n\n      const geometry2 = new BufferGeometry();\n      const indices = this.index.array;\n      const attributes = this.attributes; // attributes\n\n      for (const name in attributes) {\n        const attribute = attributes[name];\n        const newAttribute = convertBufferAttribute(attribute, indices);\n        geometry2.setAttribute(name, newAttribute);\n      } // morph attributes\n\n\n      const morphAttributes = this.morphAttributes;\n\n      for (const name in morphAttributes) {\n        const morphArray = [];\n        const morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes\n\n        for (let i = 0, il = morphAttribute.length; i < il; i++) {\n          const attribute = morphAttribute[i];\n          const newAttribute = convertBufferAttribute(attribute, indices);\n          morphArray.push(newAttribute);\n        }\n\n        geometry2.morphAttributes[name] = morphArray;\n      }\n\n      geometry2.morphTargetsRelative = this.morphTargetsRelative; // groups\n\n      const groups = this.groups;\n\n      for (let i = 0, l = groups.length; i < l; i++) {\n        const group = groups[i];\n        geometry2.addGroup(group.start, group.count, group.materialIndex);\n      }\n\n      return geometry2;\n    }\n\n    toJSON() {\n      const data = {\n        metadata: {\n          version: 4.5,\n          type: 'BufferGeometry',\n          generator: 'BufferGeometry.toJSON'\n        }\n      }; // standard BufferGeometry serialization\n\n      data.uuid = this.uuid;\n      data.type = this.type;\n      if (this.name !== '') data.name = this.name;\n      if (Object.keys(this.userData).length > 0) data.userData = this.userData;\n\n      if (this.parameters !== undefined) {\n        const parameters = this.parameters;\n\n        for (const key in parameters) {\n          if (parameters[key] !== undefined) data[key] = parameters[key];\n        }\n\n        return data;\n      } // for simplicity the code assumes attributes are not shared across geometries, see #15811\n\n\n      data.data = {\n        attributes: {}\n      };\n      const index = this.index;\n\n      if (index !== null) {\n        data.data.index = {\n          type: index.array.constructor.name,\n          array: Array.prototype.slice.call(index.array)\n        };\n      }\n\n      const attributes = this.attributes;\n\n      for (const key in attributes) {\n        const attribute = attributes[key];\n        data.data.attributes[key] = attribute.toJSON(data.data);\n      }\n\n      const morphAttributes = {};\n      let hasMorphAttributes = false;\n\n      for (const key in this.morphAttributes) {\n        const attributeArray = this.morphAttributes[key];\n        const array = [];\n\n        for (let i = 0, il = attributeArray.length; i < il; i++) {\n          const attribute = attributeArray[i];\n          array.push(attribute.toJSON(data.data));\n        }\n\n        if (array.length > 0) {\n          morphAttributes[key] = array;\n          hasMorphAttributes = true;\n        }\n      }\n\n      if (hasMorphAttributes) {\n        data.data.morphAttributes = morphAttributes;\n        data.data.morphTargetsRelative = this.morphTargetsRelative;\n      }\n\n      const groups = this.groups;\n\n      if (groups.length > 0) {\n        data.data.groups = JSON.parse(JSON.stringify(groups));\n      }\n\n      const boundingSphere = this.boundingSphere;\n\n      if (boundingSphere !== null) {\n        data.data.boundingSphere = {\n          center: boundingSphere.center.toArray(),\n          radius: boundingSphere.radius\n        };\n      }\n\n      return data;\n    }\n\n    clone() {\n      return new this.constructor().copy(this);\n    }\n\n    copy(source) {\n      // reset\n      this.index = null;\n      this.attributes = {};\n      this.morphAttributes = {};\n      this.groups = [];\n      this.boundingBox = null;\n      this.boundingSphere = null; // used for storing cloned, shared data\n\n      const data = {}; // name\n\n      this.name = source.name; // index\n\n      const index = source.index;\n\n      if (index !== null) {\n        this.setIndex(index.clone(data));\n      } // attributes\n\n\n      const attributes = source.attributes;\n\n      for (const name in attributes) {\n        const attribute = attributes[name];\n        this.setAttribute(name, attribute.clone(data));\n      } // morph attributes\n\n\n      const morphAttributes = source.morphAttributes;\n\n      for (const name in morphAttributes) {\n        const array = [];\n        const morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes\n\n        for (let i = 0, l = morphAttribute.length; i < l; i++) {\n          array.push(morphAttribute[i].clone(data));\n        }\n\n        this.morphAttributes[name] = array;\n      }\n\n      this.morphTargetsRelative = source.morphTargetsRelative; // groups\n\n      const groups = source.groups;\n\n      for (let i = 0, l = groups.length; i < l; i++) {\n        const group = groups[i];\n        this.addGroup(group.start, group.count, group.materialIndex);\n      } // bounding box\n\n\n      const boundingBox = source.boundingBox;\n\n      if (boundingBox !== null) {\n        this.boundingBox = boundingBox.clone();\n      } // bounding sphere\n\n\n      const boundingSphere = source.boundingSphere;\n\n      if (boundingSphere !== null) {\n        this.boundingSphere = boundingSphere.clone();\n      } // draw range\n\n\n      this.drawRange.start = source.drawRange.start;\n      this.drawRange.count = source.drawRange.count; // user data\n\n      this.userData = source.userData; // geometry generator parameters\n\n      if (source.parameters !== undefined) this.parameters = Object.assign({}, source.parameters);\n      return this;\n    }\n\n    dispose() {\n      this.dispatchEvent({\n        type: 'dispose'\n      });\n    }\n\n  }\n\n  BufferGeometry.prototype.isBufferGeometry = true;\n\n  const _inverseMatrix$2 = /*@__PURE__*/new Matrix4();\n\n  const _ray$2 = /*@__PURE__*/new Ray();\n\n  const _sphere$3 = /*@__PURE__*/new Sphere();\n\n  const _vA$1 = /*@__PURE__*/new Vector3();\n\n  const _vB$1 = /*@__PURE__*/new Vector3();\n\n  const _vC$1 = /*@__PURE__*/new Vector3();\n\n  const _tempA = /*@__PURE__*/new Vector3();\n\n  const _tempB = /*@__PURE__*/new Vector3();\n\n  const _tempC = /*@__PURE__*/new Vector3();\n\n  const _morphA = /*@__PURE__*/new Vector3();\n\n  const _morphB = /*@__PURE__*/new Vector3();\n\n  const _morphC = /*@__PURE__*/new Vector3();\n\n  const _uvA$1 = /*@__PURE__*/new Vector2();\n\n  const _uvB$1 = /*@__PURE__*/new Vector2();\n\n  const _uvC$1 = /*@__PURE__*/new Vector2();\n\n  const _intersectionPoint = /*@__PURE__*/new Vector3();\n\n  const _intersectionPointWorld = /*@__PURE__*/new Vector3();\n\n  class Mesh extends Object3D {\n    constructor() {\n      let geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new BufferGeometry();\n      let material = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new MeshBasicMaterial();\n      super();\n      this.type = 'Mesh';\n      this.geometry = geometry;\n      this.material = material;\n      this.updateMorphTargets();\n    }\n\n    copy(source) {\n      super.copy(source);\n\n      if (source.morphTargetInfluences !== undefined) {\n        this.morphTargetInfluences = source.morphTargetInfluences.slice();\n      }\n\n      if (source.morphTargetDictionary !== undefined) {\n        this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);\n      }\n\n      this.material = source.material;\n      this.geometry = source.geometry;\n      return this;\n    }\n\n    updateMorphTargets() {\n      const geometry = this.geometry;\n\n      if (geometry.isBufferGeometry) {\n        const morphAttributes = geometry.morphAttributes;\n        const keys = Object.keys(morphAttributes);\n\n        if (keys.length > 0) {\n          const morphAttribute = morphAttributes[keys[0]];\n\n          if (morphAttribute !== undefined) {\n            this.morphTargetInfluences = [];\n            this.morphTargetDictionary = {};\n\n            for (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n              const name = morphAttribute[m].name || String(m);\n              this.morphTargetInfluences.push(0);\n              this.morphTargetDictionary[name] = m;\n            }\n          }\n        }\n      } else {\n        const morphTargets = geometry.morphTargets;\n\n        if (morphTargets !== undefined && morphTargets.length > 0) {\n          console.error('THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n        }\n      }\n    }\n\n    raycast(raycaster, intersects) {\n      const geometry = this.geometry;\n      const material = this.material;\n      const matrixWorld = this.matrixWorld;\n      if (material === undefined) return; // Checking boundingSphere distance to ray\n\n      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n      _sphere$3.copy(geometry.boundingSphere);\n\n      _sphere$3.applyMatrix4(matrixWorld);\n\n      if (raycaster.ray.intersectsSphere(_sphere$3) === false) return; //\n\n      _inverseMatrix$2.copy(matrixWorld).invert();\n\n      _ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2); // Check boundingBox before continuing\n\n\n      if (geometry.boundingBox !== null) {\n        if (_ray$2.intersectsBox(geometry.boundingBox) === false) return;\n      }\n\n      let intersection;\n\n      if (geometry.isBufferGeometry) {\n        const index = geometry.index;\n        const position = geometry.attributes.position;\n        const morphPosition = geometry.morphAttributes.position;\n        const morphTargetsRelative = geometry.morphTargetsRelative;\n        const uv = geometry.attributes.uv;\n        const uv2 = geometry.attributes.uv2;\n        const groups = geometry.groups;\n        const drawRange = geometry.drawRange;\n\n        if (index !== null) {\n          // indexed buffer geometry\n          if (Array.isArray(material)) {\n            for (let i = 0, il = groups.length; i < il; i++) {\n              const group = groups[i];\n              const groupMaterial = material[group.materialIndex];\n              const start = Math.max(group.start, drawRange.start);\n              const end = Math.min(index.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));\n\n              for (let j = start, jl = end; j < jl; j += 3) {\n                const a = index.getX(j);\n                const b = index.getX(j + 1);\n                const c = index.getX(j + 2);\n                intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n                if (intersection) {\n                  intersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics\n\n                  intersection.face.materialIndex = group.materialIndex;\n                  intersects.push(intersection);\n                }\n              }\n            }\n          } else {\n            const start = Math.max(0, drawRange.start);\n            const end = Math.min(index.count, drawRange.start + drawRange.count);\n\n            for (let i = start, il = end; i < il; i += 3) {\n              const a = index.getX(i);\n              const b = index.getX(i + 1);\n              const c = index.getX(i + 2);\n              intersection = checkBufferGeometryIntersection(this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n              if (intersection) {\n                intersection.faceIndex = Math.floor(i / 3); // triangle number in indexed buffer semantics\n\n                intersects.push(intersection);\n              }\n            }\n          }\n        } else if (position !== undefined) {\n          // non-indexed buffer geometry\n          if (Array.isArray(material)) {\n            for (let i = 0, il = groups.length; i < il; i++) {\n              const group = groups[i];\n              const groupMaterial = material[group.materialIndex];\n              const start = Math.max(group.start, drawRange.start);\n              const end = Math.min(position.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));\n\n              for (let j = start, jl = end; j < jl; j += 3) {\n                const a = j;\n                const b = j + 1;\n                const c = j + 2;\n                intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n                if (intersection) {\n                  intersection.faceIndex = Math.floor(j / 3); // triangle number in non-indexed buffer semantics\n\n                  intersection.face.materialIndex = group.materialIndex;\n                  intersects.push(intersection);\n                }\n              }\n            }\n          } else {\n            const start = Math.max(0, drawRange.start);\n            const end = Math.min(position.count, drawRange.start + drawRange.count);\n\n            for (let i = start, il = end; i < il; i += 3) {\n              const a = i;\n              const b = i + 1;\n              const c = i + 2;\n              intersection = checkBufferGeometryIntersection(this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n              if (intersection) {\n                intersection.faceIndex = Math.floor(i / 3); // triangle number in non-indexed buffer semantics\n\n                intersects.push(intersection);\n              }\n            }\n          }\n        }\n      } else if (geometry.isGeometry) {\n        console.error('THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n      }\n    }\n\n  }\n\n  Mesh.prototype.isMesh = true;\n\n  function checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {\n    let intersect;\n\n    if (material.side === BackSide) {\n      intersect = ray.intersectTriangle(pC, pB, pA, true, point);\n    } else {\n      intersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);\n    }\n\n    if (intersect === null) return null;\n\n    _intersectionPointWorld.copy(point);\n\n    _intersectionPointWorld.applyMatrix4(object.matrixWorld);\n\n    const distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);\n    if (distance < raycaster.near || distance > raycaster.far) return null;\n    return {\n      distance: distance,\n      point: _intersectionPointWorld.clone(),\n      object: object\n    };\n  }\n\n  function checkBufferGeometryIntersection(object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c) {\n    _vA$1.fromBufferAttribute(position, a);\n\n    _vB$1.fromBufferAttribute(position, b);\n\n    _vC$1.fromBufferAttribute(position, c);\n\n    const morphInfluences = object.morphTargetInfluences;\n\n    if (morphPosition && morphInfluences) {\n      _morphA.set(0, 0, 0);\n\n      _morphB.set(0, 0, 0);\n\n      _morphC.set(0, 0, 0);\n\n      for (let i = 0, il = morphPosition.length; i < il; i++) {\n        const influence = morphInfluences[i];\n        const morphAttribute = morphPosition[i];\n        if (influence === 0) continue;\n\n        _tempA.fromBufferAttribute(morphAttribute, a);\n\n        _tempB.fromBufferAttribute(morphAttribute, b);\n\n        _tempC.fromBufferAttribute(morphAttribute, c);\n\n        if (morphTargetsRelative) {\n          _morphA.addScaledVector(_tempA, influence);\n\n          _morphB.addScaledVector(_tempB, influence);\n\n          _morphC.addScaledVector(_tempC, influence);\n        } else {\n          _morphA.addScaledVector(_tempA.sub(_vA$1), influence);\n\n          _morphB.addScaledVector(_tempB.sub(_vB$1), influence);\n\n          _morphC.addScaledVector(_tempC.sub(_vC$1), influence);\n        }\n      }\n\n      _vA$1.add(_morphA);\n\n      _vB$1.add(_morphB);\n\n      _vC$1.add(_morphC);\n    }\n\n    if (object.isSkinnedMesh) {\n      object.boneTransform(a, _vA$1);\n      object.boneTransform(b, _vB$1);\n      object.boneTransform(c, _vC$1);\n    }\n\n    const intersection = checkIntersection(object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);\n\n    if (intersection) {\n      if (uv) {\n        _uvA$1.fromBufferAttribute(uv, a);\n\n        _uvB$1.fromBufferAttribute(uv, b);\n\n        _uvC$1.fromBufferAttribute(uv, c);\n\n        intersection.uv = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());\n      }\n\n      if (uv2) {\n        _uvA$1.fromBufferAttribute(uv2, a);\n\n        _uvB$1.fromBufferAttribute(uv2, b);\n\n        _uvC$1.fromBufferAttribute(uv2, c);\n\n        intersection.uv2 = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());\n      }\n\n      const face = {\n        a: a,\n        b: b,\n        c: c,\n        normal: new Vector3(),\n        materialIndex: 0\n      };\n      Triangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);\n      intersection.face = face;\n    }\n\n    return intersection;\n  }\n\n  class BoxGeometry extends BufferGeometry {\n    constructor() {\n      let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      let widthSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      let heightSegments = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n      let depthSegments = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n      super();\n      this.type = 'BoxGeometry';\n      this.parameters = {\n        width: width,\n        height: height,\n        depth: depth,\n        widthSegments: widthSegments,\n        heightSegments: heightSegments,\n        depthSegments: depthSegments\n      };\n      const scope = this; // segments\n\n      widthSegments = Math.floor(widthSegments);\n      heightSegments = Math.floor(heightSegments);\n      depthSegments = Math.floor(depthSegments); // buffers\n\n      const indices = [];\n      const vertices = [];\n      const normals = [];\n      const uvs = []; // helper variables\n\n      let numberOfVertices = 0;\n      let groupStart = 0; // build each side of the box geometry\n\n      buildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px\n\n      buildPlane('z', 'y', 'x', 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx\n\n      buildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py\n\n      buildPlane('x', 'z', 'y', 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny\n\n      buildPlane('x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz\n\n      buildPlane('x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz\n      // build geometry\n\n      this.setIndex(indices);\n      this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n      function buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {\n        const segmentWidth = width / gridX;\n        const segmentHeight = height / gridY;\n        const widthHalf = width / 2;\n        const heightHalf = height / 2;\n        const depthHalf = depth / 2;\n        const gridX1 = gridX + 1;\n        const gridY1 = gridY + 1;\n        let vertexCounter = 0;\n        let groupCount = 0;\n        const vector = new Vector3(); // generate vertices, normals and uvs\n\n        for (let iy = 0; iy < gridY1; iy++) {\n          const y = iy * segmentHeight - heightHalf;\n\n          for (let ix = 0; ix < gridX1; ix++) {\n            const x = ix * segmentWidth - widthHalf; // set values to correct vector component\n\n            vector[u] = x * udir;\n            vector[v] = y * vdir;\n            vector[w] = depthHalf; // now apply vector to vertex buffer\n\n            vertices.push(vector.x, vector.y, vector.z); // set values to correct vector component\n\n            vector[u] = 0;\n            vector[v] = 0;\n            vector[w] = depth > 0 ? 1 : -1; // now apply vector to normal buffer\n\n            normals.push(vector.x, vector.y, vector.z); // uvs\n\n            uvs.push(ix / gridX);\n            uvs.push(1 - iy / gridY); // counters\n\n            vertexCounter += 1;\n          }\n        } // indices\n        // 1. you need three indices to draw a single face\n        // 2. a single segment consists of two faces\n        // 3. so we need to generate six (2*3) indices per segment\n\n\n        for (let iy = 0; iy < gridY; iy++) {\n          for (let ix = 0; ix < gridX; ix++) {\n            const a = numberOfVertices + ix + gridX1 * iy;\n            const b = numberOfVertices + ix + gridX1 * (iy + 1);\n            const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);\n            const d = numberOfVertices + (ix + 1) + gridX1 * iy; // faces\n\n            indices.push(a, b, d);\n            indices.push(b, c, d); // increase counter\n\n            groupCount += 6;\n          }\n        } // add a group to the geometry. this will ensure multi material support\n\n\n        scope.addGroup(groupStart, groupCount, materialIndex); // calculate new start value for groups\n\n        groupStart += groupCount; // update total number of vertices\n\n        numberOfVertices += vertexCounter;\n      }\n    }\n\n    static fromJSON(data) {\n      return new BoxGeometry(data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);\n    }\n\n  }\n  /**\n   * Uniform Utilities\n   */\n\n\n  function cloneUniforms(src) {\n    const dst = {};\n\n    for (const u in src) {\n      dst[u] = {};\n\n      for (const p in src[u]) {\n        const property = src[u][p];\n\n        if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {\n          dst[u][p] = property.clone();\n        } else if (Array.isArray(property)) {\n          dst[u][p] = property.slice();\n        } else {\n          dst[u][p] = property;\n        }\n      }\n    }\n\n    return dst;\n  }\n\n  function mergeUniforms(uniforms) {\n    const merged = {};\n\n    for (let u = 0; u < uniforms.length; u++) {\n      const tmp = cloneUniforms(uniforms[u]);\n\n      for (const p in tmp) {\n        merged[p] = tmp[p];\n      }\n    }\n\n    return merged;\n  } // Legacy\n\n\n  const UniformsUtils = {\n    clone: cloneUniforms,\n    merge: mergeUniforms\n  };\n  var default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n  var default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n  /**\n   * parameters = {\n   *\tdefines: { \"label\" : \"value\" },\n   *\tuniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n   *\n   *\tfragmentShader: <string>,\n   *\tvertexShader: <string>,\n   *\n   *\twireframe: <boolean>,\n   *\twireframeLinewidth: <float>,\n   *\n   *\tlights: <bool>\n   * }\n   */\n\n  class ShaderMaterial extends Material {\n    constructor(parameters) {\n      super();\n      this.type = 'ShaderMaterial';\n      this.defines = {};\n      this.uniforms = {};\n      this.vertexShader = default_vertex;\n      this.fragmentShader = default_fragment;\n      this.linewidth = 1;\n      this.wireframe = false;\n      this.wireframeLinewidth = 1;\n      this.fog = false; // set to use scene fog\n\n      this.lights = false; // set to use scene lights\n\n      this.clipping = false; // set to use user-defined clipping planes\n\n      this.extensions = {\n        derivatives: false,\n        // set to use derivatives\n        fragDepth: false,\n        // set to use fragment depth values\n        drawBuffers: false,\n        // set to use draw buffers\n        shaderTextureLOD: false // set to use shader texture LOD\n\n      }; // When rendered geometry doesn't include these attributes but the material does,\n      // use these default values in WebGL. This avoids errors when buffer data is missing.\n\n      this.defaultAttributeValues = {\n        'color': [1, 1, 1],\n        'uv': [0, 0],\n        'uv2': [0, 0]\n      };\n      this.index0AttributeName = undefined;\n      this.uniformsNeedUpdate = false;\n      this.glslVersion = null;\n\n      if (parameters !== undefined) {\n        if (parameters.attributes !== undefined) {\n          console.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');\n        }\n\n        this.setValues(parameters);\n      }\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.fragmentShader = source.fragmentShader;\n      this.vertexShader = source.vertexShader;\n      this.uniforms = cloneUniforms(source.uniforms);\n      this.defines = Object.assign({}, source.defines);\n      this.wireframe = source.wireframe;\n      this.wireframeLinewidth = source.wireframeLinewidth;\n      this.lights = source.lights;\n      this.clipping = source.clipping;\n      this.extensions = Object.assign({}, source.extensions);\n      this.glslVersion = source.glslVersion;\n      return this;\n    }\n\n    toJSON(meta) {\n      const data = super.toJSON(meta);\n      data.glslVersion = this.glslVersion;\n      data.uniforms = {};\n\n      for (const name in this.uniforms) {\n        const uniform = this.uniforms[name];\n        const value = uniform.value;\n\n        if (value && value.isTexture) {\n          data.uniforms[name] = {\n            type: 't',\n            value: value.toJSON(meta).uuid\n          };\n        } else if (value && value.isColor) {\n          data.uniforms[name] = {\n            type: 'c',\n            value: value.getHex()\n          };\n        } else if (value && value.isVector2) {\n          data.uniforms[name] = {\n            type: 'v2',\n            value: value.toArray()\n          };\n        } else if (value && value.isVector3) {\n          data.uniforms[name] = {\n            type: 'v3',\n            value: value.toArray()\n          };\n        } else if (value && value.isVector4) {\n          data.uniforms[name] = {\n            type: 'v4',\n            value: value.toArray()\n          };\n        } else if (value && value.isMatrix3) {\n          data.uniforms[name] = {\n            type: 'm3',\n            value: value.toArray()\n          };\n        } else if (value && value.isMatrix4) {\n          data.uniforms[name] = {\n            type: 'm4',\n            value: value.toArray()\n          };\n        } else {\n          data.uniforms[name] = {\n            value: value\n          }; // note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n        }\n      }\n\n      if (Object.keys(this.defines).length > 0) data.defines = this.defines;\n      data.vertexShader = this.vertexShader;\n      data.fragmentShader = this.fragmentShader;\n      const extensions = {};\n\n      for (const key in this.extensions) {\n        if (this.extensions[key] === true) extensions[key] = true;\n      }\n\n      if (Object.keys(extensions).length > 0) data.extensions = extensions;\n      return data;\n    }\n\n  }\n\n  ShaderMaterial.prototype.isShaderMaterial = true;\n\n  class Camera extends Object3D {\n    constructor() {\n      super();\n      this.type = 'Camera';\n      this.matrixWorldInverse = new Matrix4();\n      this.projectionMatrix = new Matrix4();\n      this.projectionMatrixInverse = new Matrix4();\n    }\n\n    copy(source, recursive) {\n      super.copy(source, recursive);\n      this.matrixWorldInverse.copy(source.matrixWorldInverse);\n      this.projectionMatrix.copy(source.projectionMatrix);\n      this.projectionMatrixInverse.copy(source.projectionMatrixInverse);\n      return this;\n    }\n\n    getWorldDirection(target) {\n      this.updateWorldMatrix(true, false);\n      const e = this.matrixWorld.elements;\n      return target.set(-e[8], -e[9], -e[10]).normalize();\n    }\n\n    updateMatrixWorld(force) {\n      super.updateMatrixWorld(force);\n      this.matrixWorldInverse.copy(this.matrixWorld).invert();\n    }\n\n    updateWorldMatrix(updateParents, updateChildren) {\n      super.updateWorldMatrix(updateParents, updateChildren);\n      this.matrixWorldInverse.copy(this.matrixWorld).invert();\n    }\n\n    clone() {\n      return new this.constructor().copy(this);\n    }\n\n  }\n\n  Camera.prototype.isCamera = true;\n\n  class PerspectiveCamera extends Camera {\n    constructor() {\n      let fov = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n      let aspect = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      let near = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.1;\n      let far = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2000;\n      super();\n      this.type = 'PerspectiveCamera';\n      this.fov = fov;\n      this.zoom = 1;\n      this.near = near;\n      this.far = far;\n      this.focus = 10;\n      this.aspect = aspect;\n      this.view = null;\n      this.filmGauge = 35; // width of the film (default in millimeters)\n\n      this.filmOffset = 0; // horizontal film offset (same unit as gauge)\n\n      this.updateProjectionMatrix();\n    }\n\n    copy(source, recursive) {\n      super.copy(source, recursive);\n      this.fov = source.fov;\n      this.zoom = source.zoom;\n      this.near = source.near;\n      this.far = source.far;\n      this.focus = source.focus;\n      this.aspect = source.aspect;\n      this.view = source.view === null ? null : Object.assign({}, source.view);\n      this.filmGauge = source.filmGauge;\n      this.filmOffset = source.filmOffset;\n      return this;\n    }\n    /**\n     * Sets the FOV by focal length in respect to the current .filmGauge.\n     *\n     * The default film gauge is 35, so that the focal length can be specified for\n     * a 35mm (full frame) camera.\n     *\n     * Values for focal length and film gauge must have the same unit.\n     */\n\n\n    setFocalLength(focalLength) {\n      /** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\n      const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n      this.fov = RAD2DEG * 2 * Math.atan(vExtentSlope);\n      this.updateProjectionMatrix();\n    }\n    /**\n     * Calculates the focal length from the current .fov and .filmGauge.\n     */\n\n\n    getFocalLength() {\n      const vExtentSlope = Math.tan(DEG2RAD * 0.5 * this.fov);\n      return 0.5 * this.getFilmHeight() / vExtentSlope;\n    }\n\n    getEffectiveFOV() {\n      return RAD2DEG * 2 * Math.atan(Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom);\n    }\n\n    getFilmWidth() {\n      // film not completely covered in portrait format (aspect < 1)\n      return this.filmGauge * Math.min(this.aspect, 1);\n    }\n\n    getFilmHeight() {\n      // film not completely covered in landscape format (aspect > 1)\n      return this.filmGauge / Math.max(this.aspect, 1);\n    }\n    /**\n     * Sets an offset in a larger frustum. This is useful for multi-window or\n     * multi-monitor/multi-machine setups.\n     *\n     * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n     * the monitors are in grid like this\n     *\n     *\t +---+---+---+\n     *\t | A | B | C |\n     *\t +---+---+---+\n     *\t | D | E | F |\n     *\t +---+---+---+\n     *\n     * then for each monitor you would call it like this\n     *\n     *\t const w = 1920;\n     *\t const h = 1080;\n     *\t const fullWidth = w * 3;\n     *\t const fullHeight = h * 2;\n     *\n     *\t --A--\n     *\t camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n     *\t --B--\n     *\t camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n     *\t --C--\n     *\t camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n     *\t --D--\n     *\t camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n     *\t --E--\n     *\t camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n     *\t --F--\n     *\t camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n     *\n     *\t Note there is no reason monitors have to be the same size or in a grid.\n     */\n\n\n    setViewOffset(fullWidth, fullHeight, x, y, width, height) {\n      this.aspect = fullWidth / fullHeight;\n\n      if (this.view === null) {\n        this.view = {\n          enabled: true,\n          fullWidth: 1,\n          fullHeight: 1,\n          offsetX: 0,\n          offsetY: 0,\n          width: 1,\n          height: 1\n        };\n      }\n\n      this.view.enabled = true;\n      this.view.fullWidth = fullWidth;\n      this.view.fullHeight = fullHeight;\n      this.view.offsetX = x;\n      this.view.offsetY = y;\n      this.view.width = width;\n      this.view.height = height;\n      this.updateProjectionMatrix();\n    }\n\n    clearViewOffset() {\n      if (this.view !== null) {\n        this.view.enabled = false;\n      }\n\n      this.updateProjectionMatrix();\n    }\n\n    updateProjectionMatrix() {\n      const near = this.near;\n      let top = near * Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom;\n      let height = 2 * top;\n      let width = this.aspect * height;\n      let left = -0.5 * width;\n      const view = this.view;\n\n      if (this.view !== null && this.view.enabled) {\n        const fullWidth = view.fullWidth,\n              fullHeight = view.fullHeight;\n        left += view.offsetX * width / fullWidth;\n        top -= view.offsetY * height / fullHeight;\n        width *= view.width / fullWidth;\n        height *= view.height / fullHeight;\n      }\n\n      const skew = this.filmOffset;\n      if (skew !== 0) left += near * skew / this.getFilmWidth();\n      this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);\n      this.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n    }\n\n    toJSON(meta) {\n      const data = super.toJSON(meta);\n      data.object.fov = this.fov;\n      data.object.zoom = this.zoom;\n      data.object.near = this.near;\n      data.object.far = this.far;\n      data.object.focus = this.focus;\n      data.object.aspect = this.aspect;\n      if (this.view !== null) data.object.view = Object.assign({}, this.view);\n      data.object.filmGauge = this.filmGauge;\n      data.object.filmOffset = this.filmOffset;\n      return data;\n    }\n\n  }\n\n  PerspectiveCamera.prototype.isPerspectiveCamera = true;\n  const fov = 90,\n        aspect = 1;\n\n  class CubeCamera extends Object3D {\n    constructor(near, far, renderTarget) {\n      super();\n      this.type = 'CubeCamera';\n\n      if (renderTarget.isWebGLCubeRenderTarget !== true) {\n        console.error('THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.');\n        return;\n      }\n\n      this.renderTarget = renderTarget;\n      const cameraPX = new PerspectiveCamera(fov, aspect, near, far);\n      cameraPX.layers = this.layers;\n      cameraPX.up.set(0, -1, 0);\n      cameraPX.lookAt(new Vector3(1, 0, 0));\n      this.add(cameraPX);\n      const cameraNX = new PerspectiveCamera(fov, aspect, near, far);\n      cameraNX.layers = this.layers;\n      cameraNX.up.set(0, -1, 0);\n      cameraNX.lookAt(new Vector3(-1, 0, 0));\n      this.add(cameraNX);\n      const cameraPY = new PerspectiveCamera(fov, aspect, near, far);\n      cameraPY.layers = this.layers;\n      cameraPY.up.set(0, 0, 1);\n      cameraPY.lookAt(new Vector3(0, 1, 0));\n      this.add(cameraPY);\n      const cameraNY = new PerspectiveCamera(fov, aspect, near, far);\n      cameraNY.layers = this.layers;\n      cameraNY.up.set(0, 0, -1);\n      cameraNY.lookAt(new Vector3(0, -1, 0));\n      this.add(cameraNY);\n      const cameraPZ = new PerspectiveCamera(fov, aspect, near, far);\n      cameraPZ.layers = this.layers;\n      cameraPZ.up.set(0, -1, 0);\n      cameraPZ.lookAt(new Vector3(0, 0, 1));\n      this.add(cameraPZ);\n      const cameraNZ = new PerspectiveCamera(fov, aspect, near, far);\n      cameraNZ.layers = this.layers;\n      cameraNZ.up.set(0, -1, 0);\n      cameraNZ.lookAt(new Vector3(0, 0, -1));\n      this.add(cameraNZ);\n    }\n\n    update(renderer, scene) {\n      if (this.parent === null) this.updateMatrixWorld();\n      const renderTarget = this.renderTarget;\n      const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = this.children;\n      const currentXrEnabled = renderer.xr.enabled;\n      const currentRenderTarget = renderer.getRenderTarget();\n      renderer.xr.enabled = false;\n      const generateMipmaps = renderTarget.texture.generateMipmaps;\n      renderTarget.texture.generateMipmaps = false;\n      renderer.setRenderTarget(renderTarget, 0);\n      renderer.render(scene, cameraPX);\n      renderer.setRenderTarget(renderTarget, 1);\n      renderer.render(scene, cameraNX);\n      renderer.setRenderTarget(renderTarget, 2);\n      renderer.render(scene, cameraPY);\n      renderer.setRenderTarget(renderTarget, 3);\n      renderer.render(scene, cameraNY);\n      renderer.setRenderTarget(renderTarget, 4);\n      renderer.render(scene, cameraPZ);\n      renderTarget.texture.generateMipmaps = generateMipmaps;\n      renderer.setRenderTarget(renderTarget, 5);\n      renderer.render(scene, cameraNZ);\n      renderer.setRenderTarget(currentRenderTarget);\n      renderer.xr.enabled = currentXrEnabled;\n    }\n\n  }\n\n  class CubeTexture extends Texture {\n    constructor(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {\n      images = images !== undefined ? images : [];\n      mapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n      super(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n      this.flipY = false;\n    }\n\n    get images() {\n      return this.image;\n    }\n\n    set images(value) {\n      this.image = value;\n    }\n\n  }\n\n  CubeTexture.prototype.isCubeTexture = true;\n\n  class WebGLCubeRenderTarget extends WebGLRenderTarget {\n    constructor(size, options, dummy) {\n      if (Number.isInteger(options)) {\n        console.warn('THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )');\n        options = dummy;\n      }\n\n      super(size, size, options);\n      options = options || {}; // By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\n      // in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\n      // in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\n      // three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\n      // and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture\n      // as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).\n\n      this.texture = new CubeTexture(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n      this.texture.isRenderTargetTexture = true;\n      this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n      this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n      this.texture._needsFlipEnvMap = false;\n    }\n\n    fromEquirectangularTexture(renderer, texture) {\n      this.texture.type = texture.type;\n      this.texture.format = RGBAFormat; // see #18859\n\n      this.texture.encoding = texture.encoding;\n      this.texture.generateMipmaps = texture.generateMipmaps;\n      this.texture.minFilter = texture.minFilter;\n      this.texture.magFilter = texture.magFilter;\n      const shader = {\n        uniforms: {\n          tEquirect: {\n            value: null\n          }\n        },\n        vertexShader:\n        /* glsl */\n        `\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t`,\n        fragmentShader:\n        /* glsl */\n        `\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t`\n      };\n      const geometry = new BoxGeometry(5, 5, 5);\n      const material = new ShaderMaterial({\n        name: 'CubemapFromEquirect',\n        uniforms: cloneUniforms(shader.uniforms),\n        vertexShader: shader.vertexShader,\n        fragmentShader: shader.fragmentShader,\n        side: BackSide,\n        blending: NoBlending\n      });\n      material.uniforms.tEquirect.value = texture;\n      const mesh = new Mesh(geometry, material);\n      const currentMinFilter = texture.minFilter; // Avoid blurred poles\n\n      if (texture.minFilter === LinearMipmapLinearFilter) texture.minFilter = LinearFilter;\n      const camera = new CubeCamera(1, 10, this);\n      camera.update(renderer, mesh);\n      texture.minFilter = currentMinFilter;\n      mesh.geometry.dispose();\n      mesh.material.dispose();\n      return this;\n    }\n\n    clear(renderer, color, depth, stencil) {\n      const currentRenderTarget = renderer.getRenderTarget();\n\n      for (let i = 0; i < 6; i++) {\n        renderer.setRenderTarget(this, i);\n        renderer.clear(color, depth, stencil);\n      }\n\n      renderer.setRenderTarget(currentRenderTarget);\n    }\n\n  }\n\n  WebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;\n\n  const _vector1 = /*@__PURE__*/new Vector3();\n\n  const _vector2 = /*@__PURE__*/new Vector3();\n\n  const _normalMatrix = /*@__PURE__*/new Matrix3();\n\n  class Plane {\n    constructor() {\n      let normal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3(1, 0, 0);\n      let constant = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      // normal is assumed to be normalized\n      this.normal = normal;\n      this.constant = constant;\n    }\n\n    set(normal, constant) {\n      this.normal.copy(normal);\n      this.constant = constant;\n      return this;\n    }\n\n    setComponents(x, y, z, w) {\n      this.normal.set(x, y, z);\n      this.constant = w;\n      return this;\n    }\n\n    setFromNormalAndCoplanarPoint(normal, point) {\n      this.normal.copy(normal);\n      this.constant = -point.dot(this.normal);\n      return this;\n    }\n\n    setFromCoplanarPoints(a, b, c) {\n      const normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize(); // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\n      this.setFromNormalAndCoplanarPoint(normal, a);\n      return this;\n    }\n\n    copy(plane) {\n      this.normal.copy(plane.normal);\n      this.constant = plane.constant;\n      return this;\n    }\n\n    normalize() {\n      // Note: will lead to a divide by zero if the plane is invalid.\n      const inverseNormalLength = 1.0 / this.normal.length();\n      this.normal.multiplyScalar(inverseNormalLength);\n      this.constant *= inverseNormalLength;\n      return this;\n    }\n\n    negate() {\n      this.constant *= -1;\n      this.normal.negate();\n      return this;\n    }\n\n    distanceToPoint(point) {\n      return this.normal.dot(point) + this.constant;\n    }\n\n    distanceToSphere(sphere) {\n      return this.distanceToPoint(sphere.center) - sphere.radius;\n    }\n\n    projectPoint(point, target) {\n      return target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);\n    }\n\n    intersectLine(line, target) {\n      const direction = line.delta(_vector1);\n      const denominator = this.normal.dot(direction);\n\n      if (denominator === 0) {\n        // line is coplanar, return origin\n        if (this.distanceToPoint(line.start) === 0) {\n          return target.copy(line.start);\n        } // Unsure if this is the correct method to handle this case.\n\n\n        return null;\n      }\n\n      const t = -(line.start.dot(this.normal) + this.constant) / denominator;\n\n      if (t < 0 || t > 1) {\n        return null;\n      }\n\n      return target.copy(direction).multiplyScalar(t).add(line.start);\n    }\n\n    intersectsLine(line) {\n      // Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n      const startSign = this.distanceToPoint(line.start);\n      const endSign = this.distanceToPoint(line.end);\n      return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;\n    }\n\n    intersectsBox(box) {\n      return box.intersectsPlane(this);\n    }\n\n    intersectsSphere(sphere) {\n      return sphere.intersectsPlane(this);\n    }\n\n    coplanarPoint(target) {\n      return target.copy(this.normal).multiplyScalar(-this.constant);\n    }\n\n    applyMatrix4(matrix, optionalNormalMatrix) {\n      const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);\n\n      const referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);\n      const normal = this.normal.applyMatrix3(normalMatrix).normalize();\n      this.constant = -referencePoint.dot(normal);\n      return this;\n    }\n\n    translate(offset) {\n      this.constant -= offset.dot(this.normal);\n      return this;\n    }\n\n    equals(plane) {\n      return plane.normal.equals(this.normal) && plane.constant === this.constant;\n    }\n\n    clone() {\n      return new this.constructor().copy(this);\n    }\n\n  }\n\n  Plane.prototype.isPlane = true;\n\n  const _sphere$2 = /*@__PURE__*/new Sphere();\n\n  const _vector$7 = /*@__PURE__*/new Vector3();\n\n  class Frustum {\n    constructor() {\n      let p0 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Plane();\n      let p1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Plane();\n      let p2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Plane();\n      let p3 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Plane();\n      let p4 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new Plane();\n      let p5 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new Plane();\n      this.planes = [p0, p1, p2, p3, p4, p5];\n    }\n\n    set(p0, p1, p2, p3, p4, p5) {\n      const planes = this.planes;\n      planes[0].copy(p0);\n      planes[1].copy(p1);\n      planes[2].copy(p2);\n      planes[3].copy(p3);\n      planes[4].copy(p4);\n      planes[5].copy(p5);\n      return this;\n    }\n\n    copy(frustum) {\n      const planes = this.planes;\n\n      for (let i = 0; i < 6; i++) {\n        planes[i].copy(frustum.planes[i]);\n      }\n\n      return this;\n    }\n\n    setFromProjectionMatrix(m) {\n      const planes = this.planes;\n      const me = m.elements;\n      const me0 = me[0],\n            me1 = me[1],\n            me2 = me[2],\n            me3 = me[3];\n      const me4 = me[4],\n            me5 = me[5],\n            me6 = me[6],\n            me7 = me[7];\n      const me8 = me[8],\n            me9 = me[9],\n            me10 = me[10],\n            me11 = me[11];\n      const me12 = me[12],\n            me13 = me[13],\n            me14 = me[14],\n            me15 = me[15];\n      planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();\n      planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();\n      planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();\n      planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();\n      planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();\n      planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();\n      return this;\n    }\n\n    intersectsObject(object) {\n      const geometry = object.geometry;\n      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n      _sphere$2.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);\n\n      return this.intersectsSphere(_sphere$2);\n    }\n\n    intersectsSprite(sprite) {\n      _sphere$2.center.set(0, 0, 0);\n\n      _sphere$2.radius = 0.7071067811865476;\n\n      _sphere$2.applyMatrix4(sprite.matrixWorld);\n\n      return this.intersectsSphere(_sphere$2);\n    }\n\n    intersectsSphere(sphere) {\n      const planes = this.planes;\n      const center = sphere.center;\n      const negRadius = -sphere.radius;\n\n      for (let i = 0; i < 6; i++) {\n        const distance = planes[i].distanceToPoint(center);\n\n        if (distance < negRadius) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    intersectsBox(box) {\n      const planes = this.planes;\n\n      for (let i = 0; i < 6; i++) {\n        const plane = planes[i]; // corner at max distance\n\n        _vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n        _vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n        _vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n        if (plane.distanceToPoint(_vector$7) < 0) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    containsPoint(point) {\n      const planes = this.planes;\n\n      for (let i = 0; i < 6; i++) {\n        if (planes[i].distanceToPoint(point) < 0) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    clone() {\n      return new this.constructor().copy(this);\n    }\n\n  }\n\n  function WebGLAnimation() {\n    let context = null;\n    let isAnimating = false;\n    let animationLoop = null;\n    let requestId = null;\n\n    function onAnimationFrame(time, frame) {\n      animationLoop(time, frame);\n      requestId = context.requestAnimationFrame(onAnimationFrame);\n    }\n\n    return {\n      start: function () {\n        if (isAnimating === true) return;\n        if (animationLoop === null) return;\n        requestId = context.requestAnimationFrame(onAnimationFrame);\n        isAnimating = true;\n      },\n      stop: function () {\n        context.cancelAnimationFrame(requestId);\n        isAnimating = false;\n      },\n      setAnimationLoop: function (callback) {\n        animationLoop = callback;\n      },\n      setContext: function (value) {\n        context = value;\n      }\n    };\n  }\n\n  function WebGLAttributes(gl, capabilities) {\n    const isWebGL2 = capabilities.isWebGL2;\n    const buffers = new WeakMap();\n\n    function createBuffer(attribute, bufferType) {\n      const array = attribute.array;\n      const usage = attribute.usage;\n      const buffer = gl.createBuffer();\n      gl.bindBuffer(bufferType, buffer);\n      gl.bufferData(bufferType, array, usage);\n      attribute.onUploadCallback();\n      let type = gl.FLOAT;\n\n      if (array instanceof Float32Array) {\n        type = gl.FLOAT;\n      } else if (array instanceof Float64Array) {\n        console.warn('THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.');\n      } else if (array instanceof Uint16Array) {\n        if (attribute.isFloat16BufferAttribute) {\n          if (isWebGL2) {\n            type = gl.HALF_FLOAT;\n          } else {\n            console.warn('THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.');\n          }\n        } else {\n          type = gl.UNSIGNED_SHORT;\n        }\n      } else if (array instanceof Int16Array) {\n        type = gl.SHORT;\n      } else if (array instanceof Uint32Array) {\n        type = gl.UNSIGNED_INT;\n      } else if (array instanceof Int32Array) {\n        type = gl.INT;\n      } else if (array instanceof Int8Array) {\n        type = gl.BYTE;\n      } else if (array instanceof Uint8Array) {\n        type = gl.UNSIGNED_BYTE;\n      } else if (array instanceof Uint8ClampedArray) {\n        type = gl.UNSIGNED_BYTE;\n      }\n\n      return {\n        buffer: buffer,\n        type: type,\n        bytesPerElement: array.BYTES_PER_ELEMENT,\n        version: attribute.version\n      };\n    }\n\n    function updateBuffer(buffer, attribute, bufferType) {\n      const array = attribute.array;\n      const updateRange = attribute.updateRange;\n      gl.bindBuffer(bufferType, buffer);\n\n      if (updateRange.count === -1) {\n        // Not using update ranges\n        gl.bufferSubData(bufferType, 0, array);\n      } else {\n        if (isWebGL2) {\n          gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array, updateRange.offset, updateRange.count);\n        } else {\n          gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));\n        }\n\n        updateRange.count = -1; // reset range\n      }\n    } //\n\n\n    function get(attribute) {\n      if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n      return buffers.get(attribute);\n    }\n\n    function remove(attribute) {\n      if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n      const data = buffers.get(attribute);\n\n      if (data) {\n        gl.deleteBuffer(data.buffer);\n        buffers.delete(attribute);\n      }\n    }\n\n    function update(attribute, bufferType) {\n      if (attribute.isGLBufferAttribute) {\n        const cached = buffers.get(attribute);\n\n        if (!cached || cached.version < attribute.version) {\n          buffers.set(attribute, {\n            buffer: attribute.buffer,\n            type: attribute.type,\n            bytesPerElement: attribute.elementSize,\n            version: attribute.version\n          });\n        }\n\n        return;\n      }\n\n      if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n      const data = buffers.get(attribute);\n\n      if (data === undefined) {\n        buffers.set(attribute, createBuffer(attribute, bufferType));\n      } else if (data.version < attribute.version) {\n        updateBuffer(data.buffer, attribute, bufferType);\n        data.version = attribute.version;\n      }\n    }\n\n    return {\n      get: get,\n      remove: remove,\n      update: update\n    };\n  }\n\n  class PlaneGeometry extends BufferGeometry {\n    constructor() {\n      let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      let widthSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      let heightSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      super();\n      this.type = 'PlaneGeometry';\n      this.parameters = {\n        width: width,\n        height: height,\n        widthSegments: widthSegments,\n        heightSegments: heightSegments\n      };\n      const width_half = width / 2;\n      const height_half = height / 2;\n      const gridX = Math.floor(widthSegments);\n      const gridY = Math.floor(heightSegments);\n      const gridX1 = gridX + 1;\n      const gridY1 = gridY + 1;\n      const segment_width = width / gridX;\n      const segment_height = height / gridY; //\n\n      const indices = [];\n      const vertices = [];\n      const normals = [];\n      const uvs = [];\n\n      for (let iy = 0; iy < gridY1; iy++) {\n        const y = iy * segment_height - height_half;\n\n        for (let ix = 0; ix < gridX1; ix++) {\n          const x = ix * segment_width - width_half;\n          vertices.push(x, -y, 0);\n          normals.push(0, 0, 1);\n          uvs.push(ix / gridX);\n          uvs.push(1 - iy / gridY);\n        }\n      }\n\n      for (let iy = 0; iy < gridY; iy++) {\n        for (let ix = 0; ix < gridX; ix++) {\n          const a = ix + gridX1 * iy;\n          const b = ix + gridX1 * (iy + 1);\n          const c = ix + 1 + gridX1 * (iy + 1);\n          const d = ix + 1 + gridX1 * iy;\n          indices.push(a, b, d);\n          indices.push(b, c, d);\n        }\n      }\n\n      this.setIndex(indices);\n      this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n    }\n\n    static fromJSON(data) {\n      return new PlaneGeometry(data.width, data.height, data.widthSegments, data.heightSegments);\n    }\n\n  }\n\n  var alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n  var alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n  var alphatest_fragment = \"#ifdef USE_ALPHATEST\\n\\tif ( diffuseColor.a < alphaTest ) discard;\\n#endif\";\n  var alphatest_pars_fragment = \"#ifdef USE_ALPHATEST\\n\\tuniform float alphaTest;\\n#endif\";\n  var aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\\n\\t#endif\\n#endif\";\n  var aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n  var begin_vertex = \"vec3 transformed = vec3( position );\";\n  var beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n  var bsdfs = \"vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\\n\\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\\n\\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\\n}\\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\tvec3 F = F_Schlick( f0, f90, dotVH );\\n\\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( V * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie( float roughness, float dotNH ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tfloat invAlpha = 1.0 / alpha;\\n\\tfloat cos2h = dotNH * dotNH;\\n\\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\\n\\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\\n}\\nfloat V_Neubelt( float dotNV, float dotNL ) {\\n\\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\\n}\\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat D = D_Charlie( sheenRoughness, dotNH );\\n\\tfloat V = V_Neubelt( dotNV, dotNL );\\n\\treturn sheenColor * ( D * V );\\n}\\n#endif\";\n  var bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n  var clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n  var clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n  var clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\n  var clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\n  var color_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tdiffuseColor *= vColor;\\n#elif defined( USE_COLOR )\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n  var color_pars_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n  var color_pars_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n  var color_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvColor = vec4( 1.0 );\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvColor = vec3( 1.0 );\\n#endif\\n#ifdef USE_COLOR\\n\\tvColor *= color;\\n#endif\\n#ifdef USE_INSTANCING_COLOR\\n\\tvColor.xyz *= instanceColor.xyz;\\n#endif\";\n  var common = \"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract( sin( sn ) * c );\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef USE_CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n\\treturn m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\";\n  var cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t#define cubeUV_maxMipLevel 8.0\\n\\t#define cubeUV_minMipLevel 4.0\\n\\t#define cubeUV_maxTileSize 256.0\\n\\t#define cubeUV_minTileSize 16.0\\n\\tfloat getFace( vec3 direction ) {\\n\\t\\tvec3 absDirection = abs( direction );\\n\\t\\tfloat face = - 1.0;\\n\\t\\tif ( absDirection.x > absDirection.z ) {\\n\\t\\t\\tif ( absDirection.x > absDirection.y )\\n\\t\\t\\t\\tface = direction.x > 0.0 ? 0.0 : 3.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t} else {\\n\\t\\t\\tif ( absDirection.z > absDirection.y )\\n\\t\\t\\t\\tface = direction.z > 0.0 ? 2.0 : 5.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t}\\n\\t\\treturn face;\\n\\t}\\n\\tvec2 getUV( vec3 direction, float face ) {\\n\\t\\tvec2 uv;\\n\\t\\tif ( face == 0.0 ) {\\n\\t\\t\\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 1.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\\n\\t\\t} else if ( face == 2.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\\n\\t\\t} else if ( face == 3.0 ) {\\n\\t\\t\\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 4.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\\n\\t\\t} else {\\n\\t\\t\\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\\n\\t\\t}\\n\\t\\treturn 0.5 * ( uv + 1.0 );\\n\\t}\\n\\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\\n\\t\\tfloat face = getFace( direction );\\n\\t\\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\\n\\t\\tmipInt = max( mipInt, cubeUV_minMipLevel );\\n\\t\\tfloat faceSize = exp2( mipInt );\\n\\t\\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\\n\\t\\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\\n\\t\\tvec2 f = fract( uv );\\n\\t\\tuv += 0.5 - f;\\n\\t\\tif ( face > 2.0 ) {\\n\\t\\t\\tuv.y += faceSize;\\n\\t\\t\\tface -= 3.0;\\n\\t\\t}\\n\\t\\tuv.x += face * faceSize;\\n\\t\\tif ( mipInt < cubeUV_maxMipLevel ) {\\n\\t\\t\\tuv.y += 2.0 * cubeUV_maxTileSize;\\n\\t\\t}\\n\\t\\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n\\t\\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\\n\\t\\tuv *= texelSize;\\n\\t\\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x += texelSize;\\n\\t\\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.y += texelSize;\\n\\t\\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x -= texelSize;\\n\\t\\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\treturn mix( tm, bm, f.y );\\n\\t}\\n\\t#define r0 1.0\\n\\t#define v0 0.339\\n\\t#define m0 - 2.0\\n\\t#define r1 0.8\\n\\t#define v1 0.276\\n\\t#define m1 - 1.0\\n\\t#define r4 0.4\\n\\t#define v4 0.046\\n\\t#define m4 2.0\\n\\t#define r5 0.305\\n\\t#define v5 0.016\\n\\t#define m5 3.0\\n\\t#define r6 0.21\\n\\t#define v6 0.0038\\n\\t#define m6 4.0\\n\\tfloat roughnessToMip( float roughness ) {\\n\\t\\tfloat mip = 0.0;\\n\\t\\tif ( roughness >= r1 ) {\\n\\t\\t\\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\\n\\t\\t} else if ( roughness >= r4 ) {\\n\\t\\t\\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\\n\\t\\t} else if ( roughness >= r5 ) {\\n\\t\\t\\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\\n\\t\\t} else if ( roughness >= r6 ) {\\n\\t\\t\\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\\n\\t\\t} else {\\n\\t\\t\\tmip = - 2.0 * log2( 1.16 * roughness );\\t\\t}\\n\\t\\treturn mip;\\n\\t}\\n\\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\\n\\t\\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\\n\\t\\tfloat mipF = fract( mip );\\n\\t\\tfloat mipInt = floor( mip );\\n\\t\\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\\n\\t\\tif ( mipF == 0.0 ) {\\n\\t\\t\\treturn vec4( color0, 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\\n\\t\\t\\treturn vec4( mix( color0, color1, mipF ), 1.0 );\\n\\t\\t}\\n\\t}\\n#endif\";\n  var defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n  var displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n  var displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n  var emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n  var emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n  var encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n  var encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value ) {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\";\n  var envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n  var envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n  var envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n  var envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n  var envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n  var fog_vertex = \"#ifdef USE_FOG\\n\\tvFogDepth = - mvPosition.z;\\n#endif\";\n  var fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float vFogDepth;\\n#endif\";\n  var fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n  var fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float vFogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n  var gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}\";\n  var lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\\n\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tlightMapIrradiance *= PI;\\n\\t#endif\\n\\treflectedLight.indirectDiffuse += lightMapIrradiance;\\n#endif\";\n  var lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n  var lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\\n#ifdef DOUBLE_SIDED\\n\\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\\n\\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\";\n  var lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\\n\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\treturn irradiance;\\n}\\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\tif ( cutoffDistance > 0.0 ) {\\n\\t\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\t}\\n\\t\\treturn distanceFalloff;\\n\\t#else\\n\\t\\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\t\\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t\\t}\\n\\t\\treturn 1.0;\\n\\t#endif\\n}\\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\\n\\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tlight.color = directionalLight.color;\\n\\t\\tlight.direction = directionalLight.direction;\\n\\t\\tlight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tlight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tlight.color = pointLight.color;\\n\\t\\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tlight.visible = ( light.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tlight.direction = normalize( lVector );\\n\\t\\tfloat angleCos = dot( light.direction, spotLight.direction );\\n\\t\\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\tif ( spotAttenuation > 0.0 ) {\\n\\t\\t\\tfloat lightDistance = length( lVector );\\n\\t\\t\\tlight.color = spotLight.color * spotAttenuation;\\n\\t\\t\\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tlight.visible = ( light.color != vec3( 0.0 ) );\\n\\t\\t} else {\\n\\t\\t\\tlight.color = vec3( 0.0 );\\n\\t\\t\\tlight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\\n\\t\\tfloat dotNL = dot( normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n  var envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getIBLIrradiance( const in vec3 normal ) {\\n\\t\\t#if defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t\\t#else\\n\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t#endif\\n\\t}\\n\\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\\n\\t\\t#if defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 reflectVec;\\n\\t\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\t\\treflectVec = reflect( - viewDir, normal );\\n\\t\\t\\t\\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\treflectVec = refract( - viewDir, normal, refractionRatio );\\n\\t\\t\\t#endif\\n\\t\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t\\t#else\\n\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n  var lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\";\n  var lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\nstruct ToonMaterial {\\n\\tvec3 diffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\";\n  var lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n  var lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\nstruct BlinnPhongMaterial {\\n\\tvec3 diffuseColor;\\n\\tvec3 specularColor;\\n\\tfloat specularShininess;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n  var lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\\nmaterial.roughness = min( material.roughness, 1.0 );\\n#ifdef IOR\\n\\t#ifdef SPECULAR\\n\\t\\tfloat specularIntensityFactor = specularIntensity;\\n\\t\\tvec3 specularColorFactor = specularColor;\\n\\t\\t#ifdef USE_SPECULARINTENSITYMAP\\n\\t\\t\\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\\n\\t\\t#endif\\n\\t\\t#ifdef USE_SPECULARCOLORMAP\\n\\t\\t\\tspecularColorFactor *= specularColorMapTexelToLinear( texture2D( specularColorMap, vUv ) ).rgb;\\n\\t\\t#endif\\n\\t\\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\\n\\t#else\\n\\t\\tfloat specularIntensityFactor = 1.0;\\n\\t\\tvec3 specularColorFactor = vec3( 1.0 );\\n\\t\\tmaterial.specularF90 = 1.0;\\n\\t#endif\\n\\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.specularF90 = 1.0;\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\tmaterial.clearcoatF0 = vec3( 0.04 );\\n\\tmaterial.clearcoatF90 = 1.0;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheenColor;\\n\\t#ifdef USE_SHEENCOLORMAP\\n\\t\\tmaterial.sheenColor *= sheenColorMapTexelToLinear( texture2D( sheenColorMap, vUv ) ).rgb;\\n\\t#endif\\n\\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\\n\\t#ifdef USE_SHEENROUGHNESSMAP\\n\\t\\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\\n\\t#endif\\n#endif\";\n  var lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat roughness;\\n\\tvec3 specularColor;\\n\\tfloat specularF90;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat clearcoat;\\n\\t\\tfloat clearcoatRoughness;\\n\\t\\tvec3 clearcoatF0;\\n\\t\\tfloat clearcoatF90;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\tvec3 sheenColor;\\n\\t\\tfloat sheenRoughness;\\n\\t#endif\\n};\\nvec3 clearcoatSpecular = vec3( 0.0 );\\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\\n\\treturn fab;\\n}\\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\\n\\tvec2 fab = DFGApprox( normal, viewDir, roughness );\\n\\treturn specularColor * fab.x + specularF90 * fab.y;\\n}\\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tvec2 fab = DFGApprox( normal, viewDir, roughness );\\n\\tvec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\\n\\tfloat Ess = fab.x + fab.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.roughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(\t\t0, 1,\t\t0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = dotNLcc * directLight.color;\\n\\t\\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\\n\\t#endif\\n\\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\\n\\t#endif\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n  var lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef USE_CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointLightInfo( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotLightInfo( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n  var lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getIBLIrradiance( geometry.normal );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\\n\\t#endif\\n#endif\";\n  var lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n  var logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n  var logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n  var logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n  var logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n  var map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\n  var map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n  var map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n  var map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n  var metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n  var metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n  var morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\t\\tif ( morphTargetInfluences[ i ] > 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1, 2 ) * morphTargetInfluences[ i ];\\n\\t\\t}\\n\\t#else\\n\\t\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\t\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\t\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\t\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n\\t#endif\\n#endif\";\n  var morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\\n\\t\\tuniform sampler2DArray morphTargetsTexture;\\n\\t\\tuniform vec2 morphTargetsTextureSize;\\n\\t\\tvec3 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset, const in int stride ) {\\n\\t\\t\\tfloat texelIndex = float( vertexIndex * stride + offset );\\n\\t\\t\\tfloat y = floor( texelIndex / morphTargetsTextureSize.x );\\n\\t\\t\\tfloat x = texelIndex - y * morphTargetsTextureSize.x;\\n\\t\\t\\tvec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );\\n\\t\\t\\treturn texture( morphTargetsTexture, morphUV ).xyz;\\n\\t\\t}\\n\\t#else\\n\\t\\t#ifndef USE_MORPHNORMALS\\n\\t\\t\\tuniform float morphTargetInfluences[ 8 ];\\n\\t\\t#else\\n\\t\\t\\tuniform float morphTargetInfluences[ 4 ];\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n  var morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\t\\t#ifndef USE_MORPHNORMALS\\n\\t\\t\\t\\tif ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 1 ) * morphTargetInfluences[ i ];\\n\\t\\t\\t#else\\n\\t\\t\\t\\tif ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 2 ) * morphTargetInfluences[ i ];\\n\\t\\t\\t#endif\\n\\t\\t}\\n\\t#else\\n\\t\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\t\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\t\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\t\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t\\t#ifndef USE_MORPHNORMALS\\n\\t\\t\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\t\\t\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\t\\t\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\t\\t\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n  var normal_fragment_begin = \"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\\n#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * faceDirection;\\n\\t\\t\\tbitangent = bitangent * faceDirection;\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n  var normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\\n#endif\";\n  var normal_pars_fragment = \"#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\";\n  var normal_pars_vertex = \"#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\";\n  var normal_vertex = \"#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\";\n  var normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 N = surf_norm;\\n\\t\\tvec3 q1perp = cross( q1, N );\\n\\t\\tvec3 q0perp = cross( N, q0 );\\n\\t\\tvec3 T = q1perp * st0.x + q0perp * st1.x;\\n\\t\\tvec3 B = q1perp * st0.y + q0perp * st1.y;\\n\\t\\tfloat det = max( dot( T, T ), dot( B, B ) );\\n\\t\\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\\n\\t\\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\\n\\t}\\n#endif\";\n  var clearcoat_normal_fragment_begin = \"#ifdef USE_CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n  var clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\\n\\t#endif\\n#endif\";\n  var clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n  var output_fragment = \"#ifdef OPAQUE\\ndiffuseColor.a = 1.0;\\n#endif\\n#ifdef USE_TRANSMISSION\\ndiffuseColor.a *= transmissionAlpha + 0.1;\\n#endif\\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\";\n  var packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n  var premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n  var project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n  var dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n  var dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n  var roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n  var roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n  var shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t\tf.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t\tf.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n  var shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n  var shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\tvec4 shadowWorldPosition;\\n\\t#endif\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\";\n  var shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n  var skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n  var skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n  var skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n  var skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n  var specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n  var specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n  var tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n  var tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(\t1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,\t1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,\t1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\";\n  var transmission_fragment = \"#ifdef USE_TRANSMISSION\\n\\tfloat transmissionAlpha = 1.0;\\n\\tfloat transmissionFactor = transmission;\\n\\tfloat thicknessFactor = thickness;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\\n\\t#endif\\n\\tvec3 pos = vWorldPosition;\\n\\tvec3 v = normalize( cameraPosition - pos );\\n\\tvec3 n = inverseTransformDirection( normal, viewMatrix );\\n\\tvec4 transmission = getIBLVolumeRefraction(\\n\\t\\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\\n\\t\\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\\n\\t\\tattenuationColor, attenuationDistance );\\n\\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\\n\\ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\\n#endif\";\n  var transmission_pars_fragment = \"#ifdef USE_TRANSMISSION\\n\\tuniform float transmission;\\n\\tuniform float thickness;\\n\\tuniform float attenuationDistance;\\n\\tuniform vec3 attenuationColor;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\tuniform sampler2D transmissionMap;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tuniform sampler2D thicknessMap;\\n\\t#endif\\n\\tuniform vec2 transmissionSamplerSize;\\n\\tuniform sampler2D transmissionSamplerMap;\\n\\tuniform mat4 modelMatrix;\\n\\tuniform mat4 projectionMatrix;\\n\\tvarying vec3 vWorldPosition;\\n\\tvec3 getVolumeTransmissionRay( vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix ) {\\n\\t\\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\\n\\t\\tvec3 modelScale;\\n\\t\\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\\n\\t\\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\\n\\t\\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\\n\\t\\treturn normalize( refractionVector ) * thickness * modelScale;\\n\\t}\\n\\tfloat applyIorToRoughness( float roughness, float ior ) {\\n\\t\\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\\n\\t}\\n\\tvec4 getTransmissionSample( vec2 fragCoord, float roughness, float ior ) {\\n\\t\\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\\n\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\\n\\t\\t#else\\n\\t\\t\\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\\n\\t\\t#endif\\n\\t}\\n\\tvec3 applyVolumeAttenuation( vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance ) {\\n\\t\\tif ( attenuationDistance == 0.0 ) {\\n\\t\\t\\treturn radiance;\\n\\t\\t} else {\\n\\t\\t\\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\\n\\t\\t\\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\\t\\t\\treturn transmittance * radiance;\\n\\t\\t}\\n\\t}\\n\\tvec4 getIBLVolumeRefraction( vec3 n, vec3 v, float roughness, vec3 diffuseColor, vec3 specularColor, float specularF90,\\n\\t\\tvec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness,\\n\\t\\tvec3 attenuationColor, float attenuationDistance ) {\\n\\t\\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\\n\\t\\tvec3 refractedRayExit = position + transmissionRay;\\n\\t\\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\\n\\t\\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\\n\\t\\trefractionCoords += 1.0;\\n\\t\\trefractionCoords /= 2.0;\\n\\t\\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\\n\\t\\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\\n\\t\\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\\n\\t\\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\\n\\t}\\n#endif\";\n  var uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n  var uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n  var uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n  var uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n  var uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\";\n  var uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\";\n  var worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n  const vertex$g = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n  const fragment$g = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n  const vertex$f = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n  const fragment$f = \"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n  const vertex$e = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\n  const fragment$e = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\";\n  const vertex$d = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n  const fragment$d = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n  const vertex$c = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n  const fragment$c = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n  const vertex$b = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n  const fragment$b = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n  const vertex$a = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinbase_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n  const fragment$a = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n  const vertex$9 = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n  const fragment$9 = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n  const vertex$8 = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n  const fragment$8 = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <normal_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n  const vertex$7 = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n  const fragment$7 = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <normal_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\n  const vertex$6 = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n  const fragment$6 = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n  const vertex$5 = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifdef USE_TRANSMISSION\\n\\tvarying vec3 vWorldPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n#ifdef USE_TRANSMISSION\\n\\tvWorldPosition = worldPosition.xyz;\\n#endif\\n}\";\n  const fragment$5 = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define IOR\\n\\t#define SPECULAR\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef IOR\\n\\tuniform float ior;\\n#endif\\n#ifdef SPECULAR\\n\\tuniform float specularIntensity;\\n\\tuniform vec3 specularColor;\\n\\t#ifdef USE_SPECULARINTENSITYMAP\\n\\t\\tuniform sampler2D specularIntensityMap;\\n\\t#endif\\n\\t#ifdef USE_SPECULARCOLORMAP\\n\\t\\tuniform sampler2D specularColorMap;\\n\\t#endif\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheenColor;\\n\\tuniform float sheenRoughness;\\n\\t#ifdef USE_SHEENCOLORMAP\\n\\t\\tuniform sampler2D sheenColorMap;\\n\\t#endif\\n\\t#ifdef USE_SHEENROUGHNESSMAP\\n\\t\\tuniform sampler2D sheenRoughnessMap;\\n\\t#endif\\n#endif\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_physical_pars_fragment>\\n#include <transmission_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\\n\\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\\n\\t#include <transmission_fragment>\\n\\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\\n\\t\\toutgoingLight = outgoingLight * ( 1.0 - clearcoat * Fcc ) + clearcoatSpecular * clearcoat;\\n\\t#endif\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n  const vertex$4 = \"#define TOON\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n  const fragment$4 = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n  const vertex$3 = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n  const fragment$3 = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n  const vertex$2 = \"#include <common>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n  const fragment$2 = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n  const vertex$1 = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n  const fragment$1 = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n  const ShaderChunk = {\n    alphamap_fragment: alphamap_fragment,\n    alphamap_pars_fragment: alphamap_pars_fragment,\n    alphatest_fragment: alphatest_fragment,\n    alphatest_pars_fragment: alphatest_pars_fragment,\n    aomap_fragment: aomap_fragment,\n    aomap_pars_fragment: aomap_pars_fragment,\n    begin_vertex: begin_vertex,\n    beginnormal_vertex: beginnormal_vertex,\n    bsdfs: bsdfs,\n    bumpmap_pars_fragment: bumpmap_pars_fragment,\n    clipping_planes_fragment: clipping_planes_fragment,\n    clipping_planes_pars_fragment: clipping_planes_pars_fragment,\n    clipping_planes_pars_vertex: clipping_planes_pars_vertex,\n    clipping_planes_vertex: clipping_planes_vertex,\n    color_fragment: color_fragment,\n    color_pars_fragment: color_pars_fragment,\n    color_pars_vertex: color_pars_vertex,\n    color_vertex: color_vertex,\n    common: common,\n    cube_uv_reflection_fragment: cube_uv_reflection_fragment,\n    defaultnormal_vertex: defaultnormal_vertex,\n    displacementmap_pars_vertex: displacementmap_pars_vertex,\n    displacementmap_vertex: displacementmap_vertex,\n    emissivemap_fragment: emissivemap_fragment,\n    emissivemap_pars_fragment: emissivemap_pars_fragment,\n    encodings_fragment: encodings_fragment,\n    encodings_pars_fragment: encodings_pars_fragment,\n    envmap_fragment: envmap_fragment,\n    envmap_common_pars_fragment: envmap_common_pars_fragment,\n    envmap_pars_fragment: envmap_pars_fragment,\n    envmap_pars_vertex: envmap_pars_vertex,\n    envmap_physical_pars_fragment: envmap_physical_pars_fragment,\n    envmap_vertex: envmap_vertex,\n    fog_vertex: fog_vertex,\n    fog_pars_vertex: fog_pars_vertex,\n    fog_fragment: fog_fragment,\n    fog_pars_fragment: fog_pars_fragment,\n    gradientmap_pars_fragment: gradientmap_pars_fragment,\n    lightmap_fragment: lightmap_fragment,\n    lightmap_pars_fragment: lightmap_pars_fragment,\n    lights_lambert_vertex: lights_lambert_vertex,\n    lights_pars_begin: lights_pars_begin,\n    lights_toon_fragment: lights_toon_fragment,\n    lights_toon_pars_fragment: lights_toon_pars_fragment,\n    lights_phong_fragment: lights_phong_fragment,\n    lights_phong_pars_fragment: lights_phong_pars_fragment,\n    lights_physical_fragment: lights_physical_fragment,\n    lights_physical_pars_fragment: lights_physical_pars_fragment,\n    lights_fragment_begin: lights_fragment_begin,\n    lights_fragment_maps: lights_fragment_maps,\n    lights_fragment_end: lights_fragment_end,\n    logdepthbuf_fragment: logdepthbuf_fragment,\n    logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n    logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n    logdepthbuf_vertex: logdepthbuf_vertex,\n    map_fragment: map_fragment,\n    map_pars_fragment: map_pars_fragment,\n    map_particle_fragment: map_particle_fragment,\n    map_particle_pars_fragment: map_particle_pars_fragment,\n    metalnessmap_fragment: metalnessmap_fragment,\n    metalnessmap_pars_fragment: metalnessmap_pars_fragment,\n    morphnormal_vertex: morphnormal_vertex,\n    morphtarget_pars_vertex: morphtarget_pars_vertex,\n    morphtarget_vertex: morphtarget_vertex,\n    normal_fragment_begin: normal_fragment_begin,\n    normal_fragment_maps: normal_fragment_maps,\n    normal_pars_fragment: normal_pars_fragment,\n    normal_pars_vertex: normal_pars_vertex,\n    normal_vertex: normal_vertex,\n    normalmap_pars_fragment: normalmap_pars_fragment,\n    clearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n    clearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n    clearcoat_pars_fragment: clearcoat_pars_fragment,\n    output_fragment: output_fragment,\n    packing: packing,\n    premultiplied_alpha_fragment: premultiplied_alpha_fragment,\n    project_vertex: project_vertex,\n    dithering_fragment: dithering_fragment,\n    dithering_pars_fragment: dithering_pars_fragment,\n    roughnessmap_fragment: roughnessmap_fragment,\n    roughnessmap_pars_fragment: roughnessmap_pars_fragment,\n    shadowmap_pars_fragment: shadowmap_pars_fragment,\n    shadowmap_pars_vertex: shadowmap_pars_vertex,\n    shadowmap_vertex: shadowmap_vertex,\n    shadowmask_pars_fragment: shadowmask_pars_fragment,\n    skinbase_vertex: skinbase_vertex,\n    skinning_pars_vertex: skinning_pars_vertex,\n    skinning_vertex: skinning_vertex,\n    skinnormal_vertex: skinnormal_vertex,\n    specularmap_fragment: specularmap_fragment,\n    specularmap_pars_fragment: specularmap_pars_fragment,\n    tonemapping_fragment: tonemapping_fragment,\n    tonemapping_pars_fragment: tonemapping_pars_fragment,\n    transmission_fragment: transmission_fragment,\n    transmission_pars_fragment: transmission_pars_fragment,\n    uv_pars_fragment: uv_pars_fragment,\n    uv_pars_vertex: uv_pars_vertex,\n    uv_vertex: uv_vertex,\n    uv2_pars_fragment: uv2_pars_fragment,\n    uv2_pars_vertex: uv2_pars_vertex,\n    uv2_vertex: uv2_vertex,\n    worldpos_vertex: worldpos_vertex,\n    background_vert: vertex$g,\n    background_frag: fragment$g,\n    cube_vert: vertex$f,\n    cube_frag: fragment$f,\n    depth_vert: vertex$e,\n    depth_frag: fragment$e,\n    distanceRGBA_vert: vertex$d,\n    distanceRGBA_frag: fragment$d,\n    equirect_vert: vertex$c,\n    equirect_frag: fragment$c,\n    linedashed_vert: vertex$b,\n    linedashed_frag: fragment$b,\n    meshbasic_vert: vertex$a,\n    meshbasic_frag: fragment$a,\n    meshlambert_vert: vertex$9,\n    meshlambert_frag: fragment$9,\n    meshmatcap_vert: vertex$8,\n    meshmatcap_frag: fragment$8,\n    meshnormal_vert: vertex$7,\n    meshnormal_frag: fragment$7,\n    meshphong_vert: vertex$6,\n    meshphong_frag: fragment$6,\n    meshphysical_vert: vertex$5,\n    meshphysical_frag: fragment$5,\n    meshtoon_vert: vertex$4,\n    meshtoon_frag: fragment$4,\n    points_vert: vertex$3,\n    points_frag: fragment$3,\n    shadow_vert: vertex$2,\n    shadow_frag: fragment$2,\n    sprite_vert: vertex$1,\n    sprite_frag: fragment$1\n  };\n  /**\n   * Uniforms library for shared webgl shaders\n   */\n\n  const UniformsLib = {\n    common: {\n      diffuse: {\n        value: new Color(0xffffff)\n      },\n      opacity: {\n        value: 1.0\n      },\n      map: {\n        value: null\n      },\n      uvTransform: {\n        value: new Matrix3()\n      },\n      uv2Transform: {\n        value: new Matrix3()\n      },\n      alphaMap: {\n        value: null\n      },\n      alphaTest: {\n        value: 0\n      }\n    },\n    specularmap: {\n      specularMap: {\n        value: null\n      }\n    },\n    envmap: {\n      envMap: {\n        value: null\n      },\n      flipEnvMap: {\n        value: -1\n      },\n      reflectivity: {\n        value: 1.0\n      },\n      // basic, lambert, phong\n      ior: {\n        value: 1.5\n      },\n      // standard, physical\n      refractionRatio: {\n        value: 0.98\n      },\n      maxMipLevel: {\n        value: 0\n      }\n    },\n    aomap: {\n      aoMap: {\n        value: null\n      },\n      aoMapIntensity: {\n        value: 1\n      }\n    },\n    lightmap: {\n      lightMap: {\n        value: null\n      },\n      lightMapIntensity: {\n        value: 1\n      }\n    },\n    emissivemap: {\n      emissiveMap: {\n        value: null\n      }\n    },\n    bumpmap: {\n      bumpMap: {\n        value: null\n      },\n      bumpScale: {\n        value: 1\n      }\n    },\n    normalmap: {\n      normalMap: {\n        value: null\n      },\n      normalScale: {\n        value: new Vector2(1, 1)\n      }\n    },\n    displacementmap: {\n      displacementMap: {\n        value: null\n      },\n      displacementScale: {\n        value: 1\n      },\n      displacementBias: {\n        value: 0\n      }\n    },\n    roughnessmap: {\n      roughnessMap: {\n        value: null\n      }\n    },\n    metalnessmap: {\n      metalnessMap: {\n        value: null\n      }\n    },\n    gradientmap: {\n      gradientMap: {\n        value: null\n      }\n    },\n    fog: {\n      fogDensity: {\n        value: 0.00025\n      },\n      fogNear: {\n        value: 1\n      },\n      fogFar: {\n        value: 2000\n      },\n      fogColor: {\n        value: new Color(0xffffff)\n      }\n    },\n    lights: {\n      ambientLightColor: {\n        value: []\n      },\n      lightProbe: {\n        value: []\n      },\n      directionalLights: {\n        value: [],\n        properties: {\n          direction: {},\n          color: {}\n        }\n      },\n      directionalLightShadows: {\n        value: [],\n        properties: {\n          shadowBias: {},\n          shadowNormalBias: {},\n          shadowRadius: {},\n          shadowMapSize: {}\n        }\n      },\n      directionalShadowMap: {\n        value: []\n      },\n      directionalShadowMatrix: {\n        value: []\n      },\n      spotLights: {\n        value: [],\n        properties: {\n          color: {},\n          position: {},\n          direction: {},\n          distance: {},\n          coneCos: {},\n          penumbraCos: {},\n          decay: {}\n        }\n      },\n      spotLightShadows: {\n        value: [],\n        properties: {\n          shadowBias: {},\n          shadowNormalBias: {},\n          shadowRadius: {},\n          shadowMapSize: {}\n        }\n      },\n      spotShadowMap: {\n        value: []\n      },\n      spotShadowMatrix: {\n        value: []\n      },\n      pointLights: {\n        value: [],\n        properties: {\n          color: {},\n          position: {},\n          decay: {},\n          distance: {}\n        }\n      },\n      pointLightShadows: {\n        value: [],\n        properties: {\n          shadowBias: {},\n          shadowNormalBias: {},\n          shadowRadius: {},\n          shadowMapSize: {},\n          shadowCameraNear: {},\n          shadowCameraFar: {}\n        }\n      },\n      pointShadowMap: {\n        value: []\n      },\n      pointShadowMatrix: {\n        value: []\n      },\n      hemisphereLights: {\n        value: [],\n        properties: {\n          direction: {},\n          skyColor: {},\n          groundColor: {}\n        }\n      },\n      // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n      rectAreaLights: {\n        value: [],\n        properties: {\n          color: {},\n          position: {},\n          width: {},\n          height: {}\n        }\n      },\n      ltc_1: {\n        value: null\n      },\n      ltc_2: {\n        value: null\n      }\n    },\n    points: {\n      diffuse: {\n        value: new Color(0xffffff)\n      },\n      opacity: {\n        value: 1.0\n      },\n      size: {\n        value: 1.0\n      },\n      scale: {\n        value: 1.0\n      },\n      map: {\n        value: null\n      },\n      alphaMap: {\n        value: null\n      },\n      alphaTest: {\n        value: 0\n      },\n      uvTransform: {\n        value: new Matrix3()\n      }\n    },\n    sprite: {\n      diffuse: {\n        value: new Color(0xffffff)\n      },\n      opacity: {\n        value: 1.0\n      },\n      center: {\n        value: new Vector2(0.5, 0.5)\n      },\n      rotation: {\n        value: 0.0\n      },\n      map: {\n        value: null\n      },\n      alphaMap: {\n        value: null\n      },\n      alphaTest: {\n        value: 0\n      },\n      uvTransform: {\n        value: new Matrix3()\n      }\n    }\n  };\n  const ShaderLib = {\n    basic: {\n      uniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.fog]),\n      vertexShader: ShaderChunk.meshbasic_vert,\n      fragmentShader: ShaderChunk.meshbasic_frag\n    },\n    lambert: {\n      uniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.fog, UniformsLib.lights, {\n        emissive: {\n          value: new Color(0x000000)\n        }\n      }]),\n      vertexShader: ShaderChunk.meshlambert_vert,\n      fragmentShader: ShaderChunk.meshlambert_frag\n    },\n    phong: {\n      uniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, UniformsLib.lights, {\n        emissive: {\n          value: new Color(0x000000)\n        },\n        specular: {\n          value: new Color(0x111111)\n        },\n        shininess: {\n          value: 30\n        }\n      }]),\n      vertexShader: ShaderChunk.meshphong_vert,\n      fragmentShader: ShaderChunk.meshphong_frag\n    },\n    standard: {\n      uniforms: mergeUniforms([UniformsLib.common, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.roughnessmap, UniformsLib.metalnessmap, UniformsLib.fog, UniformsLib.lights, {\n        emissive: {\n          value: new Color(0x000000)\n        },\n        roughness: {\n          value: 1.0\n        },\n        metalness: {\n          value: 0.0\n        },\n        envMapIntensity: {\n          value: 1\n        } // temporary\n\n      }]),\n      vertexShader: ShaderChunk.meshphysical_vert,\n      fragmentShader: ShaderChunk.meshphysical_frag\n    },\n    toon: {\n      uniforms: mergeUniforms([UniformsLib.common, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.gradientmap, UniformsLib.fog, UniformsLib.lights, {\n        emissive: {\n          value: new Color(0x000000)\n        }\n      }]),\n      vertexShader: ShaderChunk.meshtoon_vert,\n      fragmentShader: ShaderChunk.meshtoon_frag\n    },\n    matcap: {\n      uniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, {\n        matcap: {\n          value: null\n        }\n      }]),\n      vertexShader: ShaderChunk.meshmatcap_vert,\n      fragmentShader: ShaderChunk.meshmatcap_frag\n    },\n    points: {\n      uniforms: mergeUniforms([UniformsLib.points, UniformsLib.fog]),\n      vertexShader: ShaderChunk.points_vert,\n      fragmentShader: ShaderChunk.points_frag\n    },\n    dashed: {\n      uniforms: mergeUniforms([UniformsLib.common, UniformsLib.fog, {\n        scale: {\n          value: 1\n        },\n        dashSize: {\n          value: 1\n        },\n        totalSize: {\n          value: 2\n        }\n      }]),\n      vertexShader: ShaderChunk.linedashed_vert,\n      fragmentShader: ShaderChunk.linedashed_frag\n    },\n    depth: {\n      uniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap]),\n      vertexShader: ShaderChunk.depth_vert,\n      fragmentShader: ShaderChunk.depth_frag\n    },\n    normal: {\n      uniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, {\n        opacity: {\n          value: 1.0\n        }\n      }]),\n      vertexShader: ShaderChunk.meshnormal_vert,\n      fragmentShader: ShaderChunk.meshnormal_frag\n    },\n    sprite: {\n      uniforms: mergeUniforms([UniformsLib.sprite, UniformsLib.fog]),\n      vertexShader: ShaderChunk.sprite_vert,\n      fragmentShader: ShaderChunk.sprite_frag\n    },\n    background: {\n      uniforms: {\n        uvTransform: {\n          value: new Matrix3()\n        },\n        t2D: {\n          value: null\n        }\n      },\n      vertexShader: ShaderChunk.background_vert,\n      fragmentShader: ShaderChunk.background_frag\n    },\n\n    /* -------------------------------------------------------------------------\n    //\tCube map shader\n     ------------------------------------------------------------------------- */\n    cube: {\n      uniforms: mergeUniforms([UniformsLib.envmap, {\n        opacity: {\n          value: 1.0\n        }\n      }]),\n      vertexShader: ShaderChunk.cube_vert,\n      fragmentShader: ShaderChunk.cube_frag\n    },\n    equirect: {\n      uniforms: {\n        tEquirect: {\n          value: null\n        }\n      },\n      vertexShader: ShaderChunk.equirect_vert,\n      fragmentShader: ShaderChunk.equirect_frag\n    },\n    distanceRGBA: {\n      uniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap, {\n        referencePosition: {\n          value: new Vector3()\n        },\n        nearDistance: {\n          value: 1\n        },\n        farDistance: {\n          value: 1000\n        }\n      }]),\n      vertexShader: ShaderChunk.distanceRGBA_vert,\n      fragmentShader: ShaderChunk.distanceRGBA_frag\n    },\n    shadow: {\n      uniforms: mergeUniforms([UniformsLib.lights, UniformsLib.fog, {\n        color: {\n          value: new Color(0x00000)\n        },\n        opacity: {\n          value: 1.0\n        }\n      }]),\n      vertexShader: ShaderChunk.shadow_vert,\n      fragmentShader: ShaderChunk.shadow_frag\n    }\n  };\n  ShaderLib.physical = {\n    uniforms: mergeUniforms([ShaderLib.standard.uniforms, {\n      clearcoat: {\n        value: 0\n      },\n      clearcoatMap: {\n        value: null\n      },\n      clearcoatRoughness: {\n        value: 0\n      },\n      clearcoatRoughnessMap: {\n        value: null\n      },\n      clearcoatNormalScale: {\n        value: new Vector2(1, 1)\n      },\n      clearcoatNormalMap: {\n        value: null\n      },\n      sheen: {\n        value: 0\n      },\n      sheenColor: {\n        value: new Color(0x000000)\n      },\n      sheenColorMap: {\n        value: null\n      },\n      sheenRoughness: {\n        value: 0\n      },\n      sheenRoughnessMap: {\n        value: null\n      },\n      transmission: {\n        value: 0\n      },\n      transmissionMap: {\n        value: null\n      },\n      transmissionSamplerSize: {\n        value: new Vector2()\n      },\n      transmissionSamplerMap: {\n        value: null\n      },\n      thickness: {\n        value: 0\n      },\n      thicknessMap: {\n        value: null\n      },\n      attenuationDistance: {\n        value: 0\n      },\n      attenuationColor: {\n        value: new Color(0x000000)\n      },\n      specularIntensity: {\n        value: 0\n      },\n      specularIntensityMap: {\n        value: null\n      },\n      specularColor: {\n        value: new Color(1, 1, 1)\n      },\n      specularColorMap: {\n        value: null\n      }\n    }]),\n    vertexShader: ShaderChunk.meshphysical_vert,\n    fragmentShader: ShaderChunk.meshphysical_frag\n  };\n\n  function WebGLBackground(renderer, cubemaps, state, objects, premultipliedAlpha) {\n    const clearColor = new Color(0x000000);\n    let clearAlpha = 0;\n    let planeMesh;\n    let boxMesh;\n    let currentBackground = null;\n    let currentBackgroundVersion = 0;\n    let currentTonemapping = null;\n\n    function render(renderList, scene) {\n      let forceClear = false;\n      let background = scene.isScene === true ? scene.background : null;\n\n      if (background && background.isTexture) {\n        background = cubemaps.get(background);\n      } // Ignore background in AR\n      // TODO: Reconsider this.\n\n\n      const xr = renderer.xr;\n      const session = xr.getSession && xr.getSession();\n\n      if (session && session.environmentBlendMode === 'additive') {\n        background = null;\n      }\n\n      if (background === null) {\n        setClear(clearColor, clearAlpha);\n      } else if (background && background.isColor) {\n        setClear(background, 1);\n        forceClear = true;\n      }\n\n      if (renderer.autoClear || forceClear) {\n        renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n      }\n\n      if (background && (background.isCubeTexture || background.mapping === CubeUVReflectionMapping)) {\n        if (boxMesh === undefined) {\n          boxMesh = new Mesh(new BoxGeometry(1, 1, 1), new ShaderMaterial({\n            name: 'BackgroundCubeMaterial',\n            uniforms: cloneUniforms(ShaderLib.cube.uniforms),\n            vertexShader: ShaderLib.cube.vertexShader,\n            fragmentShader: ShaderLib.cube.fragmentShader,\n            side: BackSide,\n            depthTest: false,\n            depthWrite: false,\n            fog: false\n          }));\n          boxMesh.geometry.deleteAttribute('normal');\n          boxMesh.geometry.deleteAttribute('uv');\n\n          boxMesh.onBeforeRender = function (renderer, scene, camera) {\n            this.matrixWorld.copyPosition(camera.matrixWorld);\n          }; // enable code injection for non-built-in material\n\n\n          Object.defineProperty(boxMesh.material, 'envMap', {\n            get: function () {\n              return this.uniforms.envMap.value;\n            }\n          });\n          objects.update(boxMesh);\n        }\n\n        boxMesh.material.uniforms.envMap.value = background;\n        boxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background.isRenderTargetTexture === false ? -1 : 1;\n\n        if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n          boxMesh.material.needsUpdate = true;\n          currentBackground = background;\n          currentBackgroundVersion = background.version;\n          currentTonemapping = renderer.toneMapping;\n        } // push to the pre-sorted opaque render list\n\n\n        renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);\n      } else if (background && background.isTexture) {\n        if (planeMesh === undefined) {\n          planeMesh = new Mesh(new PlaneGeometry(2, 2), new ShaderMaterial({\n            name: 'BackgroundMaterial',\n            uniforms: cloneUniforms(ShaderLib.background.uniforms),\n            vertexShader: ShaderLib.background.vertexShader,\n            fragmentShader: ShaderLib.background.fragmentShader,\n            side: FrontSide,\n            depthTest: false,\n            depthWrite: false,\n            fog: false\n          }));\n          planeMesh.geometry.deleteAttribute('normal'); // enable code injection for non-built-in material\n\n          Object.defineProperty(planeMesh.material, 'map', {\n            get: function () {\n              return this.uniforms.t2D.value;\n            }\n          });\n          objects.update(planeMesh);\n        }\n\n        planeMesh.material.uniforms.t2D.value = background;\n\n        if (background.matrixAutoUpdate === true) {\n          background.updateMatrix();\n        }\n\n        planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);\n\n        if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n          planeMesh.material.needsUpdate = true;\n          currentBackground = background;\n          currentBackgroundVersion = background.version;\n          currentTonemapping = renderer.toneMapping;\n        } // push to the pre-sorted opaque render list\n\n\n        renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);\n      }\n    }\n\n    function setClear(color, alpha) {\n      state.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);\n    }\n\n    return {\n      getClearColor: function () {\n        return clearColor;\n      },\n      setClearColor: function (color) {\n        let alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n        clearColor.set(color);\n        clearAlpha = alpha;\n        setClear(clearColor, clearAlpha);\n      },\n      getClearAlpha: function () {\n        return clearAlpha;\n      },\n      setClearAlpha: function (alpha) {\n        clearAlpha = alpha;\n        setClear(clearColor, clearAlpha);\n      },\n      render: render\n    };\n  }\n\n  function WebGLBindingStates(gl, extensions, attributes, capabilities) {\n    const maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    const extension = capabilities.isWebGL2 ? null : extensions.get('OES_vertex_array_object');\n    const vaoAvailable = capabilities.isWebGL2 || extension !== null;\n    const bindingStates = {};\n    const defaultState = createBindingState(null);\n    let currentState = defaultState;\n\n    function setup(object, material, program, geometry, index) {\n      let updateBuffers = false;\n\n      if (vaoAvailable) {\n        const state = getBindingState(geometry, program, material);\n\n        if (currentState !== state) {\n          currentState = state;\n          bindVertexArrayObject(currentState.object);\n        }\n\n        updateBuffers = needsUpdate(geometry, index);\n        if (updateBuffers) saveCache(geometry, index);\n      } else {\n        const wireframe = material.wireframe === true;\n\n        if (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {\n          currentState.geometry = geometry.id;\n          currentState.program = program.id;\n          currentState.wireframe = wireframe;\n          updateBuffers = true;\n        }\n      }\n\n      if (object.isInstancedMesh === true) {\n        updateBuffers = true;\n      }\n\n      if (index !== null) {\n        attributes.update(index, gl.ELEMENT_ARRAY_BUFFER);\n      }\n\n      if (updateBuffers) {\n        setupVertexAttributes(object, material, program, geometry);\n\n        if (index !== null) {\n          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.get(index).buffer);\n        }\n      }\n    }\n\n    function createVertexArrayObject() {\n      if (capabilities.isWebGL2) return gl.createVertexArray();\n      return extension.createVertexArrayOES();\n    }\n\n    function bindVertexArrayObject(vao) {\n      if (capabilities.isWebGL2) return gl.bindVertexArray(vao);\n      return extension.bindVertexArrayOES(vao);\n    }\n\n    function deleteVertexArrayObject(vao) {\n      if (capabilities.isWebGL2) return gl.deleteVertexArray(vao);\n      return extension.deleteVertexArrayOES(vao);\n    }\n\n    function getBindingState(geometry, program, material) {\n      const wireframe = material.wireframe === true;\n      let programMap = bindingStates[geometry.id];\n\n      if (programMap === undefined) {\n        programMap = {};\n        bindingStates[geometry.id] = programMap;\n      }\n\n      let stateMap = programMap[program.id];\n\n      if (stateMap === undefined) {\n        stateMap = {};\n        programMap[program.id] = stateMap;\n      }\n\n      let state = stateMap[wireframe];\n\n      if (state === undefined) {\n        state = createBindingState(createVertexArrayObject());\n        stateMap[wireframe] = state;\n      }\n\n      return state;\n    }\n\n    function createBindingState(vao) {\n      const newAttributes = [];\n      const enabledAttributes = [];\n      const attributeDivisors = [];\n\n      for (let i = 0; i < maxVertexAttributes; i++) {\n        newAttributes[i] = 0;\n        enabledAttributes[i] = 0;\n        attributeDivisors[i] = 0;\n      }\n\n      return {\n        // for backward compatibility on non-VAO support browser\n        geometry: null,\n        program: null,\n        wireframe: false,\n        newAttributes: newAttributes,\n        enabledAttributes: enabledAttributes,\n        attributeDivisors: attributeDivisors,\n        object: vao,\n        attributes: {},\n        index: null\n      };\n    }\n\n    function needsUpdate(geometry, index) {\n      const cachedAttributes = currentState.attributes;\n      const geometryAttributes = geometry.attributes;\n      let attributesNum = 0;\n\n      for (const key in geometryAttributes) {\n        const cachedAttribute = cachedAttributes[key];\n        const geometryAttribute = geometryAttributes[key];\n        if (cachedAttribute === undefined) return true;\n        if (cachedAttribute.attribute !== geometryAttribute) return true;\n        if (cachedAttribute.data !== geometryAttribute.data) return true;\n        attributesNum++;\n      }\n\n      if (currentState.attributesNum !== attributesNum) return true;\n      if (currentState.index !== index) return true;\n      return false;\n    }\n\n    function saveCache(geometry, index) {\n      const cache = {};\n      const attributes = geometry.attributes;\n      let attributesNum = 0;\n\n      for (const key in attributes) {\n        const attribute = attributes[key];\n        const data = {};\n        data.attribute = attribute;\n\n        if (attribute.data) {\n          data.data = attribute.data;\n        }\n\n        cache[key] = data;\n        attributesNum++;\n      }\n\n      currentState.attributes = cache;\n      currentState.attributesNum = attributesNum;\n      currentState.index = index;\n    }\n\n    function initAttributes() {\n      const newAttributes = currentState.newAttributes;\n\n      for (let i = 0, il = newAttributes.length; i < il; i++) {\n        newAttributes[i] = 0;\n      }\n    }\n\n    function enableAttribute(attribute) {\n      enableAttributeAndDivisor(attribute, 0);\n    }\n\n    function enableAttributeAndDivisor(attribute, meshPerAttribute) {\n      const newAttributes = currentState.newAttributes;\n      const enabledAttributes = currentState.enabledAttributes;\n      const attributeDivisors = currentState.attributeDivisors;\n      newAttributes[attribute] = 1;\n\n      if (enabledAttributes[attribute] === 0) {\n        gl.enableVertexAttribArray(attribute);\n        enabledAttributes[attribute] = 1;\n      }\n\n      if (attributeDivisors[attribute] !== meshPerAttribute) {\n        const extension = capabilities.isWebGL2 ? gl : extensions.get('ANGLE_instanced_arrays');\n        extension[capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE'](attribute, meshPerAttribute);\n        attributeDivisors[attribute] = meshPerAttribute;\n      }\n    }\n\n    function disableUnusedAttributes() {\n      const newAttributes = currentState.newAttributes;\n      const enabledAttributes = currentState.enabledAttributes;\n\n      for (let i = 0, il = enabledAttributes.length; i < il; i++) {\n        if (enabledAttributes[i] !== newAttributes[i]) {\n          gl.disableVertexAttribArray(i);\n          enabledAttributes[i] = 0;\n        }\n      }\n    }\n\n    function vertexAttribPointer(index, size, type, normalized, stride, offset) {\n      if (capabilities.isWebGL2 === true && (type === gl.INT || type === gl.UNSIGNED_INT)) {\n        gl.vertexAttribIPointer(index, size, type, stride, offset);\n      } else {\n        gl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n      }\n    }\n\n    function setupVertexAttributes(object, material, program, geometry) {\n      if (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {\n        if (extensions.get('ANGLE_instanced_arrays') === null) return;\n      }\n\n      initAttributes();\n      const geometryAttributes = geometry.attributes;\n      const programAttributes = program.getAttributes();\n      const materialDefaultAttributeValues = material.defaultAttributeValues;\n\n      for (const name in programAttributes) {\n        const programAttribute = programAttributes[name];\n\n        if (programAttribute.location >= 0) {\n          let geometryAttribute = geometryAttributes[name];\n\n          if (geometryAttribute === undefined) {\n            if (name === 'instanceMatrix' && object.instanceMatrix) geometryAttribute = object.instanceMatrix;\n            if (name === 'instanceColor' && object.instanceColor) geometryAttribute = object.instanceColor;\n          }\n\n          if (geometryAttribute !== undefined) {\n            const normalized = geometryAttribute.normalized;\n            const size = geometryAttribute.itemSize;\n            const attribute = attributes.get(geometryAttribute); // TODO Attribute may not be available on context restore\n\n            if (attribute === undefined) continue;\n            const buffer = attribute.buffer;\n            const type = attribute.type;\n            const bytesPerElement = attribute.bytesPerElement;\n\n            if (geometryAttribute.isInterleavedBufferAttribute) {\n              const data = geometryAttribute.data;\n              const stride = data.stride;\n              const offset = geometryAttribute.offset;\n\n              if (data && data.isInstancedInterleavedBuffer) {\n                for (let i = 0; i < programAttribute.locationSize; i++) {\n                  enableAttributeAndDivisor(programAttribute.location + i, data.meshPerAttribute);\n                }\n\n                if (object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined) {\n                  geometry._maxInstanceCount = data.meshPerAttribute * data.count;\n                }\n              } else {\n                for (let i = 0; i < programAttribute.locationSize; i++) {\n                  enableAttribute(programAttribute.location + i);\n                }\n              }\n\n              gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\n              for (let i = 0; i < programAttribute.locationSize; i++) {\n                vertexAttribPointer(programAttribute.location + i, size / programAttribute.locationSize, type, normalized, stride * bytesPerElement, (offset + size / programAttribute.locationSize * i) * bytesPerElement);\n              }\n            } else {\n              if (geometryAttribute.isInstancedBufferAttribute) {\n                for (let i = 0; i < programAttribute.locationSize; i++) {\n                  enableAttributeAndDivisor(programAttribute.location + i, geometryAttribute.meshPerAttribute);\n                }\n\n                if (object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined) {\n                  geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n                }\n              } else {\n                for (let i = 0; i < programAttribute.locationSize; i++) {\n                  enableAttribute(programAttribute.location + i);\n                }\n              }\n\n              gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\n              for (let i = 0; i < programAttribute.locationSize; i++) {\n                vertexAttribPointer(programAttribute.location + i, size / programAttribute.locationSize, type, normalized, size * bytesPerElement, size / programAttribute.locationSize * i * bytesPerElement);\n              }\n            }\n          } else if (materialDefaultAttributeValues !== undefined) {\n            const value = materialDefaultAttributeValues[name];\n\n            if (value !== undefined) {\n              switch (value.length) {\n                case 2:\n                  gl.vertexAttrib2fv(programAttribute.location, value);\n                  break;\n\n                case 3:\n                  gl.vertexAttrib3fv(programAttribute.location, value);\n                  break;\n\n                case 4:\n                  gl.vertexAttrib4fv(programAttribute.location, value);\n                  break;\n\n                default:\n                  gl.vertexAttrib1fv(programAttribute.location, value);\n              }\n            }\n          }\n        }\n      }\n\n      disableUnusedAttributes();\n    }\n\n    function dispose() {\n      reset();\n\n      for (const geometryId in bindingStates) {\n        const programMap = bindingStates[geometryId];\n\n        for (const programId in programMap) {\n          const stateMap = programMap[programId];\n\n          for (const wireframe in stateMap) {\n            deleteVertexArrayObject(stateMap[wireframe].object);\n            delete stateMap[wireframe];\n          }\n\n          delete programMap[programId];\n        }\n\n        delete bindingStates[geometryId];\n      }\n    }\n\n    function releaseStatesOfGeometry(geometry) {\n      if (bindingStates[geometry.id] === undefined) return;\n      const programMap = bindingStates[geometry.id];\n\n      for (const programId in programMap) {\n        const stateMap = programMap[programId];\n\n        for (const wireframe in stateMap) {\n          deleteVertexArrayObject(stateMap[wireframe].object);\n          delete stateMap[wireframe];\n        }\n\n        delete programMap[programId];\n      }\n\n      delete bindingStates[geometry.id];\n    }\n\n    function releaseStatesOfProgram(program) {\n      for (const geometryId in bindingStates) {\n        const programMap = bindingStates[geometryId];\n        if (programMap[program.id] === undefined) continue;\n        const stateMap = programMap[program.id];\n\n        for (const wireframe in stateMap) {\n          deleteVertexArrayObject(stateMap[wireframe].object);\n          delete stateMap[wireframe];\n        }\n\n        delete programMap[program.id];\n      }\n    }\n\n    function reset() {\n      resetDefaultState();\n      if (currentState === defaultState) return;\n      currentState = defaultState;\n      bindVertexArrayObject(currentState.object);\n    } // for backward-compatilibity\n\n\n    function resetDefaultState() {\n      defaultState.geometry = null;\n      defaultState.program = null;\n      defaultState.wireframe = false;\n    }\n\n    return {\n      setup: setup,\n      reset: reset,\n      resetDefaultState: resetDefaultState,\n      dispose: dispose,\n      releaseStatesOfGeometry: releaseStatesOfGeometry,\n      releaseStatesOfProgram: releaseStatesOfProgram,\n      initAttributes: initAttributes,\n      enableAttribute: enableAttribute,\n      disableUnusedAttributes: disableUnusedAttributes\n    };\n  }\n\n  function WebGLBufferRenderer(gl, extensions, info, capabilities) {\n    const isWebGL2 = capabilities.isWebGL2;\n    let mode;\n\n    function setMode(value) {\n      mode = value;\n    }\n\n    function render(start, count) {\n      gl.drawArrays(mode, start, count);\n      info.update(count, mode, 1);\n    }\n\n    function renderInstances(start, count, primcount) {\n      if (primcount === 0) return;\n      let extension, methodName;\n\n      if (isWebGL2) {\n        extension = gl;\n        methodName = 'drawArraysInstanced';\n      } else {\n        extension = extensions.get('ANGLE_instanced_arrays');\n        methodName = 'drawArraysInstancedANGLE';\n\n        if (extension === null) {\n          console.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n          return;\n        }\n      }\n\n      extension[methodName](mode, start, count, primcount);\n      info.update(count, mode, primcount);\n    } //\n\n\n    this.setMode = setMode;\n    this.render = render;\n    this.renderInstances = renderInstances;\n  }\n\n  function WebGLCapabilities(gl, extensions, parameters) {\n    let maxAnisotropy;\n\n    function getMaxAnisotropy() {\n      if (maxAnisotropy !== undefined) return maxAnisotropy;\n\n      if (extensions.has('EXT_texture_filter_anisotropic') === true) {\n        const extension = extensions.get('EXT_texture_filter_anisotropic');\n        maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n      } else {\n        maxAnisotropy = 0;\n      }\n\n      return maxAnisotropy;\n    }\n\n    function getMaxPrecision(precision) {\n      if (precision === 'highp') {\n        if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {\n          return 'highp';\n        }\n\n        precision = 'mediump';\n      }\n\n      if (precision === 'mediump') {\n        if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {\n          return 'mediump';\n        }\n      }\n\n      return 'lowp';\n    }\n    /* eslint-disable no-undef */\n\n\n    const isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext;\n    /* eslint-enable no-undef */\n\n    let precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n    const maxPrecision = getMaxPrecision(precision);\n\n    if (maxPrecision !== precision) {\n      console.warn('THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.');\n      precision = maxPrecision;\n    }\n\n    const drawBuffers = isWebGL2 || extensions.has('WEBGL_draw_buffers');\n    const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n    const maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    const maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\n    const maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    const maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    const maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    const maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n    const maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);\n    const maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n    const vertexTextures = maxVertexTextures > 0;\n    const floatFragmentTextures = isWebGL2 || extensions.has('OES_texture_float');\n    const floatVertexTextures = vertexTextures && floatFragmentTextures;\n    const maxSamples = isWebGL2 ? gl.getParameter(gl.MAX_SAMPLES) : 0;\n    return {\n      isWebGL2: isWebGL2,\n      drawBuffers: drawBuffers,\n      getMaxAnisotropy: getMaxAnisotropy,\n      getMaxPrecision: getMaxPrecision,\n      precision: precision,\n      logarithmicDepthBuffer: logarithmicDepthBuffer,\n      maxTextures: maxTextures,\n      maxVertexTextures: maxVertexTextures,\n      maxTextureSize: maxTextureSize,\n      maxCubemapSize: maxCubemapSize,\n      maxAttributes: maxAttributes,\n      maxVertexUniforms: maxVertexUniforms,\n      maxVaryings: maxVaryings,\n      maxFragmentUniforms: maxFragmentUniforms,\n      vertexTextures: vertexTextures,\n      floatFragmentTextures: floatFragmentTextures,\n      floatVertexTextures: floatVertexTextures,\n      maxSamples: maxSamples\n    };\n  }\n\n  function WebGLClipping(properties) {\n    const scope = this;\n    let globalState = null,\n        numGlobalPlanes = 0,\n        localClippingEnabled = false,\n        renderingShadows = false;\n    const plane = new Plane(),\n          viewNormalMatrix = new Matrix3(),\n          uniform = {\n      value: null,\n      needsUpdate: false\n    };\n    this.uniform = uniform;\n    this.numPlanes = 0;\n    this.numIntersection = 0;\n\n    this.init = function (planes, enableLocalClipping, camera) {\n      const enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to\n      // run another frame in order to reset the state:\n      numGlobalPlanes !== 0 || localClippingEnabled;\n      localClippingEnabled = enableLocalClipping;\n      globalState = projectPlanes(planes, camera, 0);\n      numGlobalPlanes = planes.length;\n      return enabled;\n    };\n\n    this.beginShadows = function () {\n      renderingShadows = true;\n      projectPlanes(null);\n    };\n\n    this.endShadows = function () {\n      renderingShadows = false;\n      resetGlobalState();\n    };\n\n    this.setState = function (material, camera, useCache) {\n      const planes = material.clippingPlanes,\n            clipIntersection = material.clipIntersection,\n            clipShadows = material.clipShadows;\n      const materialProperties = properties.get(material);\n\n      if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {\n        // there's no local clipping\n        if (renderingShadows) {\n          // there's no global clipping\n          projectPlanes(null);\n        } else {\n          resetGlobalState();\n        }\n      } else {\n        const nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n              lGlobal = nGlobal * 4;\n        let dstArray = materialProperties.clippingState || null;\n        uniform.value = dstArray; // ensure unique state\n\n        dstArray = projectPlanes(planes, camera, lGlobal, useCache);\n\n        for (let i = 0; i !== lGlobal; ++i) {\n          dstArray[i] = globalState[i];\n        }\n\n        materialProperties.clippingState = dstArray;\n        this.numIntersection = clipIntersection ? this.numPlanes : 0;\n        this.numPlanes += nGlobal;\n      }\n    };\n\n    function resetGlobalState() {\n      if (uniform.value !== globalState) {\n        uniform.value = globalState;\n        uniform.needsUpdate = numGlobalPlanes > 0;\n      }\n\n      scope.numPlanes = numGlobalPlanes;\n      scope.numIntersection = 0;\n    }\n\n    function projectPlanes(planes, camera, dstOffset, skipTransform) {\n      const nPlanes = planes !== null ? planes.length : 0;\n      let dstArray = null;\n\n      if (nPlanes !== 0) {\n        dstArray = uniform.value;\n\n        if (skipTransform !== true || dstArray === null) {\n          const flatSize = dstOffset + nPlanes * 4,\n                viewMatrix = camera.matrixWorldInverse;\n          viewNormalMatrix.getNormalMatrix(viewMatrix);\n\n          if (dstArray === null || dstArray.length < flatSize) {\n            dstArray = new Float32Array(flatSize);\n          }\n\n          for (let i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {\n            plane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);\n            plane.normal.toArray(dstArray, i4);\n            dstArray[i4 + 3] = plane.constant;\n          }\n        }\n\n        uniform.value = dstArray;\n        uniform.needsUpdate = true;\n      }\n\n      scope.numPlanes = nPlanes;\n      scope.numIntersection = 0;\n      return dstArray;\n    }\n  }\n\n  function WebGLCubeMaps(renderer) {\n    let cubemaps = new WeakMap();\n\n    function mapTextureMapping(texture, mapping) {\n      if (mapping === EquirectangularReflectionMapping) {\n        texture.mapping = CubeReflectionMapping;\n      } else if (mapping === EquirectangularRefractionMapping) {\n        texture.mapping = CubeRefractionMapping;\n      }\n\n      return texture;\n    }\n\n    function get(texture) {\n      if (texture && texture.isTexture && texture.isRenderTargetTexture === false) {\n        const mapping = texture.mapping;\n\n        if (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {\n          if (cubemaps.has(texture)) {\n            const cubemap = cubemaps.get(texture).texture;\n            return mapTextureMapping(cubemap, texture.mapping);\n          } else {\n            const image = texture.image;\n\n            if (image && image.height > 0) {\n              const currentRenderTarget = renderer.getRenderTarget();\n              const renderTarget = new WebGLCubeRenderTarget(image.height / 2);\n              renderTarget.fromEquirectangularTexture(renderer, texture);\n              cubemaps.set(texture, renderTarget);\n              renderer.setRenderTarget(currentRenderTarget);\n              texture.addEventListener('dispose', onTextureDispose);\n              return mapTextureMapping(renderTarget.texture, texture.mapping);\n            } else {\n              // image not yet ready. try the conversion next frame\n              return null;\n            }\n          }\n        }\n      }\n\n      return texture;\n    }\n\n    function onTextureDispose(event) {\n      const texture = event.target;\n      texture.removeEventListener('dispose', onTextureDispose);\n      const cubemap = cubemaps.get(texture);\n\n      if (cubemap !== undefined) {\n        cubemaps.delete(texture);\n        cubemap.dispose();\n      }\n    }\n\n    function dispose() {\n      cubemaps = new WeakMap();\n    }\n\n    return {\n      get: get,\n      dispose: dispose\n    };\n  }\n\n  class OrthographicCamera extends Camera {\n    constructor() {\n      let left = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n      let right = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      let top = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      let bottom = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n      let near = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.1;\n      let far = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 2000;\n      super();\n      this.type = 'OrthographicCamera';\n      this.zoom = 1;\n      this.view = null;\n      this.left = left;\n      this.right = right;\n      this.top = top;\n      this.bottom = bottom;\n      this.near = near;\n      this.far = far;\n      this.updateProjectionMatrix();\n    }\n\n    copy(source, recursive) {\n      super.copy(source, recursive);\n      this.left = source.left;\n      this.right = source.right;\n      this.top = source.top;\n      this.bottom = source.bottom;\n      this.near = source.near;\n      this.far = source.far;\n      this.zoom = source.zoom;\n      this.view = source.view === null ? null : Object.assign({}, source.view);\n      return this;\n    }\n\n    setViewOffset(fullWidth, fullHeight, x, y, width, height) {\n      if (this.view === null) {\n        this.view = {\n          enabled: true,\n          fullWidth: 1,\n          fullHeight: 1,\n          offsetX: 0,\n          offsetY: 0,\n          width: 1,\n          height: 1\n        };\n      }\n\n      this.view.enabled = true;\n      this.view.fullWidth = fullWidth;\n      this.view.fullHeight = fullHeight;\n      this.view.offsetX = x;\n      this.view.offsetY = y;\n      this.view.width = width;\n      this.view.height = height;\n      this.updateProjectionMatrix();\n    }\n\n    clearViewOffset() {\n      if (this.view !== null) {\n        this.view.enabled = false;\n      }\n\n      this.updateProjectionMatrix();\n    }\n\n    updateProjectionMatrix() {\n      const dx = (this.right - this.left) / (2 * this.zoom);\n      const dy = (this.top - this.bottom) / (2 * this.zoom);\n      const cx = (this.right + this.left) / 2;\n      const cy = (this.top + this.bottom) / 2;\n      let left = cx - dx;\n      let right = cx + dx;\n      let top = cy + dy;\n      let bottom = cy - dy;\n\n      if (this.view !== null && this.view.enabled) {\n        const scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;\n        const scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;\n        left += scaleW * this.view.offsetX;\n        right = left + scaleW * this.view.width;\n        top -= scaleH * this.view.offsetY;\n        bottom = top - scaleH * this.view.height;\n      }\n\n      this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);\n      this.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n    }\n\n    toJSON(meta) {\n      const data = super.toJSON(meta);\n      data.object.zoom = this.zoom;\n      data.object.left = this.left;\n      data.object.right = this.right;\n      data.object.top = this.top;\n      data.object.bottom = this.bottom;\n      data.object.near = this.near;\n      data.object.far = this.far;\n      if (this.view !== null) data.object.view = Object.assign({}, this.view);\n      return data;\n    }\n\n  }\n\n  OrthographicCamera.prototype.isOrthographicCamera = true;\n\n  class RawShaderMaterial extends ShaderMaterial {\n    constructor(parameters) {\n      super(parameters);\n      this.type = 'RawShaderMaterial';\n    }\n\n  }\n\n  RawShaderMaterial.prototype.isRawShaderMaterial = true;\n  const LOD_MIN = 4;\n  const LOD_MAX = 8;\n  const SIZE_MAX = Math.pow(2, LOD_MAX); // The standard deviations (radians) associated with the extra mips. These are\n  // chosen to approximate a Trowbridge-Reitz distribution function times the\n  // geometric shadowing function. These sigma values squared must match the\n  // variance #defines in cube_uv_reflection_fragment.glsl.js.\n\n  const EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];\n  const TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length; // The maximum length of the blur for loop. Smaller sigmas will use fewer\n  // samples and exit early, but not recompile the shader.\n\n  const MAX_SAMPLES = 20;\n  const ENCODINGS = {\n    [LinearEncoding]: 0,\n    [sRGBEncoding]: 1,\n    [RGBEEncoding]: 2,\n    [RGBM7Encoding]: 3,\n    [RGBM16Encoding]: 4,\n    [RGBDEncoding]: 5,\n    [GammaEncoding]: 6\n  };\n\n  const _flatCamera = /*@__PURE__*/new OrthographicCamera();\n\n  const {\n    _lodPlanes,\n    _sizeLods,\n    _sigmas\n  } = /*@__PURE__*/_createPlanes();\n\n  const _clearColor = /*@__PURE__*/new Color();\n\n  let _oldTarget = null; // Golden Ratio\n\n  const PHI = (1 + Math.sqrt(5)) / 2;\n  const INV_PHI = 1 / PHI; // Vertices of a dodecahedron (except the opposites, which represent the\n  // same axis), used as axis directions evenly spread on a sphere.\n\n  const _axisDirections = [/*@__PURE__*/new Vector3(1, 1, 1), /*@__PURE__*/new Vector3(-1, 1, 1), /*@__PURE__*/new Vector3(1, 1, -1), /*@__PURE__*/new Vector3(-1, 1, -1), /*@__PURE__*/new Vector3(0, PHI, INV_PHI), /*@__PURE__*/new Vector3(0, PHI, -INV_PHI), /*@__PURE__*/new Vector3(INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(-INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(PHI, INV_PHI, 0), /*@__PURE__*/new Vector3(-PHI, INV_PHI, 0)];\n  /**\n   * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n   * (PMREM) from a cubeMap environment texture. This allows different levels of\n   * blur to be quickly accessed based on material roughness. It is packed into a\n   * special CubeUV format that allows us to perform custom interpolation so that\n   * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n   * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n   * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n   * higher roughness levels. In this way we maintain resolution to smoothly\n   * interpolate diffuse lighting while limiting sampling computation.\n   *\n   * Paper: Fast, Accurate Image-Based Lighting\n   * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view\n  */\n\n  class PMREMGenerator {\n    constructor(renderer) {\n      this._renderer = renderer;\n      this._pingPongRenderTarget = null;\n      this._blurMaterial = _getBlurShader(MAX_SAMPLES);\n      this._equirectShader = null;\n      this._cubemapShader = null;\n\n      this._compileMaterial(this._blurMaterial);\n    }\n    /**\n     * Generates a PMREM from a supplied Scene, which can be faster than using an\n     * image if networking bandwidth is low. Optional sigma specifies a blur radius\n     * in radians to be applied to the scene before PMREM generation. Optional near\n     * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n     * is placed at the origin).\n     */\n\n\n    fromScene(scene) {\n      let sigma = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      let near = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.1;\n      let far = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 100;\n      _oldTarget = this._renderer.getRenderTarget();\n\n      const cubeUVRenderTarget = this._allocateTargets();\n\n      this._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);\n\n      if (sigma > 0) {\n        this._blur(cubeUVRenderTarget, 0, 0, sigma);\n      }\n\n      this._applyPMREM(cubeUVRenderTarget);\n\n      this._cleanup(cubeUVRenderTarget);\n\n      return cubeUVRenderTarget;\n    }\n    /**\n     * Generates a PMREM from an equirectangular texture, which can be either LDR\n     * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),\n     * as this matches best with the 256 x 256 cubemap output.\n     */\n\n\n    fromEquirectangular(equirectangular) {\n      return this._fromTexture(equirectangular);\n    }\n    /**\n     * Generates a PMREM from an cubemap texture, which can be either LDR\n     * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,\n     * as this matches best with the 256 x 256 cubemap output.\n     */\n\n\n    fromCubemap(cubemap) {\n      return this._fromTexture(cubemap);\n    }\n    /**\n     * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n     * your texture's network fetch for increased concurrency.\n     */\n\n\n    compileCubemapShader() {\n      if (this._cubemapShader === null) {\n        this._cubemapShader = _getCubemapShader();\n\n        this._compileMaterial(this._cubemapShader);\n      }\n    }\n    /**\n     * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n     * your texture's network fetch for increased concurrency.\n     */\n\n\n    compileEquirectangularShader() {\n      if (this._equirectShader === null) {\n        this._equirectShader = _getEquirectShader();\n\n        this._compileMaterial(this._equirectShader);\n      }\n    }\n    /**\n     * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n     * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n     * one of them will cause any others to also become unusable.\n     */\n\n\n    dispose() {\n      this._blurMaterial.dispose();\n\n      if (this._cubemapShader !== null) this._cubemapShader.dispose();\n      if (this._equirectShader !== null) this._equirectShader.dispose();\n\n      for (let i = 0; i < _lodPlanes.length; i++) {\n        _lodPlanes[i].dispose();\n      }\n    } // private interface\n\n\n    _cleanup(outputTarget) {\n      this._pingPongRenderTarget.dispose();\n\n      this._renderer.setRenderTarget(_oldTarget);\n\n      outputTarget.scissorTest = false;\n\n      _setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);\n    }\n\n    _fromTexture(texture) {\n      _oldTarget = this._renderer.getRenderTarget();\n\n      const cubeUVRenderTarget = this._allocateTargets(texture);\n\n      this._textureToCubeUV(texture, cubeUVRenderTarget);\n\n      this._applyPMREM(cubeUVRenderTarget);\n\n      this._cleanup(cubeUVRenderTarget);\n\n      return cubeUVRenderTarget;\n    }\n\n    _allocateTargets(texture) {\n      // warning: null texture is valid\n      const params = {\n        magFilter: NearestFilter,\n        minFilter: NearestFilter,\n        generateMipmaps: false,\n        type: UnsignedByteType,\n        format: RGBEFormat,\n        encoding: _isLDR(texture) ? texture.encoding : RGBEEncoding,\n        depthBuffer: false\n      };\n\n      const cubeUVRenderTarget = _createRenderTarget(params);\n\n      cubeUVRenderTarget.depthBuffer = texture ? false : true;\n      this._pingPongRenderTarget = _createRenderTarget(params);\n      return cubeUVRenderTarget;\n    }\n\n    _compileMaterial(material) {\n      const tmpMesh = new Mesh(_lodPlanes[0], material);\n\n      this._renderer.compile(tmpMesh, _flatCamera);\n    }\n\n    _sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {\n      const fov = 90;\n      const aspect = 1;\n      const cubeCamera = new PerspectiveCamera(fov, aspect, near, far);\n      const upSign = [1, -1, 1, 1, 1, 1];\n      const forwardSign = [1, 1, 1, -1, -1, -1];\n      const renderer = this._renderer;\n      const originalAutoClear = renderer.autoClear;\n      const outputEncoding = renderer.outputEncoding;\n      const toneMapping = renderer.toneMapping;\n      renderer.getClearColor(_clearColor);\n      renderer.toneMapping = NoToneMapping;\n      renderer.outputEncoding = LinearEncoding;\n      renderer.autoClear = false;\n      const backgroundMaterial = new MeshBasicMaterial({\n        name: 'PMREM.Background',\n        side: BackSide,\n        depthWrite: false,\n        depthTest: false\n      });\n      const backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);\n      let useSolidColor = false;\n      const background = scene.background;\n\n      if (background) {\n        if (background.isColor) {\n          backgroundMaterial.color.copy(background);\n          scene.background = null;\n          useSolidColor = true;\n        }\n      } else {\n        backgroundMaterial.color.copy(_clearColor);\n        useSolidColor = true;\n      }\n\n      for (let i = 0; i < 6; i++) {\n        const col = i % 3;\n\n        if (col == 0) {\n          cubeCamera.up.set(0, upSign[i], 0);\n          cubeCamera.lookAt(forwardSign[i], 0, 0);\n        } else if (col == 1) {\n          cubeCamera.up.set(0, 0, upSign[i]);\n          cubeCamera.lookAt(0, forwardSign[i], 0);\n        } else {\n          cubeCamera.up.set(0, upSign[i], 0);\n          cubeCamera.lookAt(0, 0, forwardSign[i]);\n        }\n\n        _setViewport(cubeUVRenderTarget, col * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX);\n\n        renderer.setRenderTarget(cubeUVRenderTarget);\n\n        if (useSolidColor) {\n          renderer.render(backgroundBox, cubeCamera);\n        }\n\n        renderer.render(scene, cubeCamera);\n      }\n\n      backgroundBox.geometry.dispose();\n      backgroundBox.material.dispose();\n      renderer.toneMapping = toneMapping;\n      renderer.outputEncoding = outputEncoding;\n      renderer.autoClear = originalAutoClear;\n      scene.background = background;\n    }\n\n    _setEncoding(uniform, texture) {\n      if (this._renderer.capabilities.isWebGL2 === true && texture.format === RGBAFormat && texture.type === UnsignedByteType && texture.encoding === sRGBEncoding) {\n        uniform.value = ENCODINGS[LinearEncoding];\n      } else {\n        uniform.value = ENCODINGS[texture.encoding];\n      }\n    }\n\n    _textureToCubeUV(texture, cubeUVRenderTarget) {\n      const renderer = this._renderer;\n      const isCubeTexture = texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping;\n\n      if (isCubeTexture) {\n        if (this._cubemapShader == null) {\n          this._cubemapShader = _getCubemapShader();\n        }\n      } else {\n        if (this._equirectShader == null) {\n          this._equirectShader = _getEquirectShader();\n        }\n      }\n\n      const material = isCubeTexture ? this._cubemapShader : this._equirectShader;\n      const mesh = new Mesh(_lodPlanes[0], material);\n      const uniforms = material.uniforms;\n      uniforms['envMap'].value = texture;\n\n      if (!isCubeTexture) {\n        uniforms['texelSize'].value.set(1.0 / texture.image.width, 1.0 / texture.image.height);\n      }\n\n      this._setEncoding(uniforms['inputEncoding'], texture);\n\n      this._setEncoding(uniforms['outputEncoding'], cubeUVRenderTarget.texture);\n\n      _setViewport(cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX);\n\n      renderer.setRenderTarget(cubeUVRenderTarget);\n      renderer.render(mesh, _flatCamera);\n    }\n\n    _applyPMREM(cubeUVRenderTarget) {\n      const renderer = this._renderer;\n      const autoClear = renderer.autoClear;\n      renderer.autoClear = false;\n\n      for (let i = 1; i < TOTAL_LODS; i++) {\n        const sigma = Math.sqrt(_sigmas[i] * _sigmas[i] - _sigmas[i - 1] * _sigmas[i - 1]);\n        const poleAxis = _axisDirections[(i - 1) % _axisDirections.length];\n\n        this._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);\n      }\n\n      renderer.autoClear = autoClear;\n    }\n    /**\n     * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n     * vertically and horizontally, but this breaks down on a cube. Here we apply\n     * the blur latitudinally (around the poles), and then longitudinally (towards\n     * the poles) to approximate the orthogonally-separable blur. It is least\n     * accurate at the poles, but still does a decent job.\n     */\n\n\n    _blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {\n      const pingPongRenderTarget = this._pingPongRenderTarget;\n\n      this._halfBlur(cubeUVRenderTarget, pingPongRenderTarget, lodIn, lodOut, sigma, 'latitudinal', poleAxis);\n\n      this._halfBlur(pingPongRenderTarget, cubeUVRenderTarget, lodOut, lodOut, sigma, 'longitudinal', poleAxis);\n    }\n\n    _halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {\n      const renderer = this._renderer;\n      const blurMaterial = this._blurMaterial;\n\n      if (direction !== 'latitudinal' && direction !== 'longitudinal') {\n        console.error('blur direction must be either latitudinal or longitudinal!');\n      } // Number of standard deviations at which to cut off the discrete approximation.\n\n\n      const STANDARD_DEVIATIONS = 3;\n      const blurMesh = new Mesh(_lodPlanes[lodOut], blurMaterial);\n      const blurUniforms = blurMaterial.uniforms;\n      const pixels = _sizeLods[lodIn] - 1;\n      const radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);\n      const sigmaPixels = sigmaRadians / radiansPerPixel;\n      const samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;\n\n      if (samples > MAX_SAMPLES) {\n        console.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);\n      }\n\n      const weights = [];\n      let sum = 0;\n\n      for (let i = 0; i < MAX_SAMPLES; ++i) {\n        const x = i / sigmaPixels;\n        const weight = Math.exp(-x * x / 2);\n        weights.push(weight);\n\n        if (i == 0) {\n          sum += weight;\n        } else if (i < samples) {\n          sum += 2 * weight;\n        }\n      }\n\n      for (let i = 0; i < weights.length; i++) {\n        weights[i] = weights[i] / sum;\n      }\n\n      blurUniforms['envMap'].value = targetIn.texture;\n      blurUniforms['samples'].value = samples;\n      blurUniforms['weights'].value = weights;\n      blurUniforms['latitudinal'].value = direction === 'latitudinal';\n\n      if (poleAxis) {\n        blurUniforms['poleAxis'].value = poleAxis;\n      }\n\n      blurUniforms['dTheta'].value = radiansPerPixel;\n      blurUniforms['mipInt'].value = LOD_MAX - lodIn;\n\n      this._setEncoding(blurUniforms['inputEncoding'], targetIn.texture);\n\n      this._setEncoding(blurUniforms['outputEncoding'], targetIn.texture);\n\n      const outputSize = _sizeLods[lodOut];\n      const x = 3 * Math.max(0, SIZE_MAX - 2 * outputSize);\n      const y = (lodOut === 0 ? 0 : 2 * SIZE_MAX) + 2 * outputSize * (lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0);\n\n      _setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);\n\n      renderer.setRenderTarget(targetOut);\n      renderer.render(blurMesh, _flatCamera);\n    }\n\n  }\n\n  function _isLDR(texture) {\n    if (texture === undefined || texture.type !== UnsignedByteType) return false;\n    return texture.encoding === LinearEncoding || texture.encoding === sRGBEncoding || texture.encoding === GammaEncoding;\n  }\n\n  function _createPlanes() {\n    const _lodPlanes = [];\n    const _sizeLods = [];\n    const _sigmas = [];\n    let lod = LOD_MAX;\n\n    for (let i = 0; i < TOTAL_LODS; i++) {\n      const sizeLod = Math.pow(2, lod);\n\n      _sizeLods.push(sizeLod);\n\n      let sigma = 1.0 / sizeLod;\n\n      if (i > LOD_MAX - LOD_MIN) {\n        sigma = EXTRA_LOD_SIGMA[i - LOD_MAX + LOD_MIN - 1];\n      } else if (i == 0) {\n        sigma = 0;\n      }\n\n      _sigmas.push(sigma);\n\n      const texelSize = 1.0 / (sizeLod - 1);\n      const min = -texelSize / 2;\n      const max = 1 + texelSize / 2;\n      const uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];\n      const cubeFaces = 6;\n      const vertices = 6;\n      const positionSize = 3;\n      const uvSize = 2;\n      const faceIndexSize = 1;\n      const position = new Float32Array(positionSize * vertices * cubeFaces);\n      const uv = new Float32Array(uvSize * vertices * cubeFaces);\n      const faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);\n\n      for (let face = 0; face < cubeFaces; face++) {\n        const x = face % 3 * 2 / 3 - 1;\n        const y = face > 2 ? 0 : -1;\n        const coordinates = [x, y, 0, x + 2 / 3, y, 0, x + 2 / 3, y + 1, 0, x, y, 0, x + 2 / 3, y + 1, 0, x, y + 1, 0];\n        position.set(coordinates, positionSize * vertices * face);\n        uv.set(uv1, uvSize * vertices * face);\n        const fill = [face, face, face, face, face, face];\n        faceIndex.set(fill, faceIndexSize * vertices * face);\n      }\n\n      const planes = new BufferGeometry();\n      planes.setAttribute('position', new BufferAttribute(position, positionSize));\n      planes.setAttribute('uv', new BufferAttribute(uv, uvSize));\n      planes.setAttribute('faceIndex', new BufferAttribute(faceIndex, faceIndexSize));\n\n      _lodPlanes.push(planes);\n\n      if (lod > LOD_MIN) {\n        lod--;\n      }\n    }\n\n    return {\n      _lodPlanes,\n      _sizeLods,\n      _sigmas\n    };\n  }\n\n  function _createRenderTarget(params) {\n    const cubeUVRenderTarget = new WebGLRenderTarget(3 * SIZE_MAX, 3 * SIZE_MAX, params);\n    cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n    cubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n    cubeUVRenderTarget.scissorTest = true;\n    return cubeUVRenderTarget;\n  }\n\n  function _setViewport(target, x, y, width, height) {\n    target.viewport.set(x, y, width, height);\n    target.scissor.set(x, y, width, height);\n  }\n\n  function _getBlurShader(maxSamples) {\n    const weights = new Float32Array(maxSamples);\n    const poleAxis = new Vector3(0, 1, 0);\n    const shaderMaterial = new RawShaderMaterial({\n      name: 'SphericalGaussianBlur',\n      defines: {\n        'n': maxSamples\n      },\n      uniforms: {\n        'envMap': {\n          value: null\n        },\n        'samples': {\n          value: 1\n        },\n        'weights': {\n          value: weights\n        },\n        'latitudinal': {\n          value: false\n        },\n        'dTheta': {\n          value: 0\n        },\n        'mipInt': {\n          value: 0\n        },\n        'poleAxis': {\n          value: poleAxis\n        },\n        'inputEncoding': {\n          value: ENCODINGS[LinearEncoding]\n        },\n        'outputEncoding': {\n          value: ENCODINGS[LinearEncoding]\n        }\n      },\n      vertexShader: _getCommonVertexShader(),\n      fragmentShader:\n      /* glsl */\n      `\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t${_getEncodings()}\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n      blending: NoBlending,\n      depthTest: false,\n      depthWrite: false\n    });\n    return shaderMaterial;\n  }\n\n  function _getEquirectShader() {\n    const texelSize = new Vector2(1, 1);\n    const shaderMaterial = new RawShaderMaterial({\n      name: 'EquirectangularToCubeUV',\n      uniforms: {\n        'envMap': {\n          value: null\n        },\n        'texelSize': {\n          value: texelSize\n        },\n        'inputEncoding': {\n          value: ENCODINGS[LinearEncoding]\n        },\n        'outputEncoding': {\n          value: ENCODINGS[LinearEncoding]\n        }\n      },\n      vertexShader: _getCommonVertexShader(),\n      fragmentShader:\n      /* glsl */\n      `\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t${_getEncodings()}\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tvec2 f = fract( uv / texelSize - 0.5 );\n\t\t\t\tuv -= f * texelSize;\n\t\t\t\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x += texelSize.x;\n\t\t\t\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.y += texelSize.y;\n\t\t\t\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x -= texelSize.x;\n\t\t\t\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\n\t\t\t\tvec3 tm = mix( tl, tr, f.x );\n\t\t\t\tvec3 bm = mix( bl, br, f.x );\n\t\t\t\tgl_FragColor.rgb = mix( tm, bm, f.y );\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n      blending: NoBlending,\n      depthTest: false,\n      depthWrite: false\n    });\n    return shaderMaterial;\n  }\n\n  function _getCubemapShader() {\n    const shaderMaterial = new RawShaderMaterial({\n      name: 'CubemapToCubeUV',\n      uniforms: {\n        'envMap': {\n          value: null\n        },\n        'inputEncoding': {\n          value: ENCODINGS[LinearEncoding]\n        },\n        'outputEncoding': {\n          value: ENCODINGS[LinearEncoding]\n        }\n      },\n      vertexShader: _getCommonVertexShader(),\n      fragmentShader:\n      /* glsl */\n      `\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\t${_getEncodings()}\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n      blending: NoBlending,\n      depthTest: false,\n      depthWrite: false\n    });\n    return shaderMaterial;\n  }\n\n  function _getCommonVertexShader() {\n    return (\n      /* glsl */\n      `\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t`\n    );\n  }\n\n  function _getEncodings() {\n    return (\n      /* glsl */\n      `\n\n\t\tuniform int inputEncoding;\n\t\tuniform int outputEncoding;\n\n\t\t#include <encodings_pars_fragment>\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( inputEncoding == 1 ) {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 2 ) {\n\n\t\t\t\treturn RGBEToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 3 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\n\n\t\t\t} else if ( inputEncoding == 4 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\n\n\t\t\t} else if ( inputEncoding == 5 ) {\n\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn GammaToLinear( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 linearToOutputTexel( vec4 value ) {\n\n\t\t\tif ( outputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( outputEncoding == 1 ) {\n\n\t\t\t\treturn LinearTosRGB( value );\n\n\t\t\t} else if ( outputEncoding == 2 ) {\n\n\t\t\t\treturn LinearToRGBE( value );\n\n\t\t\t} else if ( outputEncoding == 3 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\n\n\t\t\t} else if ( outputEncoding == 4 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\n\n\t\t\t} else if ( outputEncoding == 5 ) {\n\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn LinearToGamma( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t`\n    );\n  }\n\n  function WebGLCubeUVMaps(renderer) {\n    let cubeUVmaps = new WeakMap();\n    let pmremGenerator = null;\n\n    function get(texture) {\n      if (texture && texture.isTexture && texture.isRenderTargetTexture === false) {\n        const mapping = texture.mapping;\n        const isEquirectMap = mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping;\n        const isCubeMap = mapping === CubeReflectionMapping || mapping === CubeRefractionMapping;\n\n        if (isEquirectMap || isCubeMap) {\n          // equirect/cube map to cubeUV conversion\n          if (cubeUVmaps.has(texture)) {\n            return cubeUVmaps.get(texture).texture;\n          } else {\n            const image = texture.image;\n\n            if (isEquirectMap && image && image.height > 0 || isCubeMap && image && isCubeTextureComplete(image)) {\n              const currentRenderTarget = renderer.getRenderTarget();\n              if (pmremGenerator === null) pmremGenerator = new PMREMGenerator(renderer);\n              const renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture) : pmremGenerator.fromCubemap(texture);\n              cubeUVmaps.set(texture, renderTarget);\n              renderer.setRenderTarget(currentRenderTarget);\n              texture.addEventListener('dispose', onTextureDispose);\n              return renderTarget.texture;\n            } else {\n              // image not yet ready. try the conversion next frame\n              return null;\n            }\n          }\n        }\n      }\n\n      return texture;\n    }\n\n    function isCubeTextureComplete(image) {\n      let count = 0;\n      const length = 6;\n\n      for (let i = 0; i < length; i++) {\n        if (image[i] !== undefined) count++;\n      }\n\n      return count === length;\n    }\n\n    function onTextureDispose(event) {\n      const texture = event.target;\n      texture.removeEventListener('dispose', onTextureDispose);\n      const cubemapUV = cubeUVmaps.get(texture);\n\n      if (cubemapUV !== undefined) {\n        cubeUVmaps.delete(texture);\n        cubemapUV.dispose();\n      }\n    }\n\n    function dispose() {\n      cubeUVmaps = new WeakMap();\n\n      if (pmremGenerator !== null) {\n        pmremGenerator.dispose();\n        pmremGenerator = null;\n      }\n    }\n\n    return {\n      get: get,\n      dispose: dispose\n    };\n  }\n\n  function WebGLExtensions(gl) {\n    const extensions = {};\n\n    function getExtension(name) {\n      if (extensions[name] !== undefined) {\n        return extensions[name];\n      }\n\n      let extension;\n\n      switch (name) {\n        case 'WEBGL_depth_texture':\n          extension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');\n          break;\n\n        case 'EXT_texture_filter_anisotropic':\n          extension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n          break;\n\n        case 'WEBGL_compressed_texture_s3tc':\n          extension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');\n          break;\n\n        case 'WEBGL_compressed_texture_pvrtc':\n          extension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n          break;\n\n        default:\n          extension = gl.getExtension(name);\n      }\n\n      extensions[name] = extension;\n      return extension;\n    }\n\n    return {\n      has: function (name) {\n        return getExtension(name) !== null;\n      },\n      init: function (capabilities) {\n        if (capabilities.isWebGL2) {\n          getExtension('EXT_color_buffer_float');\n        } else {\n          getExtension('WEBGL_depth_texture');\n          getExtension('OES_texture_float');\n          getExtension('OES_texture_half_float');\n          getExtension('OES_texture_half_float_linear');\n          getExtension('OES_standard_derivatives');\n          getExtension('OES_element_index_uint');\n          getExtension('OES_vertex_array_object');\n          getExtension('ANGLE_instanced_arrays');\n        }\n\n        getExtension('OES_texture_float_linear');\n        getExtension('EXT_color_buffer_half_float');\n      },\n      get: function (name) {\n        const extension = getExtension(name);\n\n        if (extension === null) {\n          console.warn('THREE.WebGLRenderer: ' + name + ' extension not supported.');\n        }\n\n        return extension;\n      }\n    };\n  }\n\n  function WebGLGeometries(gl, attributes, info, bindingStates) {\n    const geometries = {};\n    const wireframeAttributes = new WeakMap();\n\n    function onGeometryDispose(event) {\n      const geometry = event.target;\n\n      if (geometry.index !== null) {\n        attributes.remove(geometry.index);\n      }\n\n      for (const name in geometry.attributes) {\n        attributes.remove(geometry.attributes[name]);\n      }\n\n      geometry.removeEventListener('dispose', onGeometryDispose);\n      delete geometries[geometry.id];\n      const attribute = wireframeAttributes.get(geometry);\n\n      if (attribute) {\n        attributes.remove(attribute);\n        wireframeAttributes.delete(geometry);\n      }\n\n      bindingStates.releaseStatesOfGeometry(geometry);\n\n      if (geometry.isInstancedBufferGeometry === true) {\n        delete geometry._maxInstanceCount;\n      } //\n\n\n      info.memory.geometries--;\n    }\n\n    function get(object, geometry) {\n      if (geometries[geometry.id] === true) return geometry;\n      geometry.addEventListener('dispose', onGeometryDispose);\n      geometries[geometry.id] = true;\n      info.memory.geometries++;\n      return geometry;\n    }\n\n    function update(geometry) {\n      const geometryAttributes = geometry.attributes; // Updating index buffer in VAO now. See WebGLBindingStates.\n\n      for (const name in geometryAttributes) {\n        attributes.update(geometryAttributes[name], gl.ARRAY_BUFFER);\n      } // morph targets\n\n\n      const morphAttributes = geometry.morphAttributes;\n\n      for (const name in morphAttributes) {\n        const array = morphAttributes[name];\n\n        for (let i = 0, l = array.length; i < l; i++) {\n          attributes.update(array[i], gl.ARRAY_BUFFER);\n        }\n      }\n    }\n\n    function updateWireframeAttribute(geometry) {\n      const indices = [];\n      const geometryIndex = geometry.index;\n      const geometryPosition = geometry.attributes.position;\n      let version = 0;\n\n      if (geometryIndex !== null) {\n        const array = geometryIndex.array;\n        version = geometryIndex.version;\n\n        for (let i = 0, l = array.length; i < l; i += 3) {\n          const a = array[i + 0];\n          const b = array[i + 1];\n          const c = array[i + 2];\n          indices.push(a, b, b, c, c, a);\n        }\n      } else {\n        const array = geometryPosition.array;\n        version = geometryPosition.version;\n\n        for (let i = 0, l = array.length / 3 - 1; i < l; i += 3) {\n          const a = i + 0;\n          const b = i + 1;\n          const c = i + 2;\n          indices.push(a, b, b, c, c, a);\n        }\n      }\n\n      const attribute = new (arrayMax(indices) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);\n      attribute.version = version; // Updating index buffer in VAO now. See WebGLBindingStates\n      //\n\n      const previousAttribute = wireframeAttributes.get(geometry);\n      if (previousAttribute) attributes.remove(previousAttribute); //\n\n      wireframeAttributes.set(geometry, attribute);\n    }\n\n    function getWireframeAttribute(geometry) {\n      const currentAttribute = wireframeAttributes.get(geometry);\n\n      if (currentAttribute) {\n        const geometryIndex = geometry.index;\n\n        if (geometryIndex !== null) {\n          // if the attribute is obsolete, create a new one\n          if (currentAttribute.version < geometryIndex.version) {\n            updateWireframeAttribute(geometry);\n          }\n        }\n      } else {\n        updateWireframeAttribute(geometry);\n      }\n\n      return wireframeAttributes.get(geometry);\n    }\n\n    return {\n      get: get,\n      update: update,\n      getWireframeAttribute: getWireframeAttribute\n    };\n  }\n\n  function WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {\n    const isWebGL2 = capabilities.isWebGL2;\n    let mode;\n\n    function setMode(value) {\n      mode = value;\n    }\n\n    let type, bytesPerElement;\n\n    function setIndex(value) {\n      type = value.type;\n      bytesPerElement = value.bytesPerElement;\n    }\n\n    function render(start, count) {\n      gl.drawElements(mode, count, type, start * bytesPerElement);\n      info.update(count, mode, 1);\n    }\n\n    function renderInstances(start, count, primcount) {\n      if (primcount === 0) return;\n      let extension, methodName;\n\n      if (isWebGL2) {\n        extension = gl;\n        methodName = 'drawElementsInstanced';\n      } else {\n        extension = extensions.get('ANGLE_instanced_arrays');\n        methodName = 'drawElementsInstancedANGLE';\n\n        if (extension === null) {\n          console.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n          return;\n        }\n      }\n\n      extension[methodName](mode, count, type, start * bytesPerElement, primcount);\n      info.update(count, mode, primcount);\n    } //\n\n\n    this.setMode = setMode;\n    this.setIndex = setIndex;\n    this.render = render;\n    this.renderInstances = renderInstances;\n  }\n\n  function WebGLInfo(gl) {\n    const memory = {\n      geometries: 0,\n      textures: 0\n    };\n    const render = {\n      frame: 0,\n      calls: 0,\n      triangles: 0,\n      points: 0,\n      lines: 0\n    };\n\n    function update(count, mode, instanceCount) {\n      render.calls++;\n\n      switch (mode) {\n        case gl.TRIANGLES:\n          render.triangles += instanceCount * (count / 3);\n          break;\n\n        case gl.LINES:\n          render.lines += instanceCount * (count / 2);\n          break;\n\n        case gl.LINE_STRIP:\n          render.lines += instanceCount * (count - 1);\n          break;\n\n        case gl.LINE_LOOP:\n          render.lines += instanceCount * count;\n          break;\n\n        case gl.POINTS:\n          render.points += instanceCount * count;\n          break;\n\n        default:\n          console.error('THREE.WebGLInfo: Unknown draw mode:', mode);\n          break;\n      }\n    }\n\n    function reset() {\n      render.frame++;\n      render.calls = 0;\n      render.triangles = 0;\n      render.points = 0;\n      render.lines = 0;\n    }\n\n    return {\n      memory: memory,\n      render: render,\n      programs: null,\n      autoReset: true,\n      reset: reset,\n      update: update\n    };\n  }\n\n  class DataTexture2DArray extends Texture {\n    constructor() {\n      let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      let width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      let height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      let depth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      super(null);\n      this.image = {\n        data,\n        width,\n        height,\n        depth\n      };\n      this.magFilter = NearestFilter;\n      this.minFilter = NearestFilter;\n      this.wrapR = ClampToEdgeWrapping;\n      this.generateMipmaps = false;\n      this.flipY = false;\n      this.unpackAlignment = 1;\n      this.needsUpdate = true;\n    }\n\n  }\n\n  DataTexture2DArray.prototype.isDataTexture2DArray = true;\n\n  function numericalSort(a, b) {\n    return a[0] - b[0];\n  }\n\n  function absNumericalSort(a, b) {\n    return Math.abs(b[1]) - Math.abs(a[1]);\n  }\n\n  function denormalize(morph, attribute) {\n    let denominator = 1;\n    const array = attribute.isInterleavedBufferAttribute ? attribute.data.array : attribute.array;\n    if (array instanceof Int8Array) denominator = 127;else if (array instanceof Int16Array) denominator = 32767;else if (array instanceof Int32Array) denominator = 2147483647;else console.error('THREE.WebGLMorphtargets: Unsupported morph attribute data type: ', array);\n    morph.divideScalar(denominator);\n  }\n\n  function WebGLMorphtargets(gl, capabilities, textures) {\n    const influencesList = {};\n    const morphInfluences = new Float32Array(8);\n    const morphTextures = new WeakMap();\n    const morph = new Vector3();\n    const workInfluences = [];\n\n    for (let i = 0; i < 8; i++) {\n      workInfluences[i] = [i, 0];\n    }\n\n    function update(object, geometry, material, program) {\n      const objectInfluences = object.morphTargetInfluences;\n\n      if (capabilities.isWebGL2 === true) {\n        // instead of using attributes, the WebGL 2 code path encodes morph targets\n        // into an array of data textures. Each layer represents a single morph target.\n        const numberOfMorphTargets = geometry.morphAttributes.position.length;\n        let entry = morphTextures.get(geometry);\n\n        if (entry === undefined || entry.count !== numberOfMorphTargets) {\n          if (entry !== undefined) entry.texture.dispose();\n          const hasMorphNormals = geometry.morphAttributes.normal !== undefined;\n          const morphTargets = geometry.morphAttributes.position;\n          const morphNormals = geometry.morphAttributes.normal || [];\n          const numberOfVertices = geometry.attributes.position.count;\n          const numberOfVertexData = hasMorphNormals === true ? 2 : 1; // (v,n) vs. (v)\n\n          let width = numberOfVertices * numberOfVertexData;\n          let height = 1;\n\n          if (width > capabilities.maxTextureSize) {\n            height = Math.ceil(width / capabilities.maxTextureSize);\n            width = capabilities.maxTextureSize;\n          }\n\n          const buffer = new Float32Array(width * height * 4 * numberOfMorphTargets);\n          const texture = new DataTexture2DArray(buffer, width, height, numberOfMorphTargets);\n          texture.format = RGBAFormat; // using RGBA since RGB might be emulated (and is thus slower)\n\n          texture.type = FloatType; // fill buffer\n\n          const vertexDataStride = numberOfVertexData * 4;\n\n          for (let i = 0; i < numberOfMorphTargets; i++) {\n            const morphTarget = morphTargets[i];\n            const morphNormal = morphNormals[i];\n            const offset = width * height * 4 * i;\n\n            for (let j = 0; j < morphTarget.count; j++) {\n              morph.fromBufferAttribute(morphTarget, j);\n              if (morphTarget.normalized === true) denormalize(morph, morphTarget);\n              const stride = j * vertexDataStride;\n              buffer[offset + stride + 0] = morph.x;\n              buffer[offset + stride + 1] = morph.y;\n              buffer[offset + stride + 2] = morph.z;\n              buffer[offset + stride + 3] = 0;\n\n              if (hasMorphNormals === true) {\n                morph.fromBufferAttribute(morphNormal, j);\n                if (morphNormal.normalized === true) denormalize(morph, morphNormal);\n                buffer[offset + stride + 4] = morph.x;\n                buffer[offset + stride + 5] = morph.y;\n                buffer[offset + stride + 6] = morph.z;\n                buffer[offset + stride + 7] = 0;\n              }\n            }\n          }\n\n          entry = {\n            count: numberOfMorphTargets,\n            texture: texture,\n            size: new Vector2(width, height)\n          };\n          morphTextures.set(geometry, entry);\n        } //\n\n\n        let morphInfluencesSum = 0;\n\n        for (let i = 0; i < objectInfluences.length; i++) {\n          morphInfluencesSum += objectInfluences[i];\n        }\n\n        const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n        program.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);\n        program.getUniforms().setValue(gl, 'morphTargetInfluences', objectInfluences);\n        program.getUniforms().setValue(gl, 'morphTargetsTexture', entry.texture, textures);\n        program.getUniforms().setValue(gl, 'morphTargetsTextureSize', entry.size);\n      } else {\n        // When object doesn't have morph target influences defined, we treat it as a 0-length array\n        // This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n        const length = objectInfluences === undefined ? 0 : objectInfluences.length;\n        let influences = influencesList[geometry.id];\n\n        if (influences === undefined || influences.length !== length) {\n          // initialise list\n          influences = [];\n\n          for (let i = 0; i < length; i++) {\n            influences[i] = [i, 0];\n          }\n\n          influencesList[geometry.id] = influences;\n        } // Collect influences\n\n\n        for (let i = 0; i < length; i++) {\n          const influence = influences[i];\n          influence[0] = i;\n          influence[1] = objectInfluences[i];\n        }\n\n        influences.sort(absNumericalSort);\n\n        for (let i = 0; i < 8; i++) {\n          if (i < length && influences[i][1]) {\n            workInfluences[i][0] = influences[i][0];\n            workInfluences[i][1] = influences[i][1];\n          } else {\n            workInfluences[i][0] = Number.MAX_SAFE_INTEGER;\n            workInfluences[i][1] = 0;\n          }\n        }\n\n        workInfluences.sort(numericalSort);\n        const morphTargets = geometry.morphAttributes.position;\n        const morphNormals = geometry.morphAttributes.normal;\n        let morphInfluencesSum = 0;\n\n        for (let i = 0; i < 8; i++) {\n          const influence = workInfluences[i];\n          const index = influence[0];\n          const value = influence[1];\n\n          if (index !== Number.MAX_SAFE_INTEGER && value) {\n            if (morphTargets && geometry.getAttribute('morphTarget' + i) !== morphTargets[index]) {\n              geometry.setAttribute('morphTarget' + i, morphTargets[index]);\n            }\n\n            if (morphNormals && geometry.getAttribute('morphNormal' + i) !== morphNormals[index]) {\n              geometry.setAttribute('morphNormal' + i, morphNormals[index]);\n            }\n\n            morphInfluences[i] = value;\n            morphInfluencesSum += value;\n          } else {\n            if (morphTargets && geometry.hasAttribute('morphTarget' + i) === true) {\n              geometry.deleteAttribute('morphTarget' + i);\n            }\n\n            if (morphNormals && geometry.hasAttribute('morphNormal' + i) === true) {\n              geometry.deleteAttribute('morphNormal' + i);\n            }\n\n            morphInfluences[i] = 0;\n          }\n        } // GLSL shader uses formula baseinfluence * base + sum(target * influence)\n        // This allows us to switch between absolute morphs and relative morphs without changing shader code\n        // When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\n\n        const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n        program.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);\n        program.getUniforms().setValue(gl, 'morphTargetInfluences', morphInfluences);\n      }\n    }\n\n    return {\n      update: update\n    };\n  }\n\n  function WebGLObjects(gl, geometries, attributes, info) {\n    let updateMap = new WeakMap();\n\n    function update(object) {\n      const frame = info.render.frame;\n      const geometry = object.geometry;\n      const buffergeometry = geometries.get(object, geometry); // Update once per frame\n\n      if (updateMap.get(buffergeometry) !== frame) {\n        geometries.update(buffergeometry);\n        updateMap.set(buffergeometry, frame);\n      }\n\n      if (object.isInstancedMesh) {\n        if (object.hasEventListener('dispose', onInstancedMeshDispose) === false) {\n          object.addEventListener('dispose', onInstancedMeshDispose);\n        }\n\n        attributes.update(object.instanceMatrix, gl.ARRAY_BUFFER);\n\n        if (object.instanceColor !== null) {\n          attributes.update(object.instanceColor, gl.ARRAY_BUFFER);\n        }\n      }\n\n      return buffergeometry;\n    }\n\n    function dispose() {\n      updateMap = new WeakMap();\n    }\n\n    function onInstancedMeshDispose(event) {\n      const instancedMesh = event.target;\n      instancedMesh.removeEventListener('dispose', onInstancedMeshDispose);\n      attributes.remove(instancedMesh.instanceMatrix);\n      if (instancedMesh.instanceColor !== null) attributes.remove(instancedMesh.instanceColor);\n    }\n\n    return {\n      update: update,\n      dispose: dispose\n    };\n  }\n\n  class DataTexture3D extends Texture {\n    constructor() {\n      let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      let width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      let height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      let depth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      // We're going to add .setXXX() methods for setting properties later.\n      // Users can still set in DataTexture3D directly.\n      //\n      //\tconst texture = new THREE.DataTexture3D( data, width, height, depth );\n      // \ttexture.anisotropy = 16;\n      //\n      // See #14839\n      super(null);\n      this.image = {\n        data,\n        width,\n        height,\n        depth\n      };\n      this.magFilter = NearestFilter;\n      this.minFilter = NearestFilter;\n      this.wrapR = ClampToEdgeWrapping;\n      this.generateMipmaps = false;\n      this.flipY = false;\n      this.unpackAlignment = 1;\n      this.needsUpdate = true;\n    }\n\n  }\n\n  DataTexture3D.prototype.isDataTexture3D = true;\n  /**\n   * Uniforms of a program.\n   * Those form a tree structure with a special top-level container for the root,\n   * which you get by calling 'new WebGLUniforms( gl, program )'.\n   *\n   *\n   * Properties of inner nodes including the top-level container:\n   *\n   * .seq - array of nested uniforms\n   * .map - nested uniforms by name\n   *\n   *\n   * Methods of all nodes except the top-level container:\n   *\n   * .setValue( gl, value, [textures] )\n   *\n   * \t\tuploads a uniform value(s)\n   *\t\tthe 'textures' parameter is needed for sampler uniforms\n   *\n   *\n   * Static methods of the top-level container (textures factorizations):\n   *\n   * .upload( gl, seq, values, textures )\n   *\n   * \t\tsets uniforms in 'seq' to 'values[id].value'\n   *\n   * .seqWithValue( seq, values ) : filteredSeq\n   *\n   * \t\tfilters 'seq' entries with corresponding entry in values\n   *\n   *\n   * Methods of the top-level container (textures factorizations):\n   *\n   * .setValue( gl, name, value, textures )\n   *\n   * \t\tsets uniform with\tname 'name' to 'value'\n   *\n   * .setOptional( gl, obj, prop )\n   *\n   * \t\tlike .set for an optional property of the object\n   *\n   */\n\n  const emptyTexture = new Texture();\n  const emptyTexture2dArray = new DataTexture2DArray();\n  const emptyTexture3d = new DataTexture3D();\n  const emptyCubeTexture = new CubeTexture(); // --- Utilities ---\n  // Array Caches (provide typed arrays for temporary by size)\n\n  const arrayCacheF32 = [];\n  const arrayCacheI32 = []; // Float32Array caches used for uploading Matrix uniforms\n\n  const mat4array = new Float32Array(16);\n  const mat3array = new Float32Array(9);\n  const mat2array = new Float32Array(4); // Flattening for arrays of vectors and matrices\n\n  function flatten(array, nBlocks, blockSize) {\n    const firstElem = array[0];\n    if (firstElem <= 0 || firstElem > 0) return array; // unoptimized: ! isNaN( firstElem )\n    // see http://jacksondunstan.com/articles/983\n\n    const n = nBlocks * blockSize;\n    let r = arrayCacheF32[n];\n\n    if (r === undefined) {\n      r = new Float32Array(n);\n      arrayCacheF32[n] = r;\n    }\n\n    if (nBlocks !== 0) {\n      firstElem.toArray(r, 0);\n\n      for (let i = 1, offset = 0; i !== nBlocks; ++i) {\n        offset += blockSize;\n        array[i].toArray(r, offset);\n      }\n    }\n\n    return r;\n  }\n\n  function arraysEqual(a, b) {\n    if (a.length !== b.length) return false;\n\n    for (let i = 0, l = a.length; i < l; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n\n    return true;\n  }\n\n  function copyArray(a, b) {\n    for (let i = 0, l = b.length; i < l; i++) {\n      a[i] = b[i];\n    }\n  } // Texture unit allocation\n\n\n  function allocTexUnits(textures, n) {\n    let r = arrayCacheI32[n];\n\n    if (r === undefined) {\n      r = new Int32Array(n);\n      arrayCacheI32[n] = r;\n    }\n\n    for (let i = 0; i !== n; ++i) {\n      r[i] = textures.allocateTextureUnit();\n    }\n\n    return r;\n  } // --- Setters ---\n  // Note: Defining these methods externally, because they come in a bunch\n  // and this way their names minify.\n  // Single scalar\n\n\n  function setValueV1f(gl, v) {\n    const cache = this.cache;\n    if (cache[0] === v) return;\n    gl.uniform1f(this.addr, v);\n    cache[0] = v;\n  } // Single float vector (from flat array or THREE.VectorN)\n\n\n  function setValueV2f(gl, v) {\n    const cache = this.cache;\n\n    if (v.x !== undefined) {\n      if (cache[0] !== v.x || cache[1] !== v.y) {\n        gl.uniform2f(this.addr, v.x, v.y);\n        cache[0] = v.x;\n        cache[1] = v.y;\n      }\n    } else {\n      if (arraysEqual(cache, v)) return;\n      gl.uniform2fv(this.addr, v);\n      copyArray(cache, v);\n    }\n  }\n\n  function setValueV3f(gl, v) {\n    const cache = this.cache;\n\n    if (v.x !== undefined) {\n      if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {\n        gl.uniform3f(this.addr, v.x, v.y, v.z);\n        cache[0] = v.x;\n        cache[1] = v.y;\n        cache[2] = v.z;\n      }\n    } else if (v.r !== undefined) {\n      if (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {\n        gl.uniform3f(this.addr, v.r, v.g, v.b);\n        cache[0] = v.r;\n        cache[1] = v.g;\n        cache[2] = v.b;\n      }\n    } else {\n      if (arraysEqual(cache, v)) return;\n      gl.uniform3fv(this.addr, v);\n      copyArray(cache, v);\n    }\n  }\n\n  function setValueV4f(gl, v) {\n    const cache = this.cache;\n\n    if (v.x !== undefined) {\n      if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {\n        gl.uniform4f(this.addr, v.x, v.y, v.z, v.w);\n        cache[0] = v.x;\n        cache[1] = v.y;\n        cache[2] = v.z;\n        cache[3] = v.w;\n      }\n    } else {\n      if (arraysEqual(cache, v)) return;\n      gl.uniform4fv(this.addr, v);\n      copyArray(cache, v);\n    }\n  } // Single matrix (from flat array or THREE.MatrixN)\n\n\n  function setValueM2(gl, v) {\n    const cache = this.cache;\n    const elements = v.elements;\n\n    if (elements === undefined) {\n      if (arraysEqual(cache, v)) return;\n      gl.uniformMatrix2fv(this.addr, false, v);\n      copyArray(cache, v);\n    } else {\n      if (arraysEqual(cache, elements)) return;\n      mat2array.set(elements);\n      gl.uniformMatrix2fv(this.addr, false, mat2array);\n      copyArray(cache, elements);\n    }\n  }\n\n  function setValueM3(gl, v) {\n    const cache = this.cache;\n    const elements = v.elements;\n\n    if (elements === undefined) {\n      if (arraysEqual(cache, v)) return;\n      gl.uniformMatrix3fv(this.addr, false, v);\n      copyArray(cache, v);\n    } else {\n      if (arraysEqual(cache, elements)) return;\n      mat3array.set(elements);\n      gl.uniformMatrix3fv(this.addr, false, mat3array);\n      copyArray(cache, elements);\n    }\n  }\n\n  function setValueM4(gl, v) {\n    const cache = this.cache;\n    const elements = v.elements;\n\n    if (elements === undefined) {\n      if (arraysEqual(cache, v)) return;\n      gl.uniformMatrix4fv(this.addr, false, v);\n      copyArray(cache, v);\n    } else {\n      if (arraysEqual(cache, elements)) return;\n      mat4array.set(elements);\n      gl.uniformMatrix4fv(this.addr, false, mat4array);\n      copyArray(cache, elements);\n    }\n  } // Single integer / boolean\n\n\n  function setValueV1i(gl, v) {\n    const cache = this.cache;\n    if (cache[0] === v) return;\n    gl.uniform1i(this.addr, v);\n    cache[0] = v;\n  } // Single integer / boolean vector (from flat array)\n\n\n  function setValueV2i(gl, v) {\n    const cache = this.cache;\n    if (arraysEqual(cache, v)) return;\n    gl.uniform2iv(this.addr, v);\n    copyArray(cache, v);\n  }\n\n  function setValueV3i(gl, v) {\n    const cache = this.cache;\n    if (arraysEqual(cache, v)) return;\n    gl.uniform3iv(this.addr, v);\n    copyArray(cache, v);\n  }\n\n  function setValueV4i(gl, v) {\n    const cache = this.cache;\n    if (arraysEqual(cache, v)) return;\n    gl.uniform4iv(this.addr, v);\n    copyArray(cache, v);\n  } // Single unsigned integer\n\n\n  function setValueV1ui(gl, v) {\n    const cache = this.cache;\n    if (cache[0] === v) return;\n    gl.uniform1ui(this.addr, v);\n    cache[0] = v;\n  } // Single unsigned integer vector (from flat array)\n\n\n  function setValueV2ui(gl, v) {\n    const cache = this.cache;\n    if (arraysEqual(cache, v)) return;\n    gl.uniform2uiv(this.addr, v);\n    copyArray(cache, v);\n  }\n\n  function setValueV3ui(gl, v) {\n    const cache = this.cache;\n    if (arraysEqual(cache, v)) return;\n    gl.uniform3uiv(this.addr, v);\n    copyArray(cache, v);\n  }\n\n  function setValueV4ui(gl, v) {\n    const cache = this.cache;\n    if (arraysEqual(cache, v)) return;\n    gl.uniform4uiv(this.addr, v);\n    copyArray(cache, v);\n  } // Single texture (2D / Cube)\n\n\n  function setValueT1(gl, v, textures) {\n    const cache = this.cache;\n    const unit = textures.allocateTextureUnit();\n\n    if (cache[0] !== unit) {\n      gl.uniform1i(this.addr, unit);\n      cache[0] = unit;\n    }\n\n    textures.safeSetTexture2D(v || emptyTexture, unit);\n  }\n\n  function setValueT3D1(gl, v, textures) {\n    const cache = this.cache;\n    const unit = textures.allocateTextureUnit();\n\n    if (cache[0] !== unit) {\n      gl.uniform1i(this.addr, unit);\n      cache[0] = unit;\n    }\n\n    textures.setTexture3D(v || emptyTexture3d, unit);\n  }\n\n  function setValueT6(gl, v, textures) {\n    const cache = this.cache;\n    const unit = textures.allocateTextureUnit();\n\n    if (cache[0] !== unit) {\n      gl.uniform1i(this.addr, unit);\n      cache[0] = unit;\n    }\n\n    textures.safeSetTextureCube(v || emptyCubeTexture, unit);\n  }\n\n  function setValueT2DArray1(gl, v, textures) {\n    const cache = this.cache;\n    const unit = textures.allocateTextureUnit();\n\n    if (cache[0] !== unit) {\n      gl.uniform1i(this.addr, unit);\n      cache[0] = unit;\n    }\n\n    textures.setTexture2DArray(v || emptyTexture2dArray, unit);\n  } // Helper to pick the right setter for the singular case\n\n\n  function getSingularSetter(type) {\n    switch (type) {\n      case 0x1406:\n        return setValueV1f;\n      // FLOAT\n\n      case 0x8b50:\n        return setValueV2f;\n      // _VEC2\n\n      case 0x8b51:\n        return setValueV3f;\n      // _VEC3\n\n      case 0x8b52:\n        return setValueV4f;\n      // _VEC4\n\n      case 0x8b5a:\n        return setValueM2;\n      // _MAT2\n\n      case 0x8b5b:\n        return setValueM3;\n      // _MAT3\n\n      case 0x8b5c:\n        return setValueM4;\n      // _MAT4\n\n      case 0x1404:\n      case 0x8b56:\n        return setValueV1i;\n      // INT, BOOL\n\n      case 0x8b53:\n      case 0x8b57:\n        return setValueV2i;\n      // _VEC2\n\n      case 0x8b54:\n      case 0x8b58:\n        return setValueV3i;\n      // _VEC3\n\n      case 0x8b55:\n      case 0x8b59:\n        return setValueV4i;\n      // _VEC4\n\n      case 0x1405:\n        return setValueV1ui;\n      // UINT\n\n      case 0x8dc6:\n        return setValueV2ui;\n      // _VEC2\n\n      case 0x8dc7:\n        return setValueV3ui;\n      // _VEC3\n\n      case 0x8dc8:\n        return setValueV4ui;\n      // _VEC4\n\n      case 0x8b5e: // SAMPLER_2D\n\n      case 0x8d66: // SAMPLER_EXTERNAL_OES\n\n      case 0x8dca: // INT_SAMPLER_2D\n\n      case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\n      case 0x8b62:\n        // SAMPLER_2D_SHADOW\n        return setValueT1;\n\n      case 0x8b5f: // SAMPLER_3D\n\n      case 0x8dcb: // INT_SAMPLER_3D\n\n      case 0x8dd3:\n        // UNSIGNED_INT_SAMPLER_3D\n        return setValueT3D1;\n\n      case 0x8b60: // SAMPLER_CUBE\n\n      case 0x8dcc: // INT_SAMPLER_CUBE\n\n      case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\n      case 0x8dc5:\n        // SAMPLER_CUBE_SHADOW\n        return setValueT6;\n\n      case 0x8dc1: // SAMPLER_2D_ARRAY\n\n      case 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\n      case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\n      case 0x8dc4:\n        // SAMPLER_2D_ARRAY_SHADOW\n        return setValueT2DArray1;\n    }\n  } // Array of scalars\n\n\n  function setValueV1fArray(gl, v) {\n    gl.uniform1fv(this.addr, v);\n  } // Array of vectors (from flat array or array of THREE.VectorN)\n\n\n  function setValueV2fArray(gl, v) {\n    const data = flatten(v, this.size, 2);\n    gl.uniform2fv(this.addr, data);\n  }\n\n  function setValueV3fArray(gl, v) {\n    const data = flatten(v, this.size, 3);\n    gl.uniform3fv(this.addr, data);\n  }\n\n  function setValueV4fArray(gl, v) {\n    const data = flatten(v, this.size, 4);\n    gl.uniform4fv(this.addr, data);\n  } // Array of matrices (from flat array or array of THREE.MatrixN)\n\n\n  function setValueM2Array(gl, v) {\n    const data = flatten(v, this.size, 4);\n    gl.uniformMatrix2fv(this.addr, false, data);\n  }\n\n  function setValueM3Array(gl, v) {\n    const data = flatten(v, this.size, 9);\n    gl.uniformMatrix3fv(this.addr, false, data);\n  }\n\n  function setValueM4Array(gl, v) {\n    const data = flatten(v, this.size, 16);\n    gl.uniformMatrix4fv(this.addr, false, data);\n  } // Array of integer / boolean\n\n\n  function setValueV1iArray(gl, v) {\n    gl.uniform1iv(this.addr, v);\n  } // Array of integer / boolean vectors (from flat array)\n\n\n  function setValueV2iArray(gl, v) {\n    gl.uniform2iv(this.addr, v);\n  }\n\n  function setValueV3iArray(gl, v) {\n    gl.uniform3iv(this.addr, v);\n  }\n\n  function setValueV4iArray(gl, v) {\n    gl.uniform4iv(this.addr, v);\n  } // Array of unsigned integer\n\n\n  function setValueV1uiArray(gl, v) {\n    gl.uniform1uiv(this.addr, v);\n  } // Array of unsigned integer vectors (from flat array)\n\n\n  function setValueV2uiArray(gl, v) {\n    gl.uniform2uiv(this.addr, v);\n  }\n\n  function setValueV3uiArray(gl, v) {\n    gl.uniform3uiv(this.addr, v);\n  }\n\n  function setValueV4uiArray(gl, v) {\n    gl.uniform4uiv(this.addr, v);\n  } // Array of textures (2D / Cube)\n\n\n  function setValueT1Array(gl, v, textures) {\n    const n = v.length;\n    const units = allocTexUnits(textures, n);\n    gl.uniform1iv(this.addr, units);\n\n    for (let i = 0; i !== n; ++i) {\n      textures.safeSetTexture2D(v[i] || emptyTexture, units[i]);\n    }\n  }\n\n  function setValueT6Array(gl, v, textures) {\n    const n = v.length;\n    const units = allocTexUnits(textures, n);\n    gl.uniform1iv(this.addr, units);\n\n    for (let i = 0; i !== n; ++i) {\n      textures.safeSetTextureCube(v[i] || emptyCubeTexture, units[i]);\n    }\n  } // Helper to pick the right setter for a pure (bottom-level) array\n\n\n  function getPureArraySetter(type) {\n    switch (type) {\n      case 0x1406:\n        return setValueV1fArray;\n      // FLOAT\n\n      case 0x8b50:\n        return setValueV2fArray;\n      // _VEC2\n\n      case 0x8b51:\n        return setValueV3fArray;\n      // _VEC3\n\n      case 0x8b52:\n        return setValueV4fArray;\n      // _VEC4\n\n      case 0x8b5a:\n        return setValueM2Array;\n      // _MAT2\n\n      case 0x8b5b:\n        return setValueM3Array;\n      // _MAT3\n\n      case 0x8b5c:\n        return setValueM4Array;\n      // _MAT4\n\n      case 0x1404:\n      case 0x8b56:\n        return setValueV1iArray;\n      // INT, BOOL\n\n      case 0x8b53:\n      case 0x8b57:\n        return setValueV2iArray;\n      // _VEC2\n\n      case 0x8b54:\n      case 0x8b58:\n        return setValueV3iArray;\n      // _VEC3\n\n      case 0x8b55:\n      case 0x8b59:\n        return setValueV4iArray;\n      // _VEC4\n\n      case 0x1405:\n        return setValueV1uiArray;\n      // UINT\n\n      case 0x8dc6:\n        return setValueV2uiArray;\n      // _VEC2\n\n      case 0x8dc7:\n        return setValueV3uiArray;\n      // _VEC3\n\n      case 0x8dc8:\n        return setValueV4uiArray;\n      // _VEC4\n\n      case 0x8b5e: // SAMPLER_2D\n\n      case 0x8d66: // SAMPLER_EXTERNAL_OES\n\n      case 0x8dca: // INT_SAMPLER_2D\n\n      case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\n      case 0x8b62:\n        // SAMPLER_2D_SHADOW\n        return setValueT1Array;\n\n      case 0x8b60: // SAMPLER_CUBE\n\n      case 0x8dcc: // INT_SAMPLER_CUBE\n\n      case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\n      case 0x8dc5:\n        // SAMPLER_CUBE_SHADOW\n        return setValueT6Array;\n    }\n  } // --- Uniform Classes ---\n\n\n  function SingleUniform(id, activeInfo, addr) {\n    this.id = id;\n    this.addr = addr;\n    this.cache = [];\n    this.setValue = getSingularSetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n  }\n\n  function PureArrayUniform(id, activeInfo, addr) {\n    this.id = id;\n    this.addr = addr;\n    this.cache = [];\n    this.size = activeInfo.size;\n    this.setValue = getPureArraySetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n  }\n\n  PureArrayUniform.prototype.updateCache = function (data) {\n    const cache = this.cache;\n\n    if (data instanceof Float32Array && cache.length !== data.length) {\n      this.cache = new Float32Array(data.length);\n    }\n\n    copyArray(cache, data);\n  };\n\n  function StructuredUniform(id) {\n    this.id = id;\n    this.seq = [];\n    this.map = {};\n  }\n\n  StructuredUniform.prototype.setValue = function (gl, value, textures) {\n    const seq = this.seq;\n\n    for (let i = 0, n = seq.length; i !== n; ++i) {\n      const u = seq[i];\n      u.setValue(gl, value[u.id], textures);\n    }\n  }; // --- Top-level ---\n  // Parser - builds up the property tree from the path strings\n\n\n  const RePathPart = /(\\w+)(\\])?(\\[|\\.)?/g; // extracts\n  // \t- the identifier (member name or array index)\n  //\t- followed by an optional right bracket (found when array index)\n  //\t- followed by an optional left bracket or dot (type of subscript)\n  //\n  // Note: These portions can be read in a non-overlapping fashion and\n  // allow straightforward parsing of the hierarchy that WebGL encodes\n  // in the uniform names.\n\n  function addUniform(container, uniformObject) {\n    container.seq.push(uniformObject);\n    container.map[uniformObject.id] = uniformObject;\n  }\n\n  function parseUniform(activeInfo, addr, container) {\n    const path = activeInfo.name,\n          pathLength = path.length; // reset RegExp object, because of the early exit of a previous run\n\n    RePathPart.lastIndex = 0;\n\n    while (true) {\n      const match = RePathPart.exec(path),\n            matchEnd = RePathPart.lastIndex;\n      let id = match[1];\n      const idIsIndex = match[2] === ']',\n            subscript = match[3];\n      if (idIsIndex) id = id | 0; // convert to integer\n\n      if (subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength) {\n        // bare name or \"pure\" bottom-level array \"[0]\" suffix\n        addUniform(container, subscript === undefined ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));\n        break;\n      } else {\n        // step into inner node / create it in case it doesn't exist\n        const map = container.map;\n        let next = map[id];\n\n        if (next === undefined) {\n          next = new StructuredUniform(id);\n          addUniform(container, next);\n        }\n\n        container = next;\n      }\n    }\n  } // Root Container\n\n\n  function WebGLUniforms(gl, program) {\n    this.seq = [];\n    this.map = {};\n    const n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n    for (let i = 0; i < n; ++i) {\n      const info = gl.getActiveUniform(program, i),\n            addr = gl.getUniformLocation(program, info.name);\n      parseUniform(info, addr, this);\n    }\n  }\n\n  WebGLUniforms.prototype.setValue = function (gl, name, value, textures) {\n    const u = this.map[name];\n    if (u !== undefined) u.setValue(gl, value, textures);\n  };\n\n  WebGLUniforms.prototype.setOptional = function (gl, object, name) {\n    const v = object[name];\n    if (v !== undefined) this.setValue(gl, name, v);\n  }; // Static interface\n\n\n  WebGLUniforms.upload = function (gl, seq, values, textures) {\n    for (let i = 0, n = seq.length; i !== n; ++i) {\n      const u = seq[i],\n            v = values[u.id];\n\n      if (v.needsUpdate !== false) {\n        // note: always updating when .needsUpdate is undefined\n        u.setValue(gl, v.value, textures);\n      }\n    }\n  };\n\n  WebGLUniforms.seqWithValue = function (seq, values) {\n    const r = [];\n\n    for (let i = 0, n = seq.length; i !== n; ++i) {\n      const u = seq[i];\n      if (u.id in values) r.push(u);\n    }\n\n    return r;\n  };\n\n  function WebGLShader(gl, type, string) {\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, string);\n    gl.compileShader(shader);\n    return shader;\n  }\n\n  let programIdCount = 0;\n\n  function addLineNumbers(string) {\n    const lines = string.split('\\n');\n\n    for (let i = 0; i < lines.length; i++) {\n      lines[i] = i + 1 + ': ' + lines[i];\n    }\n\n    return lines.join('\\n');\n  }\n\n  function getEncodingComponents(encoding) {\n    switch (encoding) {\n      case LinearEncoding:\n        return ['Linear', '( value )'];\n\n      case sRGBEncoding:\n        return ['sRGB', '( value )'];\n\n      case RGBEEncoding:\n        return ['RGBE', '( value )'];\n\n      case RGBM7Encoding:\n        return ['RGBM', '( value, 7.0 )'];\n\n      case RGBM16Encoding:\n        return ['RGBM', '( value, 16.0 )'];\n\n      case RGBDEncoding:\n        return ['RGBD', '( value, 256.0 )'];\n\n      case GammaEncoding:\n        return ['Gamma', '( value, float( GAMMA_FACTOR ) )'];\n\n      case LogLuvEncoding:\n        return ['LogLuv', '( value )'];\n\n      default:\n        console.warn('THREE.WebGLProgram: Unsupported encoding:', encoding);\n        return ['Linear', '( value )'];\n    }\n  }\n\n  function getShaderErrors(gl, shader, type) {\n    const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    const errors = gl.getShaderInfoLog(shader).trim();\n    if (status && errors === '') return ''; // --enable-privileged-webgl-extension\n    // console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n    return type.toUpperCase() + '\\n\\n' + errors + '\\n\\n' + addLineNumbers(gl.getShaderSource(shader));\n  }\n\n  function getTexelDecodingFunction(functionName, encoding) {\n    const components = getEncodingComponents(encoding);\n    return 'vec4 ' + functionName + '( vec4 value ) { return ' + components[0] + 'ToLinear' + components[1] + '; }';\n  }\n\n  function getTexelEncodingFunction(functionName, encoding) {\n    const components = getEncodingComponents(encoding);\n    return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[0] + components[1] + '; }';\n  }\n\n  function getToneMappingFunction(functionName, toneMapping) {\n    let toneMappingName;\n\n    switch (toneMapping) {\n      case LinearToneMapping:\n        toneMappingName = 'Linear';\n        break;\n\n      case ReinhardToneMapping:\n        toneMappingName = 'Reinhard';\n        break;\n\n      case CineonToneMapping:\n        toneMappingName = 'OptimizedCineon';\n        break;\n\n      case ACESFilmicToneMapping:\n        toneMappingName = 'ACESFilmic';\n        break;\n\n      case CustomToneMapping:\n        toneMappingName = 'Custom';\n        break;\n\n      default:\n        console.warn('THREE.WebGLProgram: Unsupported toneMapping:', toneMapping);\n        toneMappingName = 'Linear';\n    }\n\n    return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n  }\n\n  function generateExtensions(parameters) {\n    const chunks = [parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ? '#extension GL_OES_standard_derivatives : enable' : '', (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '', parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? '#extension GL_EXT_draw_buffers : require' : '', (parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''];\n    return chunks.filter(filterEmptyLine).join('\\n');\n  }\n\n  function generateDefines(defines) {\n    const chunks = [];\n\n    for (const name in defines) {\n      const value = defines[name];\n      if (value === false) continue;\n      chunks.push('#define ' + name + ' ' + value);\n    }\n\n    return chunks.join('\\n');\n  }\n\n  function fetchAttributeLocations(gl, program) {\n    const attributes = {};\n    const n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n    for (let i = 0; i < n; i++) {\n      const info = gl.getActiveAttrib(program, i);\n      const name = info.name;\n      let locationSize = 1;\n      if (info.type === gl.FLOAT_MAT2) locationSize = 2;\n      if (info.type === gl.FLOAT_MAT3) locationSize = 3;\n      if (info.type === gl.FLOAT_MAT4) locationSize = 4; // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n      attributes[name] = {\n        type: info.type,\n        location: gl.getAttribLocation(program, name),\n        locationSize: locationSize\n      };\n    }\n\n    return attributes;\n  }\n\n  function filterEmptyLine(string) {\n    return string !== '';\n  }\n\n  function replaceLightNums(string, parameters) {\n    return string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);\n  }\n\n  function replaceClippingPlaneNums(string, parameters) {\n    return string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);\n  } // Resolve Includes\n\n\n  const includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\n  function resolveIncludes(string) {\n    return string.replace(includePattern, includeReplacer);\n  }\n\n  function includeReplacer(match, include) {\n    const string = ShaderChunk[include];\n\n    if (string === undefined) {\n      throw new Error('Can not resolve #include <' + include + '>');\n    }\n\n    return resolveIncludes(string);\n  } // Unroll Loops\n\n\n  const deprecatedUnrollLoopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n  const unrollLoopPattern = /#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;\n\n  function unrollLoops(string) {\n    return string.replace(unrollLoopPattern, loopReplacer).replace(deprecatedUnrollLoopPattern, deprecatedLoopReplacer);\n  }\n\n  function deprecatedLoopReplacer(match, start, end, snippet) {\n    console.warn('WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.');\n    return loopReplacer(match, start, end, snippet);\n  }\n\n  function loopReplacer(match, start, end, snippet) {\n    let string = '';\n\n    for (let i = parseInt(start); i < parseInt(end); i++) {\n      string += snippet.replace(/\\[\\s*i\\s*\\]/g, '[ ' + i + ' ]').replace(/UNROLLED_LOOP_INDEX/g, i);\n    }\n\n    return string;\n  } //\n\n\n  function generatePrecision(parameters) {\n    let precisionstring = 'precision ' + parameters.precision + ' float;\\nprecision ' + parameters.precision + ' int;';\n\n    if (parameters.precision === 'highp') {\n      precisionstring += '\\n#define HIGH_PRECISION';\n    } else if (parameters.precision === 'mediump') {\n      precisionstring += '\\n#define MEDIUM_PRECISION';\n    } else if (parameters.precision === 'lowp') {\n      precisionstring += '\\n#define LOW_PRECISION';\n    }\n\n    return precisionstring;\n  }\n\n  function generateShadowMapTypeDefine(parameters) {\n    let shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n    if (parameters.shadowMapType === PCFShadowMap) {\n      shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n    } else if (parameters.shadowMapType === PCFSoftShadowMap) {\n      shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n    } else if (parameters.shadowMapType === VSMShadowMap) {\n      shadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n    }\n\n    return shadowMapTypeDefine;\n  }\n\n  function generateEnvMapTypeDefine(parameters) {\n    let envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n    if (parameters.envMap) {\n      switch (parameters.envMapMode) {\n        case CubeReflectionMapping:\n        case CubeRefractionMapping:\n          envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n          break;\n\n        case CubeUVReflectionMapping:\n        case CubeUVRefractionMapping:\n          envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n          break;\n      }\n    }\n\n    return envMapTypeDefine;\n  }\n\n  function generateEnvMapModeDefine(parameters) {\n    let envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n    if (parameters.envMap) {\n      switch (parameters.envMapMode) {\n        case CubeRefractionMapping:\n        case CubeUVRefractionMapping:\n          envMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n          break;\n      }\n    }\n\n    return envMapModeDefine;\n  }\n\n  function generateEnvMapBlendingDefine(parameters) {\n    let envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n    if (parameters.envMap) {\n      switch (parameters.combine) {\n        case MultiplyOperation:\n          envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n          break;\n\n        case MixOperation:\n          envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n          break;\n\n        case AddOperation:\n          envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n          break;\n      }\n    }\n\n    return envMapBlendingDefine;\n  }\n\n  function WebGLProgram(renderer, cacheKey, parameters, bindingStates) {\n    // TODO Send this event to Three.js DevTools\n    // console.log( 'WebGLProgram', cacheKey );\n    const gl = renderer.getContext();\n    const defines = parameters.defines;\n    let vertexShader = parameters.vertexShader;\n    let fragmentShader = parameters.fragmentShader;\n    const shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);\n    const envMapTypeDefine = generateEnvMapTypeDefine(parameters);\n    const envMapModeDefine = generateEnvMapModeDefine(parameters);\n    const envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);\n    const gammaFactorDefine = renderer.gammaFactor > 0 ? renderer.gammaFactor : 1.0;\n    const customExtensions = parameters.isWebGL2 ? '' : generateExtensions(parameters);\n    const customDefines = generateDefines(defines);\n    const program = gl.createProgram();\n    let prefixVertex, prefixFragment;\n    let versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\\n' : '';\n\n    if (parameters.isRawShaderMaterial) {\n      prefixVertex = [customDefines].filter(filterEmptyLine).join('\\n');\n\n      if (prefixVertex.length > 0) {\n        prefixVertex += '\\n';\n      }\n\n      prefixFragment = [customExtensions, customDefines].filter(filterEmptyLine).join('\\n');\n\n      if (prefixFragment.length > 0) {\n        prefixFragment += '\\n';\n      }\n    } else {\n      prefixVertex = [generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.instancing ? '#define USE_INSTANCING' : '', parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '', parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '', '#define GAMMA_FACTOR ' + gammaFactorDefine, '#define MAX_BONES ' + parameters.maxBones, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '', parameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.transmission ? '#define USE_TRANSMISSION' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '', parameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '', parameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors ? '#define USE_COLOR' : '', parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.skinning ? '#define USE_SKINNING' : '', parameters.useVertexTexture ? '#define BONE_TEXTURE' : '', parameters.morphTargets ? '#define USE_MORPHTARGETS' : '', parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '', parameters.morphTargets && parameters.isWebGL2 ? '#define MORPHTARGETS_TEXTURE' : '', parameters.morphTargets && parameters.isWebGL2 ? '#define MORPHTARGETS_COUNT ' + parameters.morphTargetsCount : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', 'uniform mat4 modelMatrix;', 'uniform mat4 modelViewMatrix;', 'uniform mat4 projectionMatrix;', 'uniform mat4 viewMatrix;', 'uniform mat3 normalMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', '#ifdef USE_INSTANCING', '\tattribute mat4 instanceMatrix;', '#endif', '#ifdef USE_INSTANCING_COLOR', '\tattribute vec3 instanceColor;', '#endif', 'attribute vec3 position;', 'attribute vec3 normal;', 'attribute vec2 uv;', '#ifdef USE_TANGENT', '\tattribute vec4 tangent;', '#endif', '#if defined( USE_COLOR_ALPHA )', '\tattribute vec4 color;', '#elif defined( USE_COLOR )', '\tattribute vec3 color;', '#endif', '#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )', '\tattribute vec3 morphTarget0;', '\tattribute vec3 morphTarget1;', '\tattribute vec3 morphTarget2;', '\tattribute vec3 morphTarget3;', '\t#ifdef USE_MORPHNORMALS', '\t\tattribute vec3 morphNormal0;', '\t\tattribute vec3 morphNormal1;', '\t\tattribute vec3 morphNormal2;', '\t\tattribute vec3 morphNormal3;', '\t#else', '\t\tattribute vec3 morphTarget4;', '\t\tattribute vec3 morphTarget5;', '\t\tattribute vec3 morphTarget6;', '\t\tattribute vec3 morphTarget7;', '\t#endif', '#endif', '#ifdef USE_SKINNING', '\tattribute vec4 skinIndex;', '\tattribute vec4 skinWeight;', '#endif', '\\n'].filter(filterEmptyLine).join('\\n');\n      prefixFragment = [customExtensions, generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, '#define GAMMA_FACTOR ' + gammaFactorDefine, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.matcap ? '#define USE_MATCAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapTypeDefine : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.envMap ? '#define ' + envMapBlendingDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoat ? '#define USE_CLEARCOAT' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '', parameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.alphaTest ? '#define USE_ALPHATEST' : '', parameters.sheen ? '#define USE_SHEEN' : '', parameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '', parameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '', parameters.transmission ? '#define USE_TRANSMISSION' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '', parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.gradientMap ? '#define USE_GRADIENTMAP' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '', parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? '#define TEXTURE_LOD_EXT' : '', 'uniform mat4 viewMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', parameters.toneMapping !== NoToneMapping ? '#define TONE_MAPPING' : '', parameters.toneMapping !== NoToneMapping ? ShaderChunk['tonemapping_pars_fragment'] : '', // this code is required here because it is used by the toneMapping() function defined below\n      parameters.toneMapping !== NoToneMapping ? getToneMappingFunction('toneMapping', parameters.toneMapping) : '', parameters.dithering ? '#define DITHERING' : '', parameters.format === RGBFormat ? '#define OPAQUE' : '', ShaderChunk['encodings_pars_fragment'], // this code is required here because it is used by the various encoding/decoding function defined below\n      parameters.map ? getTexelDecodingFunction('mapTexelToLinear', parameters.mapEncoding) : '', parameters.matcap ? getTexelDecodingFunction('matcapTexelToLinear', parameters.matcapEncoding) : '', parameters.envMap ? getTexelDecodingFunction('envMapTexelToLinear', parameters.envMapEncoding) : '', parameters.emissiveMap ? getTexelDecodingFunction('emissiveMapTexelToLinear', parameters.emissiveMapEncoding) : '', parameters.specularColorMap ? getTexelDecodingFunction('specularColorMapTexelToLinear', parameters.specularColorMapEncoding) : '', parameters.sheenColorMap ? getTexelDecodingFunction('sheenColorMapTexelToLinear', parameters.sheenColorMapEncoding) : '', parameters.lightMap ? getTexelDecodingFunction('lightMapTexelToLinear', parameters.lightMapEncoding) : '', getTexelEncodingFunction('linearToOutputTexel', parameters.outputEncoding), parameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '', '\\n'].filter(filterEmptyLine).join('\\n');\n    }\n\n    vertexShader = resolveIncludes(vertexShader);\n    vertexShader = replaceLightNums(vertexShader, parameters);\n    vertexShader = replaceClippingPlaneNums(vertexShader, parameters);\n    fragmentShader = resolveIncludes(fragmentShader);\n    fragmentShader = replaceLightNums(fragmentShader, parameters);\n    fragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);\n    vertexShader = unrollLoops(vertexShader);\n    fragmentShader = unrollLoops(fragmentShader);\n\n    if (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {\n      // GLSL 3.0 conversion for built-in materials and ShaderMaterial\n      versionString = '#version 300 es\\n';\n      prefixVertex = ['precision mediump sampler2DArray;', '#define attribute in', '#define varying out', '#define texture2D texture'].join('\\n') + '\\n' + prefixVertex;\n      prefixFragment = ['#define varying in', parameters.glslVersion === GLSL3 ? '' : 'out highp vec4 pc_fragColor;', parameters.glslVersion === GLSL3 ? '' : '#define gl_FragColor pc_fragColor', '#define gl_FragDepthEXT gl_FragDepth', '#define texture2D texture', '#define textureCube texture', '#define texture2DProj textureProj', '#define texture2DLodEXT textureLod', '#define texture2DProjLodEXT textureProjLod', '#define textureCubeLodEXT textureLod', '#define texture2DGradEXT textureGrad', '#define texture2DProjGradEXT textureProjGrad', '#define textureCubeGradEXT textureGrad'].join('\\n') + '\\n' + prefixFragment;\n    }\n\n    const vertexGlsl = versionString + prefixVertex + vertexShader;\n    const fragmentGlsl = versionString + prefixFragment + fragmentShader; // console.log( '*VERTEX*', vertexGlsl );\n    // console.log( '*FRAGMENT*', fragmentGlsl );\n\n    const glVertexShader = WebGLShader(gl, gl.VERTEX_SHADER, vertexGlsl);\n    const glFragmentShader = WebGLShader(gl, gl.FRAGMENT_SHADER, fragmentGlsl);\n    gl.attachShader(program, glVertexShader);\n    gl.attachShader(program, glFragmentShader); // Force a particular attribute to index 0.\n\n    if (parameters.index0AttributeName !== undefined) {\n      gl.bindAttribLocation(program, 0, parameters.index0AttributeName);\n    } else if (parameters.morphTargets === true) {\n      // programs with morphTargets displace position out of attribute 0\n      gl.bindAttribLocation(program, 0, 'position');\n    }\n\n    gl.linkProgram(program); // check for link errors\n\n    if (renderer.debug.checkShaderErrors) {\n      const programLog = gl.getProgramInfoLog(program).trim();\n      const vertexLog = gl.getShaderInfoLog(glVertexShader).trim();\n      const fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();\n      let runnable = true;\n      let haveDiagnostics = true;\n\n      if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n        runnable = false;\n        const vertexErrors = getShaderErrors(gl, glVertexShader, 'vertex');\n        const fragmentErrors = getShaderErrors(gl, glFragmentShader, 'fragment');\n        console.error('THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' + 'VALIDATE_STATUS ' + gl.getProgramParameter(program, gl.VALIDATE_STATUS) + '\\n\\n' + 'Program Info Log: ' + programLog + '\\n' + vertexErrors + '\\n' + fragmentErrors);\n      } else if (programLog !== '') {\n        console.warn('THREE.WebGLProgram: Program Info Log:', programLog);\n      } else if (vertexLog === '' || fragmentLog === '') {\n        haveDiagnostics = false;\n      }\n\n      if (haveDiagnostics) {\n        this.diagnostics = {\n          runnable: runnable,\n          programLog: programLog,\n          vertexShader: {\n            log: vertexLog,\n            prefix: prefixVertex\n          },\n          fragmentShader: {\n            log: fragmentLog,\n            prefix: prefixFragment\n          }\n        };\n      }\n    } // Clean up\n    // Crashes in iOS9 and iOS10. #18402\n    // gl.detachShader( program, glVertexShader );\n    // gl.detachShader( program, glFragmentShader );\n\n\n    gl.deleteShader(glVertexShader);\n    gl.deleteShader(glFragmentShader); // set up caching for uniform locations\n\n    let cachedUniforms;\n\n    this.getUniforms = function () {\n      if (cachedUniforms === undefined) {\n        cachedUniforms = new WebGLUniforms(gl, program);\n      }\n\n      return cachedUniforms;\n    }; // set up caching for attribute locations\n\n\n    let cachedAttributes;\n\n    this.getAttributes = function () {\n      if (cachedAttributes === undefined) {\n        cachedAttributes = fetchAttributeLocations(gl, program);\n      }\n\n      return cachedAttributes;\n    }; // free resource\n\n\n    this.destroy = function () {\n      bindingStates.releaseStatesOfProgram(this);\n      gl.deleteProgram(program);\n      this.program = undefined;\n    }; //\n\n\n    this.name = parameters.shaderName;\n    this.id = programIdCount++;\n    this.cacheKey = cacheKey;\n    this.usedTimes = 1;\n    this.program = program;\n    this.vertexShader = glVertexShader;\n    this.fragmentShader = glFragmentShader;\n    return this;\n  }\n\n  function WebGLPrograms(renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping) {\n    const programs = [];\n    const isWebGL2 = capabilities.isWebGL2;\n    const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n    const floatVertexTextures = capabilities.floatVertexTextures;\n    const maxVertexUniforms = capabilities.maxVertexUniforms;\n    const vertexTextures = capabilities.vertexTextures;\n    let precision = capabilities.precision;\n    const shaderIDs = {\n      MeshDepthMaterial: 'depth',\n      MeshDistanceMaterial: 'distanceRGBA',\n      MeshNormalMaterial: 'normal',\n      MeshBasicMaterial: 'basic',\n      MeshLambertMaterial: 'lambert',\n      MeshPhongMaterial: 'phong',\n      MeshToonMaterial: 'toon',\n      MeshStandardMaterial: 'physical',\n      MeshPhysicalMaterial: 'physical',\n      MeshMatcapMaterial: 'matcap',\n      LineBasicMaterial: 'basic',\n      LineDashedMaterial: 'dashed',\n      PointsMaterial: 'points',\n      ShadowMaterial: 'shadow',\n      SpriteMaterial: 'sprite'\n    };\n    const parameterNames = ['precision', 'isWebGL2', 'supportsVertexTextures', 'outputEncoding', 'instancing', 'instancingColor', 'map', 'mapEncoding', 'matcap', 'matcapEncoding', 'envMap', 'envMapMode', 'envMapEncoding', 'envMapCubeUV', 'lightMap', 'lightMapEncoding', 'aoMap', 'emissiveMap', 'emissiveMapEncoding', 'bumpMap', 'normalMap', 'objectSpaceNormalMap', 'tangentSpaceNormalMap', 'clearcoat', 'clearcoatMap', 'clearcoatRoughnessMap', 'clearcoatNormalMap', 'displacementMap', 'specularMap',, 'roughnessMap', 'metalnessMap', 'gradientMap', 'alphaMap', 'alphaTest', 'combine', 'vertexColors', 'vertexAlphas', 'vertexTangents', 'vertexUvs', 'uvsVertexOnly', 'fog', 'useFog', 'fogExp2', 'flatShading', 'sizeAttenuation', 'logarithmicDepthBuffer', 'skinning', 'maxBones', 'useVertexTexture', 'morphTargets', 'morphNormals', 'morphTargetsCount', 'premultipliedAlpha', 'numDirLights', 'numPointLights', 'numSpotLights', 'numHemiLights', 'numRectAreaLights', 'numDirLightShadows', 'numPointLightShadows', 'numSpotLightShadows', 'shadowMapEnabled', 'shadowMapType', 'toneMapping', 'physicallyCorrectLights', 'doubleSided', 'flipSided', 'numClippingPlanes', 'numClipIntersection', 'depthPacking', 'dithering', 'format', 'specularIntensityMap', 'specularColorMap', 'specularColorMapEncoding', 'transmission', 'transmissionMap', 'thicknessMap', 'sheen', 'sheenColorMap', 'sheenColorMapEncoding', 'sheenRoughnessMap'];\n\n    function getMaxBones(object) {\n      const skeleton = object.skeleton;\n      const bones = skeleton.bones;\n\n      if (floatVertexTextures) {\n        return 1024;\n      } else {\n        // default for when object is not specified\n        // ( for example when prebuilding shader to be used with multiple objects )\n        //\n        //\t- leave some extra space for other uniforms\n        //\t- limit here is ANGLE's 254 max uniform vectors\n        //\t\t(up to 54 should be safe)\n        const nVertexUniforms = maxVertexUniforms;\n        const nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);\n        const maxBones = Math.min(nVertexMatrices, bones.length);\n\n        if (maxBones < bones.length) {\n          console.warn('THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.');\n          return 0;\n        }\n\n        return maxBones;\n      }\n    }\n\n    function getTextureEncodingFromMap(map) {\n      let encoding;\n\n      if (map && map.isTexture) {\n        encoding = map.encoding;\n      } else if (map && map.isWebGLRenderTarget) {\n        console.warn('THREE.WebGLPrograms.getTextureEncodingFromMap: don\\'t use render targets as textures. Use their .texture property instead.');\n        encoding = map.texture.encoding;\n      } else {\n        encoding = LinearEncoding;\n      }\n\n      if (isWebGL2 && map && map.isTexture && map.format === RGBAFormat && map.type === UnsignedByteType && map.encoding === sRGBEncoding) {\n        encoding = LinearEncoding; // disable inline decode for sRGB textures in WebGL 2\n      }\n\n      return encoding;\n    }\n\n    function getParameters(material, lights, shadows, scene, object) {\n      const fog = scene.fog;\n      const environment = material.isMeshStandardMaterial ? scene.environment : null;\n      const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);\n      const shaderID = shaderIDs[material.type]; // heuristics to create shader parameters according to lights in the scene\n      // (not to blow over maxLights budget)\n\n      const maxBones = object.isSkinnedMesh ? getMaxBones(object) : 0;\n\n      if (material.precision !== null) {\n        precision = capabilities.getMaxPrecision(material.precision);\n\n        if (precision !== material.precision) {\n          console.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');\n        }\n      }\n\n      let vertexShader, fragmentShader;\n\n      if (shaderID) {\n        const shader = ShaderLib[shaderID];\n        vertexShader = shader.vertexShader;\n        fragmentShader = shader.fragmentShader;\n      } else {\n        vertexShader = material.vertexShader;\n        fragmentShader = material.fragmentShader;\n      }\n\n      const currentRenderTarget = renderer.getRenderTarget();\n      const useAlphaTest = material.alphaTest > 0;\n      const useClearcoat = material.clearcoat > 0;\n      const parameters = {\n        isWebGL2: isWebGL2,\n        shaderID: shaderID,\n        shaderName: material.type,\n        vertexShader: vertexShader,\n        fragmentShader: fragmentShader,\n        defines: material.defines,\n        isRawShaderMaterial: material.isRawShaderMaterial === true,\n        glslVersion: material.glslVersion,\n        precision: precision,\n        instancing: object.isInstancedMesh === true,\n        instancingColor: object.isInstancedMesh === true && object.instanceColor !== null,\n        supportsVertexTextures: vertexTextures,\n        outputEncoding: currentRenderTarget !== null ? getTextureEncodingFromMap(currentRenderTarget.texture) : renderer.outputEncoding,\n        map: !!material.map,\n        mapEncoding: getTextureEncodingFromMap(material.map),\n        matcap: !!material.matcap,\n        matcapEncoding: getTextureEncodingFromMap(material.matcap),\n        envMap: !!envMap,\n        envMapMode: envMap && envMap.mapping,\n        envMapEncoding: getTextureEncodingFromMap(envMap),\n        envMapCubeUV: !!envMap && (envMap.mapping === CubeUVReflectionMapping || envMap.mapping === CubeUVRefractionMapping),\n        lightMap: !!material.lightMap,\n        lightMapEncoding: getTextureEncodingFromMap(material.lightMap),\n        aoMap: !!material.aoMap,\n        emissiveMap: !!material.emissiveMap,\n        emissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap),\n        bumpMap: !!material.bumpMap,\n        normalMap: !!material.normalMap,\n        objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n        tangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n        clearcoat: useClearcoat,\n        clearcoatMap: useClearcoat && !!material.clearcoatMap,\n        clearcoatRoughnessMap: useClearcoat && !!material.clearcoatRoughnessMap,\n        clearcoatNormalMap: useClearcoat && !!material.clearcoatNormalMap,\n        displacementMap: !!material.displacementMap,\n        roughnessMap: !!material.roughnessMap,\n        metalnessMap: !!material.metalnessMap,\n        specularMap: !!material.specularMap,\n        specularIntensityMap: !!material.specularIntensityMap,\n        specularColorMap: !!material.specularColorMap,\n        specularColorMapEncoding: getTextureEncodingFromMap(material.specularColorMap),\n        alphaMap: !!material.alphaMap,\n        alphaTest: useAlphaTest,\n        gradientMap: !!material.gradientMap,\n        sheen: material.sheen > 0,\n        sheenColorMap: !!material.sheenColorMap,\n        sheenColorMapEncoding: getTextureEncodingFromMap(material.sheenColorMap),\n        sheenRoughnessMap: !!material.sheenRoughnessMap,\n        transmission: material.transmission > 0,\n        transmissionMap: !!material.transmissionMap,\n        thicknessMap: !!material.thicknessMap,\n        combine: material.combine,\n        vertexTangents: !!material.normalMap && !!object.geometry && !!object.geometry.attributes.tangent,\n        vertexColors: material.vertexColors,\n        vertexAlphas: material.vertexColors === true && !!object.geometry && !!object.geometry.attributes.color && object.geometry.attributes.color.itemSize === 4,\n        vertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatMap || !!material.clearcoatRoughnessMap || !!material.clearcoatNormalMap || !!material.displacementMap || !!material.transmissionMap || !!material.thicknessMap || !!material.specularIntensityMap || !!material.specularColorMap || !!material.sheenColorMap || material.sheenRoughnessMap,\n        uvsVertexOnly: !(!!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap || material.transmission > 0 || !!material.transmissionMap || !!material.thicknessMap || !!material.specularIntensityMap || !!material.specularColorMap || !!material.sheen > 0 || !!material.sheenColorMap || !!material.sheenRoughnessMap) && !!material.displacementMap,\n        fog: !!fog,\n        useFog: material.fog,\n        fogExp2: fog && fog.isFogExp2,\n        flatShading: !!material.flatShading,\n        sizeAttenuation: material.sizeAttenuation,\n        logarithmicDepthBuffer: logarithmicDepthBuffer,\n        skinning: object.isSkinnedMesh === true && maxBones > 0,\n        maxBones: maxBones,\n        useVertexTexture: floatVertexTextures,\n        morphTargets: !!object.geometry && !!object.geometry.morphAttributes.position,\n        morphNormals: !!object.geometry && !!object.geometry.morphAttributes.normal,\n        morphTargetsCount: !!object.geometry && !!object.geometry.morphAttributes.position ? object.geometry.morphAttributes.position.length : 0,\n        numDirLights: lights.directional.length,\n        numPointLights: lights.point.length,\n        numSpotLights: lights.spot.length,\n        numRectAreaLights: lights.rectArea.length,\n        numHemiLights: lights.hemi.length,\n        numDirLightShadows: lights.directionalShadowMap.length,\n        numPointLightShadows: lights.pointShadowMap.length,\n        numSpotLightShadows: lights.spotShadowMap.length,\n        numClippingPlanes: clipping.numPlanes,\n        numClipIntersection: clipping.numIntersection,\n        format: material.format,\n        dithering: material.dithering,\n        shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n        shadowMapType: renderer.shadowMap.type,\n        toneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n        physicallyCorrectLights: renderer.physicallyCorrectLights,\n        premultipliedAlpha: material.premultipliedAlpha,\n        doubleSided: material.side === DoubleSide,\n        flipSided: material.side === BackSide,\n        depthPacking: material.depthPacking !== undefined ? material.depthPacking : false,\n        index0AttributeName: material.index0AttributeName,\n        extensionDerivatives: material.extensions && material.extensions.derivatives,\n        extensionFragDepth: material.extensions && material.extensions.fragDepth,\n        extensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n        extensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n        rendererExtensionFragDepth: isWebGL2 || extensions.has('EXT_frag_depth'),\n        rendererExtensionDrawBuffers: isWebGL2 || extensions.has('WEBGL_draw_buffers'),\n        rendererExtensionShaderTextureLod: isWebGL2 || extensions.has('EXT_shader_texture_lod'),\n        customProgramCacheKey: material.customProgramCacheKey()\n      };\n      return parameters;\n    }\n\n    function getProgramCacheKey(parameters) {\n      const array = [];\n\n      if (parameters.shaderID) {\n        array.push(parameters.shaderID);\n      } else {\n        array.push(hashString(parameters.fragmentShader));\n        array.push(hashString(parameters.vertexShader));\n      }\n\n      if (parameters.defines !== undefined) {\n        for (const name in parameters.defines) {\n          array.push(name);\n          array.push(parameters.defines[name]);\n        }\n      }\n\n      if (parameters.isRawShaderMaterial === false) {\n        for (let i = 0; i < parameterNames.length; i++) {\n          array.push(parameters[parameterNames[i]]);\n        }\n\n        array.push(renderer.outputEncoding);\n        array.push(renderer.gammaFactor);\n      }\n\n      array.push(parameters.customProgramCacheKey);\n      return array.join();\n    }\n\n    function getUniforms(material) {\n      const shaderID = shaderIDs[material.type];\n      let uniforms;\n\n      if (shaderID) {\n        const shader = ShaderLib[shaderID];\n        uniforms = UniformsUtils.clone(shader.uniforms);\n      } else {\n        uniforms = material.uniforms;\n      }\n\n      return uniforms;\n    }\n\n    function acquireProgram(parameters, cacheKey) {\n      let program; // Check if code has been already compiled\n\n      for (let p = 0, pl = programs.length; p < pl; p++) {\n        const preexistingProgram = programs[p];\n\n        if (preexistingProgram.cacheKey === cacheKey) {\n          program = preexistingProgram;\n          ++program.usedTimes;\n          break;\n        }\n      }\n\n      if (program === undefined) {\n        program = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);\n        programs.push(program);\n      }\n\n      return program;\n    }\n\n    function releaseProgram(program) {\n      if (--program.usedTimes === 0) {\n        // Remove from unordered set\n        const i = programs.indexOf(program);\n        programs[i] = programs[programs.length - 1];\n        programs.pop(); // Free WebGL resources\n\n        program.destroy();\n      }\n    }\n\n    return {\n      getParameters: getParameters,\n      getProgramCacheKey: getProgramCacheKey,\n      getUniforms: getUniforms,\n      acquireProgram: acquireProgram,\n      releaseProgram: releaseProgram,\n      // Exposed for resource monitoring & error feedback via renderer.info:\n      programs: programs\n    };\n  }\n\n  function WebGLProperties() {\n    let properties = new WeakMap();\n\n    function get(object) {\n      let map = properties.get(object);\n\n      if (map === undefined) {\n        map = {};\n        properties.set(object, map);\n      }\n\n      return map;\n    }\n\n    function remove(object) {\n      properties.delete(object);\n    }\n\n    function update(object, key, value) {\n      properties.get(object)[key] = value;\n    }\n\n    function dispose() {\n      properties = new WeakMap();\n    }\n\n    return {\n      get: get,\n      remove: remove,\n      update: update,\n      dispose: dispose\n    };\n  }\n\n  function painterSortStable(a, b) {\n    if (a.groupOrder !== b.groupOrder) {\n      return a.groupOrder - b.groupOrder;\n    } else if (a.renderOrder !== b.renderOrder) {\n      return a.renderOrder - b.renderOrder;\n    } else if (a.program !== b.program) {\n      return a.program.id - b.program.id;\n    } else if (a.material.id !== b.material.id) {\n      return a.material.id - b.material.id;\n    } else if (a.z !== b.z) {\n      return a.z - b.z;\n    } else {\n      return a.id - b.id;\n    }\n  }\n\n  function reversePainterSortStable(a, b) {\n    if (a.groupOrder !== b.groupOrder) {\n      return a.groupOrder - b.groupOrder;\n    } else if (a.renderOrder !== b.renderOrder) {\n      return a.renderOrder - b.renderOrder;\n    } else if (a.z !== b.z) {\n      return b.z - a.z;\n    } else {\n      return a.id - b.id;\n    }\n  }\n\n  function WebGLRenderList(properties) {\n    const renderItems = [];\n    let renderItemsIndex = 0;\n    const opaque = [];\n    const transmissive = [];\n    const transparent = [];\n    const defaultProgram = {\n      id: -1\n    };\n\n    function init() {\n      renderItemsIndex = 0;\n      opaque.length = 0;\n      transmissive.length = 0;\n      transparent.length = 0;\n    }\n\n    function getNextRenderItem(object, geometry, material, groupOrder, z, group) {\n      let renderItem = renderItems[renderItemsIndex];\n      const materialProperties = properties.get(material);\n\n      if (renderItem === undefined) {\n        renderItem = {\n          id: object.id,\n          object: object,\n          geometry: geometry,\n          material: material,\n          program: materialProperties.program || defaultProgram,\n          groupOrder: groupOrder,\n          renderOrder: object.renderOrder,\n          z: z,\n          group: group\n        };\n        renderItems[renderItemsIndex] = renderItem;\n      } else {\n        renderItem.id = object.id;\n        renderItem.object = object;\n        renderItem.geometry = geometry;\n        renderItem.material = material;\n        renderItem.program = materialProperties.program || defaultProgram;\n        renderItem.groupOrder = groupOrder;\n        renderItem.renderOrder = object.renderOrder;\n        renderItem.z = z;\n        renderItem.group = group;\n      }\n\n      renderItemsIndex++;\n      return renderItem;\n    }\n\n    function push(object, geometry, material, groupOrder, z, group) {\n      const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\n\n      if (material.transmission > 0.0) {\n        transmissive.push(renderItem);\n      } else if (material.transparent === true) {\n        transparent.push(renderItem);\n      } else {\n        opaque.push(renderItem);\n      }\n    }\n\n    function unshift(object, geometry, material, groupOrder, z, group) {\n      const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\n\n      if (material.transmission > 0.0) {\n        transmissive.unshift(renderItem);\n      } else if (material.transparent === true) {\n        transparent.unshift(renderItem);\n      } else {\n        opaque.unshift(renderItem);\n      }\n    }\n\n    function sort(customOpaqueSort, customTransparentSort) {\n      if (opaque.length > 1) opaque.sort(customOpaqueSort || painterSortStable);\n      if (transmissive.length > 1) transmissive.sort(customTransparentSort || reversePainterSortStable);\n      if (transparent.length > 1) transparent.sort(customTransparentSort || reversePainterSortStable);\n    }\n\n    function finish() {\n      // Clear references from inactive renderItems in the list\n      for (let i = renderItemsIndex, il = renderItems.length; i < il; i++) {\n        const renderItem = renderItems[i];\n        if (renderItem.id === null) break;\n        renderItem.id = null;\n        renderItem.object = null;\n        renderItem.geometry = null;\n        renderItem.material = null;\n        renderItem.program = null;\n        renderItem.group = null;\n      }\n    }\n\n    return {\n      opaque: opaque,\n      transmissive: transmissive,\n      transparent: transparent,\n      init: init,\n      push: push,\n      unshift: unshift,\n      finish: finish,\n      sort: sort\n    };\n  }\n\n  function WebGLRenderLists(properties) {\n    let lists = new WeakMap();\n\n    function get(scene, renderCallDepth) {\n      let list;\n\n      if (lists.has(scene) === false) {\n        list = new WebGLRenderList(properties);\n        lists.set(scene, [list]);\n      } else {\n        if (renderCallDepth >= lists.get(scene).length) {\n          list = new WebGLRenderList(properties);\n          lists.get(scene).push(list);\n        } else {\n          list = lists.get(scene)[renderCallDepth];\n        }\n      }\n\n      return list;\n    }\n\n    function dispose() {\n      lists = new WeakMap();\n    }\n\n    return {\n      get: get,\n      dispose: dispose\n    };\n  }\n\n  function UniformsCache() {\n    const lights = {};\n    return {\n      get: function (light) {\n        if (lights[light.id] !== undefined) {\n          return lights[light.id];\n        }\n\n        let uniforms;\n\n        switch (light.type) {\n          case 'DirectionalLight':\n            uniforms = {\n              direction: new Vector3(),\n              color: new Color()\n            };\n            break;\n\n          case 'SpotLight':\n            uniforms = {\n              position: new Vector3(),\n              direction: new Vector3(),\n              color: new Color(),\n              distance: 0,\n              coneCos: 0,\n              penumbraCos: 0,\n              decay: 0\n            };\n            break;\n\n          case 'PointLight':\n            uniforms = {\n              position: new Vector3(),\n              color: new Color(),\n              distance: 0,\n              decay: 0\n            };\n            break;\n\n          case 'HemisphereLight':\n            uniforms = {\n              direction: new Vector3(),\n              skyColor: new Color(),\n              groundColor: new Color()\n            };\n            break;\n\n          case 'RectAreaLight':\n            uniforms = {\n              color: new Color(),\n              position: new Vector3(),\n              halfWidth: new Vector3(),\n              halfHeight: new Vector3()\n            };\n            break;\n        }\n\n        lights[light.id] = uniforms;\n        return uniforms;\n      }\n    };\n  }\n\n  function ShadowUniformsCache() {\n    const lights = {};\n    return {\n      get: function (light) {\n        if (lights[light.id] !== undefined) {\n          return lights[light.id];\n        }\n\n        let uniforms;\n\n        switch (light.type) {\n          case 'DirectionalLight':\n            uniforms = {\n              shadowBias: 0,\n              shadowNormalBias: 0,\n              shadowRadius: 1,\n              shadowMapSize: new Vector2()\n            };\n            break;\n\n          case 'SpotLight':\n            uniforms = {\n              shadowBias: 0,\n              shadowNormalBias: 0,\n              shadowRadius: 1,\n              shadowMapSize: new Vector2()\n            };\n            break;\n\n          case 'PointLight':\n            uniforms = {\n              shadowBias: 0,\n              shadowNormalBias: 0,\n              shadowRadius: 1,\n              shadowMapSize: new Vector2(),\n              shadowCameraNear: 1,\n              shadowCameraFar: 1000\n            };\n            break;\n          // TODO (abelnation): set RectAreaLight shadow uniforms\n        }\n\n        lights[light.id] = uniforms;\n        return uniforms;\n      }\n    };\n  }\n\n  let nextVersion = 0;\n\n  function shadowCastingLightsFirst(lightA, lightB) {\n    return (lightB.castShadow ? 1 : 0) - (lightA.castShadow ? 1 : 0);\n  }\n\n  function WebGLLights(extensions, capabilities) {\n    const cache = new UniformsCache();\n    const shadowCache = ShadowUniformsCache();\n    const state = {\n      version: 0,\n      hash: {\n        directionalLength: -1,\n        pointLength: -1,\n        spotLength: -1,\n        rectAreaLength: -1,\n        hemiLength: -1,\n        numDirectionalShadows: -1,\n        numPointShadows: -1,\n        numSpotShadows: -1\n      },\n      ambient: [0, 0, 0],\n      probe: [],\n      directional: [],\n      directionalShadow: [],\n      directionalShadowMap: [],\n      directionalShadowMatrix: [],\n      spot: [],\n      spotShadow: [],\n      spotShadowMap: [],\n      spotShadowMatrix: [],\n      rectArea: [],\n      rectAreaLTC1: null,\n      rectAreaLTC2: null,\n      point: [],\n      pointShadow: [],\n      pointShadowMap: [],\n      pointShadowMatrix: [],\n      hemi: []\n    };\n\n    for (let i = 0; i < 9; i++) state.probe.push(new Vector3());\n\n    const vector3 = new Vector3();\n    const matrix4 = new Matrix4();\n    const matrix42 = new Matrix4();\n\n    function setup(lights, physicallyCorrectLights) {\n      let r = 0,\n          g = 0,\n          b = 0;\n\n      for (let i = 0; i < 9; i++) state.probe[i].set(0, 0, 0);\n\n      let directionalLength = 0;\n      let pointLength = 0;\n      let spotLength = 0;\n      let rectAreaLength = 0;\n      let hemiLength = 0;\n      let numDirectionalShadows = 0;\n      let numPointShadows = 0;\n      let numSpotShadows = 0;\n      lights.sort(shadowCastingLightsFirst); // artist-friendly light intensity scaling factor\n\n      const scaleFactor = physicallyCorrectLights !== true ? Math.PI : 1;\n\n      for (let i = 0, l = lights.length; i < l; i++) {\n        const light = lights[i];\n        const color = light.color;\n        const intensity = light.intensity;\n        const distance = light.distance;\n        const shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;\n\n        if (light.isAmbientLight) {\n          r += color.r * intensity * scaleFactor;\n          g += color.g * intensity * scaleFactor;\n          b += color.b * intensity * scaleFactor;\n        } else if (light.isLightProbe) {\n          for (let j = 0; j < 9; j++) {\n            state.probe[j].addScaledVector(light.sh.coefficients[j], intensity);\n          }\n        } else if (light.isDirectionalLight) {\n          const uniforms = cache.get(light);\n          uniforms.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);\n\n          if (light.castShadow) {\n            const shadow = light.shadow;\n            const shadowUniforms = shadowCache.get(light);\n            shadowUniforms.shadowBias = shadow.bias;\n            shadowUniforms.shadowNormalBias = shadow.normalBias;\n            shadowUniforms.shadowRadius = shadow.radius;\n            shadowUniforms.shadowMapSize = shadow.mapSize;\n            state.directionalShadow[directionalLength] = shadowUniforms;\n            state.directionalShadowMap[directionalLength] = shadowMap;\n            state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;\n            numDirectionalShadows++;\n          }\n\n          state.directional[directionalLength] = uniforms;\n          directionalLength++;\n        } else if (light.isSpotLight) {\n          const uniforms = cache.get(light);\n          uniforms.position.setFromMatrixPosition(light.matrixWorld);\n          uniforms.color.copy(color).multiplyScalar(intensity * scaleFactor);\n          uniforms.distance = distance;\n          uniforms.coneCos = Math.cos(light.angle);\n          uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));\n          uniforms.decay = light.decay;\n\n          if (light.castShadow) {\n            const shadow = light.shadow;\n            const shadowUniforms = shadowCache.get(light);\n            shadowUniforms.shadowBias = shadow.bias;\n            shadowUniforms.shadowNormalBias = shadow.normalBias;\n            shadowUniforms.shadowRadius = shadow.radius;\n            shadowUniforms.shadowMapSize = shadow.mapSize;\n            state.spotShadow[spotLength] = shadowUniforms;\n            state.spotShadowMap[spotLength] = shadowMap;\n            state.spotShadowMatrix[spotLength] = light.shadow.matrix;\n            numSpotShadows++;\n          }\n\n          state.spot[spotLength] = uniforms;\n          spotLength++;\n        } else if (light.isRectAreaLight) {\n          const uniforms = cache.get(light); // (a) intensity is the total visible light emitted\n          //uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n          // (b) intensity is the brightness of the light\n\n          uniforms.color.copy(color).multiplyScalar(intensity);\n          uniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n          uniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);\n          state.rectArea[rectAreaLength] = uniforms;\n          rectAreaLength++;\n        } else if (light.isPointLight) {\n          const uniforms = cache.get(light);\n          uniforms.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);\n          uniforms.distance = light.distance;\n          uniforms.decay = light.decay;\n\n          if (light.castShadow) {\n            const shadow = light.shadow;\n            const shadowUniforms = shadowCache.get(light);\n            shadowUniforms.shadowBias = shadow.bias;\n            shadowUniforms.shadowNormalBias = shadow.normalBias;\n            shadowUniforms.shadowRadius = shadow.radius;\n            shadowUniforms.shadowMapSize = shadow.mapSize;\n            shadowUniforms.shadowCameraNear = shadow.camera.near;\n            shadowUniforms.shadowCameraFar = shadow.camera.far;\n            state.pointShadow[pointLength] = shadowUniforms;\n            state.pointShadowMap[pointLength] = shadowMap;\n            state.pointShadowMatrix[pointLength] = light.shadow.matrix;\n            numPointShadows++;\n          }\n\n          state.point[pointLength] = uniforms;\n          pointLength++;\n        } else if (light.isHemisphereLight) {\n          const uniforms = cache.get(light);\n          uniforms.skyColor.copy(light.color).multiplyScalar(intensity * scaleFactor);\n          uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity * scaleFactor);\n          state.hemi[hemiLength] = uniforms;\n          hemiLength++;\n        }\n      }\n\n      if (rectAreaLength > 0) {\n        if (capabilities.isWebGL2) {\n          // WebGL 2\n          state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n          state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n        } else {\n          // WebGL 1\n          if (extensions.has('OES_texture_float_linear') === true) {\n            state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n            state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n          } else if (extensions.has('OES_texture_half_float_linear') === true) {\n            state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;\n            state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;\n          } else {\n            console.error('THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.');\n          }\n        }\n      }\n\n      state.ambient[0] = r;\n      state.ambient[1] = g;\n      state.ambient[2] = b;\n      const hash = state.hash;\n\n      if (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows) {\n        state.directional.length = directionalLength;\n        state.spot.length = spotLength;\n        state.rectArea.length = rectAreaLength;\n        state.point.length = pointLength;\n        state.hemi.length = hemiLength;\n        state.directionalShadow.length = numDirectionalShadows;\n        state.directionalShadowMap.length = numDirectionalShadows;\n        state.pointShadow.length = numPointShadows;\n        state.pointShadowMap.length = numPointShadows;\n        state.spotShadow.length = numSpotShadows;\n        state.spotShadowMap.length = numSpotShadows;\n        state.directionalShadowMatrix.length = numDirectionalShadows;\n        state.pointShadowMatrix.length = numPointShadows;\n        state.spotShadowMatrix.length = numSpotShadows;\n        hash.directionalLength = directionalLength;\n        hash.pointLength = pointLength;\n        hash.spotLength = spotLength;\n        hash.rectAreaLength = rectAreaLength;\n        hash.hemiLength = hemiLength;\n        hash.numDirectionalShadows = numDirectionalShadows;\n        hash.numPointShadows = numPointShadows;\n        hash.numSpotShadows = numSpotShadows;\n        state.version = nextVersion++;\n      }\n    }\n\n    function setupView(lights, camera) {\n      let directionalLength = 0;\n      let pointLength = 0;\n      let spotLength = 0;\n      let rectAreaLength = 0;\n      let hemiLength = 0;\n      const viewMatrix = camera.matrixWorldInverse;\n\n      for (let i = 0, l = lights.length; i < l; i++) {\n        const light = lights[i];\n\n        if (light.isDirectionalLight) {\n          const uniforms = state.directional[directionalLength];\n          uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n          vector3.setFromMatrixPosition(light.target.matrixWorld);\n          uniforms.direction.sub(vector3);\n          uniforms.direction.transformDirection(viewMatrix);\n          directionalLength++;\n        } else if (light.isSpotLight) {\n          const uniforms = state.spot[spotLength];\n          uniforms.position.setFromMatrixPosition(light.matrixWorld);\n          uniforms.position.applyMatrix4(viewMatrix);\n          uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n          vector3.setFromMatrixPosition(light.target.matrixWorld);\n          uniforms.direction.sub(vector3);\n          uniforms.direction.transformDirection(viewMatrix);\n          spotLength++;\n        } else if (light.isRectAreaLight) {\n          const uniforms = state.rectArea[rectAreaLength];\n          uniforms.position.setFromMatrixPosition(light.matrixWorld);\n          uniforms.position.applyMatrix4(viewMatrix); // extract local rotation of light to derive width/height half vectors\n\n          matrix42.identity();\n          matrix4.copy(light.matrixWorld);\n          matrix4.premultiply(viewMatrix);\n          matrix42.extractRotation(matrix4);\n          uniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n          uniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);\n          uniforms.halfWidth.applyMatrix4(matrix42);\n          uniforms.halfHeight.applyMatrix4(matrix42);\n          rectAreaLength++;\n        } else if (light.isPointLight) {\n          const uniforms = state.point[pointLength];\n          uniforms.position.setFromMatrixPosition(light.matrixWorld);\n          uniforms.position.applyMatrix4(viewMatrix);\n          pointLength++;\n        } else if (light.isHemisphereLight) {\n          const uniforms = state.hemi[hemiLength];\n          uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n          uniforms.direction.transformDirection(viewMatrix);\n          uniforms.direction.normalize();\n          hemiLength++;\n        }\n      }\n    }\n\n    return {\n      setup: setup,\n      setupView: setupView,\n      state: state\n    };\n  }\n\n  function WebGLRenderState(extensions, capabilities) {\n    const lights = new WebGLLights(extensions, capabilities);\n    const lightsArray = [];\n    const shadowsArray = [];\n\n    function init() {\n      lightsArray.length = 0;\n      shadowsArray.length = 0;\n    }\n\n    function pushLight(light) {\n      lightsArray.push(light);\n    }\n\n    function pushShadow(shadowLight) {\n      shadowsArray.push(shadowLight);\n    }\n\n    function setupLights(physicallyCorrectLights) {\n      lights.setup(lightsArray, physicallyCorrectLights);\n    }\n\n    function setupLightsView(camera) {\n      lights.setupView(lightsArray, camera);\n    }\n\n    const state = {\n      lightsArray: lightsArray,\n      shadowsArray: shadowsArray,\n      lights: lights\n    };\n    return {\n      init: init,\n      state: state,\n      setupLights: setupLights,\n      setupLightsView: setupLightsView,\n      pushLight: pushLight,\n      pushShadow: pushShadow\n    };\n  }\n\n  function WebGLRenderStates(extensions, capabilities) {\n    let renderStates = new WeakMap();\n\n    function get(scene) {\n      let renderCallDepth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      let renderState;\n\n      if (renderStates.has(scene) === false) {\n        renderState = new WebGLRenderState(extensions, capabilities);\n        renderStates.set(scene, [renderState]);\n      } else {\n        if (renderCallDepth >= renderStates.get(scene).length) {\n          renderState = new WebGLRenderState(extensions, capabilities);\n          renderStates.get(scene).push(renderState);\n        } else {\n          renderState = renderStates.get(scene)[renderCallDepth];\n        }\n      }\n\n      return renderState;\n    }\n\n    function dispose() {\n      renderStates = new WeakMap();\n    }\n\n    return {\n      get: get,\n      dispose: dispose\n    };\n  }\n  /**\n   * parameters = {\n   *\n   *\topacity: <float>,\n   *\n   *\tmap: new THREE.Texture( <Image> ),\n   *\n   *\talphaMap: new THREE.Texture( <Image> ),\n   *\n   *\tdisplacementMap: new THREE.Texture( <Image> ),\n   *\tdisplacementScale: <float>,\n   *\tdisplacementBias: <float>,\n   *\n   *\twireframe: <boolean>,\n   *\twireframeLinewidth: <float>\n   * }\n   */\n\n\n  class MeshDepthMaterial extends Material {\n    constructor(parameters) {\n      super();\n      this.type = 'MeshDepthMaterial';\n      this.depthPacking = BasicDepthPacking;\n      this.map = null;\n      this.alphaMap = null;\n      this.displacementMap = null;\n      this.displacementScale = 1;\n      this.displacementBias = 0;\n      this.wireframe = false;\n      this.wireframeLinewidth = 1;\n      this.fog = false;\n      this.setValues(parameters);\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.depthPacking = source.depthPacking;\n      this.map = source.map;\n      this.alphaMap = source.alphaMap;\n      this.displacementMap = source.displacementMap;\n      this.displacementScale = source.displacementScale;\n      this.displacementBias = source.displacementBias;\n      this.wireframe = source.wireframe;\n      this.wireframeLinewidth = source.wireframeLinewidth;\n      return this;\n    }\n\n  }\n\n  MeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n  /**\n   * parameters = {\n   *\n   *\treferencePosition: <float>,\n   *\tnearDistance: <float>,\n   *\tfarDistance: <float>,\n   *\n   *\tmap: new THREE.Texture( <Image> ),\n   *\n   *\talphaMap: new THREE.Texture( <Image> ),\n   *\n   *\tdisplacementMap: new THREE.Texture( <Image> ),\n   *\tdisplacementScale: <float>,\n   *\tdisplacementBias: <float>\n   *\n   * }\n   */\n\n  class MeshDistanceMaterial extends Material {\n    constructor(parameters) {\n      super();\n      this.type = 'MeshDistanceMaterial';\n      this.referencePosition = new Vector3();\n      this.nearDistance = 1;\n      this.farDistance = 1000;\n      this.map = null;\n      this.alphaMap = null;\n      this.displacementMap = null;\n      this.displacementScale = 1;\n      this.displacementBias = 0;\n      this.fog = false;\n      this.setValues(parameters);\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.referencePosition.copy(source.referencePosition);\n      this.nearDistance = source.nearDistance;\n      this.farDistance = source.farDistance;\n      this.map = source.map;\n      this.alphaMap = source.alphaMap;\n      this.displacementMap = source.displacementMap;\n      this.displacementScale = source.displacementScale;\n      this.displacementBias = source.displacementBias;\n      return this;\n    }\n\n  }\n\n  MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n  const vertex = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n  const fragment = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n\\tconst float samples = float( VSM_SAMPLES );\\n\\tfloat mean = 0.0;\\n\\tfloat squared_mean = 0.0;\\n\\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\\n\\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\\n\\tfor ( float i = 0.0; i < samples; i ++ ) {\\n\\t\\tfloat uvOffset = uvStart + i * uvStride;\\n\\t\\t#ifdef HORIZONTAL_PASS\\n\\t\\t\\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\\n\\t\\t\\tmean += distribution.x;\\n\\t\\t\\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\\n\\t\\t\\tmean += depth;\\n\\t\\t\\tsquared_mean += depth * depth;\\n\\t\\t#endif\\n\\t}\\n\\tmean = mean / samples;\\n\\tsquared_mean = squared_mean / samples;\\n\\tfloat std_dev = sqrt( squared_mean - mean * mean );\\n\\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\n  function WebGLShadowMap(_renderer, _objects, _capabilities) {\n    let _frustum = new Frustum();\n\n    const _shadowMapSize = new Vector2(),\n          _viewportSize = new Vector2(),\n          _viewport = new Vector4(),\n          _depthMaterial = new MeshDepthMaterial({\n      depthPacking: RGBADepthPacking\n    }),\n          _distanceMaterial = new MeshDistanceMaterial(),\n          _materialCache = {},\n          _maxTextureSize = _capabilities.maxTextureSize;\n\n    const shadowSide = {\n      0: BackSide,\n      1: FrontSide,\n      2: DoubleSide\n    };\n    const shadowMaterialVertical = new ShaderMaterial({\n      defines: {\n        VSM_SAMPLES: 8\n      },\n      uniforms: {\n        shadow_pass: {\n          value: null\n        },\n        resolution: {\n          value: new Vector2()\n        },\n        radius: {\n          value: 4.0\n        }\n      },\n      vertexShader: vertex,\n      fragmentShader: fragment\n    });\n    const shadowMaterialHorizontal = shadowMaterialVertical.clone();\n    shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;\n    const fullScreenTri = new BufferGeometry();\n    fullScreenTri.setAttribute('position', new BufferAttribute(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3));\n    const fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);\n    const scope = this;\n    this.enabled = false;\n    this.autoUpdate = true;\n    this.needsUpdate = false;\n    this.type = PCFShadowMap;\n\n    this.render = function (lights, scene, camera) {\n      if (scope.enabled === false) return;\n      if (scope.autoUpdate === false && scope.needsUpdate === false) return;\n      if (lights.length === 0) return;\n\n      const currentRenderTarget = _renderer.getRenderTarget();\n\n      const activeCubeFace = _renderer.getActiveCubeFace();\n\n      const activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n      const _state = _renderer.state; // Set GL state for depth map.\n\n      _state.setBlending(NoBlending);\n\n      _state.buffers.color.setClear(1, 1, 1, 1);\n\n      _state.buffers.depth.setTest(true);\n\n      _state.setScissorTest(false); // render depth map\n\n\n      for (let i = 0, il = lights.length; i < il; i++) {\n        const light = lights[i];\n        const shadow = light.shadow;\n\n        if (shadow === undefined) {\n          console.warn('THREE.WebGLShadowMap:', light, 'has no shadow.');\n          continue;\n        }\n\n        if (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;\n\n        _shadowMapSize.copy(shadow.mapSize);\n\n        const shadowFrameExtents = shadow.getFrameExtents();\n\n        _shadowMapSize.multiply(shadowFrameExtents);\n\n        _viewportSize.copy(shadow.mapSize);\n\n        if (_shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize) {\n          if (_shadowMapSize.x > _maxTextureSize) {\n            _viewportSize.x = Math.floor(_maxTextureSize / shadowFrameExtents.x);\n            _shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n            shadow.mapSize.x = _viewportSize.x;\n          }\n\n          if (_shadowMapSize.y > _maxTextureSize) {\n            _viewportSize.y = Math.floor(_maxTextureSize / shadowFrameExtents.y);\n            _shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n            shadow.mapSize.y = _viewportSize.y;\n          }\n        }\n\n        if (shadow.map === null && !shadow.isPointLightShadow && this.type === VSMShadowMap) {\n          const pars = {\n            minFilter: LinearFilter,\n            magFilter: LinearFilter,\n            format: RGBAFormat\n          };\n          shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n          shadow.map.texture.name = light.name + '.shadowMap';\n          shadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n          shadow.camera.updateProjectionMatrix();\n        }\n\n        if (shadow.map === null) {\n          const pars = {\n            minFilter: NearestFilter,\n            magFilter: NearestFilter,\n            format: RGBAFormat\n          };\n          shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n          shadow.map.texture.name = light.name + '.shadowMap';\n          shadow.camera.updateProjectionMatrix();\n        }\n\n        _renderer.setRenderTarget(shadow.map);\n\n        _renderer.clear();\n\n        const viewportCount = shadow.getViewportCount();\n\n        for (let vp = 0; vp < viewportCount; vp++) {\n          const viewport = shadow.getViewport(vp);\n\n          _viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w);\n\n          _state.viewport(_viewport);\n\n          shadow.updateMatrices(light, vp);\n          _frustum = shadow.getFrustum();\n          renderObject(scene, camera, shadow.camera, light, this.type);\n        } // do blur pass for VSM\n\n\n        if (!shadow.isPointLightShadow && this.type === VSMShadowMap) {\n          VSMPass(shadow, camera);\n        }\n\n        shadow.needsUpdate = false;\n      }\n\n      scope.needsUpdate = false;\n\n      _renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);\n    };\n\n    function VSMPass(shadow, camera) {\n      const geometry = _objects.update(fullScreenMesh);\n\n      if (shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples) {\n        shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;\n        shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;\n        shadowMaterialVertical.needsUpdate = true;\n        shadowMaterialHorizontal.needsUpdate = true;\n      } // vertical pass\n\n\n      shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n      shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n      shadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\n      _renderer.setRenderTarget(shadow.mapPass);\n\n      _renderer.clear();\n\n      _renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null); // horizontal pass\n\n\n      shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n      shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;\n      shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;\n\n      _renderer.setRenderTarget(shadow.map);\n\n      _renderer.clear();\n\n      _renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);\n    }\n\n    function getDepthMaterial(object, geometry, material, light, shadowCameraNear, shadowCameraFar, type) {\n      let result = null;\n      const customMaterial = light.isPointLight === true ? object.customDistanceMaterial : object.customDepthMaterial;\n\n      if (customMaterial !== undefined) {\n        result = customMaterial;\n      } else {\n        result = light.isPointLight === true ? _distanceMaterial : _depthMaterial;\n      }\n\n      if (_renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0 || material.displacementMap && material.displacementScale !== 0 || material.alphaMap && material.alphaTest > 0) {\n        // in this case we need a unique material instance reflecting the\n        // appropriate state\n        const keyA = result.uuid,\n              keyB = material.uuid;\n        let materialsForVariant = _materialCache[keyA];\n\n        if (materialsForVariant === undefined) {\n          materialsForVariant = {};\n          _materialCache[keyA] = materialsForVariant;\n        }\n\n        let cachedMaterial = materialsForVariant[keyB];\n\n        if (cachedMaterial === undefined) {\n          cachedMaterial = result.clone();\n          materialsForVariant[keyB] = cachedMaterial;\n        }\n\n        result = cachedMaterial;\n      }\n\n      result.visible = material.visible;\n      result.wireframe = material.wireframe;\n\n      if (type === VSMShadowMap) {\n        result.side = material.shadowSide !== null ? material.shadowSide : material.side;\n      } else {\n        result.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];\n      }\n\n      result.alphaMap = material.alphaMap;\n      result.alphaTest = material.alphaTest;\n      result.clipShadows = material.clipShadows;\n      result.clippingPlanes = material.clippingPlanes;\n      result.clipIntersection = material.clipIntersection;\n      result.displacementMap = material.displacementMap;\n      result.displacementScale = material.displacementScale;\n      result.displacementBias = material.displacementBias;\n      result.wireframeLinewidth = material.wireframeLinewidth;\n      result.linewidth = material.linewidth;\n\n      if (light.isPointLight === true && result.isMeshDistanceMaterial === true) {\n        result.referencePosition.setFromMatrixPosition(light.matrixWorld);\n        result.nearDistance = shadowCameraNear;\n        result.farDistance = shadowCameraFar;\n      }\n\n      return result;\n    }\n\n    function renderObject(object, camera, shadowCamera, light, type) {\n      if (object.visible === false) return;\n      const visible = object.layers.test(camera.layers);\n\n      if (visible && (object.isMesh || object.isLine || object.isPoints)) {\n        if ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {\n          object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);\n\n          const geometry = _objects.update(object);\n\n          const material = object.material;\n\n          if (Array.isArray(material)) {\n            const groups = geometry.groups;\n\n            for (let k = 0, kl = groups.length; k < kl; k++) {\n              const group = groups[k];\n              const groupMaterial = material[group.materialIndex];\n\n              if (groupMaterial && groupMaterial.visible) {\n                const depthMaterial = getDepthMaterial(object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type);\n\n                _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);\n              }\n            }\n          } else if (material.visible) {\n            const depthMaterial = getDepthMaterial(object, geometry, material, light, shadowCamera.near, shadowCamera.far, type);\n\n            _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);\n          }\n        }\n      }\n\n      const children = object.children;\n\n      for (let i = 0, l = children.length; i < l; i++) {\n        renderObject(children[i], camera, shadowCamera, light, type);\n      }\n    }\n  }\n\n  function WebGLState(gl, extensions, capabilities) {\n    const isWebGL2 = capabilities.isWebGL2;\n\n    function ColorBuffer() {\n      let locked = false;\n      const color = new Vector4();\n      let currentColorMask = null;\n      const currentColorClear = new Vector4(0, 0, 0, 0);\n      return {\n        setMask: function (colorMask) {\n          if (currentColorMask !== colorMask && !locked) {\n            gl.colorMask(colorMask, colorMask, colorMask, colorMask);\n            currentColorMask = colorMask;\n          }\n        },\n        setLocked: function (lock) {\n          locked = lock;\n        },\n        setClear: function (r, g, b, a, premultipliedAlpha) {\n          if (premultipliedAlpha === true) {\n            r *= a;\n            g *= a;\n            b *= a;\n          }\n\n          color.set(r, g, b, a);\n\n          if (currentColorClear.equals(color) === false) {\n            gl.clearColor(r, g, b, a);\n            currentColorClear.copy(color);\n          }\n        },\n        reset: function () {\n          locked = false;\n          currentColorMask = null;\n          currentColorClear.set(-1, 0, 0, 0); // set to invalid state\n        }\n      };\n    }\n\n    function DepthBuffer() {\n      let locked = false;\n      let currentDepthMask = null;\n      let currentDepthFunc = null;\n      let currentDepthClear = null;\n      return {\n        setTest: function (depthTest) {\n          if (depthTest) {\n            enable(gl.DEPTH_TEST);\n          } else {\n            disable(gl.DEPTH_TEST);\n          }\n        },\n        setMask: function (depthMask) {\n          if (currentDepthMask !== depthMask && !locked) {\n            gl.depthMask(depthMask);\n            currentDepthMask = depthMask;\n          }\n        },\n        setFunc: function (depthFunc) {\n          if (currentDepthFunc !== depthFunc) {\n            if (depthFunc) {\n              switch (depthFunc) {\n                case NeverDepth:\n                  gl.depthFunc(gl.NEVER);\n                  break;\n\n                case AlwaysDepth:\n                  gl.depthFunc(gl.ALWAYS);\n                  break;\n\n                case LessDepth:\n                  gl.depthFunc(gl.LESS);\n                  break;\n\n                case LessEqualDepth:\n                  gl.depthFunc(gl.LEQUAL);\n                  break;\n\n                case EqualDepth:\n                  gl.depthFunc(gl.EQUAL);\n                  break;\n\n                case GreaterEqualDepth:\n                  gl.depthFunc(gl.GEQUAL);\n                  break;\n\n                case GreaterDepth:\n                  gl.depthFunc(gl.GREATER);\n                  break;\n\n                case NotEqualDepth:\n                  gl.depthFunc(gl.NOTEQUAL);\n                  break;\n\n                default:\n                  gl.depthFunc(gl.LEQUAL);\n              }\n            } else {\n              gl.depthFunc(gl.LEQUAL);\n            }\n\n            currentDepthFunc = depthFunc;\n          }\n        },\n        setLocked: function (lock) {\n          locked = lock;\n        },\n        setClear: function (depth) {\n          if (currentDepthClear !== depth) {\n            gl.clearDepth(depth);\n            currentDepthClear = depth;\n          }\n        },\n        reset: function () {\n          locked = false;\n          currentDepthMask = null;\n          currentDepthFunc = null;\n          currentDepthClear = null;\n        }\n      };\n    }\n\n    function StencilBuffer() {\n      let locked = false;\n      let currentStencilMask = null;\n      let currentStencilFunc = null;\n      let currentStencilRef = null;\n      let currentStencilFuncMask = null;\n      let currentStencilFail = null;\n      let currentStencilZFail = null;\n      let currentStencilZPass = null;\n      let currentStencilClear = null;\n      return {\n        setTest: function (stencilTest) {\n          if (!locked) {\n            if (stencilTest) {\n              enable(gl.STENCIL_TEST);\n            } else {\n              disable(gl.STENCIL_TEST);\n            }\n          }\n        },\n        setMask: function (stencilMask) {\n          if (currentStencilMask !== stencilMask && !locked) {\n            gl.stencilMask(stencilMask);\n            currentStencilMask = stencilMask;\n          }\n        },\n        setFunc: function (stencilFunc, stencilRef, stencilMask) {\n          if (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {\n            gl.stencilFunc(stencilFunc, stencilRef, stencilMask);\n            currentStencilFunc = stencilFunc;\n            currentStencilRef = stencilRef;\n            currentStencilFuncMask = stencilMask;\n          }\n        },\n        setOp: function (stencilFail, stencilZFail, stencilZPass) {\n          if (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {\n            gl.stencilOp(stencilFail, stencilZFail, stencilZPass);\n            currentStencilFail = stencilFail;\n            currentStencilZFail = stencilZFail;\n            currentStencilZPass = stencilZPass;\n          }\n        },\n        setLocked: function (lock) {\n          locked = lock;\n        },\n        setClear: function (stencil) {\n          if (currentStencilClear !== stencil) {\n            gl.clearStencil(stencil);\n            currentStencilClear = stencil;\n          }\n        },\n        reset: function () {\n          locked = false;\n          currentStencilMask = null;\n          currentStencilFunc = null;\n          currentStencilRef = null;\n          currentStencilFuncMask = null;\n          currentStencilFail = null;\n          currentStencilZFail = null;\n          currentStencilZPass = null;\n          currentStencilClear = null;\n        }\n      };\n    } //\n\n\n    const colorBuffer = new ColorBuffer();\n    const depthBuffer = new DepthBuffer();\n    const stencilBuffer = new StencilBuffer();\n    let enabledCapabilities = {};\n    let xrFramebuffer = null;\n    let currentBoundFramebuffers = {};\n    let currentProgram = null;\n    let currentBlendingEnabled = false;\n    let currentBlending = null;\n    let currentBlendEquation = null;\n    let currentBlendSrc = null;\n    let currentBlendDst = null;\n    let currentBlendEquationAlpha = null;\n    let currentBlendSrcAlpha = null;\n    let currentBlendDstAlpha = null;\n    let currentPremultipledAlpha = false;\n    let currentFlipSided = null;\n    let currentCullFace = null;\n    let currentLineWidth = null;\n    let currentPolygonOffsetFactor = null;\n    let currentPolygonOffsetUnits = null;\n    const maxTextures = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    let lineWidthAvailable = false;\n    let version = 0;\n    const glVersion = gl.getParameter(gl.VERSION);\n\n    if (glVersion.indexOf('WebGL') !== -1) {\n      version = parseFloat(/^WebGL (\\d)/.exec(glVersion)[1]);\n      lineWidthAvailable = version >= 1.0;\n    } else if (glVersion.indexOf('OpenGL ES') !== -1) {\n      version = parseFloat(/^OpenGL ES (\\d)/.exec(glVersion)[1]);\n      lineWidthAvailable = version >= 2.0;\n    }\n\n    let currentTextureSlot = null;\n    let currentBoundTextures = {};\n    const scissorParam = gl.getParameter(gl.SCISSOR_BOX);\n    const viewportParam = gl.getParameter(gl.VIEWPORT);\n    const currentScissor = new Vector4().fromArray(scissorParam);\n    const currentViewport = new Vector4().fromArray(viewportParam);\n\n    function createTexture(type, target, count) {\n      const data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.\n\n      const texture = gl.createTexture();\n      gl.bindTexture(type, texture);\n      gl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n      for (let i = 0; i < count; i++) {\n        gl.texImage2D(target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);\n      }\n\n      return texture;\n    }\n\n    const emptyTextures = {};\n    emptyTextures[gl.TEXTURE_2D] = createTexture(gl.TEXTURE_2D, gl.TEXTURE_2D, 1);\n    emptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6); // init\n\n    colorBuffer.setClear(0, 0, 0, 1);\n    depthBuffer.setClear(1);\n    stencilBuffer.setClear(0);\n    enable(gl.DEPTH_TEST);\n    depthBuffer.setFunc(LessEqualDepth);\n    setFlipSided(false);\n    setCullFace(CullFaceBack);\n    enable(gl.CULL_FACE);\n    setBlending(NoBlending); //\n\n    function enable(id) {\n      if (enabledCapabilities[id] !== true) {\n        gl.enable(id);\n        enabledCapabilities[id] = true;\n      }\n    }\n\n    function disable(id) {\n      if (enabledCapabilities[id] !== false) {\n        gl.disable(id);\n        enabledCapabilities[id] = false;\n      }\n    }\n\n    function bindXRFramebuffer(framebuffer) {\n      if (framebuffer !== xrFramebuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n        xrFramebuffer = framebuffer;\n      }\n    }\n\n    function bindFramebuffer(target, framebuffer) {\n      if (framebuffer === null && xrFramebuffer !== null) framebuffer = xrFramebuffer; // use active XR framebuffer if available\n\n      if (currentBoundFramebuffers[target] !== framebuffer) {\n        gl.bindFramebuffer(target, framebuffer);\n        currentBoundFramebuffers[target] = framebuffer;\n\n        if (isWebGL2) {\n          // gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER\n          if (target === gl.DRAW_FRAMEBUFFER) {\n            currentBoundFramebuffers[gl.FRAMEBUFFER] = framebuffer;\n          }\n\n          if (target === gl.FRAMEBUFFER) {\n            currentBoundFramebuffers[gl.DRAW_FRAMEBUFFER] = framebuffer;\n          }\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n\n    function useProgram(program) {\n      if (currentProgram !== program) {\n        gl.useProgram(program);\n        currentProgram = program;\n        return true;\n      }\n\n      return false;\n    }\n\n    const equationToGL = {\n      [AddEquation]: gl.FUNC_ADD,\n      [SubtractEquation]: gl.FUNC_SUBTRACT,\n      [ReverseSubtractEquation]: gl.FUNC_REVERSE_SUBTRACT\n    };\n\n    if (isWebGL2) {\n      equationToGL[MinEquation] = gl.MIN;\n      equationToGL[MaxEquation] = gl.MAX;\n    } else {\n      const extension = extensions.get('EXT_blend_minmax');\n\n      if (extension !== null) {\n        equationToGL[MinEquation] = extension.MIN_EXT;\n        equationToGL[MaxEquation] = extension.MAX_EXT;\n      }\n    }\n\n    const factorToGL = {\n      [ZeroFactor]: gl.ZERO,\n      [OneFactor]: gl.ONE,\n      [SrcColorFactor]: gl.SRC_COLOR,\n      [SrcAlphaFactor]: gl.SRC_ALPHA,\n      [SrcAlphaSaturateFactor]: gl.SRC_ALPHA_SATURATE,\n      [DstColorFactor]: gl.DST_COLOR,\n      [DstAlphaFactor]: gl.DST_ALPHA,\n      [OneMinusSrcColorFactor]: gl.ONE_MINUS_SRC_COLOR,\n      [OneMinusSrcAlphaFactor]: gl.ONE_MINUS_SRC_ALPHA,\n      [OneMinusDstColorFactor]: gl.ONE_MINUS_DST_COLOR,\n      [OneMinusDstAlphaFactor]: gl.ONE_MINUS_DST_ALPHA\n    };\n\n    function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {\n      if (blending === NoBlending) {\n        if (currentBlendingEnabled === true) {\n          disable(gl.BLEND);\n          currentBlendingEnabled = false;\n        }\n\n        return;\n      }\n\n      if (currentBlendingEnabled === false) {\n        enable(gl.BLEND);\n        currentBlendingEnabled = true;\n      }\n\n      if (blending !== CustomBlending) {\n        if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {\n          if (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {\n            gl.blendEquation(gl.FUNC_ADD);\n            currentBlendEquation = AddEquation;\n            currentBlendEquationAlpha = AddEquation;\n          }\n\n          if (premultipliedAlpha) {\n            switch (blending) {\n              case NormalBlending:\n                gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n                break;\n\n              case AdditiveBlending:\n                gl.blendFunc(gl.ONE, gl.ONE);\n                break;\n\n              case SubtractiveBlending:\n                gl.blendFuncSeparate(gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA);\n                break;\n\n              case MultiplyBlending:\n                gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);\n                break;\n\n              default:\n                console.error('THREE.WebGLState: Invalid blending: ', blending);\n                break;\n            }\n          } else {\n            switch (blending) {\n              case NormalBlending:\n                gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n                break;\n\n              case AdditiveBlending:\n                gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n                break;\n\n              case SubtractiveBlending:\n                gl.blendFunc(gl.ZERO, gl.ONE_MINUS_SRC_COLOR);\n                break;\n\n              case MultiplyBlending:\n                gl.blendFunc(gl.ZERO, gl.SRC_COLOR);\n                break;\n\n              default:\n                console.error('THREE.WebGLState: Invalid blending: ', blending);\n                break;\n            }\n          }\n\n          currentBlendSrc = null;\n          currentBlendDst = null;\n          currentBlendSrcAlpha = null;\n          currentBlendDstAlpha = null;\n          currentBlending = blending;\n          currentPremultipledAlpha = premultipliedAlpha;\n        }\n\n        return;\n      } // custom blending\n\n\n      blendEquationAlpha = blendEquationAlpha || blendEquation;\n      blendSrcAlpha = blendSrcAlpha || blendSrc;\n      blendDstAlpha = blendDstAlpha || blendDst;\n\n      if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {\n        gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);\n        currentBlendEquation = blendEquation;\n        currentBlendEquationAlpha = blendEquationAlpha;\n      }\n\n      if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {\n        gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);\n        currentBlendSrc = blendSrc;\n        currentBlendDst = blendDst;\n        currentBlendSrcAlpha = blendSrcAlpha;\n        currentBlendDstAlpha = blendDstAlpha;\n      }\n\n      currentBlending = blending;\n      currentPremultipledAlpha = null;\n    }\n\n    function setMaterial(material, frontFaceCW) {\n      material.side === DoubleSide ? disable(gl.CULL_FACE) : enable(gl.CULL_FACE);\n      let flipSided = material.side === BackSide;\n      if (frontFaceCW) flipSided = !flipSided;\n      setFlipSided(flipSided);\n      material.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);\n      depthBuffer.setFunc(material.depthFunc);\n      depthBuffer.setTest(material.depthTest);\n      depthBuffer.setMask(material.depthWrite);\n      colorBuffer.setMask(material.colorWrite);\n      const stencilWrite = material.stencilWrite;\n      stencilBuffer.setTest(stencilWrite);\n\n      if (stencilWrite) {\n        stencilBuffer.setMask(material.stencilWriteMask);\n        stencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);\n        stencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);\n      }\n\n      setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);\n      material.alphaToCoverage === true ? enable(gl.SAMPLE_ALPHA_TO_COVERAGE) : disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n    } //\n\n\n    function setFlipSided(flipSided) {\n      if (currentFlipSided !== flipSided) {\n        if (flipSided) {\n          gl.frontFace(gl.CW);\n        } else {\n          gl.frontFace(gl.CCW);\n        }\n\n        currentFlipSided = flipSided;\n      }\n    }\n\n    function setCullFace(cullFace) {\n      if (cullFace !== CullFaceNone) {\n        enable(gl.CULL_FACE);\n\n        if (cullFace !== currentCullFace) {\n          if (cullFace === CullFaceBack) {\n            gl.cullFace(gl.BACK);\n          } else if (cullFace === CullFaceFront) {\n            gl.cullFace(gl.FRONT);\n          } else {\n            gl.cullFace(gl.FRONT_AND_BACK);\n          }\n        }\n      } else {\n        disable(gl.CULL_FACE);\n      }\n\n      currentCullFace = cullFace;\n    }\n\n    function setLineWidth(width) {\n      if (width !== currentLineWidth) {\n        if (lineWidthAvailable) gl.lineWidth(width);\n        currentLineWidth = width;\n      }\n    }\n\n    function setPolygonOffset(polygonOffset, factor, units) {\n      if (polygonOffset) {\n        enable(gl.POLYGON_OFFSET_FILL);\n\n        if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {\n          gl.polygonOffset(factor, units);\n          currentPolygonOffsetFactor = factor;\n          currentPolygonOffsetUnits = units;\n        }\n      } else {\n        disable(gl.POLYGON_OFFSET_FILL);\n      }\n    }\n\n    function setScissorTest(scissorTest) {\n      if (scissorTest) {\n        enable(gl.SCISSOR_TEST);\n      } else {\n        disable(gl.SCISSOR_TEST);\n      }\n    } // texture\n\n\n    function activeTexture(webglSlot) {\n      if (webglSlot === undefined) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n      if (currentTextureSlot !== webglSlot) {\n        gl.activeTexture(webglSlot);\n        currentTextureSlot = webglSlot;\n      }\n    }\n\n    function bindTexture(webglType, webglTexture) {\n      if (currentTextureSlot === null) {\n        activeTexture();\n      }\n\n      let boundTexture = currentBoundTextures[currentTextureSlot];\n\n      if (boundTexture === undefined) {\n        boundTexture = {\n          type: undefined,\n          texture: undefined\n        };\n        currentBoundTextures[currentTextureSlot] = boundTexture;\n      }\n\n      if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {\n        gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);\n        boundTexture.type = webglType;\n        boundTexture.texture = webglTexture;\n      }\n    }\n\n    function unbindTexture() {\n      const boundTexture = currentBoundTextures[currentTextureSlot];\n\n      if (boundTexture !== undefined && boundTexture.type !== undefined) {\n        gl.bindTexture(boundTexture.type, null);\n        boundTexture.type = undefined;\n        boundTexture.texture = undefined;\n      }\n    }\n\n    function compressedTexImage2D() {\n      try {\n        gl.compressedTexImage2D.apply(gl, arguments);\n      } catch (error) {\n        console.error('THREE.WebGLState:', error);\n      }\n    }\n\n    function texImage2D() {\n      try {\n        gl.texImage2D.apply(gl, arguments);\n      } catch (error) {\n        console.error('THREE.WebGLState:', error);\n      }\n    }\n\n    function texImage3D() {\n      try {\n        gl.texImage3D.apply(gl, arguments);\n      } catch (error) {\n        console.error('THREE.WebGLState:', error);\n      }\n    } //\n\n\n    function scissor(scissor) {\n      if (currentScissor.equals(scissor) === false) {\n        gl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);\n        currentScissor.copy(scissor);\n      }\n    }\n\n    function viewport(viewport) {\n      if (currentViewport.equals(viewport) === false) {\n        gl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);\n        currentViewport.copy(viewport);\n      }\n    } //\n\n\n    function reset() {\n      // reset state\n      gl.disable(gl.BLEND);\n      gl.disable(gl.CULL_FACE);\n      gl.disable(gl.DEPTH_TEST);\n      gl.disable(gl.POLYGON_OFFSET_FILL);\n      gl.disable(gl.SCISSOR_TEST);\n      gl.disable(gl.STENCIL_TEST);\n      gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n      gl.blendEquation(gl.FUNC_ADD);\n      gl.blendFunc(gl.ONE, gl.ZERO);\n      gl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);\n      gl.colorMask(true, true, true, true);\n      gl.clearColor(0, 0, 0, 0);\n      gl.depthMask(true);\n      gl.depthFunc(gl.LESS);\n      gl.clearDepth(1);\n      gl.stencilMask(0xffffffff);\n      gl.stencilFunc(gl.ALWAYS, 0, 0xffffffff);\n      gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n      gl.clearStencil(0);\n      gl.cullFace(gl.BACK);\n      gl.frontFace(gl.CCW);\n      gl.polygonOffset(0, 0);\n      gl.activeTexture(gl.TEXTURE0);\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n      if (isWebGL2 === true) {\n        gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\n        gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);\n      }\n\n      gl.useProgram(null);\n      gl.lineWidth(1);\n      gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);\n      gl.viewport(0, 0, gl.canvas.width, gl.canvas.height); // reset internals\n\n      enabledCapabilities = {};\n      currentTextureSlot = null;\n      currentBoundTextures = {};\n      xrFramebuffer = null;\n      currentBoundFramebuffers = {};\n      currentProgram = null;\n      currentBlendingEnabled = false;\n      currentBlending = null;\n      currentBlendEquation = null;\n      currentBlendSrc = null;\n      currentBlendDst = null;\n      currentBlendEquationAlpha = null;\n      currentBlendSrcAlpha = null;\n      currentBlendDstAlpha = null;\n      currentPremultipledAlpha = false;\n      currentFlipSided = null;\n      currentCullFace = null;\n      currentLineWidth = null;\n      currentPolygonOffsetFactor = null;\n      currentPolygonOffsetUnits = null;\n      currentScissor.set(0, 0, gl.canvas.width, gl.canvas.height);\n      currentViewport.set(0, 0, gl.canvas.width, gl.canvas.height);\n      colorBuffer.reset();\n      depthBuffer.reset();\n      stencilBuffer.reset();\n    }\n\n    return {\n      buffers: {\n        color: colorBuffer,\n        depth: depthBuffer,\n        stencil: stencilBuffer\n      },\n      enable: enable,\n      disable: disable,\n      bindFramebuffer: bindFramebuffer,\n      bindXRFramebuffer: bindXRFramebuffer,\n      useProgram: useProgram,\n      setBlending: setBlending,\n      setMaterial: setMaterial,\n      setFlipSided: setFlipSided,\n      setCullFace: setCullFace,\n      setLineWidth: setLineWidth,\n      setPolygonOffset: setPolygonOffset,\n      setScissorTest: setScissorTest,\n      activeTexture: activeTexture,\n      bindTexture: bindTexture,\n      unbindTexture: unbindTexture,\n      compressedTexImage2D: compressedTexImage2D,\n      texImage2D: texImage2D,\n      texImage3D: texImage3D,\n      scissor: scissor,\n      viewport: viewport,\n      reset: reset\n    };\n  }\n\n  function WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {\n    const isWebGL2 = capabilities.isWebGL2;\n    const maxTextures = capabilities.maxTextures;\n    const maxCubemapSize = capabilities.maxCubemapSize;\n    const maxTextureSize = capabilities.maxTextureSize;\n    const maxSamples = capabilities.maxSamples;\n\n    const _videoTextures = new WeakMap();\n\n    let _canvas; // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n    // also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n    // Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\n    let useOffscreenCanvas = false;\n\n    try {\n      useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined' && new OffscreenCanvas(1, 1).getContext('2d') !== null;\n    } catch (err) {// Ignore any errors\n    }\n\n    function createCanvas(width, height) {\n      // Use OffscreenCanvas when available. Specially needed in web workers\n      return useOffscreenCanvas ? new OffscreenCanvas(width, height) : createElementNS('canvas');\n    }\n\n    function resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {\n      let scale = 1; // handle case if texture exceeds max size\n\n      if (image.width > maxSize || image.height > maxSize) {\n        scale = maxSize / Math.max(image.width, image.height);\n      } // only perform resize if necessary\n\n\n      if (scale < 1 || needsPowerOfTwo === true) {\n        // only perform resize for certain image types\n        if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n          const floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;\n          const width = floor(scale * image.width);\n          const height = floor(scale * image.height);\n          if (_canvas === undefined) _canvas = createCanvas(width, height); // cube textures can't reuse the same canvas\n\n          const canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;\n          canvas.width = width;\n          canvas.height = height;\n          const context = canvas.getContext('2d');\n          context.drawImage(image, 0, 0, width, height);\n          console.warn('THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').');\n          return canvas;\n        } else {\n          if ('data' in image) {\n            console.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').');\n          }\n\n          return image;\n        }\n      }\n\n      return image;\n    }\n\n    function isPowerOfTwo$1(image) {\n      return isPowerOfTwo(image.width) && isPowerOfTwo(image.height);\n    }\n\n    function textureNeedsPowerOfTwo(texture) {\n      if (isWebGL2) return false;\n      return texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n    }\n\n    function textureNeedsGenerateMipmaps(texture, supportsMips) {\n      return texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n    }\n\n    function generateMipmap(target, texture, width, height) {\n      let depth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n\n      _gl.generateMipmap(target);\n\n      const textureProperties = properties.get(texture);\n      textureProperties.__maxMipLevel = Math.log2(Math.max(width, height, depth));\n    }\n\n    function getInternalFormat(internalFormatName, glFormat, glType, encoding) {\n      if (isWebGL2 === false) return glFormat;\n\n      if (internalFormatName !== null) {\n        if (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];\n        console.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'');\n      }\n\n      let internalFormat = glFormat;\n\n      if (glFormat === _gl.RED) {\n        if (glType === _gl.FLOAT) internalFormat = _gl.R32F;\n        if (glType === _gl.HALF_FLOAT) internalFormat = _gl.R16F;\n        if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8;\n      }\n\n      if (glFormat === _gl.RGB) {\n        if (glType === _gl.FLOAT) internalFormat = _gl.RGB32F;\n        if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGB16F;\n        if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RGB8;\n      }\n\n      if (glFormat === _gl.RGBA) {\n        if (glType === _gl.FLOAT) internalFormat = _gl.RGBA32F;\n        if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGBA16F;\n        if (glType === _gl.UNSIGNED_BYTE) internalFormat = encoding === sRGBEncoding ? _gl.SRGB8_ALPHA8 : _gl.RGBA8;\n      }\n\n      if (internalFormat === _gl.R16F || internalFormat === _gl.R32F || internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F) {\n        extensions.get('EXT_color_buffer_float');\n      }\n\n      return internalFormat;\n    } // Fallback filters for non-power-of-2 textures\n\n\n    function filterFallback(f) {\n      if (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {\n        return _gl.NEAREST;\n      }\n\n      return _gl.LINEAR;\n    } //\n\n\n    function onTextureDispose(event) {\n      const texture = event.target;\n      texture.removeEventListener('dispose', onTextureDispose);\n      deallocateTexture(texture);\n\n      if (texture.isVideoTexture) {\n        _videoTextures.delete(texture);\n      }\n\n      info.memory.textures--;\n    }\n\n    function onRenderTargetDispose(event) {\n      const renderTarget = event.target;\n      renderTarget.removeEventListener('dispose', onRenderTargetDispose);\n      deallocateRenderTarget(renderTarget);\n    } //\n\n\n    function deallocateTexture(texture) {\n      const textureProperties = properties.get(texture);\n      if (textureProperties.__webglInit === undefined) return;\n\n      _gl.deleteTexture(textureProperties.__webglTexture);\n\n      properties.remove(texture);\n    }\n\n    function deallocateRenderTarget(renderTarget) {\n      const texture = renderTarget.texture;\n      const renderTargetProperties = properties.get(renderTarget);\n      const textureProperties = properties.get(texture);\n      if (!renderTarget) return;\n\n      if (textureProperties.__webglTexture !== undefined) {\n        _gl.deleteTexture(textureProperties.__webglTexture);\n\n        info.memory.textures--;\n      }\n\n      if (renderTarget.depthTexture) {\n        renderTarget.depthTexture.dispose();\n      }\n\n      if (renderTarget.isWebGLCubeRenderTarget) {\n        for (let i = 0; i < 6; i++) {\n          _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);\n\n          if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);\n        }\n      } else {\n        _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);\n\n        if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);\n        if (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);\n        if (renderTargetProperties.__webglColorRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);\n        if (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);\n      }\n\n      if (renderTarget.isWebGLMultipleRenderTargets) {\n        for (let i = 0, il = texture.length; i < il; i++) {\n          const attachmentProperties = properties.get(texture[i]);\n\n          if (attachmentProperties.__webglTexture) {\n            _gl.deleteTexture(attachmentProperties.__webglTexture);\n\n            info.memory.textures--;\n          }\n\n          properties.remove(texture[i]);\n        }\n      }\n\n      properties.remove(texture);\n      properties.remove(renderTarget);\n    } //\n\n\n    let textureUnits = 0;\n\n    function resetTextureUnits() {\n      textureUnits = 0;\n    }\n\n    function allocateTextureUnit() {\n      const textureUnit = textureUnits;\n\n      if (textureUnit >= maxTextures) {\n        console.warn('THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures);\n      }\n\n      textureUnits += 1;\n      return textureUnit;\n    } //\n\n\n    function setTexture2D(texture, slot) {\n      const textureProperties = properties.get(texture);\n      if (texture.isVideoTexture) updateVideoTexture(texture);\n\n      if (texture.version > 0 && textureProperties.__version !== texture.version) {\n        const image = texture.image;\n\n        if (image === undefined) {\n          console.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined');\n        } else if (image.complete === false) {\n          console.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');\n        } else {\n          uploadTexture(textureProperties, texture, slot);\n          return;\n        }\n      }\n\n      state.activeTexture(_gl.TEXTURE0 + slot);\n      state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);\n    }\n\n    function setTexture2DArray(texture, slot) {\n      const textureProperties = properties.get(texture);\n\n      if (texture.version > 0 && textureProperties.__version !== texture.version) {\n        uploadTexture(textureProperties, texture, slot);\n        return;\n      }\n\n      state.activeTexture(_gl.TEXTURE0 + slot);\n      state.bindTexture(_gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture);\n    }\n\n    function setTexture3D(texture, slot) {\n      const textureProperties = properties.get(texture);\n\n      if (texture.version > 0 && textureProperties.__version !== texture.version) {\n        uploadTexture(textureProperties, texture, slot);\n        return;\n      }\n\n      state.activeTexture(_gl.TEXTURE0 + slot);\n      state.bindTexture(_gl.TEXTURE_3D, textureProperties.__webglTexture);\n    }\n\n    function setTextureCube(texture, slot) {\n      const textureProperties = properties.get(texture);\n\n      if (texture.version > 0 && textureProperties.__version !== texture.version) {\n        uploadCubeTexture(textureProperties, texture, slot);\n        return;\n      }\n\n      state.activeTexture(_gl.TEXTURE0 + slot);\n      state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n    }\n\n    const wrappingToGL = {\n      [RepeatWrapping]: _gl.REPEAT,\n      [ClampToEdgeWrapping]: _gl.CLAMP_TO_EDGE,\n      [MirroredRepeatWrapping]: _gl.MIRRORED_REPEAT\n    };\n    const filterToGL = {\n      [NearestFilter]: _gl.NEAREST,\n      [NearestMipmapNearestFilter]: _gl.NEAREST_MIPMAP_NEAREST,\n      [NearestMipmapLinearFilter]: _gl.NEAREST_MIPMAP_LINEAR,\n      [LinearFilter]: _gl.LINEAR,\n      [LinearMipmapNearestFilter]: _gl.LINEAR_MIPMAP_NEAREST,\n      [LinearMipmapLinearFilter]: _gl.LINEAR_MIPMAP_LINEAR\n    };\n\n    function setTextureParameters(textureType, texture, supportsMips) {\n      if (supportsMips) {\n        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);\n\n        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);\n\n        if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\n          _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);\n        }\n\n        _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);\n\n        _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[texture.minFilter]);\n      } else {\n        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);\n\n        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);\n\n        if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\n          _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE);\n        }\n\n        if (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {\n          console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');\n        }\n\n        _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterFallback(texture.magFilter));\n\n        _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterFallback(texture.minFilter));\n\n        if (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {\n          console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');\n        }\n      }\n\n      if (extensions.has('EXT_texture_filter_anisotropic') === true) {\n        const extension = extensions.get('EXT_texture_filter_anisotropic');\n        if (texture.type === FloatType && extensions.has('OES_texture_float_linear') === false) return; // verify extension for WebGL 1 and WebGL 2\n\n        if (isWebGL2 === false && texture.type === HalfFloatType && extensions.has('OES_texture_half_float_linear') === false) return; // verify extension for WebGL 1 only\n\n        if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {\n          _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));\n\n          properties.get(texture).__currentAnisotropy = texture.anisotropy;\n        }\n      }\n    }\n\n    function initTexture(textureProperties, texture) {\n      if (textureProperties.__webglInit === undefined) {\n        textureProperties.__webglInit = true;\n        texture.addEventListener('dispose', onTextureDispose);\n        textureProperties.__webglTexture = _gl.createTexture();\n        info.memory.textures++;\n      }\n    }\n\n    function uploadTexture(textureProperties, texture, slot) {\n      let textureType = _gl.TEXTURE_2D;\n      if (texture.isDataTexture2DArray) textureType = _gl.TEXTURE_2D_ARRAY;\n      if (texture.isDataTexture3D) textureType = _gl.TEXTURE_3D;\n      initTexture(textureProperties, texture);\n      state.activeTexture(_gl.TEXTURE0 + slot);\n      state.bindTexture(textureType, textureProperties.__webglTexture);\n\n      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n      _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n\n      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n\n      _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);\n\n      const needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo$1(texture.image) === false;\n      const image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);\n      const supportsMips = isPowerOfTwo$1(image) || isWebGL2,\n            glFormat = utils.convert(texture.format);\n      let glType = utils.convert(texture.type),\n          glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);\n      setTextureParameters(textureType, texture, supportsMips);\n      let mipmap;\n      const mipmaps = texture.mipmaps;\n\n      if (texture.isDepthTexture) {\n        // populate depth texture with dummy data\n        glInternalFormat = _gl.DEPTH_COMPONENT;\n\n        if (isWebGL2) {\n          if (texture.type === FloatType) {\n            glInternalFormat = _gl.DEPTH_COMPONENT32F;\n          } else if (texture.type === UnsignedIntType) {\n            glInternalFormat = _gl.DEPTH_COMPONENT24;\n          } else if (texture.type === UnsignedInt248Type) {\n            glInternalFormat = _gl.DEPTH24_STENCIL8;\n          } else {\n            glInternalFormat = _gl.DEPTH_COMPONENT16; // WebGL2 requires sized internalformat for glTexImage2D\n          }\n        } else {\n          if (texture.type === FloatType) {\n            console.error('WebGLRenderer: Floating point depth texture requires WebGL2.');\n          }\n        } // validation checks for WebGL 1\n\n\n        if (texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {\n          // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n          // DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n          // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n          if (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {\n            console.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');\n            texture.type = UnsignedShortType;\n            glType = utils.convert(texture.type);\n          }\n        }\n\n        if (texture.format === DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {\n          // Depth stencil textures need the DEPTH_STENCIL internal format\n          // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n          glInternalFormat = _gl.DEPTH_STENCIL; // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n          // DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n          // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\n          if (texture.type !== UnsignedInt248Type) {\n            console.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');\n            texture.type = UnsignedInt248Type;\n            glType = utils.convert(texture.type);\n          }\n        } //\n\n\n        state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);\n      } else if (texture.isDataTexture) {\n        // use manually created mipmaps if available\n        // if there are no manual mipmaps\n        // set 0 level mipmap and then use GL to generate other mipmap levels\n        if (mipmaps.length > 0 && supportsMips) {\n          for (let i = 0, il = mipmaps.length; i < il; i++) {\n            mipmap = mipmaps[i];\n            state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n          }\n\n          texture.generateMipmaps = false;\n          textureProperties.__maxMipLevel = mipmaps.length - 1;\n        } else {\n          state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);\n          textureProperties.__maxMipLevel = 0;\n        }\n      } else if (texture.isCompressedTexture) {\n        for (let i = 0, il = mipmaps.length; i < il; i++) {\n          mipmap = mipmaps[i];\n\n          if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n            if (glFormat !== null) {\n              state.compressedTexImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n            } else {\n              console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');\n            }\n          } else {\n            state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n          }\n        }\n\n        textureProperties.__maxMipLevel = mipmaps.length - 1;\n      } else if (texture.isDataTexture2DArray) {\n        state.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n        textureProperties.__maxMipLevel = 0;\n      } else if (texture.isDataTexture3D) {\n        state.texImage3D(_gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n        textureProperties.__maxMipLevel = 0;\n      } else {\n        // regular Texture (image, video, canvas)\n        // use manually created mipmaps if available\n        // if there are no manual mipmaps\n        // set 0 level mipmap and then use GL to generate other mipmap levels\n        if (mipmaps.length > 0 && supportsMips) {\n          for (let i = 0, il = mipmaps.length; i < il; i++) {\n            mipmap = mipmaps[i];\n            state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap);\n          }\n\n          texture.generateMipmaps = false;\n          textureProperties.__maxMipLevel = mipmaps.length - 1;\n        } else {\n          state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);\n          textureProperties.__maxMipLevel = 0;\n        }\n      }\n\n      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n        generateMipmap(textureType, texture, image.width, image.height);\n      }\n\n      textureProperties.__version = texture.version;\n      if (texture.onUpdate) texture.onUpdate(texture);\n    }\n\n    function uploadCubeTexture(textureProperties, texture, slot) {\n      if (texture.image.length !== 6) return;\n      initTexture(textureProperties, texture);\n      state.activeTexture(_gl.TEXTURE0 + slot);\n      state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n\n      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n      _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n\n      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n\n      _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);\n\n      const isCompressed = texture && (texture.isCompressedTexture || texture.image[0].isCompressedTexture);\n      const isDataTexture = texture.image[0] && texture.image[0].isDataTexture;\n      const cubeImage = [];\n\n      for (let i = 0; i < 6; i++) {\n        if (!isCompressed && !isDataTexture) {\n          cubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);\n        } else {\n          cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];\n        }\n      }\n\n      const image = cubeImage[0],\n            supportsMips = isPowerOfTwo$1(image) || isWebGL2,\n            glFormat = utils.convert(texture.format),\n            glType = utils.convert(texture.type),\n            glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);\n      setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);\n      let mipmaps;\n\n      if (isCompressed) {\n        for (let i = 0; i < 6; i++) {\n          mipmaps = cubeImage[i].mipmaps;\n\n          for (let j = 0; j < mipmaps.length; j++) {\n            const mipmap = mipmaps[j];\n\n            if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n              if (glFormat !== null) {\n                state.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n              } else {\n                console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');\n              }\n            } else {\n              state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n            }\n          }\n        }\n\n        textureProperties.__maxMipLevel = mipmaps.length - 1;\n      } else {\n        mipmaps = texture.mipmaps;\n\n        for (let i = 0; i < 6; i++) {\n          if (isDataTexture) {\n            state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);\n\n            for (let j = 0; j < mipmaps.length; j++) {\n              const mipmap = mipmaps[j];\n              const mipmapImage = mipmap.image[i].image;\n              state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);\n            }\n          } else {\n            state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);\n\n            for (let j = 0; j < mipmaps.length; j++) {\n              const mipmap = mipmaps[j];\n              state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[i]);\n            }\n          }\n        }\n\n        textureProperties.__maxMipLevel = mipmaps.length;\n      }\n\n      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n        // We assume images for cube map have the same size.\n        generateMipmap(_gl.TEXTURE_CUBE_MAP, texture, image.width, image.height);\n      }\n\n      textureProperties.__version = texture.version;\n      if (texture.onUpdate) texture.onUpdate(texture);\n    } // Render targets\n    // Setup storage for target texture and bind it to correct framebuffer\n\n\n    function setupFrameBufferTexture(framebuffer, renderTarget, texture, attachment, textureTarget) {\n      const glFormat = utils.convert(texture.format);\n      const glType = utils.convert(texture.type);\n      const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);\n\n      if (textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY) {\n        state.texImage3D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null);\n      } else {\n        state.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);\n      }\n\n      state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n      _gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0);\n\n      state.bindFramebuffer(_gl.FRAMEBUFFER, null);\n    } // Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\n\n    function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {\n      _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);\n\n      if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {\n        let glInternalFormat = _gl.DEPTH_COMPONENT16;\n\n        if (isMultisample) {\n          const depthTexture = renderTarget.depthTexture;\n\n          if (depthTexture && depthTexture.isDepthTexture) {\n            if (depthTexture.type === FloatType) {\n              glInternalFormat = _gl.DEPTH_COMPONENT32F;\n            } else if (depthTexture.type === UnsignedIntType) {\n              glInternalFormat = _gl.DEPTH_COMPONENT24;\n            }\n          }\n\n          const samples = getRenderTargetSamples(renderTarget);\n\n          _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n        } else {\n          _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);\n        }\n\n        _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n      } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {\n        if (isMultisample) {\n          const samples = getRenderTargetSamples(renderTarget);\n\n          _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);\n        } else {\n          _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);\n        }\n\n        _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n      } else {\n        // Use the first texture for MRT so far\n        const texture = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture[0] : renderTarget.texture;\n        const glFormat = utils.convert(texture.format);\n        const glType = utils.convert(texture.type);\n        const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);\n\n        if (isMultisample) {\n          const samples = getRenderTargetSamples(renderTarget);\n\n          _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n        } else {\n          _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);\n        }\n      }\n\n      _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n    } // Setup resources for a Depth Texture for a FBO (needs an extension)\n\n\n    function setupDepthTexture(framebuffer, renderTarget) {\n      const isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;\n      if (isCube) throw new Error('Depth Texture with cube render targets is not supported');\n      state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n      if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {\n        throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n      } // upload an empty depth texture with framebuffer size\n\n\n      if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {\n        renderTarget.depthTexture.image.width = renderTarget.width;\n        renderTarget.depthTexture.image.height = renderTarget.height;\n        renderTarget.depthTexture.needsUpdate = true;\n      }\n\n      setTexture2D(renderTarget.depthTexture, 0);\n\n      const webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;\n\n      if (renderTarget.depthTexture.format === DepthFormat) {\n        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n      } else if (renderTarget.depthTexture.format === DepthStencilFormat) {\n        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n      } else {\n        throw new Error('Unknown depthTexture format');\n      }\n    } // Setup GL resources for a non-texture depth buffer\n\n\n    function setupDepthRenderbuffer(renderTarget) {\n      const renderTargetProperties = properties.get(renderTarget);\n      const isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\n      if (renderTarget.depthTexture) {\n        if (isCube) throw new Error('target.depthTexture not supported in Cube render targets');\n        setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);\n      } else {\n        if (isCube) {\n          renderTargetProperties.__webglDepthbuffer = [];\n\n          for (let i = 0; i < 6; i++) {\n            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);\n            renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();\n            setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);\n          }\n        } else {\n          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n          renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n          setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);\n        }\n      }\n\n      state.bindFramebuffer(_gl.FRAMEBUFFER, null);\n    } // Set up GL resources for the render target\n\n\n    function setupRenderTarget(renderTarget) {\n      const texture = renderTarget.texture;\n      const renderTargetProperties = properties.get(renderTarget);\n      const textureProperties = properties.get(texture);\n      renderTarget.addEventListener('dispose', onRenderTargetDispose);\n\n      if (renderTarget.isWebGLMultipleRenderTargets !== true) {\n        textureProperties.__webglTexture = _gl.createTexture();\n        textureProperties.__version = texture.version;\n        info.memory.textures++;\n      }\n\n      const isCube = renderTarget.isWebGLCubeRenderTarget === true;\n      const isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;\n      const isMultisample = renderTarget.isWebGLMultisampleRenderTarget === true;\n      const isRenderTarget3D = texture.isDataTexture3D || texture.isDataTexture2DArray;\n      const supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2; // Handles WebGL2 RGBFormat fallback - #18858\n\n      if (isWebGL2 && texture.format === RGBFormat && (texture.type === FloatType || texture.type === HalfFloatType)) {\n        texture.format = RGBAFormat;\n        console.warn('THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.');\n      } // Setup framebuffer\n\n\n      if (isCube) {\n        renderTargetProperties.__webglFramebuffer = [];\n\n        for (let i = 0; i < 6; i++) {\n          renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();\n        }\n      } else {\n        renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n        if (isMultipleRenderTargets) {\n          if (capabilities.drawBuffers) {\n            const textures = renderTarget.texture;\n\n            for (let i = 0, il = textures.length; i < il; i++) {\n              const attachmentProperties = properties.get(textures[i]);\n\n              if (attachmentProperties.__webglTexture === undefined) {\n                attachmentProperties.__webglTexture = _gl.createTexture();\n                info.memory.textures++;\n              }\n            }\n          } else {\n            console.warn('THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.');\n          }\n        } else if (isMultisample) {\n          if (isWebGL2) {\n            renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n            renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n            _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer);\n\n            const glFormat = utils.convert(texture.format);\n            const glType = utils.convert(texture.type);\n            const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);\n            const samples = getRenderTargetSamples(renderTarget);\n\n            _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\n            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n\n            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer);\n\n            _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n\n            if (renderTarget.depthBuffer) {\n              renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n              setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);\n            }\n\n            state.bindFramebuffer(_gl.FRAMEBUFFER, null);\n          } else {\n            console.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n          }\n        }\n      } // Setup color buffer\n\n\n      if (isCube) {\n        state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n        setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);\n\n        for (let i = 0; i < 6; i++) {\n          setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);\n        }\n\n        if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n          generateMipmap(_gl.TEXTURE_CUBE_MAP, texture, renderTarget.width, renderTarget.height);\n        }\n\n        state.unbindTexture();\n      } else if (isMultipleRenderTargets) {\n        const textures = renderTarget.texture;\n\n        for (let i = 0, il = textures.length; i < il; i++) {\n          const attachment = textures[i];\n          const attachmentProperties = properties.get(attachment);\n          state.bindTexture(_gl.TEXTURE_2D, attachmentProperties.__webglTexture);\n          setTextureParameters(_gl.TEXTURE_2D, attachment, supportsMips);\n          setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D);\n\n          if (textureNeedsGenerateMipmaps(attachment, supportsMips)) {\n            generateMipmap(_gl.TEXTURE_2D, attachment, renderTarget.width, renderTarget.height);\n          }\n        }\n\n        state.unbindTexture();\n      } else {\n        let glTextureType = _gl.TEXTURE_2D;\n\n        if (isRenderTarget3D) {\n          // Render targets containing layers, i.e: Texture 3D and 2d arrays\n          if (isWebGL2) {\n            const isTexture3D = texture.isDataTexture3D;\n            glTextureType = isTexture3D ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;\n          } else {\n            console.warn('THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.');\n          }\n        }\n\n        state.bindTexture(glTextureType, textureProperties.__webglTexture);\n        setTextureParameters(glTextureType, texture, supportsMips);\n        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType);\n\n        if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n          generateMipmap(glTextureType, texture, renderTarget.width, renderTarget.height, renderTarget.depth);\n        }\n\n        state.unbindTexture();\n      } // Setup depth and stencil buffers\n\n\n      if (renderTarget.depthBuffer) {\n        setupDepthRenderbuffer(renderTarget);\n      }\n    }\n\n    function updateRenderTargetMipmap(renderTarget) {\n      const supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;\n      const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [renderTarget.texture];\n\n      for (let i = 0, il = textures.length; i < il; i++) {\n        const texture = textures[i];\n\n        if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n          const target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\n          const webglTexture = properties.get(texture).__webglTexture;\n\n          state.bindTexture(target, webglTexture);\n          generateMipmap(target, texture, renderTarget.width, renderTarget.height);\n          state.unbindTexture();\n        }\n      }\n    }\n\n    function updateMultisampleRenderTarget(renderTarget) {\n      if (renderTarget.isWebGLMultisampleRenderTarget) {\n        if (isWebGL2) {\n          const width = renderTarget.width;\n          const height = renderTarget.height;\n          let mask = _gl.COLOR_BUFFER_BIT;\n          if (renderTarget.depthBuffer) mask |= _gl.DEPTH_BUFFER_BIT;\n          if (renderTarget.stencilBuffer) mask |= _gl.STENCIL_BUFFER_BIT;\n          const renderTargetProperties = properties.get(renderTarget);\n          state.bindFramebuffer(_gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n          state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n\n          _gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST);\n\n          state.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);\n          state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n        } else {\n          console.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n        }\n      }\n    }\n\n    function getRenderTargetSamples(renderTarget) {\n      return isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ? Math.min(maxSamples, renderTarget.samples) : 0;\n    }\n\n    function updateVideoTexture(texture) {\n      const frame = info.render.frame; // Check the last frame we updated the VideoTexture\n\n      if (_videoTextures.get(texture) !== frame) {\n        _videoTextures.set(texture, frame);\n\n        texture.update();\n      }\n    } // backwards compatibility\n\n\n    let warnedTexture2D = false;\n    let warnedTextureCube = false;\n\n    function safeSetTexture2D(texture, slot) {\n      if (texture && texture.isWebGLRenderTarget) {\n        if (warnedTexture2D === false) {\n          console.warn('THREE.WebGLTextures.safeSetTexture2D: don\\'t use render targets as textures. Use their .texture property instead.');\n          warnedTexture2D = true;\n        }\n\n        texture = texture.texture;\n      }\n\n      setTexture2D(texture, slot);\n    }\n\n    function safeSetTextureCube(texture, slot) {\n      if (texture && texture.isWebGLCubeRenderTarget) {\n        if (warnedTextureCube === false) {\n          console.warn('THREE.WebGLTextures.safeSetTextureCube: don\\'t use cube render targets as textures. Use their .texture property instead.');\n          warnedTextureCube = true;\n        }\n\n        texture = texture.texture;\n      }\n\n      setTextureCube(texture, slot);\n    } //\n\n\n    this.allocateTextureUnit = allocateTextureUnit;\n    this.resetTextureUnits = resetTextureUnits;\n    this.setTexture2D = setTexture2D;\n    this.setTexture2DArray = setTexture2DArray;\n    this.setTexture3D = setTexture3D;\n    this.setTextureCube = setTextureCube;\n    this.setupRenderTarget = setupRenderTarget;\n    this.updateRenderTargetMipmap = updateRenderTargetMipmap;\n    this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n    this.safeSetTexture2D = safeSetTexture2D;\n    this.safeSetTextureCube = safeSetTextureCube;\n  }\n\n  function WebGLUtils(gl, extensions, capabilities) {\n    const isWebGL2 = capabilities.isWebGL2;\n\n    function convert(p) {\n      let extension;\n      if (p === UnsignedByteType) return gl.UNSIGNED_BYTE;\n      if (p === UnsignedShort4444Type) return gl.UNSIGNED_SHORT_4_4_4_4;\n      if (p === UnsignedShort5551Type) return gl.UNSIGNED_SHORT_5_5_5_1;\n      if (p === UnsignedShort565Type) return gl.UNSIGNED_SHORT_5_6_5;\n      if (p === ByteType) return gl.BYTE;\n      if (p === ShortType) return gl.SHORT;\n      if (p === UnsignedShortType) return gl.UNSIGNED_SHORT;\n      if (p === IntType) return gl.INT;\n      if (p === UnsignedIntType) return gl.UNSIGNED_INT;\n      if (p === FloatType) return gl.FLOAT;\n\n      if (p === HalfFloatType) {\n        if (isWebGL2) return gl.HALF_FLOAT;\n        extension = extensions.get('OES_texture_half_float');\n\n        if (extension !== null) {\n          return extension.HALF_FLOAT_OES;\n        } else {\n          return null;\n        }\n      }\n\n      if (p === AlphaFormat) return gl.ALPHA;\n      if (p === RGBFormat) return gl.RGB;\n      if (p === RGBAFormat) return gl.RGBA;\n      if (p === LuminanceFormat) return gl.LUMINANCE;\n      if (p === LuminanceAlphaFormat) return gl.LUMINANCE_ALPHA;\n      if (p === DepthFormat) return gl.DEPTH_COMPONENT;\n      if (p === DepthStencilFormat) return gl.DEPTH_STENCIL;\n      if (p === RedFormat) return gl.RED; // WebGL2 formats.\n\n      if (p === RedIntegerFormat) return gl.RED_INTEGER;\n      if (p === RGFormat) return gl.RG;\n      if (p === RGIntegerFormat) return gl.RG_INTEGER;\n      if (p === RGBIntegerFormat) return gl.RGB_INTEGER;\n      if (p === RGBAIntegerFormat) return gl.RGBA_INTEGER;\n\n      if (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {\n        extension = extensions.get('WEBGL_compressed_texture_s3tc');\n\n        if (extension !== null) {\n          if (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n          if (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n          if (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n          if (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n        } else {\n          return null;\n        }\n      }\n\n      if (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {\n        extension = extensions.get('WEBGL_compressed_texture_pvrtc');\n\n        if (extension !== null) {\n          if (p === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n          if (p === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n          if (p === RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n          if (p === RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n        } else {\n          return null;\n        }\n      }\n\n      if (p === RGB_ETC1_Format) {\n        extension = extensions.get('WEBGL_compressed_texture_etc1');\n\n        if (extension !== null) {\n          return extension.COMPRESSED_RGB_ETC1_WEBGL;\n        } else {\n          return null;\n        }\n      }\n\n      if (p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {\n        extension = extensions.get('WEBGL_compressed_texture_etc');\n\n        if (extension !== null) {\n          if (p === RGB_ETC2_Format) return extension.COMPRESSED_RGB8_ETC2;\n          if (p === RGBA_ETC2_EAC_Format) return extension.COMPRESSED_RGBA8_ETC2_EAC;\n        }\n      }\n\n      if (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format || p === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format || p === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format || p === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format || p === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format || p === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format) {\n        extension = extensions.get('WEBGL_compressed_texture_astc');\n\n        if (extension !== null) {\n          // TODO Complete?\n          return p;\n        } else {\n          return null;\n        }\n      }\n\n      if (p === RGBA_BPTC_Format) {\n        extension = extensions.get('EXT_texture_compression_bptc');\n\n        if (extension !== null) {\n          // TODO Complete?\n          return p;\n        } else {\n          return null;\n        }\n      }\n\n      if (p === UnsignedInt248Type) {\n        if (isWebGL2) return gl.UNSIGNED_INT_24_8;\n        extension = extensions.get('WEBGL_depth_texture');\n\n        if (extension !== null) {\n          return extension.UNSIGNED_INT_24_8_WEBGL;\n        } else {\n          return null;\n        }\n      }\n    }\n\n    return {\n      convert: convert\n    };\n  }\n\n  class ArrayCamera extends PerspectiveCamera {\n    constructor() {\n      let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      super();\n      this.cameras = array;\n    }\n\n  }\n\n  ArrayCamera.prototype.isArrayCamera = true;\n\n  class Group extends Object3D {\n    constructor() {\n      super();\n      this.type = 'Group';\n    }\n\n  }\n\n  Group.prototype.isGroup = true;\n  const _moveEvent = {\n    type: 'move'\n  };\n\n  class WebXRController {\n    constructor() {\n      this._targetRay = null;\n      this._grip = null;\n      this._hand = null;\n    }\n\n    getHandSpace() {\n      if (this._hand === null) {\n        this._hand = new Group();\n        this._hand.matrixAutoUpdate = false;\n        this._hand.visible = false;\n        this._hand.joints = {};\n        this._hand.inputState = {\n          pinching: false\n        };\n      }\n\n      return this._hand;\n    }\n\n    getTargetRaySpace() {\n      if (this._targetRay === null) {\n        this._targetRay = new Group();\n        this._targetRay.matrixAutoUpdate = false;\n        this._targetRay.visible = false;\n        this._targetRay.hasLinearVelocity = false;\n        this._targetRay.linearVelocity = new Vector3();\n        this._targetRay.hasAngularVelocity = false;\n        this._targetRay.angularVelocity = new Vector3();\n      }\n\n      return this._targetRay;\n    }\n\n    getGripSpace() {\n      if (this._grip === null) {\n        this._grip = new Group();\n        this._grip.matrixAutoUpdate = false;\n        this._grip.visible = false;\n        this._grip.hasLinearVelocity = false;\n        this._grip.linearVelocity = new Vector3();\n        this._grip.hasAngularVelocity = false;\n        this._grip.angularVelocity = new Vector3();\n      }\n\n      return this._grip;\n    }\n\n    dispatchEvent(event) {\n      if (this._targetRay !== null) {\n        this._targetRay.dispatchEvent(event);\n      }\n\n      if (this._grip !== null) {\n        this._grip.dispatchEvent(event);\n      }\n\n      if (this._hand !== null) {\n        this._hand.dispatchEvent(event);\n      }\n\n      return this;\n    }\n\n    disconnect(inputSource) {\n      this.dispatchEvent({\n        type: 'disconnected',\n        data: inputSource\n      });\n\n      if (this._targetRay !== null) {\n        this._targetRay.visible = false;\n      }\n\n      if (this._grip !== null) {\n        this._grip.visible = false;\n      }\n\n      if (this._hand !== null) {\n        this._hand.visible = false;\n      }\n\n      return this;\n    }\n\n    update(inputSource, frame, referenceSpace) {\n      let inputPose = null;\n      let gripPose = null;\n      let handPose = null;\n      const targetRay = this._targetRay;\n      const grip = this._grip;\n      const hand = this._hand;\n\n      if (inputSource && frame.session.visibilityState !== 'visible-blurred') {\n        if (targetRay !== null) {\n          inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);\n\n          if (inputPose !== null) {\n            targetRay.matrix.fromArray(inputPose.transform.matrix);\n            targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);\n\n            if (inputPose.linearVelocity) {\n              targetRay.hasLinearVelocity = true;\n              targetRay.linearVelocity.copy(inputPose.linearVelocity);\n            } else {\n              targetRay.hasLinearVelocity = false;\n            }\n\n            if (inputPose.angularVelocity) {\n              targetRay.hasAngularVelocity = true;\n              targetRay.angularVelocity.copy(inputPose.angularVelocity);\n            } else {\n              targetRay.hasAngularVelocity = false;\n            }\n\n            this.dispatchEvent(_moveEvent);\n          }\n        }\n\n        if (hand && inputSource.hand) {\n          handPose = true;\n\n          for (const inputjoint of inputSource.hand.values()) {\n            // Update the joints groups with the XRJoint poses\n            const jointPose = frame.getJointPose(inputjoint, referenceSpace);\n\n            if (hand.joints[inputjoint.jointName] === undefined) {\n              // The transform of this joint will be updated with the joint pose on each frame\n              const joint = new Group();\n              joint.matrixAutoUpdate = false;\n              joint.visible = false;\n              hand.joints[inputjoint.jointName] = joint; // ??\n\n              hand.add(joint);\n            }\n\n            const joint = hand.joints[inputjoint.jointName];\n\n            if (jointPose !== null) {\n              joint.matrix.fromArray(jointPose.transform.matrix);\n              joint.matrix.decompose(joint.position, joint.rotation, joint.scale);\n              joint.jointRadius = jointPose.radius;\n            }\n\n            joint.visible = jointPose !== null;\n          } // Custom events\n          // Check pinchz\n\n\n          const indexTip = hand.joints['index-finger-tip'];\n          const thumbTip = hand.joints['thumb-tip'];\n          const distance = indexTip.position.distanceTo(thumbTip.position);\n          const distanceToPinch = 0.02;\n          const threshold = 0.005;\n\n          if (hand.inputState.pinching && distance > distanceToPinch + threshold) {\n            hand.inputState.pinching = false;\n            this.dispatchEvent({\n              type: 'pinchend',\n              handedness: inputSource.handedness,\n              target: this\n            });\n          } else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {\n            hand.inputState.pinching = true;\n            this.dispatchEvent({\n              type: 'pinchstart',\n              handedness: inputSource.handedness,\n              target: this\n            });\n          }\n        } else {\n          if (grip !== null && inputSource.gripSpace) {\n            gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);\n\n            if (gripPose !== null) {\n              grip.matrix.fromArray(gripPose.transform.matrix);\n              grip.matrix.decompose(grip.position, grip.rotation, grip.scale);\n\n              if (gripPose.linearVelocity) {\n                grip.hasLinearVelocity = true;\n                grip.linearVelocity.copy(gripPose.linearVelocity);\n              } else {\n                grip.hasLinearVelocity = false;\n              }\n\n              if (gripPose.angularVelocity) {\n                grip.hasAngularVelocity = true;\n                grip.angularVelocity.copy(gripPose.angularVelocity);\n              } else {\n                grip.hasAngularVelocity = false;\n              }\n            }\n          }\n        }\n      }\n\n      if (targetRay !== null) {\n        targetRay.visible = inputPose !== null;\n      }\n\n      if (grip !== null) {\n        grip.visible = gripPose !== null;\n      }\n\n      if (hand !== null) {\n        hand.visible = handPose !== null;\n      }\n\n      return this;\n    }\n\n  }\n\n  class WebXRManager extends EventDispatcher {\n    constructor(renderer, gl) {\n      super();\n      const scope = this;\n      const state = renderer.state;\n      let session = null;\n      let framebufferScaleFactor = 1.0;\n      let referenceSpace = null;\n      let referenceSpaceType = 'local-floor';\n      let pose = null;\n      let glBinding = null;\n      let glFramebuffer = null;\n      let glProjLayer = null;\n      let glBaseLayer = null;\n      let isMultisample = false;\n      let glMultisampledFramebuffer = null;\n      let glColorRenderbuffer = null;\n      let glDepthRenderbuffer = null;\n      let xrFrame = null;\n      let depthStyle = null;\n      let clearStyle = null;\n      const controllers = [];\n      const inputSourcesMap = new Map(); //\n\n      const cameraL = new PerspectiveCamera();\n      cameraL.layers.enable(1);\n      cameraL.viewport = new Vector4();\n      const cameraR = new PerspectiveCamera();\n      cameraR.layers.enable(2);\n      cameraR.viewport = new Vector4();\n      const cameras = [cameraL, cameraR];\n      const cameraVR = new ArrayCamera();\n      cameraVR.layers.enable(1);\n      cameraVR.layers.enable(2);\n      let _currentDepthNear = null;\n      let _currentDepthFar = null; //\n\n      this.cameraAutoUpdate = true;\n      this.enabled = false;\n      this.isPresenting = false;\n\n      this.getController = function (index) {\n        let controller = controllers[index];\n\n        if (controller === undefined) {\n          controller = new WebXRController();\n          controllers[index] = controller;\n        }\n\n        return controller.getTargetRaySpace();\n      };\n\n      this.getControllerGrip = function (index) {\n        let controller = controllers[index];\n\n        if (controller === undefined) {\n          controller = new WebXRController();\n          controllers[index] = controller;\n        }\n\n        return controller.getGripSpace();\n      };\n\n      this.getHand = function (index) {\n        let controller = controllers[index];\n\n        if (controller === undefined) {\n          controller = new WebXRController();\n          controllers[index] = controller;\n        }\n\n        return controller.getHandSpace();\n      }; //\n\n\n      function onSessionEvent(event) {\n        const controller = inputSourcesMap.get(event.inputSource);\n\n        if (controller) {\n          controller.dispatchEvent({\n            type: event.type,\n            data: event.inputSource\n          });\n        }\n      }\n\n      function onSessionEnd() {\n        inputSourcesMap.forEach(function (controller, inputSource) {\n          controller.disconnect(inputSource);\n        });\n        inputSourcesMap.clear();\n        _currentDepthNear = null;\n        _currentDepthFar = null; // restore framebuffer/rendering state\n\n        state.bindXRFramebuffer(null);\n        renderer.setRenderTarget(renderer.getRenderTarget());\n        if (glFramebuffer) gl.deleteFramebuffer(glFramebuffer);\n        if (glMultisampledFramebuffer) gl.deleteFramebuffer(glMultisampledFramebuffer);\n        if (glColorRenderbuffer) gl.deleteRenderbuffer(glColorRenderbuffer);\n        if (glDepthRenderbuffer) gl.deleteRenderbuffer(glDepthRenderbuffer);\n        glFramebuffer = null;\n        glMultisampledFramebuffer = null;\n        glColorRenderbuffer = null;\n        glDepthRenderbuffer = null;\n        glBaseLayer = null;\n        glProjLayer = null;\n        glBinding = null;\n        session = null; //\n\n        animation.stop();\n        scope.isPresenting = false;\n        scope.dispatchEvent({\n          type: 'sessionend'\n        });\n      }\n\n      this.setFramebufferScaleFactor = function (value) {\n        framebufferScaleFactor = value;\n\n        if (scope.isPresenting === true) {\n          console.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.');\n        }\n      };\n\n      this.setReferenceSpaceType = function (value) {\n        referenceSpaceType = value;\n\n        if (scope.isPresenting === true) {\n          console.warn('THREE.WebXRManager: Cannot change reference space type while presenting.');\n        }\n      };\n\n      this.getReferenceSpace = function () {\n        return referenceSpace;\n      };\n\n      this.getBaseLayer = function () {\n        return glProjLayer !== null ? glProjLayer : glBaseLayer;\n      };\n\n      this.getBinding = function () {\n        return glBinding;\n      };\n\n      this.getFrame = function () {\n        return xrFrame;\n      };\n\n      this.getSession = function () {\n        return session;\n      };\n\n      this.setSession = async function (value) {\n        session = value;\n\n        if (session !== null) {\n          session.addEventListener('select', onSessionEvent);\n          session.addEventListener('selectstart', onSessionEvent);\n          session.addEventListener('selectend', onSessionEvent);\n          session.addEventListener('squeeze', onSessionEvent);\n          session.addEventListener('squeezestart', onSessionEvent);\n          session.addEventListener('squeezeend', onSessionEvent);\n          session.addEventListener('end', onSessionEnd);\n          session.addEventListener('inputsourceschange', onInputSourcesChange);\n          const attributes = gl.getContextAttributes();\n\n          if (attributes.xrCompatible !== true) {\n            await gl.makeXRCompatible();\n          }\n\n          if (session.renderState.layers === undefined) {\n            const layerInit = {\n              antialias: attributes.antialias,\n              alpha: attributes.alpha,\n              depth: attributes.depth,\n              stencil: attributes.stencil,\n              framebufferScaleFactor: framebufferScaleFactor\n            };\n            glBaseLayer = new XRWebGLLayer(session, gl, layerInit);\n            session.updateRenderState({\n              baseLayer: glBaseLayer\n            });\n          } else if (gl instanceof WebGLRenderingContext) {\n            // Use old style webgl layer because we can't use MSAA\n            // WebGL2 support.\n            const layerInit = {\n              antialias: true,\n              alpha: attributes.alpha,\n              depth: attributes.depth,\n              stencil: attributes.stencil,\n              framebufferScaleFactor: framebufferScaleFactor\n            };\n            glBaseLayer = new XRWebGLLayer(session, gl, layerInit);\n            session.updateRenderState({\n              layers: [glBaseLayer]\n            });\n          } else {\n            isMultisample = attributes.antialias;\n            let depthFormat = null;\n\n            if (attributes.depth) {\n              clearStyle = gl.DEPTH_BUFFER_BIT;\n              if (attributes.stencil) clearStyle |= gl.STENCIL_BUFFER_BIT;\n              depthStyle = attributes.stencil ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;\n              depthFormat = attributes.stencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;\n            }\n\n            const projectionlayerInit = {\n              colorFormat: attributes.alpha ? gl.RGBA8 : gl.RGB8,\n              depthFormat: depthFormat,\n              scaleFactor: framebufferScaleFactor\n            };\n            glBinding = new XRWebGLBinding(session, gl);\n            glProjLayer = glBinding.createProjectionLayer(projectionlayerInit);\n            glFramebuffer = gl.createFramebuffer();\n            session.updateRenderState({\n              layers: [glProjLayer]\n            });\n\n            if (isMultisample) {\n              glMultisampledFramebuffer = gl.createFramebuffer();\n              glColorRenderbuffer = gl.createRenderbuffer();\n              gl.bindRenderbuffer(gl.RENDERBUFFER, glColorRenderbuffer);\n              gl.renderbufferStorageMultisample(gl.RENDERBUFFER, 4, gl.RGBA8, glProjLayer.textureWidth, glProjLayer.textureHeight);\n              state.bindFramebuffer(gl.FRAMEBUFFER, glMultisampledFramebuffer);\n              gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, glColorRenderbuffer);\n              gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\n              if (depthFormat !== null) {\n                glDepthRenderbuffer = gl.createRenderbuffer();\n                gl.bindRenderbuffer(gl.RENDERBUFFER, glDepthRenderbuffer);\n                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, 4, depthFormat, glProjLayer.textureWidth, glProjLayer.textureHeight);\n                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, depthStyle, gl.RENDERBUFFER, glDepthRenderbuffer);\n                gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n              }\n\n              state.bindFramebuffer(gl.FRAMEBUFFER, null);\n            }\n          }\n\n          referenceSpace = await session.requestReferenceSpace(referenceSpaceType);\n          animation.setContext(session);\n          animation.start();\n          scope.isPresenting = true;\n          scope.dispatchEvent({\n            type: 'sessionstart'\n          });\n        }\n      };\n\n      function onInputSourcesChange(event) {\n        const inputSources = session.inputSources; // Assign inputSources to available controllers\n\n        for (let i = 0; i < controllers.length; i++) {\n          inputSourcesMap.set(inputSources[i], controllers[i]);\n        } // Notify disconnected\n\n\n        for (let i = 0; i < event.removed.length; i++) {\n          const inputSource = event.removed[i];\n          const controller = inputSourcesMap.get(inputSource);\n\n          if (controller) {\n            controller.dispatchEvent({\n              type: 'disconnected',\n              data: inputSource\n            });\n            inputSourcesMap.delete(inputSource);\n          }\n        } // Notify connected\n\n\n        for (let i = 0; i < event.added.length; i++) {\n          const inputSource = event.added[i];\n          const controller = inputSourcesMap.get(inputSource);\n\n          if (controller) {\n            controller.dispatchEvent({\n              type: 'connected',\n              data: inputSource\n            });\n          }\n        }\n      } //\n\n\n      const cameraLPos = new Vector3();\n      const cameraRPos = new Vector3();\n      /**\n       * Assumes 2 cameras that are parallel and share an X-axis, and that\n       * the cameras' projection and world matrices have already been set.\n       * And that near and far planes are identical for both cameras.\n       * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n       */\n\n      function setProjectionFromUnion(camera, cameraL, cameraR) {\n        cameraLPos.setFromMatrixPosition(cameraL.matrixWorld);\n        cameraRPos.setFromMatrixPosition(cameraR.matrixWorld);\n        const ipd = cameraLPos.distanceTo(cameraRPos);\n        const projL = cameraL.projectionMatrix.elements;\n        const projR = cameraR.projectionMatrix.elements; // VR systems will have identical far and near planes, and\n        // most likely identical top and bottom frustum extents.\n        // Use the left camera for these values.\n\n        const near = projL[14] / (projL[10] - 1);\n        const far = projL[14] / (projL[10] + 1);\n        const topFov = (projL[9] + 1) / projL[5];\n        const bottomFov = (projL[9] - 1) / projL[5];\n        const leftFov = (projL[8] - 1) / projL[0];\n        const rightFov = (projR[8] + 1) / projR[0];\n        const left = near * leftFov;\n        const right = near * rightFov; // Calculate the new camera's position offset from the\n        // left camera. xOffset should be roughly half `ipd`.\n\n        const zOffset = ipd / (-leftFov + rightFov);\n        const xOffset = zOffset * -leftFov; // TODO: Better way to apply this offset?\n\n        cameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);\n        camera.translateX(xOffset);\n        camera.translateZ(zOffset);\n        camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);\n        camera.matrixWorldInverse.copy(camera.matrixWorld).invert(); // Find the union of the frustum values of the cameras and scale\n        // the values so that the near plane's position does not change in world space,\n        // although must now be relative to the new union camera.\n\n        const near2 = near + zOffset;\n        const far2 = far + zOffset;\n        const left2 = left - xOffset;\n        const right2 = right + (ipd - xOffset);\n        const top2 = topFov * far / far2 * near2;\n        const bottom2 = bottomFov * far / far2 * near2;\n        camera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);\n      }\n\n      function updateCamera(camera, parent) {\n        if (parent === null) {\n          camera.matrixWorld.copy(camera.matrix);\n        } else {\n          camera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);\n        }\n\n        camera.matrixWorldInverse.copy(camera.matrixWorld).invert();\n      }\n\n      this.updateCamera = function (camera) {\n        if (session === null) return;\n        cameraVR.near = cameraR.near = cameraL.near = camera.near;\n        cameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n        if (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {\n          // Note that the new renderState won't apply until the next frame. See #18320\n          session.updateRenderState({\n            depthNear: cameraVR.near,\n            depthFar: cameraVR.far\n          });\n          _currentDepthNear = cameraVR.near;\n          _currentDepthFar = cameraVR.far;\n        }\n\n        const parent = camera.parent;\n        const cameras = cameraVR.cameras;\n        updateCamera(cameraVR, parent);\n\n        for (let i = 0; i < cameras.length; i++) {\n          updateCamera(cameras[i], parent);\n        }\n\n        cameraVR.matrixWorld.decompose(cameraVR.position, cameraVR.quaternion, cameraVR.scale); // update user camera and its children\n\n        camera.position.copy(cameraVR.position);\n        camera.quaternion.copy(cameraVR.quaternion);\n        camera.scale.copy(cameraVR.scale);\n        camera.matrix.copy(cameraVR.matrix);\n        camera.matrixWorld.copy(cameraVR.matrixWorld);\n        const children = camera.children;\n\n        for (let i = 0, l = children.length; i < l; i++) {\n          children[i].updateMatrixWorld(true);\n        } // update projection matrix for proper view frustum culling\n\n\n        if (cameras.length === 2) {\n          setProjectionFromUnion(cameraVR, cameraL, cameraR);\n        } else {\n          // assume single camera setup (AR)\n          cameraVR.projectionMatrix.copy(cameraL.projectionMatrix);\n        }\n      };\n\n      this.getCamera = function () {\n        return cameraVR;\n      };\n\n      this.getFoveation = function () {\n        if (glProjLayer !== null) {\n          return glProjLayer.fixedFoveation;\n        }\n\n        if (glBaseLayer !== null) {\n          return glBaseLayer.fixedFoveation;\n        }\n\n        return undefined;\n      };\n\n      this.setFoveation = function (foveation) {\n        // 0 = no foveation = full resolution\n        // 1 = maximum foveation = the edges render at lower resolution\n        if (glProjLayer !== null) {\n          glProjLayer.fixedFoveation = foveation;\n        }\n\n        if (glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined) {\n          glBaseLayer.fixedFoveation = foveation;\n        }\n      }; // Animation Loop\n\n\n      let onAnimationFrameCallback = null;\n\n      function onAnimationFrame(time, frame) {\n        pose = frame.getViewerPose(referenceSpace);\n        xrFrame = frame;\n\n        if (pose !== null) {\n          const views = pose.views;\n\n          if (glBaseLayer !== null) {\n            state.bindXRFramebuffer(glBaseLayer.framebuffer);\n          }\n\n          let cameraVRNeedsUpdate = false; // check if it's necessary to rebuild cameraVR's camera list\n\n          if (views.length !== cameraVR.cameras.length) {\n            cameraVR.cameras.length = 0;\n            cameraVRNeedsUpdate = true;\n          }\n\n          for (let i = 0; i < views.length; i++) {\n            const view = views[i];\n            let viewport = null;\n\n            if (glBaseLayer !== null) {\n              viewport = glBaseLayer.getViewport(view);\n            } else {\n              const glSubImage = glBinding.getViewSubImage(glProjLayer, view);\n              state.bindXRFramebuffer(glFramebuffer);\n\n              if (glSubImage.depthStencilTexture !== undefined) {\n                gl.framebufferTexture2D(gl.FRAMEBUFFER, depthStyle, gl.TEXTURE_2D, glSubImage.depthStencilTexture, 0);\n              }\n\n              gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, glSubImage.colorTexture, 0);\n              viewport = glSubImage.viewport;\n            }\n\n            const camera = cameras[i];\n            camera.matrix.fromArray(view.transform.matrix);\n            camera.projectionMatrix.fromArray(view.projectionMatrix);\n            camera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);\n\n            if (i === 0) {\n              cameraVR.matrix.copy(camera.matrix);\n            }\n\n            if (cameraVRNeedsUpdate === true) {\n              cameraVR.cameras.push(camera);\n            }\n          }\n\n          if (isMultisample) {\n            state.bindXRFramebuffer(glMultisampledFramebuffer);\n            if (clearStyle !== null) gl.clear(clearStyle);\n          }\n        } //\n\n\n        const inputSources = session.inputSources;\n\n        for (let i = 0; i < controllers.length; i++) {\n          const controller = controllers[i];\n          const inputSource = inputSources[i];\n          controller.update(inputSource, frame, referenceSpace);\n        }\n\n        if (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);\n\n        if (isMultisample) {\n          const width = glProjLayer.textureWidth;\n          const height = glProjLayer.textureHeight;\n          state.bindFramebuffer(gl.READ_FRAMEBUFFER, glMultisampledFramebuffer);\n          state.bindFramebuffer(gl.DRAW_FRAMEBUFFER, glFramebuffer); // Invalidate the depth here to avoid flush of the depth data to main memory.\n\n          gl.invalidateFramebuffer(gl.READ_FRAMEBUFFER, [depthStyle]);\n          gl.invalidateFramebuffer(gl.DRAW_FRAMEBUFFER, [depthStyle]);\n          gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, gl.COLOR_BUFFER_BIT, gl.NEAREST); // Invalidate the MSAA buffer because it's not needed anymore.\n\n          gl.invalidateFramebuffer(gl.READ_FRAMEBUFFER, [gl.COLOR_ATTACHMENT0]);\n          state.bindFramebuffer(gl.READ_FRAMEBUFFER, null);\n          state.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\n          state.bindFramebuffer(gl.FRAMEBUFFER, glMultisampledFramebuffer);\n        }\n\n        xrFrame = null;\n      }\n\n      const animation = new WebGLAnimation();\n      animation.setAnimationLoop(onAnimationFrame);\n\n      this.setAnimationLoop = function (callback) {\n        onAnimationFrameCallback = callback;\n      };\n\n      this.dispose = function () {};\n    }\n\n  }\n\n  function WebGLMaterials(properties) {\n    function refreshFogUniforms(uniforms, fog) {\n      uniforms.fogColor.value.copy(fog.color);\n\n      if (fog.isFog) {\n        uniforms.fogNear.value = fog.near;\n        uniforms.fogFar.value = fog.far;\n      } else if (fog.isFogExp2) {\n        uniforms.fogDensity.value = fog.density;\n      }\n    }\n\n    function refreshMaterialUniforms(uniforms, material, pixelRatio, height, transmissionRenderTarget) {\n      if (material.isMeshBasicMaterial) {\n        refreshUniformsCommon(uniforms, material);\n      } else if (material.isMeshLambertMaterial) {\n        refreshUniformsCommon(uniforms, material);\n        refreshUniformsLambert(uniforms, material);\n      } else if (material.isMeshToonMaterial) {\n        refreshUniformsCommon(uniforms, material);\n        refreshUniformsToon(uniforms, material);\n      } else if (material.isMeshPhongMaterial) {\n        refreshUniformsCommon(uniforms, material);\n        refreshUniformsPhong(uniforms, material);\n      } else if (material.isMeshStandardMaterial) {\n        refreshUniformsCommon(uniforms, material);\n\n        if (material.isMeshPhysicalMaterial) {\n          refreshUniformsPhysical(uniforms, material, transmissionRenderTarget);\n        } else {\n          refreshUniformsStandard(uniforms, material);\n        }\n      } else if (material.isMeshMatcapMaterial) {\n        refreshUniformsCommon(uniforms, material);\n        refreshUniformsMatcap(uniforms, material);\n      } else if (material.isMeshDepthMaterial) {\n        refreshUniformsCommon(uniforms, material);\n        refreshUniformsDepth(uniforms, material);\n      } else if (material.isMeshDistanceMaterial) {\n        refreshUniformsCommon(uniforms, material);\n        refreshUniformsDistance(uniforms, material);\n      } else if (material.isMeshNormalMaterial) {\n        refreshUniformsCommon(uniforms, material);\n        refreshUniformsNormal(uniforms, material);\n      } else if (material.isLineBasicMaterial) {\n        refreshUniformsLine(uniforms, material);\n\n        if (material.isLineDashedMaterial) {\n          refreshUniformsDash(uniforms, material);\n        }\n      } else if (material.isPointsMaterial) {\n        refreshUniformsPoints(uniforms, material, pixelRatio, height);\n      } else if (material.isSpriteMaterial) {\n        refreshUniformsSprites(uniforms, material);\n      } else if (material.isShadowMaterial) {\n        uniforms.color.value.copy(material.color);\n        uniforms.opacity.value = material.opacity;\n      } else if (material.isShaderMaterial) {\n        material.uniformsNeedUpdate = false; // #15581\n      }\n    }\n\n    function refreshUniformsCommon(uniforms, material) {\n      uniforms.opacity.value = material.opacity;\n\n      if (material.color) {\n        uniforms.diffuse.value.copy(material.color);\n      }\n\n      if (material.emissive) {\n        uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);\n      }\n\n      if (material.map) {\n        uniforms.map.value = material.map;\n      }\n\n      if (material.alphaMap) {\n        uniforms.alphaMap.value = material.alphaMap;\n      }\n\n      if (material.specularMap) {\n        uniforms.specularMap.value = material.specularMap;\n      }\n\n      if (material.alphaTest > 0) {\n        uniforms.alphaTest.value = material.alphaTest;\n      }\n\n      const envMap = properties.get(material).envMap;\n\n      if (envMap) {\n        uniforms.envMap.value = envMap;\n        uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;\n        uniforms.reflectivity.value = material.reflectivity;\n        uniforms.ior.value = material.ior;\n        uniforms.refractionRatio.value = material.refractionRatio;\n\n        const maxMipLevel = properties.get(envMap).__maxMipLevel;\n\n        if (maxMipLevel !== undefined) {\n          uniforms.maxMipLevel.value = maxMipLevel;\n        }\n      }\n\n      if (material.lightMap) {\n        uniforms.lightMap.value = material.lightMap;\n        uniforms.lightMapIntensity.value = material.lightMapIntensity;\n      }\n\n      if (material.aoMap) {\n        uniforms.aoMap.value = material.aoMap;\n        uniforms.aoMapIntensity.value = material.aoMapIntensity;\n      } // uv repeat and offset setting priorities\n      // 1. color map\n      // 2. specular map\n      // 3. displacementMap map\n      // 4. normal map\n      // 5. bump map\n      // 6. roughnessMap map\n      // 7. metalnessMap map\n      // 8. alphaMap map\n      // 9. emissiveMap map\n      // 10. clearcoat map\n      // 11. clearcoat normal map\n      // 12. clearcoat roughnessMap map\n      // 13. specular intensity map\n      // 14. specular tint map\n      // 15. transmission map\n      // 16. thickness map\n\n\n      let uvScaleMap;\n\n      if (material.map) {\n        uvScaleMap = material.map;\n      } else if (material.specularMap) {\n        uvScaleMap = material.specularMap;\n      } else if (material.displacementMap) {\n        uvScaleMap = material.displacementMap;\n      } else if (material.normalMap) {\n        uvScaleMap = material.normalMap;\n      } else if (material.bumpMap) {\n        uvScaleMap = material.bumpMap;\n      } else if (material.roughnessMap) {\n        uvScaleMap = material.roughnessMap;\n      } else if (material.metalnessMap) {\n        uvScaleMap = material.metalnessMap;\n      } else if (material.alphaMap) {\n        uvScaleMap = material.alphaMap;\n      } else if (material.emissiveMap) {\n        uvScaleMap = material.emissiveMap;\n      } else if (material.clearcoatMap) {\n        uvScaleMap = material.clearcoatMap;\n      } else if (material.clearcoatNormalMap) {\n        uvScaleMap = material.clearcoatNormalMap;\n      } else if (material.clearcoatRoughnessMap) {\n        uvScaleMap = material.clearcoatRoughnessMap;\n      } else if (material.specularIntensityMap) {\n        uvScaleMap = material.specularIntensityMap;\n      } else if (material.specularColorMap) {\n        uvScaleMap = material.specularColorMap;\n      } else if (material.transmissionMap) {\n        uvScaleMap = material.transmissionMap;\n      } else if (material.thicknessMap) {\n        uvScaleMap = material.thicknessMap;\n      } else if (material.sheenColorMap) {\n        uvScaleMap = material.sheenColorMap;\n      } else if (material.sheenRoughnessMap) {\n        uvScaleMap = material.sheenRoughnessMap;\n      }\n\n      if (uvScaleMap !== undefined) {\n        // backwards compatibility\n        if (uvScaleMap.isWebGLRenderTarget) {\n          uvScaleMap = uvScaleMap.texture;\n        }\n\n        if (uvScaleMap.matrixAutoUpdate === true) {\n          uvScaleMap.updateMatrix();\n        }\n\n        uniforms.uvTransform.value.copy(uvScaleMap.matrix);\n      } // uv repeat and offset setting priorities for uv2\n      // 1. ao map\n      // 2. light map\n\n\n      let uv2ScaleMap;\n\n      if (material.aoMap) {\n        uv2ScaleMap = material.aoMap;\n      } else if (material.lightMap) {\n        uv2ScaleMap = material.lightMap;\n      }\n\n      if (uv2ScaleMap !== undefined) {\n        // backwards compatibility\n        if (uv2ScaleMap.isWebGLRenderTarget) {\n          uv2ScaleMap = uv2ScaleMap.texture;\n        }\n\n        if (uv2ScaleMap.matrixAutoUpdate === true) {\n          uv2ScaleMap.updateMatrix();\n        }\n\n        uniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);\n      }\n    }\n\n    function refreshUniformsLine(uniforms, material) {\n      uniforms.diffuse.value.copy(material.color);\n      uniforms.opacity.value = material.opacity;\n    }\n\n    function refreshUniformsDash(uniforms, material) {\n      uniforms.dashSize.value = material.dashSize;\n      uniforms.totalSize.value = material.dashSize + material.gapSize;\n      uniforms.scale.value = material.scale;\n    }\n\n    function refreshUniformsPoints(uniforms, material, pixelRatio, height) {\n      uniforms.diffuse.value.copy(material.color);\n      uniforms.opacity.value = material.opacity;\n      uniforms.size.value = material.size * pixelRatio;\n      uniforms.scale.value = height * 0.5;\n\n      if (material.map) {\n        uniforms.map.value = material.map;\n      }\n\n      if (material.alphaMap) {\n        uniforms.alphaMap.value = material.alphaMap;\n      }\n\n      if (material.alphaTest > 0) {\n        uniforms.alphaTest.value = material.alphaTest;\n      } // uv repeat and offset setting priorities\n      // 1. color map\n      // 2. alpha map\n\n\n      let uvScaleMap;\n\n      if (material.map) {\n        uvScaleMap = material.map;\n      } else if (material.alphaMap) {\n        uvScaleMap = material.alphaMap;\n      }\n\n      if (uvScaleMap !== undefined) {\n        if (uvScaleMap.matrixAutoUpdate === true) {\n          uvScaleMap.updateMatrix();\n        }\n\n        uniforms.uvTransform.value.copy(uvScaleMap.matrix);\n      }\n    }\n\n    function refreshUniformsSprites(uniforms, material) {\n      uniforms.diffuse.value.copy(material.color);\n      uniforms.opacity.value = material.opacity;\n      uniforms.rotation.value = material.rotation;\n\n      if (material.map) {\n        uniforms.map.value = material.map;\n      }\n\n      if (material.alphaMap) {\n        uniforms.alphaMap.value = material.alphaMap;\n      }\n\n      if (material.alphaTest > 0) {\n        uniforms.alphaTest.value = material.alphaTest;\n      } // uv repeat and offset setting priorities\n      // 1. color map\n      // 2. alpha map\n\n\n      let uvScaleMap;\n\n      if (material.map) {\n        uvScaleMap = material.map;\n      } else if (material.alphaMap) {\n        uvScaleMap = material.alphaMap;\n      }\n\n      if (uvScaleMap !== undefined) {\n        if (uvScaleMap.matrixAutoUpdate === true) {\n          uvScaleMap.updateMatrix();\n        }\n\n        uniforms.uvTransform.value.copy(uvScaleMap.matrix);\n      }\n    }\n\n    function refreshUniformsLambert(uniforms, material) {\n      if (material.emissiveMap) {\n        uniforms.emissiveMap.value = material.emissiveMap;\n      }\n    }\n\n    function refreshUniformsPhong(uniforms, material) {\n      uniforms.specular.value.copy(material.specular);\n      uniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )\n\n      if (material.emissiveMap) {\n        uniforms.emissiveMap.value = material.emissiveMap;\n      }\n\n      if (material.bumpMap) {\n        uniforms.bumpMap.value = material.bumpMap;\n        uniforms.bumpScale.value = material.bumpScale;\n        if (material.side === BackSide) uniforms.bumpScale.value *= -1;\n      }\n\n      if (material.normalMap) {\n        uniforms.normalMap.value = material.normalMap;\n        uniforms.normalScale.value.copy(material.normalScale);\n        if (material.side === BackSide) uniforms.normalScale.value.negate();\n      }\n\n      if (material.displacementMap) {\n        uniforms.displacementMap.value = material.displacementMap;\n        uniforms.displacementScale.value = material.displacementScale;\n        uniforms.displacementBias.value = material.displacementBias;\n      }\n    }\n\n    function refreshUniformsToon(uniforms, material) {\n      if (material.gradientMap) {\n        uniforms.gradientMap.value = material.gradientMap;\n      }\n\n      if (material.emissiveMap) {\n        uniforms.emissiveMap.value = material.emissiveMap;\n      }\n\n      if (material.bumpMap) {\n        uniforms.bumpMap.value = material.bumpMap;\n        uniforms.bumpScale.value = material.bumpScale;\n        if (material.side === BackSide) uniforms.bumpScale.value *= -1;\n      }\n\n      if (material.normalMap) {\n        uniforms.normalMap.value = material.normalMap;\n        uniforms.normalScale.value.copy(material.normalScale);\n        if (material.side === BackSide) uniforms.normalScale.value.negate();\n      }\n\n      if (material.displacementMap) {\n        uniforms.displacementMap.value = material.displacementMap;\n        uniforms.displacementScale.value = material.displacementScale;\n        uniforms.displacementBias.value = material.displacementBias;\n      }\n    }\n\n    function refreshUniformsStandard(uniforms, material) {\n      uniforms.roughness.value = material.roughness;\n      uniforms.metalness.value = material.metalness;\n\n      if (material.roughnessMap) {\n        uniforms.roughnessMap.value = material.roughnessMap;\n      }\n\n      if (material.metalnessMap) {\n        uniforms.metalnessMap.value = material.metalnessMap;\n      }\n\n      if (material.emissiveMap) {\n        uniforms.emissiveMap.value = material.emissiveMap;\n      }\n\n      if (material.bumpMap) {\n        uniforms.bumpMap.value = material.bumpMap;\n        uniforms.bumpScale.value = material.bumpScale;\n        if (material.side === BackSide) uniforms.bumpScale.value *= -1;\n      }\n\n      if (material.normalMap) {\n        uniforms.normalMap.value = material.normalMap;\n        uniforms.normalScale.value.copy(material.normalScale);\n        if (material.side === BackSide) uniforms.normalScale.value.negate();\n      }\n\n      if (material.displacementMap) {\n        uniforms.displacementMap.value = material.displacementMap;\n        uniforms.displacementScale.value = material.displacementScale;\n        uniforms.displacementBias.value = material.displacementBias;\n      }\n\n      const envMap = properties.get(material).envMap;\n\n      if (envMap) {\n        //uniforms.envMap.value = material.envMap; // part of uniforms common\n        uniforms.envMapIntensity.value = material.envMapIntensity;\n      }\n    }\n\n    function refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {\n      refreshUniformsStandard(uniforms, material);\n      uniforms.ior.value = material.ior; // also part of uniforms common\n\n      if (material.sheen > 0) {\n        uniforms.sheenColor.value.copy(material.sheenColor).multiplyScalar(material.sheen);\n        uniforms.sheenRoughness.value = material.sheenRoughness;\n\n        if (material.sheenColorMap) {\n          uniforms.sheenColorMap.value = material.sheenColorMap;\n        }\n\n        if (material.sheenRoughnessMap) {\n          uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;\n        }\n      }\n\n      if (material.clearcoat > 0) {\n        uniforms.clearcoat.value = material.clearcoat;\n        uniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\n        if (material.clearcoatMap) {\n          uniforms.clearcoatMap.value = material.clearcoatMap;\n        }\n\n        if (material.clearcoatRoughnessMap) {\n          uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n        }\n\n        if (material.clearcoatNormalMap) {\n          uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);\n          uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n          if (material.side === BackSide) {\n            uniforms.clearcoatNormalScale.value.negate();\n          }\n        }\n      }\n\n      if (material.transmission > 0) {\n        uniforms.transmission.value = material.transmission;\n        uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;\n        uniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);\n\n        if (material.transmissionMap) {\n          uniforms.transmissionMap.value = material.transmissionMap;\n        }\n\n        uniforms.thickness.value = material.thickness;\n\n        if (material.thicknessMap) {\n          uniforms.thicknessMap.value = material.thicknessMap;\n        }\n\n        uniforms.attenuationDistance.value = material.attenuationDistance;\n        uniforms.attenuationColor.value.copy(material.attenuationColor);\n      }\n\n      uniforms.specularIntensity.value = material.specularIntensity;\n      uniforms.specularColor.value.copy(material.specularColor);\n\n      if (material.specularIntensityMap) {\n        uniforms.specularIntensityMap.value = material.specularIntensityMap;\n      }\n\n      if (material.specularColorMap) {\n        uniforms.specularColorMap.value = material.specularColorMap;\n      }\n    }\n\n    function refreshUniformsMatcap(uniforms, material) {\n      if (material.matcap) {\n        uniforms.matcap.value = material.matcap;\n      }\n\n      if (material.bumpMap) {\n        uniforms.bumpMap.value = material.bumpMap;\n        uniforms.bumpScale.value = material.bumpScale;\n        if (material.side === BackSide) uniforms.bumpScale.value *= -1;\n      }\n\n      if (material.normalMap) {\n        uniforms.normalMap.value = material.normalMap;\n        uniforms.normalScale.value.copy(material.normalScale);\n        if (material.side === BackSide) uniforms.normalScale.value.negate();\n      }\n\n      if (material.displacementMap) {\n        uniforms.displacementMap.value = material.displacementMap;\n        uniforms.displacementScale.value = material.displacementScale;\n        uniforms.displacementBias.value = material.displacementBias;\n      }\n    }\n\n    function refreshUniformsDepth(uniforms, material) {\n      if (material.displacementMap) {\n        uniforms.displacementMap.value = material.displacementMap;\n        uniforms.displacementScale.value = material.displacementScale;\n        uniforms.displacementBias.value = material.displacementBias;\n      }\n    }\n\n    function refreshUniformsDistance(uniforms, material) {\n      if (material.displacementMap) {\n        uniforms.displacementMap.value = material.displacementMap;\n        uniforms.displacementScale.value = material.displacementScale;\n        uniforms.displacementBias.value = material.displacementBias;\n      }\n\n      uniforms.referencePosition.value.copy(material.referencePosition);\n      uniforms.nearDistance.value = material.nearDistance;\n      uniforms.farDistance.value = material.farDistance;\n    }\n\n    function refreshUniformsNormal(uniforms, material) {\n      if (material.bumpMap) {\n        uniforms.bumpMap.value = material.bumpMap;\n        uniforms.bumpScale.value = material.bumpScale;\n        if (material.side === BackSide) uniforms.bumpScale.value *= -1;\n      }\n\n      if (material.normalMap) {\n        uniforms.normalMap.value = material.normalMap;\n        uniforms.normalScale.value.copy(material.normalScale);\n        if (material.side === BackSide) uniforms.normalScale.value.negate();\n      }\n\n      if (material.displacementMap) {\n        uniforms.displacementMap.value = material.displacementMap;\n        uniforms.displacementScale.value = material.displacementScale;\n        uniforms.displacementBias.value = material.displacementBias;\n      }\n    }\n\n    return {\n      refreshFogUniforms: refreshFogUniforms,\n      refreshMaterialUniforms: refreshMaterialUniforms\n    };\n  }\n\n  function createCanvasElement() {\n    const canvas = createElementNS('canvas');\n    canvas.style.display = 'block';\n    return canvas;\n  }\n\n  function WebGLRenderer() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    const _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement(),\n          _context = parameters.context !== undefined ? parameters.context : null,\n          _alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n          _depth = parameters.depth !== undefined ? parameters.depth : true,\n          _stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n          _antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n          _premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n          _preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n          _powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n          _failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n    let currentRenderList = null;\n    let currentRenderState = null; // render() can be called from within a callback triggered by another render.\n    // We track this so that the nested render call gets its list and state isolated from the parent render call.\n\n    const renderListStack = [];\n    const renderStateStack = []; // public properties\n\n    this.domElement = _canvas; // Debug configuration container\n\n    this.debug = {\n      /**\n       * Enables error checking and reporting when shader programs are being compiled\n       * @type {boolean}\n       */\n      checkShaderErrors: true\n    }; // clearing\n\n    this.autoClear = true;\n    this.autoClearColor = true;\n    this.autoClearDepth = true;\n    this.autoClearStencil = true; // scene graph\n\n    this.sortObjects = true; // user-defined clipping\n\n    this.clippingPlanes = [];\n    this.localClippingEnabled = false; // physically based shading\n\n    this.gammaFactor = 2.0; // for backwards compatibility\n\n    this.outputEncoding = LinearEncoding; // physical lights\n\n    this.physicallyCorrectLights = false; // tone mapping\n\n    this.toneMapping = NoToneMapping;\n    this.toneMappingExposure = 1.0; // internal properties\n\n    const _this = this;\n\n    let _isContextLost = false; // internal state cache\n\n    let _currentActiveCubeFace = 0;\n    let _currentActiveMipmapLevel = 0;\n    let _currentRenderTarget = null;\n\n    let _currentMaterialId = -1;\n\n    let _currentCamera = null;\n\n    const _currentViewport = new Vector4();\n\n    const _currentScissor = new Vector4();\n\n    let _currentScissorTest = null; //\n\n    let _width = _canvas.width;\n    let _height = _canvas.height;\n    let _pixelRatio = 1;\n    let _opaqueSort = null;\n    let _transparentSort = null;\n\n    const _viewport = new Vector4(0, 0, _width, _height);\n\n    const _scissor = new Vector4(0, 0, _width, _height);\n\n    let _scissorTest = false; //\n\n    const _currentDrawBuffers = []; // frustum\n\n    const _frustum = new Frustum(); // clipping\n\n\n    let _clippingEnabled = false;\n    let _localClippingEnabled = false; // transmission\n\n    let _transmissionRenderTarget = null; // camera matrices cache\n\n    const _projScreenMatrix = new Matrix4();\n\n    const _vector3 = new Vector3();\n\n    const _emptyScene = {\n      background: null,\n      fog: null,\n      environment: null,\n      overrideMaterial: null,\n      isScene: true\n    };\n\n    function getTargetPixelRatio() {\n      return _currentRenderTarget === null ? _pixelRatio : 1;\n    } // initialize\n\n\n    let _gl = _context;\n\n    function getContext(contextNames, contextAttributes) {\n      for (let i = 0; i < contextNames.length; i++) {\n        const contextName = contextNames[i];\n\n        const context = _canvas.getContext(contextName, contextAttributes);\n\n        if (context !== null) return context;\n      }\n\n      return null;\n    }\n\n    try {\n      const contextAttributes = {\n        alpha: _alpha,\n        depth: _depth,\n        stencil: _stencil,\n        antialias: _antialias,\n        premultipliedAlpha: _premultipliedAlpha,\n        preserveDrawingBuffer: _preserveDrawingBuffer,\n        powerPreference: _powerPreference,\n        failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat\n      }; // event listeners must be registered before WebGL context is created, see #12753\n\n      _canvas.addEventListener('webglcontextlost', onContextLost, false);\n\n      _canvas.addEventListener('webglcontextrestored', onContextRestore, false);\n\n      if (_gl === null) {\n        const contextNames = ['webgl2', 'webgl', 'experimental-webgl'];\n\n        if (_this.isWebGL1Renderer === true) {\n          contextNames.shift();\n        }\n\n        _gl = getContext(contextNames, contextAttributes);\n\n        if (_gl === null) {\n          if (getContext(contextNames)) {\n            throw new Error('Error creating WebGL context with your selected attributes.');\n          } else {\n            throw new Error('Error creating WebGL context.');\n          }\n        }\n      } // Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\n      if (_gl.getShaderPrecisionFormat === undefined) {\n        _gl.getShaderPrecisionFormat = function () {\n          return {\n            'rangeMin': 1,\n            'rangeMax': 1,\n            'precision': 1\n          };\n        };\n      }\n    } catch (error) {\n      console.error('THREE.WebGLRenderer: ' + error.message);\n      throw error;\n    }\n\n    let extensions, capabilities, state, info;\n    let properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;\n    let programCache, materials, renderLists, renderStates, clipping, shadowMap;\n    let background, morphtargets, bufferRenderer, indexedBufferRenderer;\n    let utils, bindingStates;\n\n    function initGLContext() {\n      extensions = new WebGLExtensions(_gl);\n      capabilities = new WebGLCapabilities(_gl, extensions, parameters);\n      extensions.init(capabilities);\n      utils = new WebGLUtils(_gl, extensions, capabilities);\n      state = new WebGLState(_gl, extensions, capabilities);\n      _currentDrawBuffers[0] = _gl.BACK;\n      info = new WebGLInfo(_gl);\n      properties = new WebGLProperties();\n      textures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);\n      cubemaps = new WebGLCubeMaps(_this);\n      cubeuvmaps = new WebGLCubeUVMaps(_this);\n      attributes = new WebGLAttributes(_gl, capabilities);\n      bindingStates = new WebGLBindingStates(_gl, extensions, attributes, capabilities);\n      geometries = new WebGLGeometries(_gl, attributes, info, bindingStates);\n      objects = new WebGLObjects(_gl, geometries, attributes, info);\n      morphtargets = new WebGLMorphtargets(_gl, capabilities, textures);\n      clipping = new WebGLClipping(properties);\n      programCache = new WebGLPrograms(_this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping);\n      materials = new WebGLMaterials(properties);\n      renderLists = new WebGLRenderLists(properties);\n      renderStates = new WebGLRenderStates(extensions, capabilities);\n      background = new WebGLBackground(_this, cubemaps, state, objects, _premultipliedAlpha);\n      shadowMap = new WebGLShadowMap(_this, objects, capabilities);\n      bufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);\n      indexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);\n      info.programs = programCache.programs;\n      _this.capabilities = capabilities;\n      _this.extensions = extensions;\n      _this.properties = properties;\n      _this.renderLists = renderLists;\n      _this.shadowMap = shadowMap;\n      _this.state = state;\n      _this.info = info;\n    }\n\n    initGLContext(); // xr\n\n    const xr = new WebXRManager(_this, _gl);\n    this.xr = xr; // API\n\n    this.getContext = function () {\n      return _gl;\n    };\n\n    this.getContextAttributes = function () {\n      return _gl.getContextAttributes();\n    };\n\n    this.forceContextLoss = function () {\n      const extension = extensions.get('WEBGL_lose_context');\n      if (extension) extension.loseContext();\n    };\n\n    this.forceContextRestore = function () {\n      const extension = extensions.get('WEBGL_lose_context');\n      if (extension) extension.restoreContext();\n    };\n\n    this.getPixelRatio = function () {\n      return _pixelRatio;\n    };\n\n    this.setPixelRatio = function (value) {\n      if (value === undefined) return;\n      _pixelRatio = value;\n      this.setSize(_width, _height, false);\n    };\n\n    this.getSize = function (target) {\n      return target.set(_width, _height);\n    };\n\n    this.setSize = function (width, height, updateStyle) {\n      if (xr.isPresenting) {\n        console.warn('THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.');\n        return;\n      }\n\n      _width = width;\n      _height = height;\n      _canvas.width = Math.floor(width * _pixelRatio);\n      _canvas.height = Math.floor(height * _pixelRatio);\n\n      if (updateStyle !== false) {\n        _canvas.style.width = width + 'px';\n        _canvas.style.height = height + 'px';\n      }\n\n      this.setViewport(0, 0, width, height);\n    };\n\n    this.getDrawingBufferSize = function (target) {\n      return target.set(_width * _pixelRatio, _height * _pixelRatio).floor();\n    };\n\n    this.setDrawingBufferSize = function (width, height, pixelRatio) {\n      _width = width;\n      _height = height;\n      _pixelRatio = pixelRatio;\n      _canvas.width = Math.floor(width * pixelRatio);\n      _canvas.height = Math.floor(height * pixelRatio);\n      this.setViewport(0, 0, width, height);\n    };\n\n    this.getCurrentViewport = function (target) {\n      return target.copy(_currentViewport);\n    };\n\n    this.getViewport = function (target) {\n      return target.copy(_viewport);\n    };\n\n    this.setViewport = function (x, y, width, height) {\n      if (x.isVector4) {\n        _viewport.set(x.x, x.y, x.z, x.w);\n      } else {\n        _viewport.set(x, y, width, height);\n      }\n\n      state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());\n    };\n\n    this.getScissor = function (target) {\n      return target.copy(_scissor);\n    };\n\n    this.setScissor = function (x, y, width, height) {\n      if (x.isVector4) {\n        _scissor.set(x.x, x.y, x.z, x.w);\n      } else {\n        _scissor.set(x, y, width, height);\n      }\n\n      state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());\n    };\n\n    this.getScissorTest = function () {\n      return _scissorTest;\n    };\n\n    this.setScissorTest = function (boolean) {\n      state.setScissorTest(_scissorTest = boolean);\n    };\n\n    this.setOpaqueSort = function (method) {\n      _opaqueSort = method;\n    };\n\n    this.setTransparentSort = function (method) {\n      _transparentSort = method;\n    }; // Clearing\n\n\n    this.getClearColor = function (target) {\n      return target.copy(background.getClearColor());\n    };\n\n    this.setClearColor = function () {\n      background.setClearColor.apply(background, arguments);\n    };\n\n    this.getClearAlpha = function () {\n      return background.getClearAlpha();\n    };\n\n    this.setClearAlpha = function () {\n      background.setClearAlpha.apply(background, arguments);\n    };\n\n    this.clear = function (color, depth, stencil) {\n      let bits = 0;\n      if (color === undefined || color) bits |= _gl.COLOR_BUFFER_BIT;\n      if (depth === undefined || depth) bits |= _gl.DEPTH_BUFFER_BIT;\n      if (stencil === undefined || stencil) bits |= _gl.STENCIL_BUFFER_BIT;\n\n      _gl.clear(bits);\n    };\n\n    this.clearColor = function () {\n      this.clear(true, false, false);\n    };\n\n    this.clearDepth = function () {\n      this.clear(false, true, false);\n    };\n\n    this.clearStencil = function () {\n      this.clear(false, false, true);\n    }; //\n\n\n    this.dispose = function () {\n      _canvas.removeEventListener('webglcontextlost', onContextLost, false);\n\n      _canvas.removeEventListener('webglcontextrestored', onContextRestore, false);\n\n      renderLists.dispose();\n      renderStates.dispose();\n      properties.dispose();\n      cubemaps.dispose();\n      cubeuvmaps.dispose();\n      objects.dispose();\n      bindingStates.dispose();\n      xr.dispose();\n      xr.removeEventListener('sessionstart', onXRSessionStart);\n      xr.removeEventListener('sessionend', onXRSessionEnd);\n\n      if (_transmissionRenderTarget) {\n        _transmissionRenderTarget.dispose();\n\n        _transmissionRenderTarget = null;\n      }\n\n      animation.stop();\n    }; // Events\n\n\n    function onContextLost(event) {\n      event.preventDefault();\n      console.log('THREE.WebGLRenderer: Context Lost.');\n      _isContextLost = true;\n    }\n\n    function onContextRestore() {\n      console.log('THREE.WebGLRenderer: Context Restored.');\n      _isContextLost = false;\n      const infoAutoReset = info.autoReset;\n      const shadowMapEnabled = shadowMap.enabled;\n      const shadowMapAutoUpdate = shadowMap.autoUpdate;\n      const shadowMapNeedsUpdate = shadowMap.needsUpdate;\n      const shadowMapType = shadowMap.type;\n      initGLContext();\n      info.autoReset = infoAutoReset;\n      shadowMap.enabled = shadowMapEnabled;\n      shadowMap.autoUpdate = shadowMapAutoUpdate;\n      shadowMap.needsUpdate = shadowMapNeedsUpdate;\n      shadowMap.type = shadowMapType;\n    }\n\n    function onMaterialDispose(event) {\n      const material = event.target;\n      material.removeEventListener('dispose', onMaterialDispose);\n      deallocateMaterial(material);\n    } // Buffer deallocation\n\n\n    function deallocateMaterial(material) {\n      releaseMaterialProgramReferences(material);\n      properties.remove(material);\n    }\n\n    function releaseMaterialProgramReferences(material) {\n      const programs = properties.get(material).programs;\n\n      if (programs !== undefined) {\n        programs.forEach(function (program) {\n          programCache.releaseProgram(program);\n        });\n      }\n    } // Buffer rendering\n\n\n    this.renderBufferDirect = function (camera, scene, geometry, material, object, group) {\n      if (scene === null) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)\n\n      const frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;\n      const program = setProgram(camera, scene, geometry, material, object);\n      state.setMaterial(material, frontFaceCW); //\n\n      let index = geometry.index;\n      const position = geometry.attributes.position; //\n\n      if (index === null) {\n        if (position === undefined || position.count === 0) return;\n      } else if (index.count === 0) {\n        return;\n      } //\n\n\n      let rangeFactor = 1;\n\n      if (material.wireframe === true) {\n        index = geometries.getWireframeAttribute(geometry);\n        rangeFactor = 2;\n      }\n\n      bindingStates.setup(object, material, program, geometry, index);\n      let attribute;\n      let renderer = bufferRenderer;\n\n      if (index !== null) {\n        attribute = attributes.get(index);\n        renderer = indexedBufferRenderer;\n        renderer.setIndex(attribute);\n      } //\n\n\n      const dataCount = index !== null ? index.count : position.count;\n      const rangeStart = geometry.drawRange.start * rangeFactor;\n      const rangeCount = geometry.drawRange.count * rangeFactor;\n      const groupStart = group !== null ? group.start * rangeFactor : 0;\n      const groupCount = group !== null ? group.count * rangeFactor : Infinity;\n      const drawStart = Math.max(rangeStart, groupStart);\n      const drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;\n      const drawCount = Math.max(0, drawEnd - drawStart + 1);\n      if (drawCount === 0) return; //\n\n      if (object.isMesh) {\n        if (material.wireframe === true) {\n          state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());\n          renderer.setMode(_gl.LINES);\n        } else {\n          renderer.setMode(_gl.TRIANGLES);\n        }\n      } else if (object.isLine) {\n        let lineWidth = material.linewidth;\n        if (lineWidth === undefined) lineWidth = 1; // Not using Line*Material\n\n        state.setLineWidth(lineWidth * getTargetPixelRatio());\n\n        if (object.isLineSegments) {\n          renderer.setMode(_gl.LINES);\n        } else if (object.isLineLoop) {\n          renderer.setMode(_gl.LINE_LOOP);\n        } else {\n          renderer.setMode(_gl.LINE_STRIP);\n        }\n      } else if (object.isPoints) {\n        renderer.setMode(_gl.POINTS);\n      } else if (object.isSprite) {\n        renderer.setMode(_gl.TRIANGLES);\n      }\n\n      if (object.isInstancedMesh) {\n        renderer.renderInstances(drawStart, drawCount, object.count);\n      } else if (geometry.isInstancedBufferGeometry) {\n        const instanceCount = Math.min(geometry.instanceCount, geometry._maxInstanceCount);\n        renderer.renderInstances(drawStart, drawCount, instanceCount);\n      } else {\n        renderer.render(drawStart, drawCount);\n      }\n    }; // Compile\n\n\n    this.compile = function (scene, camera) {\n      currentRenderState = renderStates.get(scene);\n      currentRenderState.init();\n      renderStateStack.push(currentRenderState);\n      scene.traverseVisible(function (object) {\n        if (object.isLight && object.layers.test(camera.layers)) {\n          currentRenderState.pushLight(object);\n\n          if (object.castShadow) {\n            currentRenderState.pushShadow(object);\n          }\n        }\n      });\n      currentRenderState.setupLights(_this.physicallyCorrectLights);\n      scene.traverse(function (object) {\n        const material = object.material;\n\n        if (material) {\n          if (Array.isArray(material)) {\n            for (let i = 0; i < material.length; i++) {\n              const material2 = material[i];\n              getProgram(material2, scene, object);\n            }\n          } else {\n            getProgram(material, scene, object);\n          }\n        }\n      });\n      renderStateStack.pop();\n      currentRenderState = null;\n    }; // Animation Loop\n\n\n    let onAnimationFrameCallback = null;\n\n    function onAnimationFrame(time) {\n      if (onAnimationFrameCallback) onAnimationFrameCallback(time);\n    }\n\n    function onXRSessionStart() {\n      animation.stop();\n    }\n\n    function onXRSessionEnd() {\n      animation.start();\n    }\n\n    const animation = new WebGLAnimation();\n    animation.setAnimationLoop(onAnimationFrame);\n    if (typeof window !== 'undefined') animation.setContext(window);\n\n    this.setAnimationLoop = function (callback) {\n      onAnimationFrameCallback = callback;\n      xr.setAnimationLoop(callback);\n      callback === null ? animation.stop() : animation.start();\n    };\n\n    xr.addEventListener('sessionstart', onXRSessionStart);\n    xr.addEventListener('sessionend', onXRSessionEnd); // Rendering\n\n    this.render = function (scene, camera) {\n      if (camera !== undefined && camera.isCamera !== true) {\n        console.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');\n        return;\n      }\n\n      if (_isContextLost === true) return; // update scene graph\n\n      if (scene.autoUpdate === true) scene.updateMatrixWorld(); // update camera matrices and frustum\n\n      if (camera.parent === null) camera.updateMatrixWorld();\n\n      if (xr.enabled === true && xr.isPresenting === true) {\n        if (xr.cameraAutoUpdate === true) xr.updateCamera(camera);\n        camera = xr.getCamera(); // use XR camera for rendering\n      } //\n\n\n      if (scene.isScene === true) scene.onBeforeRender(_this, scene, camera, _currentRenderTarget);\n      currentRenderState = renderStates.get(scene, renderStateStack.length);\n      currentRenderState.init();\n      renderStateStack.push(currentRenderState);\n\n      _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n      _frustum.setFromProjectionMatrix(_projScreenMatrix);\n\n      _localClippingEnabled = this.localClippingEnabled;\n      _clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera);\n      currentRenderList = renderLists.get(scene, renderListStack.length);\n      currentRenderList.init();\n      renderListStack.push(currentRenderList);\n      projectObject(scene, camera, 0, _this.sortObjects);\n      currentRenderList.finish();\n\n      if (_this.sortObjects === true) {\n        currentRenderList.sort(_opaqueSort, _transparentSort);\n      } //\n\n\n      if (_clippingEnabled === true) clipping.beginShadows();\n      const shadowsArray = currentRenderState.state.shadowsArray;\n      shadowMap.render(shadowsArray, scene, camera);\n      if (_clippingEnabled === true) clipping.endShadows(); //\n\n      if (this.info.autoReset === true) this.info.reset(); //\n\n      background.render(currentRenderList, scene); // render scene\n\n      currentRenderState.setupLights(_this.physicallyCorrectLights);\n\n      if (camera.isArrayCamera) {\n        const cameras = camera.cameras;\n\n        for (let i = 0, l = cameras.length; i < l; i++) {\n          const camera2 = cameras[i];\n          renderScene(currentRenderList, scene, camera2, camera2.viewport);\n        }\n      } else {\n        renderScene(currentRenderList, scene, camera);\n      } //\n\n\n      if (_currentRenderTarget !== null) {\n        // resolve multisample renderbuffers to a single-sample texture if necessary\n        textures.updateMultisampleRenderTarget(_currentRenderTarget); // Generate mipmap if we're using any kind of mipmap filtering\n\n        textures.updateRenderTargetMipmap(_currentRenderTarget);\n      } //\n\n\n      if (scene.isScene === true) scene.onAfterRender(_this, scene, camera); // Ensure depth buffer writing is enabled so it can be cleared on next render\n\n      state.buffers.depth.setTest(true);\n      state.buffers.depth.setMask(true);\n      state.buffers.color.setMask(true);\n      state.setPolygonOffset(false); // _gl.finish();\n\n      bindingStates.resetDefaultState();\n      _currentMaterialId = -1;\n      _currentCamera = null;\n      renderStateStack.pop();\n\n      if (renderStateStack.length > 0) {\n        currentRenderState = renderStateStack[renderStateStack.length - 1];\n      } else {\n        currentRenderState = null;\n      }\n\n      renderListStack.pop();\n\n      if (renderListStack.length > 0) {\n        currentRenderList = renderListStack[renderListStack.length - 1];\n      } else {\n        currentRenderList = null;\n      }\n    };\n\n    function projectObject(object, camera, groupOrder, sortObjects) {\n      if (object.visible === false) return;\n      const visible = object.layers.test(camera.layers);\n\n      if (visible) {\n        if (object.isGroup) {\n          groupOrder = object.renderOrder;\n        } else if (object.isLOD) {\n          if (object.autoUpdate === true) object.update(camera);\n        } else if (object.isLight) {\n          currentRenderState.pushLight(object);\n\n          if (object.castShadow) {\n            currentRenderState.pushShadow(object);\n          }\n        } else if (object.isSprite) {\n          if (!object.frustumCulled || _frustum.intersectsSprite(object)) {\n            if (sortObjects) {\n              _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n            }\n\n            const geometry = objects.update(object);\n            const material = object.material;\n\n            if (material.visible) {\n              currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);\n            }\n          }\n        } else if (object.isMesh || object.isLine || object.isPoints) {\n          if (object.isSkinnedMesh) {\n            // update skeleton only once in a frame\n            if (object.skeleton.frame !== info.render.frame) {\n              object.skeleton.update();\n              object.skeleton.frame = info.render.frame;\n            }\n          }\n\n          if (!object.frustumCulled || _frustum.intersectsObject(object)) {\n            if (sortObjects) {\n              _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n            }\n\n            const geometry = objects.update(object);\n            const material = object.material;\n\n            if (Array.isArray(material)) {\n              const groups = geometry.groups;\n\n              for (let i = 0, l = groups.length; i < l; i++) {\n                const group = groups[i];\n                const groupMaterial = material[group.materialIndex];\n\n                if (groupMaterial && groupMaterial.visible) {\n                  currentRenderList.push(object, geometry, groupMaterial, groupOrder, _vector3.z, group);\n                }\n              }\n            } else if (material.visible) {\n              currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);\n            }\n          }\n        }\n      }\n\n      const children = object.children;\n\n      for (let i = 0, l = children.length; i < l; i++) {\n        projectObject(children[i], camera, groupOrder, sortObjects);\n      }\n    }\n\n    function renderScene(currentRenderList, scene, camera, viewport) {\n      const opaqueObjects = currentRenderList.opaque;\n      const transmissiveObjects = currentRenderList.transmissive;\n      const transparentObjects = currentRenderList.transparent;\n      currentRenderState.setupLightsView(camera);\n      if (transmissiveObjects.length > 0) renderTransmissionPass(opaqueObjects, scene, camera);\n      if (viewport) state.viewport(_currentViewport.copy(viewport));\n      if (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene, camera);\n      if (transmissiveObjects.length > 0) renderObjects(transmissiveObjects, scene, camera);\n      if (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera);\n    }\n\n    function renderTransmissionPass(opaqueObjects, scene, camera) {\n      if (_transmissionRenderTarget === null) {\n        const needsAntialias = _antialias === true && capabilities.isWebGL2 === true;\n        const renderTargetType = needsAntialias ? WebGLMultisampleRenderTarget : WebGLRenderTarget;\n        _transmissionRenderTarget = new renderTargetType(1024, 1024, {\n          generateMipmaps: true,\n          type: utils.convert(HalfFloatType) !== null ? HalfFloatType : UnsignedByteType,\n          minFilter: LinearMipmapLinearFilter,\n          magFilter: NearestFilter,\n          wrapS: ClampToEdgeWrapping,\n          wrapT: ClampToEdgeWrapping\n        });\n      }\n\n      const currentRenderTarget = _this.getRenderTarget();\n\n      _this.setRenderTarget(_transmissionRenderTarget);\n\n      _this.clear(); // Turn off the features which can affect the frag color for opaque objects pass.\n      // Otherwise they are applied twice in opaque objects pass and transmission objects pass.\n\n\n      const currentToneMapping = _this.toneMapping;\n      _this.toneMapping = NoToneMapping;\n      renderObjects(opaqueObjects, scene, camera);\n      _this.toneMapping = currentToneMapping;\n      textures.updateMultisampleRenderTarget(_transmissionRenderTarget);\n      textures.updateRenderTargetMipmap(_transmissionRenderTarget);\n\n      _this.setRenderTarget(currentRenderTarget);\n    }\n\n    function renderObjects(renderList, scene, camera) {\n      const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n\n      for (let i = 0, l = renderList.length; i < l; i++) {\n        const renderItem = renderList[i];\n        const object = renderItem.object;\n        const geometry = renderItem.geometry;\n        const material = overrideMaterial === null ? renderItem.material : overrideMaterial;\n        const group = renderItem.group;\n\n        if (object.layers.test(camera.layers)) {\n          renderObject(object, scene, camera, geometry, material, group);\n        }\n      }\n    }\n\n    function renderObject(object, scene, camera, geometry, material, group) {\n      object.onBeforeRender(_this, scene, camera, geometry, material, group);\n      object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n      object.normalMatrix.getNormalMatrix(object.modelViewMatrix);\n      material.onBeforeRender(_this, scene, camera, geometry, object, group);\n\n      if (material.transparent === true && material.side === DoubleSide) {\n        material.side = BackSide;\n        material.needsUpdate = true;\n\n        _this.renderBufferDirect(camera, scene, geometry, material, object, group);\n\n        material.side = FrontSide;\n        material.needsUpdate = true;\n\n        _this.renderBufferDirect(camera, scene, geometry, material, object, group);\n\n        material.side = DoubleSide;\n      } else {\n        _this.renderBufferDirect(camera, scene, geometry, material, object, group);\n      }\n\n      object.onAfterRender(_this, scene, camera, geometry, material, group);\n    }\n\n    function getProgram(material, scene, object) {\n      if (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n      const materialProperties = properties.get(material);\n      const lights = currentRenderState.state.lights;\n      const shadowsArray = currentRenderState.state.shadowsArray;\n      const lightsStateVersion = lights.state.version;\n      const parameters = programCache.getParameters(material, lights.state, shadowsArray, scene, object);\n      const programCacheKey = programCache.getProgramCacheKey(parameters);\n      let programs = materialProperties.programs; // always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change\n\n      materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n      materialProperties.fog = scene.fog;\n      materialProperties.envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || materialProperties.environment);\n\n      if (programs === undefined) {\n        // new material\n        material.addEventListener('dispose', onMaterialDispose);\n        programs = new Map();\n        materialProperties.programs = programs;\n      }\n\n      let program = programs.get(programCacheKey);\n\n      if (program !== undefined) {\n        // early out if program and light state is identical\n        if (materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion) {\n          updateCommonMaterialProperties(material, parameters);\n          return program;\n        }\n      } else {\n        parameters.uniforms = programCache.getUniforms(material);\n        material.onBuild(object, parameters, _this);\n        material.onBeforeCompile(parameters, _this);\n        program = programCache.acquireProgram(parameters, programCacheKey);\n        programs.set(programCacheKey, program);\n        materialProperties.uniforms = parameters.uniforms;\n      }\n\n      const uniforms = materialProperties.uniforms;\n\n      if (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {\n        uniforms.clippingPlanes = clipping.uniform;\n      }\n\n      updateCommonMaterialProperties(material, parameters); // store the light setup it was created for\n\n      materialProperties.needsLights = materialNeedsLights(material);\n      materialProperties.lightsStateVersion = lightsStateVersion;\n\n      if (materialProperties.needsLights) {\n        // wire up the material to this renderer's lighting state\n        uniforms.ambientLightColor.value = lights.state.ambient;\n        uniforms.lightProbe.value = lights.state.probe;\n        uniforms.directionalLights.value = lights.state.directional;\n        uniforms.directionalLightShadows.value = lights.state.directionalShadow;\n        uniforms.spotLights.value = lights.state.spot;\n        uniforms.spotLightShadows.value = lights.state.spotShadow;\n        uniforms.rectAreaLights.value = lights.state.rectArea;\n        uniforms.ltc_1.value = lights.state.rectAreaLTC1;\n        uniforms.ltc_2.value = lights.state.rectAreaLTC2;\n        uniforms.pointLights.value = lights.state.point;\n        uniforms.pointLightShadows.value = lights.state.pointShadow;\n        uniforms.hemisphereLights.value = lights.state.hemi;\n        uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n        uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n        uniforms.spotShadowMap.value = lights.state.spotShadowMap;\n        uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n        uniforms.pointShadowMap.value = lights.state.pointShadowMap;\n        uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix; // TODO (abelnation): add area lights shadow info to uniforms\n      }\n\n      const progUniforms = program.getUniforms();\n      const uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);\n      materialProperties.currentProgram = program;\n      materialProperties.uniformsList = uniformsList;\n      return program;\n    }\n\n    function updateCommonMaterialProperties(material, parameters) {\n      const materialProperties = properties.get(material);\n      materialProperties.outputEncoding = parameters.outputEncoding;\n      materialProperties.instancing = parameters.instancing;\n      materialProperties.skinning = parameters.skinning;\n      materialProperties.morphTargets = parameters.morphTargets;\n      materialProperties.morphNormals = parameters.morphNormals;\n      materialProperties.morphTargetsCount = parameters.morphTargetsCount;\n      materialProperties.numClippingPlanes = parameters.numClippingPlanes;\n      materialProperties.numIntersection = parameters.numClipIntersection;\n      materialProperties.vertexAlphas = parameters.vertexAlphas;\n      materialProperties.vertexTangents = parameters.vertexTangents;\n    }\n\n    function setProgram(camera, scene, geometry, material, object) {\n      if (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n      textures.resetTextureUnits();\n      const fog = scene.fog;\n      const environment = material.isMeshStandardMaterial ? scene.environment : null;\n      const encoding = _currentRenderTarget === null ? _this.outputEncoding : _currentRenderTarget.texture.encoding;\n      const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);\n      const vertexAlphas = material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4;\n      const vertexTangents = !!material.normalMap && !!geometry.attributes.tangent;\n      const morphTargets = !!geometry.morphAttributes.position;\n      const morphNormals = !!geometry.morphAttributes.normal;\n      const morphTargetsCount = !!geometry.morphAttributes.position ? geometry.morphAttributes.position.length : 0;\n      const materialProperties = properties.get(material);\n      const lights = currentRenderState.state.lights;\n\n      if (_clippingEnabled === true) {\n        if (_localClippingEnabled === true || camera !== _currentCamera) {\n          const useCache = camera === _currentCamera && material.id === _currentMaterialId; // we might want to call this function with some ClippingGroup\n          // object instead of the material, once it becomes feasible\n          // (#8465, #8379)\n\n          clipping.setState(material, camera, useCache);\n        }\n      } //\n\n\n      let needsProgramChange = false;\n\n      if (material.version === materialProperties.__version) {\n        if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {\n          needsProgramChange = true;\n        } else if (materialProperties.outputEncoding !== encoding) {\n          needsProgramChange = true;\n        } else if (object.isInstancedMesh && materialProperties.instancing === false) {\n          needsProgramChange = true;\n        } else if (!object.isInstancedMesh && materialProperties.instancing === true) {\n          needsProgramChange = true;\n        } else if (object.isSkinnedMesh && materialProperties.skinning === false) {\n          needsProgramChange = true;\n        } else if (!object.isSkinnedMesh && materialProperties.skinning === true) {\n          needsProgramChange = true;\n        } else if (materialProperties.envMap !== envMap) {\n          needsProgramChange = true;\n        } else if (material.fog && materialProperties.fog !== fog) {\n          needsProgramChange = true;\n        } else if (materialProperties.numClippingPlanes !== undefined && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {\n          needsProgramChange = true;\n        } else if (materialProperties.vertexAlphas !== vertexAlphas) {\n          needsProgramChange = true;\n        } else if (materialProperties.vertexTangents !== vertexTangents) {\n          needsProgramChange = true;\n        } else if (materialProperties.morphTargets !== morphTargets) {\n          needsProgramChange = true;\n        } else if (materialProperties.morphNormals !== morphNormals) {\n          needsProgramChange = true;\n        } else if (capabilities.isWebGL2 === true && materialProperties.morphTargetsCount !== morphTargetsCount) {\n          needsProgramChange = true;\n        }\n      } else {\n        needsProgramChange = true;\n        materialProperties.__version = material.version;\n      } //\n\n\n      let program = materialProperties.currentProgram;\n\n      if (needsProgramChange === true) {\n        program = getProgram(material, scene, object);\n      }\n\n      let refreshProgram = false;\n      let refreshMaterial = false;\n      let refreshLights = false;\n      const p_uniforms = program.getUniforms(),\n            m_uniforms = materialProperties.uniforms;\n\n      if (state.useProgram(program.program)) {\n        refreshProgram = true;\n        refreshMaterial = true;\n        refreshLights = true;\n      }\n\n      if (material.id !== _currentMaterialId) {\n        _currentMaterialId = material.id;\n        refreshMaterial = true;\n      }\n\n      if (refreshProgram || _currentCamera !== camera) {\n        p_uniforms.setValue(_gl, 'projectionMatrix', camera.projectionMatrix);\n\n        if (capabilities.logarithmicDepthBuffer) {\n          p_uniforms.setValue(_gl, 'logDepthBufFC', 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));\n        }\n\n        if (_currentCamera !== camera) {\n          _currentCamera = camera; // lighting uniforms depend on the camera so enforce an update\n          // now, in case this material supports lights - or later, when\n          // the next material that does gets activated:\n\n          refreshMaterial = true; // set to true on material change\n\n          refreshLights = true; // remains set until update done\n        } // load material specific uniforms\n        // (shader material also gets them for the sake of genericity)\n\n\n        if (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {\n          const uCamPos = p_uniforms.map.cameraPosition;\n\n          if (uCamPos !== undefined) {\n            uCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));\n          }\n        }\n\n        if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {\n          p_uniforms.setValue(_gl, 'isOrthographic', camera.isOrthographicCamera === true);\n        }\n\n        if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || object.isSkinnedMesh) {\n          p_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);\n        }\n      } // skinning and morph target uniforms must be set even if material didn't change\n      // auto-setting of texture unit for bone and morph texture must go before other textures\n      // otherwise textures used for skinning and morphing can take over texture units reserved for other material textures\n\n\n      if (object.isSkinnedMesh) {\n        p_uniforms.setOptional(_gl, object, 'bindMatrix');\n        p_uniforms.setOptional(_gl, object, 'bindMatrixInverse');\n        const skeleton = object.skeleton;\n\n        if (skeleton) {\n          if (capabilities.floatVertexTextures) {\n            if (skeleton.boneTexture === null) skeleton.computeBoneTexture();\n            p_uniforms.setValue(_gl, 'boneTexture', skeleton.boneTexture, textures);\n            p_uniforms.setValue(_gl, 'boneTextureSize', skeleton.boneTextureSize);\n          } else {\n            p_uniforms.setOptional(_gl, skeleton, 'boneMatrices');\n          }\n        }\n      }\n\n      if (!!geometry && (geometry.morphAttributes.position !== undefined || geometry.morphAttributes.normal !== undefined)) {\n        morphtargets.update(object, geometry, material, program);\n      }\n\n      if (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {\n        materialProperties.receiveShadow = object.receiveShadow;\n        p_uniforms.setValue(_gl, 'receiveShadow', object.receiveShadow);\n      }\n\n      if (refreshMaterial) {\n        p_uniforms.setValue(_gl, 'toneMappingExposure', _this.toneMappingExposure);\n\n        if (materialProperties.needsLights) {\n          // the current material requires lighting info\n          // note: all lighting uniforms are always set correctly\n          // they simply reference the renderer's state for their\n          // values\n          //\n          // use the current material's .needsUpdate flags to set\n          // the GL state when required\n          markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);\n        } // refresh uniforms common to several materials\n\n\n        if (fog && material.fog) {\n          materials.refreshFogUniforms(m_uniforms, fog);\n        }\n\n        materials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget);\n        WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n      }\n\n      if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {\n        WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n        material.uniformsNeedUpdate = false;\n      }\n\n      if (material.isSpriteMaterial) {\n        p_uniforms.setValue(_gl, 'center', object.center);\n      } // common matrices\n\n\n      p_uniforms.setValue(_gl, 'modelViewMatrix', object.modelViewMatrix);\n      p_uniforms.setValue(_gl, 'normalMatrix', object.normalMatrix);\n      p_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld);\n      return program;\n    } // If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\n    function markUniformsLightsNeedsUpdate(uniforms, value) {\n      uniforms.ambientLightColor.needsUpdate = value;\n      uniforms.lightProbe.needsUpdate = value;\n      uniforms.directionalLights.needsUpdate = value;\n      uniforms.directionalLightShadows.needsUpdate = value;\n      uniforms.pointLights.needsUpdate = value;\n      uniforms.pointLightShadows.needsUpdate = value;\n      uniforms.spotLights.needsUpdate = value;\n      uniforms.spotLightShadows.needsUpdate = value;\n      uniforms.rectAreaLights.needsUpdate = value;\n      uniforms.hemisphereLights.needsUpdate = value;\n    }\n\n    function materialNeedsLights(material) {\n      return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;\n    }\n\n    this.getActiveCubeFace = function () {\n      return _currentActiveCubeFace;\n    };\n\n    this.getActiveMipmapLevel = function () {\n      return _currentActiveMipmapLevel;\n    };\n\n    this.getRenderTarget = function () {\n      return _currentRenderTarget;\n    };\n\n    this.setRenderTarget = function (renderTarget) {\n      let activeCubeFace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      let activeMipmapLevel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      _currentRenderTarget = renderTarget;\n      _currentActiveCubeFace = activeCubeFace;\n      _currentActiveMipmapLevel = activeMipmapLevel;\n\n      if (renderTarget && properties.get(renderTarget).__webglFramebuffer === undefined) {\n        textures.setupRenderTarget(renderTarget);\n      }\n\n      let framebuffer = null;\n      let isCube = false;\n      let isRenderTarget3D = false;\n\n      if (renderTarget) {\n        const texture = renderTarget.texture;\n\n        if (texture.isDataTexture3D || texture.isDataTexture2DArray) {\n          isRenderTarget3D = true;\n        }\n\n        const __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n        if (renderTarget.isWebGLCubeRenderTarget) {\n          framebuffer = __webglFramebuffer[activeCubeFace];\n          isCube = true;\n        } else if (renderTarget.isWebGLMultisampleRenderTarget) {\n          framebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;\n        } else {\n          framebuffer = __webglFramebuffer;\n        }\n\n        _currentViewport.copy(renderTarget.viewport);\n\n        _currentScissor.copy(renderTarget.scissor);\n\n        _currentScissorTest = renderTarget.scissorTest;\n      } else {\n        _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();\n\n        _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();\n\n        _currentScissorTest = _scissorTest;\n      }\n\n      const framebufferBound = state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n      if (framebufferBound && capabilities.drawBuffers) {\n        let needsUpdate = false;\n\n        if (renderTarget) {\n          if (renderTarget.isWebGLMultipleRenderTargets) {\n            const textures = renderTarget.texture;\n\n            if (_currentDrawBuffers.length !== textures.length || _currentDrawBuffers[0] !== _gl.COLOR_ATTACHMENT0) {\n              for (let i = 0, il = textures.length; i < il; i++) {\n                _currentDrawBuffers[i] = _gl.COLOR_ATTACHMENT0 + i;\n              }\n\n              _currentDrawBuffers.length = textures.length;\n              needsUpdate = true;\n            }\n          } else {\n            if (_currentDrawBuffers.length !== 1 || _currentDrawBuffers[0] !== _gl.COLOR_ATTACHMENT0) {\n              _currentDrawBuffers[0] = _gl.COLOR_ATTACHMENT0;\n              _currentDrawBuffers.length = 1;\n              needsUpdate = true;\n            }\n          }\n        } else {\n          if (_currentDrawBuffers.length !== 1 || _currentDrawBuffers[0] !== _gl.BACK) {\n            _currentDrawBuffers[0] = _gl.BACK;\n            _currentDrawBuffers.length = 1;\n            needsUpdate = true;\n          }\n        }\n\n        if (needsUpdate) {\n          if (capabilities.isWebGL2) {\n            _gl.drawBuffers(_currentDrawBuffers);\n          } else {\n            extensions.get('WEBGL_draw_buffers').drawBuffersWEBGL(_currentDrawBuffers);\n          }\n        }\n      }\n\n      state.viewport(_currentViewport);\n      state.scissor(_currentScissor);\n      state.setScissorTest(_currentScissorTest);\n\n      if (isCube) {\n        const textureProperties = properties.get(renderTarget.texture);\n\n        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);\n      } else if (isRenderTarget3D) {\n        const textureProperties = properties.get(renderTarget.texture);\n        const layer = activeCubeFace || 0;\n\n        _gl.framebufferTextureLayer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel || 0, layer);\n      }\n\n      _currentMaterialId = -1; // reset current material to ensure correct uniform bindings\n    };\n\n    this.readRenderTargetPixels = function (renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {\n      if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {\n        console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');\n        return;\n      }\n\n      let framebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n      if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined) {\n        framebuffer = framebuffer[activeCubeFaceIndex];\n      }\n\n      if (framebuffer) {\n        state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n        try {\n          const texture = renderTarget.texture;\n          const textureFormat = texture.format;\n          const textureType = texture.type;\n\n          if (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_FORMAT)) {\n            console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');\n            return;\n          }\n\n          const halfFloatSupportedByExt = textureType === HalfFloatType && (extensions.has('EXT_color_buffer_half_float') || capabilities.isWebGL2 && extensions.has('EXT_color_buffer_float'));\n\n          if (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)\n          !(textureType === FloatType && (capabilities.isWebGL2 || extensions.has('OES_texture_float') || extensions.has('WEBGL_color_buffer_float'))) && // Chrome Mac >= 52 and Firefox\n          !halfFloatSupportedByExt) {\n            console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');\n            return;\n          }\n\n          if (_gl.checkFramebufferStatus(_gl.FRAMEBUFFER) === _gl.FRAMEBUFFER_COMPLETE) {\n            // the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n            if (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) {\n              _gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);\n            }\n          } else {\n            console.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');\n          }\n        } finally {\n          // restore framebuffer of current render target if necessary\n          const framebuffer = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;\n          state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n        }\n      }\n    };\n\n    this.copyFramebufferToTexture = function (position, texture) {\n      let level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      const levelScale = Math.pow(2, -level);\n      const width = Math.floor(texture.image.width * levelScale);\n      const height = Math.floor(texture.image.height * levelScale);\n      let glFormat = utils.convert(texture.format);\n\n      if (capabilities.isWebGL2) {\n        // Workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=1120100\n        // Not needed in Chrome 93+\n        if (glFormat === _gl.RGB) glFormat = _gl.RGB8;\n        if (glFormat === _gl.RGBA) glFormat = _gl.RGBA8;\n      }\n\n      textures.setTexture2D(texture, 0);\n\n      _gl.copyTexImage2D(_gl.TEXTURE_2D, level, glFormat, position.x, position.y, width, height, 0);\n\n      state.unbindTexture();\n    };\n\n    this.copyTextureToTexture = function (position, srcTexture, dstTexture) {\n      let level = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      const width = srcTexture.image.width;\n      const height = srcTexture.image.height;\n      const glFormat = utils.convert(dstTexture.format);\n      const glType = utils.convert(dstTexture.type);\n      textures.setTexture2D(dstTexture, 0); // As another texture upload may have changed pixelStorei\n      // parameters, make sure they are correct for the dstTexture\n\n      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);\n\n      _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);\n\n      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);\n\n      if (srcTexture.isDataTexture) {\n        _gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);\n      } else {\n        if (srcTexture.isCompressedTexture) {\n          _gl.compressedTexSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);\n        } else {\n          _gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, glFormat, glType, srcTexture.image);\n        }\n      } // Generate mipmaps only when copying level 0\n\n\n      if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(_gl.TEXTURE_2D);\n      state.unbindTexture();\n    };\n\n    this.copyTextureToTexture3D = function (sourceBox, position, srcTexture, dstTexture) {\n      let level = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n\n      if (_this.isWebGL1Renderer) {\n        console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.');\n        return;\n      }\n\n      const width = sourceBox.max.x - sourceBox.min.x + 1;\n      const height = sourceBox.max.y - sourceBox.min.y + 1;\n      const depth = sourceBox.max.z - sourceBox.min.z + 1;\n      const glFormat = utils.convert(dstTexture.format);\n      const glType = utils.convert(dstTexture.type);\n      let glTarget;\n\n      if (dstTexture.isDataTexture3D) {\n        textures.setTexture3D(dstTexture, 0);\n        glTarget = _gl.TEXTURE_3D;\n      } else if (dstTexture.isDataTexture2DArray) {\n        textures.setTexture2DArray(dstTexture, 0);\n        glTarget = _gl.TEXTURE_2D_ARRAY;\n      } else {\n        console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.');\n        return;\n      }\n\n      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);\n\n      _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);\n\n      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);\n\n      const unpackRowLen = _gl.getParameter(_gl.UNPACK_ROW_LENGTH);\n\n      const unpackImageHeight = _gl.getParameter(_gl.UNPACK_IMAGE_HEIGHT);\n\n      const unpackSkipPixels = _gl.getParameter(_gl.UNPACK_SKIP_PIXELS);\n\n      const unpackSkipRows = _gl.getParameter(_gl.UNPACK_SKIP_ROWS);\n\n      const unpackSkipImages = _gl.getParameter(_gl.UNPACK_SKIP_IMAGES);\n\n      const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[0] : srcTexture.image;\n\n      _gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, image.width);\n\n      _gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, image.height);\n\n      _gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, sourceBox.min.x);\n\n      _gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, sourceBox.min.y);\n\n      _gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, sourceBox.min.z);\n\n      if (srcTexture.isDataTexture || srcTexture.isDataTexture3D) {\n        _gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image.data);\n      } else {\n        if (srcTexture.isCompressedTexture) {\n          console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.');\n\n          _gl.compressedTexSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, image.data);\n        } else {\n          _gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image);\n        }\n      }\n\n      _gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, unpackRowLen);\n\n      _gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, unpackImageHeight);\n\n      _gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, unpackSkipPixels);\n\n      _gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, unpackSkipRows);\n\n      _gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, unpackSkipImages); // Generate mipmaps only when copying level 0\n\n\n      if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(glTarget);\n      state.unbindTexture();\n    };\n\n    this.initTexture = function (texture) {\n      textures.setTexture2D(texture, 0);\n      state.unbindTexture();\n    };\n\n    this.resetState = function () {\n      _currentActiveCubeFace = 0;\n      _currentActiveMipmapLevel = 0;\n      _currentRenderTarget = null;\n      state.reset();\n      bindingStates.reset();\n    };\n\n    if (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n      __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n        detail: this\n      })); // eslint-disable-line no-undef\n\n    }\n  }\n\n  WebGLRenderer.prototype.isWebGLRenderer = true;\n\n  class WebGL1Renderer extends WebGLRenderer {}\n\n  WebGL1Renderer.prototype.isWebGL1Renderer = true;\n\n  class FogExp2 {\n    constructor(color) {\n      let density = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.00025;\n      this.name = '';\n      this.color = new Color(color);\n      this.density = density;\n    }\n\n    clone() {\n      return new FogExp2(this.color, this.density);\n    }\n\n    toJSON() {\n      return {\n        type: 'FogExp2',\n        color: this.color.getHex(),\n        density: this.density\n      };\n    }\n\n  }\n\n  FogExp2.prototype.isFogExp2 = true;\n\n  class Fog {\n    constructor(color) {\n      let near = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      let far = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1000;\n      this.name = '';\n      this.color = new Color(color);\n      this.near = near;\n      this.far = far;\n    }\n\n    clone() {\n      return new Fog(this.color, this.near, this.far);\n    }\n\n    toJSON() {\n      return {\n        type: 'Fog',\n        color: this.color.getHex(),\n        near: this.near,\n        far: this.far\n      };\n    }\n\n  }\n\n  Fog.prototype.isFog = true;\n\n  class Scene extends Object3D {\n    constructor() {\n      super();\n      this.type = 'Scene';\n      this.background = null;\n      this.environment = null;\n      this.fog = null;\n      this.overrideMaterial = null;\n      this.autoUpdate = true; // checked by the renderer\n\n      if (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n        __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n          detail: this\n        })); // eslint-disable-line no-undef\n\n      }\n    }\n\n    copy(source, recursive) {\n      super.copy(source, recursive);\n      if (source.background !== null) this.background = source.background.clone();\n      if (source.environment !== null) this.environment = source.environment.clone();\n      if (source.fog !== null) this.fog = source.fog.clone();\n      if (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();\n      this.autoUpdate = source.autoUpdate;\n      this.matrixAutoUpdate = source.matrixAutoUpdate;\n      return this;\n    }\n\n    toJSON(meta) {\n      const data = super.toJSON(meta);\n      if (this.fog !== null) data.object.fog = this.fog.toJSON();\n      return data;\n    }\n\n  }\n\n  Scene.prototype.isScene = true;\n\n  class InterleavedBuffer {\n    constructor(array, stride) {\n      this.array = array;\n      this.stride = stride;\n      this.count = array !== undefined ? array.length / stride : 0;\n      this.usage = StaticDrawUsage;\n      this.updateRange = {\n        offset: 0,\n        count: -1\n      };\n      this.version = 0;\n      this.uuid = generateUUID();\n    }\n\n    onUploadCallback() {}\n\n    set needsUpdate(value) {\n      if (value === true) this.version++;\n    }\n\n    setUsage(value) {\n      this.usage = value;\n      return this;\n    }\n\n    copy(source) {\n      this.array = new source.array.constructor(source.array);\n      this.count = source.count;\n      this.stride = source.stride;\n      this.usage = source.usage;\n      return this;\n    }\n\n    copyAt(index1, attribute, index2) {\n      index1 *= this.stride;\n      index2 *= attribute.stride;\n\n      for (let i = 0, l = this.stride; i < l; i++) {\n        this.array[index1 + i] = attribute.array[index2 + i];\n      }\n\n      return this;\n    }\n\n    set(value) {\n      let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      this.array.set(value, offset);\n      return this;\n    }\n\n    clone(data) {\n      if (data.arrayBuffers === undefined) {\n        data.arrayBuffers = {};\n      }\n\n      if (this.array.buffer._uuid === undefined) {\n        this.array.buffer._uuid = generateUUID();\n      }\n\n      if (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n        data.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;\n      }\n\n      const array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);\n      const ib = new this.constructor(array, this.stride);\n      ib.setUsage(this.usage);\n      return ib;\n    }\n\n    onUpload(callback) {\n      this.onUploadCallback = callback;\n      return this;\n    }\n\n    toJSON(data) {\n      if (data.arrayBuffers === undefined) {\n        data.arrayBuffers = {};\n      } // generate UUID for array buffer if necessary\n\n\n      if (this.array.buffer._uuid === undefined) {\n        this.array.buffer._uuid = generateUUID();\n      }\n\n      if (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n        data.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer));\n      } //\n\n\n      return {\n        uuid: this.uuid,\n        buffer: this.array.buffer._uuid,\n        type: this.array.constructor.name,\n        stride: this.stride\n      };\n    }\n\n  }\n\n  InterleavedBuffer.prototype.isInterleavedBuffer = true;\n\n  const _vector$6 = /*@__PURE__*/new Vector3();\n\n  class InterleavedBufferAttribute {\n    constructor(interleavedBuffer, itemSize, offset) {\n      let normalized = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      this.name = '';\n      this.data = interleavedBuffer;\n      this.itemSize = itemSize;\n      this.offset = offset;\n      this.normalized = normalized === true;\n    }\n\n    get count() {\n      return this.data.count;\n    }\n\n    get array() {\n      return this.data.array;\n    }\n\n    set needsUpdate(value) {\n      this.data.needsUpdate = value;\n    }\n\n    applyMatrix4(m) {\n      for (let i = 0, l = this.data.count; i < l; i++) {\n        _vector$6.x = this.getX(i);\n        _vector$6.y = this.getY(i);\n        _vector$6.z = this.getZ(i);\n\n        _vector$6.applyMatrix4(m);\n\n        this.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\n      }\n\n      return this;\n    }\n\n    applyNormalMatrix(m) {\n      for (let i = 0, l = this.count; i < l; i++) {\n        _vector$6.x = this.getX(i);\n        _vector$6.y = this.getY(i);\n        _vector$6.z = this.getZ(i);\n\n        _vector$6.applyNormalMatrix(m);\n\n        this.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\n      }\n\n      return this;\n    }\n\n    transformDirection(m) {\n      for (let i = 0, l = this.count; i < l; i++) {\n        _vector$6.x = this.getX(i);\n        _vector$6.y = this.getY(i);\n        _vector$6.z = this.getZ(i);\n\n        _vector$6.transformDirection(m);\n\n        this.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\n      }\n\n      return this;\n    }\n\n    setX(index, x) {\n      this.data.array[index * this.data.stride + this.offset] = x;\n      return this;\n    }\n\n    setY(index, y) {\n      this.data.array[index * this.data.stride + this.offset + 1] = y;\n      return this;\n    }\n\n    setZ(index, z) {\n      this.data.array[index * this.data.stride + this.offset + 2] = z;\n      return this;\n    }\n\n    setW(index, w) {\n      this.data.array[index * this.data.stride + this.offset + 3] = w;\n      return this;\n    }\n\n    getX(index) {\n      return this.data.array[index * this.data.stride + this.offset];\n    }\n\n    getY(index) {\n      return this.data.array[index * this.data.stride + this.offset + 1];\n    }\n\n    getZ(index) {\n      return this.data.array[index * this.data.stride + this.offset + 2];\n    }\n\n    getW(index) {\n      return this.data.array[index * this.data.stride + this.offset + 3];\n    }\n\n    setXY(index, x, y) {\n      index = index * this.data.stride + this.offset;\n      this.data.array[index + 0] = x;\n      this.data.array[index + 1] = y;\n      return this;\n    }\n\n    setXYZ(index, x, y, z) {\n      index = index * this.data.stride + this.offset;\n      this.data.array[index + 0] = x;\n      this.data.array[index + 1] = y;\n      this.data.array[index + 2] = z;\n      return this;\n    }\n\n    setXYZW(index, x, y, z, w) {\n      index = index * this.data.stride + this.offset;\n      this.data.array[index + 0] = x;\n      this.data.array[index + 1] = y;\n      this.data.array[index + 2] = z;\n      this.data.array[index + 3] = w;\n      return this;\n    }\n\n    clone(data) {\n      if (data === undefined) {\n        console.log('THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.');\n        const array = [];\n\n        for (let i = 0; i < this.count; i++) {\n          const index = i * this.data.stride + this.offset;\n\n          for (let j = 0; j < this.itemSize; j++) {\n            array.push(this.data.array[index + j]);\n          }\n        }\n\n        return new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);\n      } else {\n        if (data.interleavedBuffers === undefined) {\n          data.interleavedBuffers = {};\n        }\n\n        if (data.interleavedBuffers[this.data.uuid] === undefined) {\n          data.interleavedBuffers[this.data.uuid] = this.data.clone(data);\n        }\n\n        return new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);\n      }\n    }\n\n    toJSON(data) {\n      if (data === undefined) {\n        console.log('THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.');\n        const array = [];\n\n        for (let i = 0; i < this.count; i++) {\n          const index = i * this.data.stride + this.offset;\n\n          for (let j = 0; j < this.itemSize; j++) {\n            array.push(this.data.array[index + j]);\n          }\n        } // deinterleave data and save it as an ordinary buffer attribute for now\n\n\n        return {\n          itemSize: this.itemSize,\n          type: this.array.constructor.name,\n          array: array,\n          normalized: this.normalized\n        };\n      } else {\n        // save as true interlaved attribtue\n        if (data.interleavedBuffers === undefined) {\n          data.interleavedBuffers = {};\n        }\n\n        if (data.interleavedBuffers[this.data.uuid] === undefined) {\n          data.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);\n        }\n\n        return {\n          isInterleavedBufferAttribute: true,\n          itemSize: this.itemSize,\n          data: this.data.uuid,\n          offset: this.offset,\n          normalized: this.normalized\n        };\n      }\n    }\n\n  }\n\n  InterleavedBufferAttribute.prototype.isInterleavedBufferAttribute = true;\n  /**\n   * parameters = {\n   *\tcolor: <hex>,\n   *\tmap: new THREE.Texture( <Image> ),\n   *\talphaMap: new THREE.Texture( <Image> ),\n   *\trotation: <float>,\n   *\tsizeAttenuation: <bool>\n   * }\n   */\n\n  class SpriteMaterial extends Material {\n    constructor(parameters) {\n      super();\n      this.type = 'SpriteMaterial';\n      this.color = new Color(0xffffff);\n      this.map = null;\n      this.alphaMap = null;\n      this.rotation = 0;\n      this.sizeAttenuation = true;\n      this.transparent = true;\n      this.setValues(parameters);\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.color.copy(source.color);\n      this.map = source.map;\n      this.alphaMap = source.alphaMap;\n      this.rotation = source.rotation;\n      this.sizeAttenuation = source.sizeAttenuation;\n      return this;\n    }\n\n  }\n\n  SpriteMaterial.prototype.isSpriteMaterial = true;\n\n  let _geometry;\n\n  const _intersectPoint = /*@__PURE__*/new Vector3();\n\n  const _worldScale = /*@__PURE__*/new Vector3();\n\n  const _mvPosition = /*@__PURE__*/new Vector3();\n\n  const _alignedPosition = /*@__PURE__*/new Vector2();\n\n  const _rotatedPosition = /*@__PURE__*/new Vector2();\n\n  const _viewWorldMatrix = /*@__PURE__*/new Matrix4();\n\n  const _vA = /*@__PURE__*/new Vector3();\n\n  const _vB = /*@__PURE__*/new Vector3();\n\n  const _vC = /*@__PURE__*/new Vector3();\n\n  const _uvA = /*@__PURE__*/new Vector2();\n\n  const _uvB = /*@__PURE__*/new Vector2();\n\n  const _uvC = /*@__PURE__*/new Vector2();\n\n  class Sprite extends Object3D {\n    constructor(material) {\n      super();\n      this.type = 'Sprite';\n\n      if (_geometry === undefined) {\n        _geometry = new BufferGeometry();\n        const float32Array = new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]);\n        const interleavedBuffer = new InterleavedBuffer(float32Array, 5);\n\n        _geometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n        _geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n\n        _geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\n      }\n\n      this.geometry = _geometry;\n      this.material = material !== undefined ? material : new SpriteMaterial();\n      this.center = new Vector2(0.5, 0.5);\n    }\n\n    raycast(raycaster, intersects) {\n      if (raycaster.camera === null) {\n        console.error('THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.');\n      }\n\n      _worldScale.setFromMatrixScale(this.matrixWorld);\n\n      _viewWorldMatrix.copy(raycaster.camera.matrixWorld);\n\n      this.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);\n\n      _mvPosition.setFromMatrixPosition(this.modelViewMatrix);\n\n      if (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {\n        _worldScale.multiplyScalar(-_mvPosition.z);\n      }\n\n      const rotation = this.material.rotation;\n      let sin, cos;\n\n      if (rotation !== 0) {\n        cos = Math.cos(rotation);\n        sin = Math.sin(rotation);\n      }\n\n      const center = this.center;\n      transformVertex(_vA.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n      transformVertex(_vB.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n      transformVertex(_vC.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n      _uvA.set(0, 0);\n\n      _uvB.set(1, 0);\n\n      _uvC.set(1, 1); // check first triangle\n\n\n      let intersect = raycaster.ray.intersectTriangle(_vA, _vB, _vC, false, _intersectPoint);\n\n      if (intersect === null) {\n        // check second triangle\n        transformVertex(_vB.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n        _uvB.set(0, 1);\n\n        intersect = raycaster.ray.intersectTriangle(_vA, _vC, _vB, false, _intersectPoint);\n\n        if (intersect === null) {\n          return;\n        }\n      }\n\n      const distance = raycaster.ray.origin.distanceTo(_intersectPoint);\n      if (distance < raycaster.near || distance > raycaster.far) return;\n      intersects.push({\n        distance: distance,\n        point: _intersectPoint.clone(),\n        uv: Triangle.getUV(_intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2()),\n        face: null,\n        object: this\n      });\n    }\n\n    copy(source) {\n      super.copy(source);\n      if (source.center !== undefined) this.center.copy(source.center);\n      this.material = source.material;\n      return this;\n    }\n\n  }\n\n  Sprite.prototype.isSprite = true;\n\n  function transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {\n    // compute position in camera space\n    _alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale); // to check if rotation is not zero\n\n\n    if (sin !== undefined) {\n      _rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;\n      _rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;\n    } else {\n      _rotatedPosition.copy(_alignedPosition);\n    }\n\n    vertexPosition.copy(mvPosition);\n    vertexPosition.x += _rotatedPosition.x;\n    vertexPosition.y += _rotatedPosition.y; // transform to world space\n\n    vertexPosition.applyMatrix4(_viewWorldMatrix);\n  }\n\n  const _v1$2 = /*@__PURE__*/new Vector3();\n\n  const _v2$1 = /*@__PURE__*/new Vector3();\n\n  class LOD extends Object3D {\n    constructor() {\n      super();\n      this._currentLevel = 0;\n      this.type = 'LOD';\n      Object.defineProperties(this, {\n        levels: {\n          enumerable: true,\n          value: []\n        },\n        isLOD: {\n          value: true\n        }\n      });\n      this.autoUpdate = true;\n    }\n\n    copy(source) {\n      super.copy(source, false);\n      const levels = source.levels;\n\n      for (let i = 0, l = levels.length; i < l; i++) {\n        const level = levels[i];\n        this.addLevel(level.object.clone(), level.distance);\n      }\n\n      this.autoUpdate = source.autoUpdate;\n      return this;\n    }\n\n    addLevel(object) {\n      let distance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      distance = Math.abs(distance);\n      const levels = this.levels;\n      let l;\n\n      for (l = 0; l < levels.length; l++) {\n        if (distance < levels[l].distance) {\n          break;\n        }\n      }\n\n      levels.splice(l, 0, {\n        distance: distance,\n        object: object\n      });\n      this.add(object);\n      return this;\n    }\n\n    getCurrentLevel() {\n      return this._currentLevel;\n    }\n\n    getObjectForDistance(distance) {\n      const levels = this.levels;\n\n      if (levels.length > 0) {\n        let i, l;\n\n        for (i = 1, l = levels.length; i < l; i++) {\n          if (distance < levels[i].distance) {\n            break;\n          }\n        }\n\n        return levels[i - 1].object;\n      }\n\n      return null;\n    }\n\n    raycast(raycaster, intersects) {\n      const levels = this.levels;\n\n      if (levels.length > 0) {\n        _v1$2.setFromMatrixPosition(this.matrixWorld);\n\n        const distance = raycaster.ray.origin.distanceTo(_v1$2);\n        this.getObjectForDistance(distance).raycast(raycaster, intersects);\n      }\n    }\n\n    update(camera) {\n      const levels = this.levels;\n\n      if (levels.length > 1) {\n        _v1$2.setFromMatrixPosition(camera.matrixWorld);\n\n        _v2$1.setFromMatrixPosition(this.matrixWorld);\n\n        const distance = _v1$2.distanceTo(_v2$1) / camera.zoom;\n        levels[0].object.visible = true;\n        let i, l;\n\n        for (i = 1, l = levels.length; i < l; i++) {\n          if (distance >= levels[i].distance) {\n            levels[i - 1].object.visible = false;\n            levels[i].object.visible = true;\n          } else {\n            break;\n          }\n        }\n\n        this._currentLevel = i - 1;\n\n        for (; i < l; i++) {\n          levels[i].object.visible = false;\n        }\n      }\n    }\n\n    toJSON(meta) {\n      const data = super.toJSON(meta);\n      if (this.autoUpdate === false) data.object.autoUpdate = false;\n      data.object.levels = [];\n      const levels = this.levels;\n\n      for (let i = 0, l = levels.length; i < l; i++) {\n        const level = levels[i];\n        data.object.levels.push({\n          object: level.object.uuid,\n          distance: level.distance\n        });\n      }\n\n      return data;\n    }\n\n  }\n\n  const _basePosition = /*@__PURE__*/new Vector3();\n\n  const _skinIndex = /*@__PURE__*/new Vector4();\n\n  const _skinWeight = /*@__PURE__*/new Vector4();\n\n  const _vector$5 = /*@__PURE__*/new Vector3();\n\n  const _matrix = /*@__PURE__*/new Matrix4();\n\n  class SkinnedMesh extends Mesh {\n    constructor(geometry, material) {\n      super(geometry, material);\n      this.type = 'SkinnedMesh';\n      this.bindMode = 'attached';\n      this.bindMatrix = new Matrix4();\n      this.bindMatrixInverse = new Matrix4();\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.bindMode = source.bindMode;\n      this.bindMatrix.copy(source.bindMatrix);\n      this.bindMatrixInverse.copy(source.bindMatrixInverse);\n      this.skeleton = source.skeleton;\n      return this;\n    }\n\n    bind(skeleton, bindMatrix) {\n      this.skeleton = skeleton;\n\n      if (bindMatrix === undefined) {\n        this.updateMatrixWorld(true);\n        this.skeleton.calculateInverses();\n        bindMatrix = this.matrixWorld;\n      }\n\n      this.bindMatrix.copy(bindMatrix);\n      this.bindMatrixInverse.copy(bindMatrix).invert();\n    }\n\n    pose() {\n      this.skeleton.pose();\n    }\n\n    normalizeSkinWeights() {\n      const vector = new Vector4();\n      const skinWeight = this.geometry.attributes.skinWeight;\n\n      for (let i = 0, l = skinWeight.count; i < l; i++) {\n        vector.x = skinWeight.getX(i);\n        vector.y = skinWeight.getY(i);\n        vector.z = skinWeight.getZ(i);\n        vector.w = skinWeight.getW(i);\n        const scale = 1.0 / vector.manhattanLength();\n\n        if (scale !== Infinity) {\n          vector.multiplyScalar(scale);\n        } else {\n          vector.set(1, 0, 0, 0); // do something reasonable\n        }\n\n        skinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);\n      }\n    }\n\n    updateMatrixWorld(force) {\n      super.updateMatrixWorld(force);\n\n      if (this.bindMode === 'attached') {\n        this.bindMatrixInverse.copy(this.matrixWorld).invert();\n      } else if (this.bindMode === 'detached') {\n        this.bindMatrixInverse.copy(this.bindMatrix).invert();\n      } else {\n        console.warn('THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode);\n      }\n    }\n\n    boneTransform(index, target) {\n      const skeleton = this.skeleton;\n      const geometry = this.geometry;\n\n      _skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);\n\n      _skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);\n\n      _basePosition.copy(target).applyMatrix4(this.bindMatrix);\n\n      target.set(0, 0, 0);\n\n      for (let i = 0; i < 4; i++) {\n        const weight = _skinWeight.getComponent(i);\n\n        if (weight !== 0) {\n          const boneIndex = _skinIndex.getComponent(i);\n\n          _matrix.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);\n\n          target.addScaledVector(_vector$5.copy(_basePosition).applyMatrix4(_matrix), weight);\n        }\n      }\n\n      return target.applyMatrix4(this.bindMatrixInverse);\n    }\n\n  }\n\n  SkinnedMesh.prototype.isSkinnedMesh = true;\n\n  class Bone extends Object3D {\n    constructor() {\n      super();\n      this.type = 'Bone';\n    }\n\n  }\n\n  Bone.prototype.isBone = true;\n\n  class DataTexture extends Texture {\n    constructor() {\n      let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      let width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      let height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      let format = arguments.length > 3 ? arguments[3] : undefined;\n      let type = arguments.length > 4 ? arguments[4] : undefined;\n      let mapping = arguments.length > 5 ? arguments[5] : undefined;\n      let wrapS = arguments.length > 6 ? arguments[6] : undefined;\n      let wrapT = arguments.length > 7 ? arguments[7] : undefined;\n      let magFilter = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : NearestFilter;\n      let minFilter = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : NearestFilter;\n      let anisotropy = arguments.length > 10 ? arguments[10] : undefined;\n      let encoding = arguments.length > 11 ? arguments[11] : undefined;\n      super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n      this.image = {\n        data: data,\n        width: width,\n        height: height\n      };\n      this.magFilter = magFilter;\n      this.minFilter = minFilter;\n      this.generateMipmaps = false;\n      this.flipY = false;\n      this.unpackAlignment = 1;\n      this.needsUpdate = true;\n    }\n\n  }\n\n  DataTexture.prototype.isDataTexture = true;\n\n  const _offsetMatrix = /*@__PURE__*/new Matrix4();\n\n  const _identityMatrix = /*@__PURE__*/new Matrix4();\n\n  class Skeleton {\n    constructor() {\n      let bones = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      let boneInverses = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      this.uuid = generateUUID();\n      this.bones = bones.slice(0);\n      this.boneInverses = boneInverses;\n      this.boneMatrices = null;\n      this.boneTexture = null;\n      this.boneTextureSize = 0;\n      this.frame = -1;\n      this.init();\n    }\n\n    init() {\n      const bones = this.bones;\n      const boneInverses = this.boneInverses;\n      this.boneMatrices = new Float32Array(bones.length * 16); // calculate inverse bone matrices if necessary\n\n      if (boneInverses.length === 0) {\n        this.calculateInverses();\n      } else {\n        // handle special case\n        if (bones.length !== boneInverses.length) {\n          console.warn('THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.');\n          this.boneInverses = [];\n\n          for (let i = 0, il = this.bones.length; i < il; i++) {\n            this.boneInverses.push(new Matrix4());\n          }\n        }\n      }\n    }\n\n    calculateInverses() {\n      this.boneInverses.length = 0;\n\n      for (let i = 0, il = this.bones.length; i < il; i++) {\n        const inverse = new Matrix4();\n\n        if (this.bones[i]) {\n          inverse.copy(this.bones[i].matrixWorld).invert();\n        }\n\n        this.boneInverses.push(inverse);\n      }\n    }\n\n    pose() {\n      // recover the bind-time world matrices\n      for (let i = 0, il = this.bones.length; i < il; i++) {\n        const bone = this.bones[i];\n\n        if (bone) {\n          bone.matrixWorld.copy(this.boneInverses[i]).invert();\n        }\n      } // compute the local matrices, positions, rotations and scales\n\n\n      for (let i = 0, il = this.bones.length; i < il; i++) {\n        const bone = this.bones[i];\n\n        if (bone) {\n          if (bone.parent && bone.parent.isBone) {\n            bone.matrix.copy(bone.parent.matrixWorld).invert();\n            bone.matrix.multiply(bone.matrixWorld);\n          } else {\n            bone.matrix.copy(bone.matrixWorld);\n          }\n\n          bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);\n        }\n      }\n    }\n\n    update() {\n      const bones = this.bones;\n      const boneInverses = this.boneInverses;\n      const boneMatrices = this.boneMatrices;\n      const boneTexture = this.boneTexture; // flatten bone matrices to array\n\n      for (let i = 0, il = bones.length; i < il; i++) {\n        // compute the offset between the current and the original transform\n        const matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;\n\n        _offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);\n\n        _offsetMatrix.toArray(boneMatrices, i * 16);\n      }\n\n      if (boneTexture !== null) {\n        boneTexture.needsUpdate = true;\n      }\n    }\n\n    clone() {\n      return new Skeleton(this.bones, this.boneInverses);\n    }\n\n    computeBoneTexture() {\n      // layout (1 matrix = 4 pixels)\n      //\t\t\tRGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n      //\twith\t8x8\tpixel texture max\t 16 bones * 4 pixels =\t(8 * 8)\n      //\t\t\t 16x16 pixel texture max\t 64 bones * 4 pixels = (16 * 16)\n      //\t\t\t 32x32 pixel texture max\t256 bones * 4 pixels = (32 * 32)\n      //\t\t\t 64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n      let size = Math.sqrt(this.bones.length * 4); // 4 pixels needed for 1 matrix\n\n      size = ceilPowerOfTwo(size);\n      size = Math.max(size, 4);\n      const boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel\n\n      boneMatrices.set(this.boneMatrices); // copy current values\n\n      const boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);\n      this.boneMatrices = boneMatrices;\n      this.boneTexture = boneTexture;\n      this.boneTextureSize = size;\n      return this;\n    }\n\n    getBoneByName(name) {\n      for (let i = 0, il = this.bones.length; i < il; i++) {\n        const bone = this.bones[i];\n\n        if (bone.name === name) {\n          return bone;\n        }\n      }\n\n      return undefined;\n    }\n\n    dispose() {\n      if (this.boneTexture !== null) {\n        this.boneTexture.dispose();\n        this.boneTexture = null;\n      }\n    }\n\n    fromJSON(json, bones) {\n      this.uuid = json.uuid;\n\n      for (let i = 0, l = json.bones.length; i < l; i++) {\n        const uuid = json.bones[i];\n        let bone = bones[uuid];\n\n        if (bone === undefined) {\n          console.warn('THREE.Skeleton: No bone found with UUID:', uuid);\n          bone = new Bone();\n        }\n\n        this.bones.push(bone);\n        this.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]));\n      }\n\n      this.init();\n      return this;\n    }\n\n    toJSON() {\n      const data = {\n        metadata: {\n          version: 4.5,\n          type: 'Skeleton',\n          generator: 'Skeleton.toJSON'\n        },\n        bones: [],\n        boneInverses: []\n      };\n      data.uuid = this.uuid;\n      const bones = this.bones;\n      const boneInverses = this.boneInverses;\n\n      for (let i = 0, l = bones.length; i < l; i++) {\n        const bone = bones[i];\n        data.bones.push(bone.uuid);\n        const boneInverse = boneInverses[i];\n        data.boneInverses.push(boneInverse.toArray());\n      }\n\n      return data;\n    }\n\n  }\n\n  class InstancedBufferAttribute extends BufferAttribute {\n    constructor(array, itemSize, normalized) {\n      let meshPerAttribute = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n      if (typeof normalized === 'number') {\n        meshPerAttribute = normalized;\n        normalized = false;\n        console.error('THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.');\n      }\n\n      super(array, itemSize, normalized);\n      this.meshPerAttribute = meshPerAttribute;\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.meshPerAttribute = source.meshPerAttribute;\n      return this;\n    }\n\n    toJSON() {\n      const data = super.toJSON();\n      data.meshPerAttribute = this.meshPerAttribute;\n      data.isInstancedBufferAttribute = true;\n      return data;\n    }\n\n  }\n\n  InstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;\n\n  const _instanceLocalMatrix = /*@__PURE__*/new Matrix4();\n\n  const _instanceWorldMatrix = /*@__PURE__*/new Matrix4();\n\n  const _instanceIntersects = [];\n\n  const _mesh = /*@__PURE__*/new Mesh();\n\n  class InstancedMesh extends Mesh {\n    constructor(geometry, material, count) {\n      super(geometry, material);\n      this.instanceMatrix = new InstancedBufferAttribute(new Float32Array(count * 16), 16);\n      this.instanceColor = null;\n      this.count = count;\n      this.frustumCulled = false;\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.instanceMatrix.copy(source.instanceMatrix);\n      if (source.instanceColor !== null) this.instanceColor = source.instanceColor.clone();\n      this.count = source.count;\n      return this;\n    }\n\n    getColorAt(index, color) {\n      color.fromArray(this.instanceColor.array, index * 3);\n    }\n\n    getMatrixAt(index, matrix) {\n      matrix.fromArray(this.instanceMatrix.array, index * 16);\n    }\n\n    raycast(raycaster, intersects) {\n      const matrixWorld = this.matrixWorld;\n      const raycastTimes = this.count;\n      _mesh.geometry = this.geometry;\n      _mesh.material = this.material;\n      if (_mesh.material === undefined) return;\n\n      for (let instanceId = 0; instanceId < raycastTimes; instanceId++) {\n        // calculate the world matrix for each instance\n        this.getMatrixAt(instanceId, _instanceLocalMatrix);\n\n        _instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix); // the mesh represents this single instance\n\n\n        _mesh.matrixWorld = _instanceWorldMatrix;\n\n        _mesh.raycast(raycaster, _instanceIntersects); // process the result of raycast\n\n\n        for (let i = 0, l = _instanceIntersects.length; i < l; i++) {\n          const intersect = _instanceIntersects[i];\n          intersect.instanceId = instanceId;\n          intersect.object = this;\n          intersects.push(intersect);\n        }\n\n        _instanceIntersects.length = 0;\n      }\n    }\n\n    setColorAt(index, color) {\n      if (this.instanceColor === null) {\n        this.instanceColor = new InstancedBufferAttribute(new Float32Array(this.instanceMatrix.count * 3), 3);\n      }\n\n      color.toArray(this.instanceColor.array, index * 3);\n    }\n\n    setMatrixAt(index, matrix) {\n      matrix.toArray(this.instanceMatrix.array, index * 16);\n    }\n\n    updateMorphTargets() {}\n\n    dispose() {\n      this.dispatchEvent({\n        type: 'dispose'\n      });\n    }\n\n  }\n\n  InstancedMesh.prototype.isInstancedMesh = true;\n  /**\n   * parameters = {\n   *\tcolor: <hex>,\n   *\topacity: <float>,\n   *\n   *\tlinewidth: <float>,\n   *\tlinecap: \"round\",\n   *\tlinejoin: \"round\"\n   * }\n   */\n\n  class LineBasicMaterial extends Material {\n    constructor(parameters) {\n      super();\n      this.type = 'LineBasicMaterial';\n      this.color = new Color(0xffffff);\n      this.linewidth = 1;\n      this.linecap = 'round';\n      this.linejoin = 'round';\n      this.setValues(parameters);\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.color.copy(source.color);\n      this.linewidth = source.linewidth;\n      this.linecap = source.linecap;\n      this.linejoin = source.linejoin;\n      return this;\n    }\n\n  }\n\n  LineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n  const _start$1 = /*@__PURE__*/new Vector3();\n\n  const _end$1 = /*@__PURE__*/new Vector3();\n\n  const _inverseMatrix$1 = /*@__PURE__*/new Matrix4();\n\n  const _ray$1 = /*@__PURE__*/new Ray();\n\n  const _sphere$1 = /*@__PURE__*/new Sphere();\n\n  class Line extends Object3D {\n    constructor() {\n      let geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new BufferGeometry();\n      let material = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new LineBasicMaterial();\n      super();\n      this.type = 'Line';\n      this.geometry = geometry;\n      this.material = material;\n      this.updateMorphTargets();\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.material = source.material;\n      this.geometry = source.geometry;\n      return this;\n    }\n\n    computeLineDistances() {\n      const geometry = this.geometry;\n\n      if (geometry.isBufferGeometry) {\n        // we assume non-indexed geometry\n        if (geometry.index === null) {\n          const positionAttribute = geometry.attributes.position;\n          const lineDistances = [0];\n\n          for (let i = 1, l = positionAttribute.count; i < l; i++) {\n            _start$1.fromBufferAttribute(positionAttribute, i - 1);\n\n            _end$1.fromBufferAttribute(positionAttribute, i);\n\n            lineDistances[i] = lineDistances[i - 1];\n            lineDistances[i] += _start$1.distanceTo(_end$1);\n          }\n\n          geometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n        } else {\n          console.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n        }\n      } else if (geometry.isGeometry) {\n        console.error('THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n      }\n\n      return this;\n    }\n\n    raycast(raycaster, intersects) {\n      const geometry = this.geometry;\n      const matrixWorld = this.matrixWorld;\n      const threshold = raycaster.params.Line.threshold;\n      const drawRange = geometry.drawRange; // Checking boundingSphere distance to ray\n\n      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n      _sphere$1.copy(geometry.boundingSphere);\n\n      _sphere$1.applyMatrix4(matrixWorld);\n\n      _sphere$1.radius += threshold;\n      if (raycaster.ray.intersectsSphere(_sphere$1) === false) return; //\n\n      _inverseMatrix$1.copy(matrixWorld).invert();\n\n      _ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);\n\n      const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n      const localThresholdSq = localThreshold * localThreshold;\n      const vStart = new Vector3();\n      const vEnd = new Vector3();\n      const interSegment = new Vector3();\n      const interRay = new Vector3();\n      const step = this.isLineSegments ? 2 : 1;\n\n      if (geometry.isBufferGeometry) {\n        const index = geometry.index;\n        const attributes = geometry.attributes;\n        const positionAttribute = attributes.position;\n\n        if (index !== null) {\n          const start = Math.max(0, drawRange.start);\n          const end = Math.min(index.count, drawRange.start + drawRange.count);\n\n          for (let i = start, l = end - 1; i < l; i += step) {\n            const a = index.getX(i);\n            const b = index.getX(i + 1);\n            vStart.fromBufferAttribute(positionAttribute, a);\n            vEnd.fromBufferAttribute(positionAttribute, b);\n\n            const distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n\n            if (distSq > localThresholdSq) continue;\n            interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n            const distance = raycaster.ray.origin.distanceTo(interRay);\n            if (distance < raycaster.near || distance > raycaster.far) continue;\n            intersects.push({\n              distance: distance,\n              // What do we want? intersection point on the ray or on the segment??\n              // point: raycaster.ray.at( distance ),\n              point: interSegment.clone().applyMatrix4(this.matrixWorld),\n              index: i,\n              face: null,\n              faceIndex: null,\n              object: this\n            });\n          }\n        } else {\n          const start = Math.max(0, drawRange.start);\n          const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);\n\n          for (let i = start, l = end - 1; i < l; i += step) {\n            vStart.fromBufferAttribute(positionAttribute, i);\n            vEnd.fromBufferAttribute(positionAttribute, i + 1);\n\n            const distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n\n            if (distSq > localThresholdSq) continue;\n            interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n            const distance = raycaster.ray.origin.distanceTo(interRay);\n            if (distance < raycaster.near || distance > raycaster.far) continue;\n            intersects.push({\n              distance: distance,\n              // What do we want? intersection point on the ray or on the segment??\n              // point: raycaster.ray.at( distance ),\n              point: interSegment.clone().applyMatrix4(this.matrixWorld),\n              index: i,\n              face: null,\n              faceIndex: null,\n              object: this\n            });\n          }\n        }\n      } else if (geometry.isGeometry) {\n        console.error('THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n      }\n    }\n\n    updateMorphTargets() {\n      const geometry = this.geometry;\n\n      if (geometry.isBufferGeometry) {\n        const morphAttributes = geometry.morphAttributes;\n        const keys = Object.keys(morphAttributes);\n\n        if (keys.length > 0) {\n          const morphAttribute = morphAttributes[keys[0]];\n\n          if (morphAttribute !== undefined) {\n            this.morphTargetInfluences = [];\n            this.morphTargetDictionary = {};\n\n            for (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n              const name = morphAttribute[m].name || String(m);\n              this.morphTargetInfluences.push(0);\n              this.morphTargetDictionary[name] = m;\n            }\n          }\n        }\n      } else {\n        const morphTargets = geometry.morphTargets;\n\n        if (morphTargets !== undefined && morphTargets.length > 0) {\n          console.error('THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');\n        }\n      }\n    }\n\n  }\n\n  Line.prototype.isLine = true;\n\n  const _start = /*@__PURE__*/new Vector3();\n\n  const _end = /*@__PURE__*/new Vector3();\n\n  class LineSegments extends Line {\n    constructor(geometry, material) {\n      super(geometry, material);\n      this.type = 'LineSegments';\n    }\n\n    computeLineDistances() {\n      const geometry = this.geometry;\n\n      if (geometry.isBufferGeometry) {\n        // we assume non-indexed geometry\n        if (geometry.index === null) {\n          const positionAttribute = geometry.attributes.position;\n          const lineDistances = [];\n\n          for (let i = 0, l = positionAttribute.count; i < l; i += 2) {\n            _start.fromBufferAttribute(positionAttribute, i);\n\n            _end.fromBufferAttribute(positionAttribute, i + 1);\n\n            lineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];\n            lineDistances[i + 1] = lineDistances[i] + _start.distanceTo(_end);\n          }\n\n          geometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n        } else {\n          console.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n        }\n      } else if (geometry.isGeometry) {\n        console.error('THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n      }\n\n      return this;\n    }\n\n  }\n\n  LineSegments.prototype.isLineSegments = true;\n\n  class LineLoop extends Line {\n    constructor(geometry, material) {\n      super(geometry, material);\n      this.type = 'LineLoop';\n    }\n\n  }\n\n  LineLoop.prototype.isLineLoop = true;\n  /**\n   * parameters = {\n   *\tcolor: <hex>,\n   *\topacity: <float>,\n   *\tmap: new THREE.Texture( <Image> ),\n   *\talphaMap: new THREE.Texture( <Image> ),\n   *\n   *\tsize: <float>,\n   *\tsizeAttenuation: <bool>\n   *\n   * }\n   */\n\n  class PointsMaterial extends Material {\n    constructor(parameters) {\n      super();\n      this.type = 'PointsMaterial';\n      this.color = new Color(0xffffff);\n      this.map = null;\n      this.alphaMap = null;\n      this.size = 1;\n      this.sizeAttenuation = true;\n      this.setValues(parameters);\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.color.copy(source.color);\n      this.map = source.map;\n      this.alphaMap = source.alphaMap;\n      this.size = source.size;\n      this.sizeAttenuation = source.sizeAttenuation;\n      return this;\n    }\n\n  }\n\n  PointsMaterial.prototype.isPointsMaterial = true;\n\n  const _inverseMatrix = /*@__PURE__*/new Matrix4();\n\n  const _ray = /*@__PURE__*/new Ray();\n\n  const _sphere = /*@__PURE__*/new Sphere();\n\n  const _position$2 = /*@__PURE__*/new Vector3();\n\n  class Points extends Object3D {\n    constructor() {\n      let geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new BufferGeometry();\n      let material = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new PointsMaterial();\n      super();\n      this.type = 'Points';\n      this.geometry = geometry;\n      this.material = material;\n      this.updateMorphTargets();\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.material = source.material;\n      this.geometry = source.geometry;\n      return this;\n    }\n\n    raycast(raycaster, intersects) {\n      const geometry = this.geometry;\n      const matrixWorld = this.matrixWorld;\n      const threshold = raycaster.params.Points.threshold;\n      const drawRange = geometry.drawRange; // Checking boundingSphere distance to ray\n\n      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n      _sphere.copy(geometry.boundingSphere);\n\n      _sphere.applyMatrix4(matrixWorld);\n\n      _sphere.radius += threshold;\n      if (raycaster.ray.intersectsSphere(_sphere) === false) return; //\n\n      _inverseMatrix.copy(matrixWorld).invert();\n\n      _ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);\n\n      const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n      const localThresholdSq = localThreshold * localThreshold;\n\n      if (geometry.isBufferGeometry) {\n        const index = geometry.index;\n        const attributes = geometry.attributes;\n        const positionAttribute = attributes.position;\n\n        if (index !== null) {\n          const start = Math.max(0, drawRange.start);\n          const end = Math.min(index.count, drawRange.start + drawRange.count);\n\n          for (let i = start, il = end; i < il; i++) {\n            const a = index.getX(i);\n\n            _position$2.fromBufferAttribute(positionAttribute, a);\n\n            testPoint(_position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this);\n          }\n        } else {\n          const start = Math.max(0, drawRange.start);\n          const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);\n\n          for (let i = start, l = end; i < l; i++) {\n            _position$2.fromBufferAttribute(positionAttribute, i);\n\n            testPoint(_position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this);\n          }\n        }\n      } else {\n        console.error('THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n      }\n    }\n\n    updateMorphTargets() {\n      const geometry = this.geometry;\n\n      if (geometry.isBufferGeometry) {\n        const morphAttributes = geometry.morphAttributes;\n        const keys = Object.keys(morphAttributes);\n\n        if (keys.length > 0) {\n          const morphAttribute = morphAttributes[keys[0]];\n\n          if (morphAttribute !== undefined) {\n            this.morphTargetInfluences = [];\n            this.morphTargetDictionary = {};\n\n            for (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n              const name = morphAttribute[m].name || String(m);\n              this.morphTargetInfluences.push(0);\n              this.morphTargetDictionary[name] = m;\n            }\n          }\n        }\n      } else {\n        const morphTargets = geometry.morphTargets;\n\n        if (morphTargets !== undefined && morphTargets.length > 0) {\n          console.error('THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');\n        }\n      }\n    }\n\n  }\n\n  Points.prototype.isPoints = true;\n\n  function testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {\n    const rayPointDistanceSq = _ray.distanceSqToPoint(point);\n\n    if (rayPointDistanceSq < localThresholdSq) {\n      const intersectPoint = new Vector3();\n\n      _ray.closestPointToPoint(point, intersectPoint);\n\n      intersectPoint.applyMatrix4(matrixWorld);\n      const distance = raycaster.ray.origin.distanceTo(intersectPoint);\n      if (distance < raycaster.near || distance > raycaster.far) return;\n      intersects.push({\n        distance: distance,\n        distanceToRay: Math.sqrt(rayPointDistanceSq),\n        point: intersectPoint,\n        index: index,\n        face: null,\n        object: object\n      });\n    }\n  }\n\n  class VideoTexture extends Texture {\n    constructor(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n      super(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n      this.format = format !== undefined ? format : RGBFormat;\n      this.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n      this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n      this.generateMipmaps = false;\n      const scope = this;\n\n      function updateVideo() {\n        scope.needsUpdate = true;\n        video.requestVideoFrameCallback(updateVideo);\n      }\n\n      if ('requestVideoFrameCallback' in video) {\n        video.requestVideoFrameCallback(updateVideo);\n      }\n    }\n\n    clone() {\n      return new this.constructor(this.image).copy(this);\n    }\n\n    update() {\n      const video = this.image;\n      const hasVideoFrameCallback = ('requestVideoFrameCallback' in video);\n\n      if (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) {\n        this.needsUpdate = true;\n      }\n    }\n\n  }\n\n  VideoTexture.prototype.isVideoTexture = true;\n\n  class CompressedTexture extends Texture {\n    constructor(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n      super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n      this.image = {\n        width: width,\n        height: height\n      };\n      this.mipmaps = mipmaps; // no flipping for cube textures\n      // (also flipping doesn't work for compressed textures )\n\n      this.flipY = false; // can't generate mipmaps for compressed textures\n      // mips must be embedded in DDS files\n\n      this.generateMipmaps = false;\n    }\n\n  }\n\n  CompressedTexture.prototype.isCompressedTexture = true;\n\n  class CanvasTexture extends Texture {\n    constructor(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n      super(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n      this.needsUpdate = true;\n    }\n\n  }\n\n  CanvasTexture.prototype.isCanvasTexture = true;\n\n  class DepthTexture extends Texture {\n    constructor(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {\n      format = format !== undefined ? format : DepthFormat;\n\n      if (format !== DepthFormat && format !== DepthStencilFormat) {\n        throw new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');\n      }\n\n      if (type === undefined && format === DepthFormat) type = UnsignedShortType;\n      if (type === undefined && format === DepthStencilFormat) type = UnsignedInt248Type;\n      super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n      this.image = {\n        width: width,\n        height: height\n      };\n      this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n      this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n      this.flipY = false;\n      this.generateMipmaps = false;\n    }\n\n  }\n\n  DepthTexture.prototype.isDepthTexture = true;\n\n  class CircleGeometry extends BufferGeometry {\n    constructor() {\n      let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      let segments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n      let thetaStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      let thetaLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Math.PI * 2;\n      super();\n      this.type = 'CircleGeometry';\n      this.parameters = {\n        radius: radius,\n        segments: segments,\n        thetaStart: thetaStart,\n        thetaLength: thetaLength\n      };\n      segments = Math.max(3, segments); // buffers\n\n      const indices = [];\n      const vertices = [];\n      const normals = [];\n      const uvs = []; // helper variables\n\n      const vertex = new Vector3();\n      const uv = new Vector2(); // center point\n\n      vertices.push(0, 0, 0);\n      normals.push(0, 0, 1);\n      uvs.push(0.5, 0.5);\n\n      for (let s = 0, i = 3; s <= segments; s++, i += 3) {\n        const segment = thetaStart + s / segments * thetaLength; // vertex\n\n        vertex.x = radius * Math.cos(segment);\n        vertex.y = radius * Math.sin(segment);\n        vertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n        normals.push(0, 0, 1); // uvs\n\n        uv.x = (vertices[i] / radius + 1) / 2;\n        uv.y = (vertices[i + 1] / radius + 1) / 2;\n        uvs.push(uv.x, uv.y);\n      } // indices\n\n\n      for (let i = 1; i <= segments; i++) {\n        indices.push(i, i + 1, 0);\n      } // build geometry\n\n\n      this.setIndex(indices);\n      this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n    }\n\n    static fromJSON(data) {\n      return new CircleGeometry(data.radius, data.segments, data.thetaStart, data.thetaLength);\n    }\n\n  }\n\n  class CylinderGeometry extends BufferGeometry {\n    constructor() {\n      let radiusTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      let radiusBottom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      let height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      let radialSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;\n      let heightSegments = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n      let openEnded = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      let thetaStart = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n      let thetaLength = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : Math.PI * 2;\n      super();\n      this.type = 'CylinderGeometry';\n      this.parameters = {\n        radiusTop: radiusTop,\n        radiusBottom: radiusBottom,\n        height: height,\n        radialSegments: radialSegments,\n        heightSegments: heightSegments,\n        openEnded: openEnded,\n        thetaStart: thetaStart,\n        thetaLength: thetaLength\n      };\n      const scope = this;\n      radialSegments = Math.floor(radialSegments);\n      heightSegments = Math.floor(heightSegments); // buffers\n\n      const indices = [];\n      const vertices = [];\n      const normals = [];\n      const uvs = []; // helper variables\n\n      let index = 0;\n      const indexArray = [];\n      const halfHeight = height / 2;\n      let groupStart = 0; // generate geometry\n\n      generateTorso();\n\n      if (openEnded === false) {\n        if (radiusTop > 0) generateCap(true);\n        if (radiusBottom > 0) generateCap(false);\n      } // build geometry\n\n\n      this.setIndex(indices);\n      this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n      function generateTorso() {\n        const normal = new Vector3();\n        const vertex = new Vector3();\n        let groupCount = 0; // this will be used to calculate the normal\n\n        const slope = (radiusBottom - radiusTop) / height; // generate vertices, normals and uvs\n\n        for (let y = 0; y <= heightSegments; y++) {\n          const indexRow = [];\n          const v = y / heightSegments; // calculate the radius of the current row\n\n          const radius = v * (radiusBottom - radiusTop) + radiusTop;\n\n          for (let x = 0; x <= radialSegments; x++) {\n            const u = x / radialSegments;\n            const theta = u * thetaLength + thetaStart;\n            const sinTheta = Math.sin(theta);\n            const cosTheta = Math.cos(theta); // vertex\n\n            vertex.x = radius * sinTheta;\n            vertex.y = -v * height + halfHeight;\n            vertex.z = radius * cosTheta;\n            vertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n            normal.set(sinTheta, slope, cosTheta).normalize();\n            normals.push(normal.x, normal.y, normal.z); // uv\n\n            uvs.push(u, 1 - v); // save index of vertex in respective row\n\n            indexRow.push(index++);\n          } // now save vertices of the row in our index array\n\n\n          indexArray.push(indexRow);\n        } // generate indices\n\n\n        for (let x = 0; x < radialSegments; x++) {\n          for (let y = 0; y < heightSegments; y++) {\n            // we use the index array to access the correct indices\n            const a = indexArray[y][x];\n            const b = indexArray[y + 1][x];\n            const c = indexArray[y + 1][x + 1];\n            const d = indexArray[y][x + 1]; // faces\n\n            indices.push(a, b, d);\n            indices.push(b, c, d); // update group counter\n\n            groupCount += 6;\n          }\n        } // add a group to the geometry. this will ensure multi material support\n\n\n        scope.addGroup(groupStart, groupCount, 0); // calculate new start value for groups\n\n        groupStart += groupCount;\n      }\n\n      function generateCap(top) {\n        // save the index of the first center vertex\n        const centerIndexStart = index;\n        const uv = new Vector2();\n        const vertex = new Vector3();\n        let groupCount = 0;\n        const radius = top === true ? radiusTop : radiusBottom;\n        const sign = top === true ? 1 : -1; // first we generate the center vertex data of the cap.\n        // because the geometry needs one set of uvs per face,\n        // we must generate a center vertex per face/segment\n\n        for (let x = 1; x <= radialSegments; x++) {\n          // vertex\n          vertices.push(0, halfHeight * sign, 0); // normal\n\n          normals.push(0, sign, 0); // uv\n\n          uvs.push(0.5, 0.5); // increase index\n\n          index++;\n        } // save the index of the last center vertex\n\n\n        const centerIndexEnd = index; // now we generate the surrounding vertices, normals and uvs\n\n        for (let x = 0; x <= radialSegments; x++) {\n          const u = x / radialSegments;\n          const theta = u * thetaLength + thetaStart;\n          const cosTheta = Math.cos(theta);\n          const sinTheta = Math.sin(theta); // vertex\n\n          vertex.x = radius * sinTheta;\n          vertex.y = halfHeight * sign;\n          vertex.z = radius * cosTheta;\n          vertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n          normals.push(0, sign, 0); // uv\n\n          uv.x = cosTheta * 0.5 + 0.5;\n          uv.y = sinTheta * 0.5 * sign + 0.5;\n          uvs.push(uv.x, uv.y); // increase index\n\n          index++;\n        } // generate indices\n\n\n        for (let x = 0; x < radialSegments; x++) {\n          const c = centerIndexStart + x;\n          const i = centerIndexEnd + x;\n\n          if (top === true) {\n            // face top\n            indices.push(i, i + 1, c);\n          } else {\n            // face bottom\n            indices.push(i + 1, i, c);\n          }\n\n          groupCount += 3;\n        } // add a group to the geometry. this will ensure multi material support\n\n\n        scope.addGroup(groupStart, groupCount, top === true ? 1 : 2); // calculate new start value for groups\n\n        groupStart += groupCount;\n      }\n    }\n\n    static fromJSON(data) {\n      return new CylinderGeometry(data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n    }\n\n  }\n\n  class ConeGeometry extends CylinderGeometry {\n    constructor() {\n      let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      let radialSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 8;\n      let heightSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      let openEnded = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      let thetaStart = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n      let thetaLength = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : Math.PI * 2;\n      super(0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);\n      this.type = 'ConeGeometry';\n      this.parameters = {\n        radius: radius,\n        height: height,\n        radialSegments: radialSegments,\n        heightSegments: heightSegments,\n        openEnded: openEnded,\n        thetaStart: thetaStart,\n        thetaLength: thetaLength\n      };\n    }\n\n    static fromJSON(data) {\n      return new ConeGeometry(data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n    }\n\n  }\n\n  class PolyhedronGeometry extends BufferGeometry {\n    constructor() {\n      let vertices = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      let indices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      let radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      let detail = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      super();\n      this.type = 'PolyhedronGeometry';\n      this.parameters = {\n        vertices: vertices,\n        indices: indices,\n        radius: radius,\n        detail: detail\n      }; // default buffer data\n\n      const vertexBuffer = [];\n      const uvBuffer = []; // the subdivision creates the vertex buffer data\n\n      subdivide(detail); // all vertices should lie on a conceptual sphere with a given radius\n\n      applyRadius(radius); // finally, create the uv data\n\n      generateUVs(); // build non-indexed geometry\n\n      this.setAttribute('position', new Float32BufferAttribute(vertexBuffer, 3));\n      this.setAttribute('normal', new Float32BufferAttribute(vertexBuffer.slice(), 3));\n      this.setAttribute('uv', new Float32BufferAttribute(uvBuffer, 2));\n\n      if (detail === 0) {\n        this.computeVertexNormals(); // flat normals\n      } else {\n        this.normalizeNormals(); // smooth normals\n      } // helper functions\n\n\n      function subdivide(detail) {\n        const a = new Vector3();\n        const b = new Vector3();\n        const c = new Vector3(); // iterate over all faces and apply a subdivison with the given detail value\n\n        for (let i = 0; i < indices.length; i += 3) {\n          // get the vertices of the face\n          getVertexByIndex(indices[i + 0], a);\n          getVertexByIndex(indices[i + 1], b);\n          getVertexByIndex(indices[i + 2], c); // perform subdivision\n\n          subdivideFace(a, b, c, detail);\n        }\n      }\n\n      function subdivideFace(a, b, c, detail) {\n        const cols = detail + 1; // we use this multidimensional array as a data structure for creating the subdivision\n\n        const v = []; // construct all of the vertices for this subdivision\n\n        for (let i = 0; i <= cols; i++) {\n          v[i] = [];\n          const aj = a.clone().lerp(c, i / cols);\n          const bj = b.clone().lerp(c, i / cols);\n          const rows = cols - i;\n\n          for (let j = 0; j <= rows; j++) {\n            if (j === 0 && i === cols) {\n              v[i][j] = aj;\n            } else {\n              v[i][j] = aj.clone().lerp(bj, j / rows);\n            }\n          }\n        } // construct all of the faces\n\n\n        for (let i = 0; i < cols; i++) {\n          for (let j = 0; j < 2 * (cols - i) - 1; j++) {\n            const k = Math.floor(j / 2);\n\n            if (j % 2 === 0) {\n              pushVertex(v[i][k + 1]);\n              pushVertex(v[i + 1][k]);\n              pushVertex(v[i][k]);\n            } else {\n              pushVertex(v[i][k + 1]);\n              pushVertex(v[i + 1][k + 1]);\n              pushVertex(v[i + 1][k]);\n            }\n          }\n        }\n      }\n\n      function applyRadius(radius) {\n        const vertex = new Vector3(); // iterate over the entire buffer and apply the radius to each vertex\n\n        for (let i = 0; i < vertexBuffer.length; i += 3) {\n          vertex.x = vertexBuffer[i + 0];\n          vertex.y = vertexBuffer[i + 1];\n          vertex.z = vertexBuffer[i + 2];\n          vertex.normalize().multiplyScalar(radius);\n          vertexBuffer[i + 0] = vertex.x;\n          vertexBuffer[i + 1] = vertex.y;\n          vertexBuffer[i + 2] = vertex.z;\n        }\n      }\n\n      function generateUVs() {\n        const vertex = new Vector3();\n\n        for (let i = 0; i < vertexBuffer.length; i += 3) {\n          vertex.x = vertexBuffer[i + 0];\n          vertex.y = vertexBuffer[i + 1];\n          vertex.z = vertexBuffer[i + 2];\n          const u = azimuth(vertex) / 2 / Math.PI + 0.5;\n          const v = inclination(vertex) / Math.PI + 0.5;\n          uvBuffer.push(u, 1 - v);\n        }\n\n        correctUVs();\n        correctSeam();\n      }\n\n      function correctSeam() {\n        // handle case when face straddles the seam, see #3269\n        for (let i = 0; i < uvBuffer.length; i += 6) {\n          // uv data of a single face\n          const x0 = uvBuffer[i + 0];\n          const x1 = uvBuffer[i + 2];\n          const x2 = uvBuffer[i + 4];\n          const max = Math.max(x0, x1, x2);\n          const min = Math.min(x0, x1, x2); // 0.9 is somewhat arbitrary\n\n          if (max > 0.9 && min < 0.1) {\n            if (x0 < 0.2) uvBuffer[i + 0] += 1;\n            if (x1 < 0.2) uvBuffer[i + 2] += 1;\n            if (x2 < 0.2) uvBuffer[i + 4] += 1;\n          }\n        }\n      }\n\n      function pushVertex(vertex) {\n        vertexBuffer.push(vertex.x, vertex.y, vertex.z);\n      }\n\n      function getVertexByIndex(index, vertex) {\n        const stride = index * 3;\n        vertex.x = vertices[stride + 0];\n        vertex.y = vertices[stride + 1];\n        vertex.z = vertices[stride + 2];\n      }\n\n      function correctUVs() {\n        const a = new Vector3();\n        const b = new Vector3();\n        const c = new Vector3();\n        const centroid = new Vector3();\n        const uvA = new Vector2();\n        const uvB = new Vector2();\n        const uvC = new Vector2();\n\n        for (let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {\n          a.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);\n          b.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);\n          c.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);\n          uvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);\n          uvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);\n          uvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);\n          centroid.copy(a).add(b).add(c).divideScalar(3);\n          const azi = azimuth(centroid);\n          correctUV(uvA, j + 0, a, azi);\n          correctUV(uvB, j + 2, b, azi);\n          correctUV(uvC, j + 4, c, azi);\n        }\n      }\n\n      function correctUV(uv, stride, vector, azimuth) {\n        if (azimuth < 0 && uv.x === 1) {\n          uvBuffer[stride] = uv.x - 1;\n        }\n\n        if (vector.x === 0 && vector.z === 0) {\n          uvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;\n        }\n      } // Angle around the Y axis, counter-clockwise when looking from above.\n\n\n      function azimuth(vector) {\n        return Math.atan2(vector.z, -vector.x);\n      } // Angle above the XZ plane.\n\n\n      function inclination(vector) {\n        return Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));\n      }\n    }\n\n    static fromJSON(data) {\n      return new PolyhedronGeometry(data.vertices, data.indices, data.radius, data.details);\n    }\n\n  }\n\n  class DodecahedronGeometry extends PolyhedronGeometry {\n    constructor() {\n      let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      let detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      const t = (1 + Math.sqrt(5)) / 2;\n      const r = 1 / t;\n      const vertices = [// (±1, ±1, ±1)\n      -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, // (0, ±1/φ, ±φ)\n      0, -r, -t, 0, -r, t, 0, r, -t, 0, r, t, // (±1/φ, ±φ, 0)\n      -r, -t, 0, -r, t, 0, r, -t, 0, r, t, 0, // (±φ, 0, ±1/φ)\n      -t, 0, -r, t, 0, -r, -t, 0, r, t, 0, r];\n      const indices = [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9];\n      super(vertices, indices, radius, detail);\n      this.type = 'DodecahedronGeometry';\n      this.parameters = {\n        radius: radius,\n        detail: detail\n      };\n    }\n\n    static fromJSON(data) {\n      return new DodecahedronGeometry(data.radius, data.detail);\n    }\n\n  }\n\n  const _v0 = new Vector3();\n\n  const _v1$1 = new Vector3();\n\n  const _normal = new Vector3();\n\n  const _triangle = new Triangle();\n\n  class EdgesGeometry extends BufferGeometry {\n    constructor() {\n      let geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      let thresholdAngle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      super();\n      this.type = 'EdgesGeometry';\n      this.parameters = {\n        geometry: geometry,\n        thresholdAngle: thresholdAngle\n      };\n\n      if (geometry !== null) {\n        const precisionPoints = 4;\n        const precision = Math.pow(10, precisionPoints);\n        const thresholdDot = Math.cos(DEG2RAD * thresholdAngle);\n        const indexAttr = geometry.getIndex();\n        const positionAttr = geometry.getAttribute('position');\n        const indexCount = indexAttr ? indexAttr.count : positionAttr.count;\n        const indexArr = [0, 0, 0];\n        const vertKeys = ['a', 'b', 'c'];\n        const hashes = new Array(3);\n        const edgeData = {};\n        const vertices = [];\n\n        for (let i = 0; i < indexCount; i += 3) {\n          if (indexAttr) {\n            indexArr[0] = indexAttr.getX(i);\n            indexArr[1] = indexAttr.getX(i + 1);\n            indexArr[2] = indexAttr.getX(i + 2);\n          } else {\n            indexArr[0] = i;\n            indexArr[1] = i + 1;\n            indexArr[2] = i + 2;\n          }\n\n          const {\n            a,\n            b,\n            c\n          } = _triangle;\n          a.fromBufferAttribute(positionAttr, indexArr[0]);\n          b.fromBufferAttribute(positionAttr, indexArr[1]);\n          c.fromBufferAttribute(positionAttr, indexArr[2]);\n\n          _triangle.getNormal(_normal); // create hashes for the edge from the vertices\n\n\n          hashes[0] = `${Math.round(a.x * precision)},${Math.round(a.y * precision)},${Math.round(a.z * precision)}`;\n          hashes[1] = `${Math.round(b.x * precision)},${Math.round(b.y * precision)},${Math.round(b.z * precision)}`;\n          hashes[2] = `${Math.round(c.x * precision)},${Math.round(c.y * precision)},${Math.round(c.z * precision)}`; // skip degenerate triangles\n\n          if (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {\n            continue;\n          } // iterate over every edge\n\n\n          for (let j = 0; j < 3; j++) {\n            // get the first and next vertex making up the edge\n            const jNext = (j + 1) % 3;\n            const vecHash0 = hashes[j];\n            const vecHash1 = hashes[jNext];\n            const v0 = _triangle[vertKeys[j]];\n            const v1 = _triangle[vertKeys[jNext]];\n            const hash = `${vecHash0}_${vecHash1}`;\n            const reverseHash = `${vecHash1}_${vecHash0}`;\n\n            if (reverseHash in edgeData && edgeData[reverseHash]) {\n              // if we found a sibling edge add it into the vertex array if\n              // it meets the angle threshold and delete the edge from the map.\n              if (_normal.dot(edgeData[reverseHash].normal) <= thresholdDot) {\n                vertices.push(v0.x, v0.y, v0.z);\n                vertices.push(v1.x, v1.y, v1.z);\n              }\n\n              edgeData[reverseHash] = null;\n            } else if (!(hash in edgeData)) {\n              // if we've already got an edge here then skip adding a new one\n              edgeData[hash] = {\n                index0: indexArr[j],\n                index1: indexArr[jNext],\n                normal: _normal.clone()\n              };\n            }\n          }\n        } // iterate over all remaining, unmatched edges and add them to the vertex array\n\n\n        for (const key in edgeData) {\n          if (edgeData[key]) {\n            const {\n              index0,\n              index1\n            } = edgeData[key];\n\n            _v0.fromBufferAttribute(positionAttr, index0);\n\n            _v1$1.fromBufferAttribute(positionAttr, index1);\n\n            vertices.push(_v0.x, _v0.y, _v0.z);\n            vertices.push(_v1$1.x, _v1$1.y, _v1$1.z);\n          }\n        }\n\n        this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      }\n    }\n\n  }\n  /**\n   * Extensible curve object.\n   *\n   * Some common of curve methods:\n   * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )\n   * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )\n   * .getPoints(), .getSpacedPoints()\n   * .getLength()\n   * .updateArcLengths()\n   *\n   * This following curves inherit from THREE.Curve:\n   *\n   * -- 2D curves --\n   * THREE.ArcCurve\n   * THREE.CubicBezierCurve\n   * THREE.EllipseCurve\n   * THREE.LineCurve\n   * THREE.QuadraticBezierCurve\n   * THREE.SplineCurve\n   *\n   * -- 3D curves --\n   * THREE.CatmullRomCurve3\n   * THREE.CubicBezierCurve3\n   * THREE.LineCurve3\n   * THREE.QuadraticBezierCurve3\n   *\n   * A series of curves can be represented as a THREE.CurvePath.\n   *\n   **/\n\n\n  class Curve {\n    constructor() {\n      this.type = 'Curve';\n      this.arcLengthDivisions = 200;\n    } // Virtual base class method to overwrite and implement in subclasses\n    //\t- t [0 .. 1]\n\n\n    getPoint() {\n      console.warn('THREE.Curve: .getPoint() not implemented.');\n      return null;\n    } // Get point at relative position in curve according to arc length\n    // - u [0 .. 1]\n\n\n    getPointAt(u, optionalTarget) {\n      const t = this.getUtoTmapping(u);\n      return this.getPoint(t, optionalTarget);\n    } // Get sequence of points using getPoint( t )\n\n\n    getPoints() {\n      let divisions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n      const points = [];\n\n      for (let d = 0; d <= divisions; d++) {\n        points.push(this.getPoint(d / divisions));\n      }\n\n      return points;\n    } // Get sequence of points using getPointAt( u )\n\n\n    getSpacedPoints() {\n      let divisions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n      const points = [];\n\n      for (let d = 0; d <= divisions; d++) {\n        points.push(this.getPointAt(d / divisions));\n      }\n\n      return points;\n    } // Get total curve arc length\n\n\n    getLength() {\n      const lengths = this.getLengths();\n      return lengths[lengths.length - 1];\n    } // Get list of cumulative segment lengths\n\n\n    getLengths() {\n      let divisions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.arcLengthDivisions;\n\n      if (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {\n        return this.cacheArcLengths;\n      }\n\n      this.needsUpdate = false;\n      const cache = [];\n      let current,\n          last = this.getPoint(0);\n      let sum = 0;\n      cache.push(0);\n\n      for (let p = 1; p <= divisions; p++) {\n        current = this.getPoint(p / divisions);\n        sum += current.distanceTo(last);\n        cache.push(sum);\n        last = current;\n      }\n\n      this.cacheArcLengths = cache;\n      return cache; // { sums: cache, sum: sum }; Sum is in the last element.\n    }\n\n    updateArcLengths() {\n      this.needsUpdate = true;\n      this.getLengths();\n    } // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\n    getUtoTmapping(u, distance) {\n      const arcLengths = this.getLengths();\n      let i = 0;\n      const il = arcLengths.length;\n      let targetArcLength; // The targeted u distance value to get\n\n      if (distance) {\n        targetArcLength = distance;\n      } else {\n        targetArcLength = u * arcLengths[il - 1];\n      } // binary search for the index with largest value smaller than target u distance\n\n\n      let low = 0,\n          high = il - 1,\n          comparison;\n\n      while (low <= high) {\n        i = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n        comparison = arcLengths[i] - targetArcLength;\n\n        if (comparison < 0) {\n          low = i + 1;\n        } else if (comparison > 0) {\n          high = i - 1;\n        } else {\n          high = i;\n          break; // DONE\n        }\n      }\n\n      i = high;\n\n      if (arcLengths[i] === targetArcLength) {\n        return i / (il - 1);\n      } // we could get finer grain at lengths, or use simple interpolation between two points\n\n\n      const lengthBefore = arcLengths[i];\n      const lengthAfter = arcLengths[i + 1];\n      const segmentLength = lengthAfter - lengthBefore; // determine where we are between the 'before' and 'after' points\n\n      const segmentFraction = (targetArcLength - lengthBefore) / segmentLength; // add that fractional amount to t\n\n      const t = (i + segmentFraction) / (il - 1);\n      return t;\n    } // Returns a unit vector tangent at t\n    // In case any sub curve does not implement its tangent derivation,\n    // 2 points a small delta apart will be used to find its gradient\n    // which seems to give a reasonable approximation\n\n\n    getTangent(t, optionalTarget) {\n      const delta = 0.0001;\n      let t1 = t - delta;\n      let t2 = t + delta; // Capping in case of danger\n\n      if (t1 < 0) t1 = 0;\n      if (t2 > 1) t2 = 1;\n      const pt1 = this.getPoint(t1);\n      const pt2 = this.getPoint(t2);\n      const tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());\n      tangent.copy(pt2).sub(pt1).normalize();\n      return tangent;\n    }\n\n    getTangentAt(u, optionalTarget) {\n      const t = this.getUtoTmapping(u);\n      return this.getTangent(t, optionalTarget);\n    }\n\n    computeFrenetFrames(segments, closed) {\n      // see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n      const normal = new Vector3();\n      const tangents = [];\n      const normals = [];\n      const binormals = [];\n      const vec = new Vector3();\n      const mat = new Matrix4(); // compute the tangent vectors for each segment on the curve\n\n      for (let i = 0; i <= segments; i++) {\n        const u = i / segments;\n        tangents[i] = this.getTangentAt(u, new Vector3());\n      } // select an initial normal vector perpendicular to the first tangent vector,\n      // and in the direction of the minimum tangent xyz component\n\n\n      normals[0] = new Vector3();\n      binormals[0] = new Vector3();\n      let min = Number.MAX_VALUE;\n      const tx = Math.abs(tangents[0].x);\n      const ty = Math.abs(tangents[0].y);\n      const tz = Math.abs(tangents[0].z);\n\n      if (tx <= min) {\n        min = tx;\n        normal.set(1, 0, 0);\n      }\n\n      if (ty <= min) {\n        min = ty;\n        normal.set(0, 1, 0);\n      }\n\n      if (tz <= min) {\n        normal.set(0, 0, 1);\n      }\n\n      vec.crossVectors(tangents[0], normal).normalize();\n      normals[0].crossVectors(tangents[0], vec);\n      binormals[0].crossVectors(tangents[0], normals[0]); // compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n      for (let i = 1; i <= segments; i++) {\n        normals[i] = normals[i - 1].clone();\n        binormals[i] = binormals[i - 1].clone();\n        vec.crossVectors(tangents[i - 1], tangents[i]);\n\n        if (vec.length() > Number.EPSILON) {\n          vec.normalize();\n          const theta = Math.acos(clamp(tangents[i - 1].dot(tangents[i]), -1, 1)); // clamp for floating pt errors\n\n          normals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));\n        }\n\n        binormals[i].crossVectors(tangents[i], normals[i]);\n      } // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\n      if (closed === true) {\n        let theta = Math.acos(clamp(normals[0].dot(normals[segments]), -1, 1));\n        theta /= segments;\n\n        if (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {\n          theta = -theta;\n        }\n\n        for (let i = 1; i <= segments; i++) {\n          // twist a little...\n          normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));\n          binormals[i].crossVectors(tangents[i], normals[i]);\n        }\n      }\n\n      return {\n        tangents: tangents,\n        normals: normals,\n        binormals: binormals\n      };\n    }\n\n    clone() {\n      return new this.constructor().copy(this);\n    }\n\n    copy(source) {\n      this.arcLengthDivisions = source.arcLengthDivisions;\n      return this;\n    }\n\n    toJSON() {\n      const data = {\n        metadata: {\n          version: 4.5,\n          type: 'Curve',\n          generator: 'Curve.toJSON'\n        }\n      };\n      data.arcLengthDivisions = this.arcLengthDivisions;\n      data.type = this.type;\n      return data;\n    }\n\n    fromJSON(json) {\n      this.arcLengthDivisions = json.arcLengthDivisions;\n      return this;\n    }\n\n  }\n\n  class EllipseCurve extends Curve {\n    constructor() {\n      let aX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      let aY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      let xRadius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      let yRadius = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      let aStartAngle = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      let aEndAngle = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Math.PI * 2;\n      let aClockwise = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n      let aRotation = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n      super();\n      this.type = 'EllipseCurve';\n      this.aX = aX;\n      this.aY = aY;\n      this.xRadius = xRadius;\n      this.yRadius = yRadius;\n      this.aStartAngle = aStartAngle;\n      this.aEndAngle = aEndAngle;\n      this.aClockwise = aClockwise;\n      this.aRotation = aRotation;\n    }\n\n    getPoint(t, optionalTarget) {\n      const point = optionalTarget || new Vector2();\n      const twoPi = Math.PI * 2;\n      let deltaAngle = this.aEndAngle - this.aStartAngle;\n      const samePoints = Math.abs(deltaAngle) < Number.EPSILON; // ensures that deltaAngle is 0 .. 2 PI\n\n      while (deltaAngle < 0) deltaAngle += twoPi;\n\n      while (deltaAngle > twoPi) deltaAngle -= twoPi;\n\n      if (deltaAngle < Number.EPSILON) {\n        if (samePoints) {\n          deltaAngle = 0;\n        } else {\n          deltaAngle = twoPi;\n        }\n      }\n\n      if (this.aClockwise === true && !samePoints) {\n        if (deltaAngle === twoPi) {\n          deltaAngle = -twoPi;\n        } else {\n          deltaAngle = deltaAngle - twoPi;\n        }\n      }\n\n      const angle = this.aStartAngle + t * deltaAngle;\n      let x = this.aX + this.xRadius * Math.cos(angle);\n      let y = this.aY + this.yRadius * Math.sin(angle);\n\n      if (this.aRotation !== 0) {\n        const cos = Math.cos(this.aRotation);\n        const sin = Math.sin(this.aRotation);\n        const tx = x - this.aX;\n        const ty = y - this.aY; // Rotate the point about the center of the ellipse.\n\n        x = tx * cos - ty * sin + this.aX;\n        y = tx * sin + ty * cos + this.aY;\n      }\n\n      return point.set(x, y);\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.aX = source.aX;\n      this.aY = source.aY;\n      this.xRadius = source.xRadius;\n      this.yRadius = source.yRadius;\n      this.aStartAngle = source.aStartAngle;\n      this.aEndAngle = source.aEndAngle;\n      this.aClockwise = source.aClockwise;\n      this.aRotation = source.aRotation;\n      return this;\n    }\n\n    toJSON() {\n      const data = super.toJSON();\n      data.aX = this.aX;\n      data.aY = this.aY;\n      data.xRadius = this.xRadius;\n      data.yRadius = this.yRadius;\n      data.aStartAngle = this.aStartAngle;\n      data.aEndAngle = this.aEndAngle;\n      data.aClockwise = this.aClockwise;\n      data.aRotation = this.aRotation;\n      return data;\n    }\n\n    fromJSON(json) {\n      super.fromJSON(json);\n      this.aX = json.aX;\n      this.aY = json.aY;\n      this.xRadius = json.xRadius;\n      this.yRadius = json.yRadius;\n      this.aStartAngle = json.aStartAngle;\n      this.aEndAngle = json.aEndAngle;\n      this.aClockwise = json.aClockwise;\n      this.aRotation = json.aRotation;\n      return this;\n    }\n\n  }\n\n  EllipseCurve.prototype.isEllipseCurve = true;\n\n  class ArcCurve extends EllipseCurve {\n    constructor(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n      super(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n      this.type = 'ArcCurve';\n    }\n\n  }\n\n  ArcCurve.prototype.isArcCurve = true;\n  /**\n   * Centripetal CatmullRom Curve - which is useful for avoiding\n   * cusps and self-intersections in non-uniform catmull rom curves.\n   * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n   *\n   * curve.type accepts centripetal(default), chordal and catmullrom\n   * curve.tension is used for catmullrom which defaults to 0.5\n   */\n\n  /*\n  Based on an optimized c++ solution in\n   - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n   - http://ideone.com/NoEbVM\n  \tThis CubicPoly class could be used for reusing some variables and calculations,\n  but for three.js curve use, it could be possible inlined and flatten into a single function call\n  which can be placed in CurveUtils.\n  */\n\n  function CubicPoly() {\n    let c0 = 0,\n        c1 = 0,\n        c2 = 0,\n        c3 = 0;\n    /*\n     * Compute coefficients for a cubic polynomial\n     *\t p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n     * such that\n     *\t p(0) = x0, p(1) = x1\n     *\tand\n     *\t p'(0) = t0, p'(1) = t1.\n     */\n\n    function init(x0, x1, t0, t1) {\n      c0 = x0;\n      c1 = t0;\n      c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;\n      c3 = 2 * x0 - 2 * x1 + t0 + t1;\n    }\n\n    return {\n      initCatmullRom: function (x0, x1, x2, x3, tension) {\n        init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));\n      },\n      initNonuniformCatmullRom: function (x0, x1, x2, x3, dt0, dt1, dt2) {\n        // compute tangents when parameterized in [t1,t2]\n        let t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;\n        let t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2; // rescale tangents for parametrization in [0,1]\n\n        t1 *= dt1;\n        t2 *= dt1;\n        init(x1, x2, t1, t2);\n      },\n      calc: function (t) {\n        const t2 = t * t;\n        const t3 = t2 * t;\n        return c0 + c1 * t + c2 * t2 + c3 * t3;\n      }\n    };\n  } //\n\n\n  const tmp = new Vector3();\n  const px = new CubicPoly(),\n        py = new CubicPoly(),\n        pz = new CubicPoly();\n\n  class CatmullRomCurve3 extends Curve {\n    constructor() {\n      let points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      let closed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      let curveType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'centripetal';\n      let tension = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.5;\n      super();\n      this.type = 'CatmullRomCurve3';\n      this.points = points;\n      this.closed = closed;\n      this.curveType = curveType;\n      this.tension = tension;\n    }\n\n    getPoint(t) {\n      let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n      const point = optionalTarget;\n      const points = this.points;\n      const l = points.length;\n      const p = (l - (this.closed ? 0 : 1)) * t;\n      let intPoint = Math.floor(p);\n      let weight = p - intPoint;\n\n      if (this.closed) {\n        intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;\n      } else if (weight === 0 && intPoint === l - 1) {\n        intPoint = l - 2;\n        weight = 1;\n      }\n\n      let p0, p3; // 4 points (p1 & p2 defined below)\n\n      if (this.closed || intPoint > 0) {\n        p0 = points[(intPoint - 1) % l];\n      } else {\n        // extrapolate first point\n        tmp.subVectors(points[0], points[1]).add(points[0]);\n        p0 = tmp;\n      }\n\n      const p1 = points[intPoint % l];\n      const p2 = points[(intPoint + 1) % l];\n\n      if (this.closed || intPoint + 2 < l) {\n        p3 = points[(intPoint + 2) % l];\n      } else {\n        // extrapolate last point\n        tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);\n        p3 = tmp;\n      }\n\n      if (this.curveType === 'centripetal' || this.curveType === 'chordal') {\n        // init Centripetal / Chordal Catmull-Rom\n        const pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n        let dt0 = Math.pow(p0.distanceToSquared(p1), pow);\n        let dt1 = Math.pow(p1.distanceToSquared(p2), pow);\n        let dt2 = Math.pow(p2.distanceToSquared(p3), pow); // safety check for repeated points\n\n        if (dt1 < 1e-4) dt1 = 1.0;\n        if (dt0 < 1e-4) dt0 = dt1;\n        if (dt2 < 1e-4) dt2 = dt1;\n        px.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);\n        py.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);\n        pz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);\n      } else if (this.curveType === 'catmullrom') {\n        px.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);\n        py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);\n        pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);\n      }\n\n      point.set(px.calc(weight), py.calc(weight), pz.calc(weight));\n      return point;\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.points = [];\n\n      for (let i = 0, l = source.points.length; i < l; i++) {\n        const point = source.points[i];\n        this.points.push(point.clone());\n      }\n\n      this.closed = source.closed;\n      this.curveType = source.curveType;\n      this.tension = source.tension;\n      return this;\n    }\n\n    toJSON() {\n      const data = super.toJSON();\n      data.points = [];\n\n      for (let i = 0, l = this.points.length; i < l; i++) {\n        const point = this.points[i];\n        data.points.push(point.toArray());\n      }\n\n      data.closed = this.closed;\n      data.curveType = this.curveType;\n      data.tension = this.tension;\n      return data;\n    }\n\n    fromJSON(json) {\n      super.fromJSON(json);\n      this.points = [];\n\n      for (let i = 0, l = json.points.length; i < l; i++) {\n        const point = json.points[i];\n        this.points.push(new Vector3().fromArray(point));\n      }\n\n      this.closed = json.closed;\n      this.curveType = json.curveType;\n      this.tension = json.tension;\n      return this;\n    }\n\n  }\n\n  CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n  /**\n   * Bezier Curves formulas obtained from\n   * http://en.wikipedia.org/wiki/Bézier_curve\n   */\n\n  function CatmullRom(t, p0, p1, p2, p3) {\n    const v0 = (p2 - p0) * 0.5;\n    const v1 = (p3 - p1) * 0.5;\n    const t2 = t * t;\n    const t3 = t * t2;\n    return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n  } //\n\n\n  function QuadraticBezierP0(t, p) {\n    const k = 1 - t;\n    return k * k * p;\n  }\n\n  function QuadraticBezierP1(t, p) {\n    return 2 * (1 - t) * t * p;\n  }\n\n  function QuadraticBezierP2(t, p) {\n    return t * t * p;\n  }\n\n  function QuadraticBezier(t, p0, p1, p2) {\n    return QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);\n  } //\n\n\n  function CubicBezierP0(t, p) {\n    const k = 1 - t;\n    return k * k * k * p;\n  }\n\n  function CubicBezierP1(t, p) {\n    const k = 1 - t;\n    return 3 * k * k * t * p;\n  }\n\n  function CubicBezierP2(t, p) {\n    return 3 * (1 - t) * t * t * p;\n  }\n\n  function CubicBezierP3(t, p) {\n    return t * t * t * p;\n  }\n\n  function CubicBezier(t, p0, p1, p2, p3) {\n    return CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);\n  }\n\n  class CubicBezierCurve extends Curve {\n    constructor() {\n      let v0 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector2();\n      let v1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n      let v2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Vector2();\n      let v3 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Vector2();\n      super();\n      this.type = 'CubicBezierCurve';\n      this.v0 = v0;\n      this.v1 = v1;\n      this.v2 = v2;\n      this.v3 = v3;\n    }\n\n    getPoint(t) {\n      let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n      const point = optionalTarget;\n      const v0 = this.v0,\n            v1 = this.v1,\n            v2 = this.v2,\n            v3 = this.v3;\n      point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y));\n      return point;\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.v0.copy(source.v0);\n      this.v1.copy(source.v1);\n      this.v2.copy(source.v2);\n      this.v3.copy(source.v3);\n      return this;\n    }\n\n    toJSON() {\n      const data = super.toJSON();\n      data.v0 = this.v0.toArray();\n      data.v1 = this.v1.toArray();\n      data.v2 = this.v2.toArray();\n      data.v3 = this.v3.toArray();\n      return data;\n    }\n\n    fromJSON(json) {\n      super.fromJSON(json);\n      this.v0.fromArray(json.v0);\n      this.v1.fromArray(json.v1);\n      this.v2.fromArray(json.v2);\n      this.v3.fromArray(json.v3);\n      return this;\n    }\n\n  }\n\n  CubicBezierCurve.prototype.isCubicBezierCurve = true;\n\n  class CubicBezierCurve3 extends Curve {\n    constructor() {\n      let v0 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n      let v1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n      let v2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Vector3();\n      let v3 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Vector3();\n      super();\n      this.type = 'CubicBezierCurve3';\n      this.v0 = v0;\n      this.v1 = v1;\n      this.v2 = v2;\n      this.v3 = v3;\n    }\n\n    getPoint(t) {\n      let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n      const point = optionalTarget;\n      const v0 = this.v0,\n            v1 = this.v1,\n            v2 = this.v2,\n            v3 = this.v3;\n      point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z));\n      return point;\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.v0.copy(source.v0);\n      this.v1.copy(source.v1);\n      this.v2.copy(source.v2);\n      this.v3.copy(source.v3);\n      return this;\n    }\n\n    toJSON() {\n      const data = super.toJSON();\n      data.v0 = this.v0.toArray();\n      data.v1 = this.v1.toArray();\n      data.v2 = this.v2.toArray();\n      data.v3 = this.v3.toArray();\n      return data;\n    }\n\n    fromJSON(json) {\n      super.fromJSON(json);\n      this.v0.fromArray(json.v0);\n      this.v1.fromArray(json.v1);\n      this.v2.fromArray(json.v2);\n      this.v3.fromArray(json.v3);\n      return this;\n    }\n\n  }\n\n  CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\n  class LineCurve extends Curve {\n    constructor() {\n      let v1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector2();\n      let v2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n      super();\n      this.type = 'LineCurve';\n      this.v1 = v1;\n      this.v2 = v2;\n    }\n\n    getPoint(t) {\n      let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n      const point = optionalTarget;\n\n      if (t === 1) {\n        point.copy(this.v2);\n      } else {\n        point.copy(this.v2).sub(this.v1);\n        point.multiplyScalar(t).add(this.v1);\n      }\n\n      return point;\n    } // Line curve is linear, so we can overwrite default getPointAt\n\n\n    getPointAt(u, optionalTarget) {\n      return this.getPoint(u, optionalTarget);\n    }\n\n    getTangent(t, optionalTarget) {\n      const tangent = optionalTarget || new Vector2();\n      tangent.copy(this.v2).sub(this.v1).normalize();\n      return tangent;\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.v1.copy(source.v1);\n      this.v2.copy(source.v2);\n      return this;\n    }\n\n    toJSON() {\n      const data = super.toJSON();\n      data.v1 = this.v1.toArray();\n      data.v2 = this.v2.toArray();\n      return data;\n    }\n\n    fromJSON(json) {\n      super.fromJSON(json);\n      this.v1.fromArray(json.v1);\n      this.v2.fromArray(json.v2);\n      return this;\n    }\n\n  }\n\n  LineCurve.prototype.isLineCurve = true;\n\n  class LineCurve3 extends Curve {\n    constructor() {\n      let v1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n      let v2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n      super();\n      this.type = 'LineCurve3';\n      this.isLineCurve3 = true;\n      this.v1 = v1;\n      this.v2 = v2;\n    }\n\n    getPoint(t) {\n      let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n      const point = optionalTarget;\n\n      if (t === 1) {\n        point.copy(this.v2);\n      } else {\n        point.copy(this.v2).sub(this.v1);\n        point.multiplyScalar(t).add(this.v1);\n      }\n\n      return point;\n    } // Line curve is linear, so we can overwrite default getPointAt\n\n\n    getPointAt(u, optionalTarget) {\n      return this.getPoint(u, optionalTarget);\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.v1.copy(source.v1);\n      this.v2.copy(source.v2);\n      return this;\n    }\n\n    toJSON() {\n      const data = super.toJSON();\n      data.v1 = this.v1.toArray();\n      data.v2 = this.v2.toArray();\n      return data;\n    }\n\n    fromJSON(json) {\n      super.fromJSON(json);\n      this.v1.fromArray(json.v1);\n      this.v2.fromArray(json.v2);\n      return this;\n    }\n\n  }\n\n  class QuadraticBezierCurve extends Curve {\n    constructor() {\n      let v0 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector2();\n      let v1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n      let v2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Vector2();\n      super();\n      this.type = 'QuadraticBezierCurve';\n      this.v0 = v0;\n      this.v1 = v1;\n      this.v2 = v2;\n    }\n\n    getPoint(t) {\n      let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n      const point = optionalTarget;\n      const v0 = this.v0,\n            v1 = this.v1,\n            v2 = this.v2;\n      point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));\n      return point;\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.v0.copy(source.v0);\n      this.v1.copy(source.v1);\n      this.v2.copy(source.v2);\n      return this;\n    }\n\n    toJSON() {\n      const data = super.toJSON();\n      data.v0 = this.v0.toArray();\n      data.v1 = this.v1.toArray();\n      data.v2 = this.v2.toArray();\n      return data;\n    }\n\n    fromJSON(json) {\n      super.fromJSON(json);\n      this.v0.fromArray(json.v0);\n      this.v1.fromArray(json.v1);\n      this.v2.fromArray(json.v2);\n      return this;\n    }\n\n  }\n\n  QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\n  class QuadraticBezierCurve3 extends Curve {\n    constructor() {\n      let v0 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n      let v1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n      let v2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Vector3();\n      super();\n      this.type = 'QuadraticBezierCurve3';\n      this.v0 = v0;\n      this.v1 = v1;\n      this.v2 = v2;\n    }\n\n    getPoint(t) {\n      let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n      const point = optionalTarget;\n      const v0 = this.v0,\n            v1 = this.v1,\n            v2 = this.v2;\n      point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z));\n      return point;\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.v0.copy(source.v0);\n      this.v1.copy(source.v1);\n      this.v2.copy(source.v2);\n      return this;\n    }\n\n    toJSON() {\n      const data = super.toJSON();\n      data.v0 = this.v0.toArray();\n      data.v1 = this.v1.toArray();\n      data.v2 = this.v2.toArray();\n      return data;\n    }\n\n    fromJSON(json) {\n      super.fromJSON(json);\n      this.v0.fromArray(json.v0);\n      this.v1.fromArray(json.v1);\n      this.v2.fromArray(json.v2);\n      return this;\n    }\n\n  }\n\n  QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\n  class SplineCurve extends Curve {\n    constructor() {\n      let points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      super();\n      this.type = 'SplineCurve';\n      this.points = points;\n    }\n\n    getPoint(t) {\n      let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2();\n      const point = optionalTarget;\n      const points = this.points;\n      const p = (points.length - 1) * t;\n      const intPoint = Math.floor(p);\n      const weight = p - intPoint;\n      const p0 = points[intPoint === 0 ? intPoint : intPoint - 1];\n      const p1 = points[intPoint];\n      const p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\n      const p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\n      point.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));\n      return point;\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.points = [];\n\n      for (let i = 0, l = source.points.length; i < l; i++) {\n        const point = source.points[i];\n        this.points.push(point.clone());\n      }\n\n      return this;\n    }\n\n    toJSON() {\n      const data = super.toJSON();\n      data.points = [];\n\n      for (let i = 0, l = this.points.length; i < l; i++) {\n        const point = this.points[i];\n        data.points.push(point.toArray());\n      }\n\n      return data;\n    }\n\n    fromJSON(json) {\n      super.fromJSON(json);\n      this.points = [];\n\n      for (let i = 0, l = json.points.length; i < l; i++) {\n        const point = json.points[i];\n        this.points.push(new Vector2().fromArray(point));\n      }\n\n      return this;\n    }\n\n  }\n\n  SplineCurve.prototype.isSplineCurve = true;\n  var Curves = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ArcCurve: ArcCurve,\n    CatmullRomCurve3: CatmullRomCurve3,\n    CubicBezierCurve: CubicBezierCurve,\n    CubicBezierCurve3: CubicBezierCurve3,\n    EllipseCurve: EllipseCurve,\n    LineCurve: LineCurve,\n    LineCurve3: LineCurve3,\n    QuadraticBezierCurve: QuadraticBezierCurve,\n    QuadraticBezierCurve3: QuadraticBezierCurve3,\n    SplineCurve: SplineCurve\n  });\n  /**************************************************************\n   *\tCurved Path - a curve path is simply a array of connected\n   *\tcurves, but retains the api of a curve\n   **************************************************************/\n\n  class CurvePath extends Curve {\n    constructor() {\n      super();\n      this.type = 'CurvePath';\n      this.curves = [];\n      this.autoClose = false; // Automatically closes the path\n    }\n\n    add(curve) {\n      this.curves.push(curve);\n    }\n\n    closePath() {\n      // Add a line curve if start and end of lines are not connected\n      const startPoint = this.curves[0].getPoint(0);\n      const endPoint = this.curves[this.curves.length - 1].getPoint(1);\n\n      if (!startPoint.equals(endPoint)) {\n        this.curves.push(new LineCurve(endPoint, startPoint));\n      }\n    } // To get accurate point with reference to\n    // entire path distance at time t,\n    // following has to be done:\n    // 1. Length of each sub path have to be known\n    // 2. Locate and identify type of curve\n    // 3. Get t for the curve\n    // 4. Return curve.getPointAt(t')\n\n\n    getPoint(t, optionalTarget) {\n      const d = t * this.getLength();\n      const curveLengths = this.getCurveLengths();\n      let i = 0; // To think about boundaries points.\n\n      while (i < curveLengths.length) {\n        if (curveLengths[i] >= d) {\n          const diff = curveLengths[i] - d;\n          const curve = this.curves[i];\n          const segmentLength = curve.getLength();\n          const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n          return curve.getPointAt(u, optionalTarget);\n        }\n\n        i++;\n      }\n\n      return null; // loop where sum != 0, sum > d , sum+1 <d\n    } // We cannot use the default THREE.Curve getPoint() with getLength() because in\n    // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n    // getPoint() depends on getLength\n\n\n    getLength() {\n      const lens = this.getCurveLengths();\n      return lens[lens.length - 1];\n    } // cacheLengths must be recalculated.\n\n\n    updateArcLengths() {\n      this.needsUpdate = true;\n      this.cacheLengths = null;\n      this.getCurveLengths();\n    } // Compute lengths and cache them\n    // We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\n    getCurveLengths() {\n      // We use cache values if curves and cache array are same length\n      if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {\n        return this.cacheLengths;\n      } // Get length of sub-curve\n      // Push sums into cached array\n\n\n      const lengths = [];\n      let sums = 0;\n\n      for (let i = 0, l = this.curves.length; i < l; i++) {\n        sums += this.curves[i].getLength();\n        lengths.push(sums);\n      }\n\n      this.cacheLengths = lengths;\n      return lengths;\n    }\n\n    getSpacedPoints() {\n      let divisions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 40;\n      const points = [];\n\n      for (let i = 0; i <= divisions; i++) {\n        points.push(this.getPoint(i / divisions));\n      }\n\n      if (this.autoClose) {\n        points.push(points[0]);\n      }\n\n      return points;\n    }\n\n    getPoints() {\n      let divisions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 12;\n      const points = [];\n      let last;\n\n      for (let i = 0, curves = this.curves; i < curves.length; i++) {\n        const curve = curves[i];\n        const resolution = curve && curve.isEllipseCurve ? divisions * 2 : curve && (curve.isLineCurve || curve.isLineCurve3) ? 1 : curve && curve.isSplineCurve ? divisions * curve.points.length : divisions;\n        const pts = curve.getPoints(resolution);\n\n        for (let j = 0; j < pts.length; j++) {\n          const point = pts[j];\n          if (last && last.equals(point)) continue; // ensures no consecutive points are duplicates\n\n          points.push(point);\n          last = point;\n        }\n      }\n\n      if (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {\n        points.push(points[0]);\n      }\n\n      return points;\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.curves = [];\n\n      for (let i = 0, l = source.curves.length; i < l; i++) {\n        const curve = source.curves[i];\n        this.curves.push(curve.clone());\n      }\n\n      this.autoClose = source.autoClose;\n      return this;\n    }\n\n    toJSON() {\n      const data = super.toJSON();\n      data.autoClose = this.autoClose;\n      data.curves = [];\n\n      for (let i = 0, l = this.curves.length; i < l; i++) {\n        const curve = this.curves[i];\n        data.curves.push(curve.toJSON());\n      }\n\n      return data;\n    }\n\n    fromJSON(json) {\n      super.fromJSON(json);\n      this.autoClose = json.autoClose;\n      this.curves = [];\n\n      for (let i = 0, l = json.curves.length; i < l; i++) {\n        const curve = json.curves[i];\n        this.curves.push(new Curves[curve.type]().fromJSON(curve));\n      }\n\n      return this;\n    }\n\n  }\n\n  class Path extends CurvePath {\n    constructor(points) {\n      super();\n      this.type = 'Path';\n      this.currentPoint = new Vector2();\n\n      if (points) {\n        this.setFromPoints(points);\n      }\n    }\n\n    setFromPoints(points) {\n      this.moveTo(points[0].x, points[0].y);\n\n      for (let i = 1, l = points.length; i < l; i++) {\n        this.lineTo(points[i].x, points[i].y);\n      }\n\n      return this;\n    }\n\n    moveTo(x, y) {\n      this.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?\n\n      return this;\n    }\n\n    lineTo(x, y) {\n      const curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));\n      this.curves.push(curve);\n      this.currentPoint.set(x, y);\n      return this;\n    }\n\n    quadraticCurveTo(aCPx, aCPy, aX, aY) {\n      const curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));\n      this.curves.push(curve);\n      this.currentPoint.set(aX, aY);\n      return this;\n    }\n\n    bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n      const curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));\n      this.curves.push(curve);\n      this.currentPoint.set(aX, aY);\n      return this;\n    }\n\n    splineThru(pts\n    /*Array of Vector*/\n    ) {\n      const npts = [this.currentPoint.clone()].concat(pts);\n      const curve = new SplineCurve(npts);\n      this.curves.push(curve);\n      this.currentPoint.copy(pts[pts.length - 1]);\n      return this;\n    }\n\n    arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n      const x0 = this.currentPoint.x;\n      const y0 = this.currentPoint.y;\n      this.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);\n      return this;\n    }\n\n    absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n      this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n      return this;\n    }\n\n    ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n      const x0 = this.currentPoint.x;\n      const y0 = this.currentPoint.y;\n      this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n      return this;\n    }\n\n    absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n      const curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n\n      if (this.curves.length > 0) {\n        // if a previous curve is present, attempt to join\n        const firstPoint = curve.getPoint(0);\n\n        if (!firstPoint.equals(this.currentPoint)) {\n          this.lineTo(firstPoint.x, firstPoint.y);\n        }\n      }\n\n      this.curves.push(curve);\n      const lastPoint = curve.getPoint(1);\n      this.currentPoint.copy(lastPoint);\n      return this;\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.currentPoint.copy(source.currentPoint);\n      return this;\n    }\n\n    toJSON() {\n      const data = super.toJSON();\n      data.currentPoint = this.currentPoint.toArray();\n      return data;\n    }\n\n    fromJSON(json) {\n      super.fromJSON(json);\n      this.currentPoint.fromArray(json.currentPoint);\n      return this;\n    }\n\n  }\n\n  class Shape extends Path {\n    constructor(points) {\n      super(points);\n      this.uuid = generateUUID();\n      this.type = 'Shape';\n      this.holes = [];\n    }\n\n    getPointsHoles(divisions) {\n      const holesPts = [];\n\n      for (let i = 0, l = this.holes.length; i < l; i++) {\n        holesPts[i] = this.holes[i].getPoints(divisions);\n      }\n\n      return holesPts;\n    } // get points of shape and holes (keypoints based on segments parameter)\n\n\n    extractPoints(divisions) {\n      return {\n        shape: this.getPoints(divisions),\n        holes: this.getPointsHoles(divisions)\n      };\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.holes = [];\n\n      for (let i = 0, l = source.holes.length; i < l; i++) {\n        const hole = source.holes[i];\n        this.holes.push(hole.clone());\n      }\n\n      return this;\n    }\n\n    toJSON() {\n      const data = super.toJSON();\n      data.uuid = this.uuid;\n      data.holes = [];\n\n      for (let i = 0, l = this.holes.length; i < l; i++) {\n        const hole = this.holes[i];\n        data.holes.push(hole.toJSON());\n      }\n\n      return data;\n    }\n\n    fromJSON(json) {\n      super.fromJSON(json);\n      this.uuid = json.uuid;\n      this.holes = [];\n\n      for (let i = 0, l = json.holes.length; i < l; i++) {\n        const hole = json.holes[i];\n        this.holes.push(new Path().fromJSON(hole));\n      }\n\n      return this;\n    }\n\n  }\n  /**\n   * Port from https://github.com/mapbox/earcut (v2.2.2)\n   */\n\n\n  const Earcut = {\n    triangulate: function (data, holeIndices) {\n      let dim = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n      const hasHoles = holeIndices && holeIndices.length;\n      const outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n      let outerNode = linkedList(data, 0, outerLen, dim, true);\n      const triangles = [];\n      if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n      let minX, minY, maxX, maxY, x, y, invSize;\n      if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\n      if (data.length > 80 * dim) {\n        minX = maxX = data[0];\n        minY = maxY = data[1];\n\n        for (let i = dim; i < outerLen; i += dim) {\n          x = data[i];\n          y = data[i + 1];\n          if (x < minX) minX = x;\n          if (y < minY) minY = y;\n          if (x > maxX) maxX = x;\n          if (y > maxY) maxY = y;\n        } // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\n\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 1 / invSize : 0;\n      }\n\n      earcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n      return triangles;\n    }\n  }; // create a circular doubly linked list from polygon points in the specified winding order\n\n  function linkedList(data, start, end, dim, clockwise) {\n    let i, last;\n\n    if (clockwise === signedArea(data, start, end, dim) > 0) {\n      for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n    } else {\n      for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n      removeNode(last);\n      last = last.next;\n    }\n\n    return last;\n  } // eliminate colinear or duplicate points\n\n\n  function filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n    let p = start,\n        again;\n\n    do {\n      again = false;\n\n      if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n        removeNode(p);\n        p = end = p.prev;\n        if (p === p.next) break;\n        again = true;\n      } else {\n        p = p.next;\n      }\n    } while (again || p !== end);\n\n    return end;\n  } // main ear slicing loop which triangulates a polygon (given as a linked list)\n\n\n  function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return; // interlink polygon nodes in z-order\n\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n    let stop = ear,\n        prev,\n        next; // iterate through ears, slicing them one by one\n\n    while (ear.prev !== ear.next) {\n      prev = ear.prev;\n      next = ear.next;\n\n      if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n        // cut off the triangle\n        triangles.push(prev.i / dim);\n        triangles.push(ear.i / dim);\n        triangles.push(next.i / dim);\n        removeNode(ear); // skipping the next vertex leads to less sliver triangles\n\n        ear = next.next;\n        stop = next.next;\n        continue;\n      }\n\n      ear = next; // if we looped through the whole remaining polygon and can't find any more ears\n\n      if (ear === stop) {\n        // try filtering points and slicing again\n        if (!pass) {\n          earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1); // if this didn't work, try curing all small self-intersections locally\n        } else if (pass === 1) {\n          ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n          earcutLinked(ear, triangles, dim, minX, minY, invSize, 2); // as a last resort, try splitting the remaining polygon into two\n        } else if (pass === 2) {\n          splitEarcut(ear, triangles, dim, minX, minY, invSize);\n        }\n\n        break;\n      }\n    }\n  } // check whether a polygon node forms a valid ear with adjacent nodes\n\n\n  function isEar(ear) {\n    const a = ear.prev,\n          b = ear,\n          c = ear.next;\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n    // now make sure we don't have other points inside the potential ear\n\n    let p = ear.next.next;\n\n    while (p !== ear.prev) {\n      if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n      p = p.next;\n    }\n\n    return true;\n  }\n\n  function isEarHashed(ear, minX, minY, invSize) {\n    const a = ear.prev,\n          b = ear,\n          c = ear.next;\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n    // triangle bbox; min & max are calculated like this for speed\n\n    const minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x,\n          minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y,\n          maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x,\n          maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y; // z-order range for the current triangle bbox;\n\n    const minZ = zOrder(minTX, minTY, minX, minY, invSize),\n          maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n    let p = ear.prevZ,\n        n = ear.nextZ; // look for points inside the triangle in both directions\n\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n      if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n      p = p.prevZ;\n      if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n      n = n.nextZ;\n    } // look for remaining points in decreasing z-order\n\n\n    while (p && p.z >= minZ) {\n      if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n      p = p.prevZ;\n    } // look for remaining points in increasing z-order\n\n\n    while (n && n.z <= maxZ) {\n      if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n      n = n.nextZ;\n    }\n\n    return true;\n  } // go through all polygon nodes and cure small local self-intersections\n\n\n  function cureLocalIntersections(start, triangles, dim) {\n    let p = start;\n\n    do {\n      const a = p.prev,\n            b = p.next.next;\n\n      if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n        triangles.push(a.i / dim);\n        triangles.push(p.i / dim);\n        triangles.push(b.i / dim); // remove two nodes involved\n\n        removeNode(p);\n        removeNode(p.next);\n        p = start = b;\n      }\n\n      p = p.next;\n    } while (p !== start);\n\n    return filterPoints(p);\n  } // try splitting polygon into two and triangulate them independently\n\n\n  function splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    let a = start;\n\n    do {\n      let b = a.next.next;\n\n      while (b !== a.prev) {\n        if (a.i !== b.i && isValidDiagonal(a, b)) {\n          // split the polygon in two by the diagonal\n          let c = splitPolygon(a, b); // filter colinear points around the cuts\n\n          a = filterPoints(a, a.next);\n          c = filterPoints(c, c.next); // run earcut on each half\n\n          earcutLinked(a, triangles, dim, minX, minY, invSize);\n          earcutLinked(c, triangles, dim, minX, minY, invSize);\n          return;\n        }\n\n        b = b.next;\n      }\n\n      a = a.next;\n    } while (a !== start);\n  } // link every hole into the outer loop, producing a single-ring polygon without holes\n\n\n  function eliminateHoles(data, holeIndices, outerNode, dim) {\n    const queue = [];\n    let i, len, start, end, list;\n\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n      start = holeIndices[i] * dim;\n      end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n      list = linkedList(data, start, end, dim, false);\n      if (list === list.next) list.steiner = true;\n      queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareX); // process holes from left to right\n\n    for (i = 0; i < queue.length; i++) {\n      eliminateHole(queue[i], outerNode);\n      outerNode = filterPoints(outerNode, outerNode.next);\n    }\n\n    return outerNode;\n  }\n\n  function compareX(a, b) {\n    return a.x - b.x;\n  } // find a bridge between vertices that connects hole with an outer ring and and link it\n\n\n  function eliminateHole(hole, outerNode) {\n    outerNode = findHoleBridge(hole, outerNode);\n\n    if (outerNode) {\n      const b = splitPolygon(outerNode, hole); // filter collinear points around the cuts\n\n      filterPoints(outerNode, outerNode.next);\n      filterPoints(b, b.next);\n    }\n  } // David Eberly's algorithm for finding a bridge between hole and outer polygon\n\n\n  function findHoleBridge(hole, outerNode) {\n    let p = outerNode;\n    const hx = hole.x;\n    const hy = hole.y;\n    let qx = -Infinity,\n        m; // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n\n    do {\n      if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n        const x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n\n        if (x <= hx && x > qx) {\n          qx = x;\n\n          if (x === hx) {\n            if (hy === p.y) return p;\n            if (hy === p.next.y) return p.next;\n          }\n\n          m = p.x < p.next.x ? p : p.next;\n        }\n      }\n\n      p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n    if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    const stop = m,\n          mx = m.x,\n          my = m.y;\n    let tanMin = Infinity,\n        tan;\n    p = m;\n\n    do {\n      if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n        tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n        if (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {\n          m = p;\n          tanMin = tan;\n        }\n      }\n\n      p = p.next;\n    } while (p !== stop);\n\n    return m;\n  } // whether sector in vertex m contains sector in vertex p in the same coordinates\n\n\n  function sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n  } // interlink polygon nodes in z-order\n\n\n  function indexCurve(start, minX, minY, invSize) {\n    let p = start;\n\n    do {\n      if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n      p.prevZ = p.prev;\n      p.nextZ = p.next;\n      p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n    sortLinked(p);\n  } // Simon Tatham's linked list merge sort algorithm\n  // http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\n\n  function sortLinked(list) {\n    let i,\n        p,\n        q,\n        e,\n        tail,\n        numMerges,\n        pSize,\n        qSize,\n        inSize = 1;\n\n    do {\n      p = list;\n      list = null;\n      tail = null;\n      numMerges = 0;\n\n      while (p) {\n        numMerges++;\n        q = p;\n        pSize = 0;\n\n        for (i = 0; i < inSize; i++) {\n          pSize++;\n          q = q.nextZ;\n          if (!q) break;\n        }\n\n        qSize = inSize;\n\n        while (pSize > 0 || qSize > 0 && q) {\n          if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n            e = p;\n            p = p.nextZ;\n            pSize--;\n          } else {\n            e = q;\n            q = q.nextZ;\n            qSize--;\n          }\n\n          if (tail) tail.nextZ = e;else list = e;\n          e.prevZ = tail;\n          tail = e;\n        }\n\n        p = q;\n      }\n\n      tail.nextZ = null;\n      inSize *= 2;\n    } while (numMerges > 1);\n\n    return list;\n  } // z-order of a point given coords and inverse of the longer side of data bbox\n\n\n  function zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = 32767 * (x - minX) * invSize;\n    y = 32767 * (y - minY) * invSize;\n    x = (x | x << 8) & 0x00FF00FF;\n    x = (x | x << 4) & 0x0F0F0F0F;\n    x = (x | x << 2) & 0x33333333;\n    x = (x | x << 1) & 0x55555555;\n    y = (y | y << 8) & 0x00FF00FF;\n    y = (y | y << 4) & 0x0F0F0F0F;\n    y = (y | y << 2) & 0x33333333;\n    y = (y | y << 1) & 0x55555555;\n    return x | y << 1;\n  } // find the leftmost node of a polygon ring\n\n\n  function getLeftmost(start) {\n    let p = start,\n        leftmost = start;\n\n    do {\n      if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;\n      p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n  } // check if a point lies within a convex triangle\n\n\n  function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n  } // check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\n\n  function isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && ( // dones't intersect other edges\n    locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && ( // locally visible\n    area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n    equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n  } // signed area of a triangle\n\n\n  function area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n  } // check if two points are equal\n\n\n  function equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n  } // check if two segments intersect\n\n\n  function intersects(p1, q1, p2, q2) {\n    const o1 = sign(area(p1, q1, p2));\n    const o2 = sign(area(p1, q1, q2));\n    const o3 = sign(area(p2, q2, p1));\n    const o4 = sign(area(p2, q2, q1));\n    if (o1 !== o2 && o3 !== o4) return true; // general case\n\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n    return false;\n  } // for collinear points p, q, r, check if point q lies on segment pr\n\n\n  function onSegment(p, q, r) {\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n  }\n\n  function sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n  } // check if a polygon diagonal intersects any polygon segments\n\n\n  function intersectsPolygon(a, b) {\n    let p = a;\n\n    do {\n      if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;\n      p = p.next;\n    } while (p !== a);\n\n    return false;\n  } // check if a polygon diagonal is locally inside the polygon\n\n\n  function locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n  } // check if the middle point of a polygon diagonal is inside the polygon\n\n\n  function middleInside(a, b) {\n    let p = a,\n        inside = false;\n    const px = (a.x + b.x) / 2,\n          py = (a.y + b.y) / 2;\n\n    do {\n      if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;\n      p = p.next;\n    } while (p !== a);\n\n    return inside;\n  } // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n  // if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\n\n  function splitPolygon(a, b) {\n    const a2 = new Node(a.i, a.x, a.y),\n          b2 = new Node(b.i, b.x, b.y),\n          an = a.next,\n          bp = b.prev;\n    a.next = b;\n    b.prev = a;\n    a2.next = an;\n    an.prev = a2;\n    b2.next = a2;\n    a2.prev = b2;\n    bp.next = b2;\n    b2.prev = bp;\n    return b2;\n  } // create a node and optionally link it with previous one (in a circular doubly linked list)\n\n\n  function insertNode(i, x, y, last) {\n    const p = new Node(i, x, y);\n\n    if (!last) {\n      p.prev = p;\n      p.next = p;\n    } else {\n      p.next = last.next;\n      p.prev = last;\n      last.next.prev = p;\n      last.next = p;\n    }\n\n    return p;\n  }\n\n  function removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n  }\n\n  function Node(i, x, y) {\n    // vertex index in coordinates array\n    this.i = i; // vertex coordinates\n\n    this.x = x;\n    this.y = y; // previous and next vertex nodes in a polygon ring\n\n    this.prev = null;\n    this.next = null; // z-order curve value\n\n    this.z = null; // previous and next nodes in z-order\n\n    this.prevZ = null;\n    this.nextZ = null; // indicates whether this is a steiner point\n\n    this.steiner = false;\n  }\n\n  function signedArea(data, start, end, dim) {\n    let sum = 0;\n\n    for (let i = start, j = end - dim; i < end; i += dim) {\n      sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n      j = i;\n    }\n\n    return sum;\n  }\n\n  class ShapeUtils {\n    // calculate area of the contour polygon\n    static area(contour) {\n      const n = contour.length;\n      let a = 0.0;\n\n      for (let p = n - 1, q = 0; q < n; p = q++) {\n        a += contour[p].x * contour[q].y - contour[q].x * contour[p].y;\n      }\n\n      return a * 0.5;\n    }\n\n    static isClockWise(pts) {\n      return ShapeUtils.area(pts) < 0;\n    }\n\n    static triangulateShape(contour, holes) {\n      const vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\n      const holeIndices = []; // array of hole indices\n\n      const faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n      removeDupEndPts(contour);\n      addContour(vertices, contour); //\n\n      let holeIndex = contour.length;\n      holes.forEach(removeDupEndPts);\n\n      for (let i = 0; i < holes.length; i++) {\n        holeIndices.push(holeIndex);\n        holeIndex += holes[i].length;\n        addContour(vertices, holes[i]);\n      } //\n\n\n      const triangles = Earcut.triangulate(vertices, holeIndices); //\n\n      for (let i = 0; i < triangles.length; i += 3) {\n        faces.push(triangles.slice(i, i + 3));\n      }\n\n      return faces;\n    }\n\n  }\n\n  function removeDupEndPts(points) {\n    const l = points.length;\n\n    if (l > 2 && points[l - 1].equals(points[0])) {\n      points.pop();\n    }\n  }\n\n  function addContour(vertices, contour) {\n    for (let i = 0; i < contour.length; i++) {\n      vertices.push(contour[i].x);\n      vertices.push(contour[i].y);\n    }\n  }\n  /**\n   * Creates extruded geometry from a path shape.\n   *\n   * parameters = {\n   *\n   *\tcurveSegments: <int>, // number of points on the curves\n   *\tsteps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n   *\tdepth: <float>, // Depth to extrude the shape\n   *\n   *\tbevelEnabled: <bool>, // turn on bevel\n   *\tbevelThickness: <float>, // how deep into the original shape bevel goes\n   *\tbevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\n   *\tbevelOffset: <float>, // how far from shape outline does bevel start\n   *\tbevelSegments: <int>, // number of bevel layers\n   *\n   *\textrudePath: <THREE.Curve> // curve to extrude shape along\n   *\n   *\tUVGenerator: <Object> // object that provides UV generator functions\n   *\n   * }\n   */\n\n\n  class ExtrudeGeometry extends BufferGeometry {\n    constructor() {\n      let shapes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Shape([new Vector2(0.5, 0.5), new Vector2(-0.5, 0.5), new Vector2(-0.5, -0.5), new Vector2(0.5, -0.5)]);\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      super();\n      this.type = 'ExtrudeGeometry';\n      this.parameters = {\n        shapes: shapes,\n        options: options\n      };\n      shapes = Array.isArray(shapes) ? shapes : [shapes];\n      const scope = this;\n      const verticesArray = [];\n      const uvArray = [];\n\n      for (let i = 0, l = shapes.length; i < l; i++) {\n        const shape = shapes[i];\n        addShape(shape);\n      } // build geometry\n\n\n      this.setAttribute('position', new Float32BufferAttribute(verticesArray, 3));\n      this.setAttribute('uv', new Float32BufferAttribute(uvArray, 2));\n      this.computeVertexNormals(); // functions\n\n      function addShape(shape) {\n        const placeholder = []; // options\n\n        const curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n        const steps = options.steps !== undefined ? options.steps : 1;\n        let depth = options.depth !== undefined ? options.depth : 1;\n        let bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n        let bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 0.2;\n        let bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 0.1;\n        let bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n        let bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n        const extrudePath = options.extrudePath;\n        const uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator; // deprecated options\n\n        if (options.amount !== undefined) {\n          console.warn('THREE.ExtrudeBufferGeometry: amount has been renamed to depth.');\n          depth = options.amount;\n        } //\n\n\n        let extrudePts,\n            extrudeByPath = false;\n        let splineTube, binormal, normal, position2;\n\n        if (extrudePath) {\n          extrudePts = extrudePath.getSpacedPoints(steps);\n          extrudeByPath = true;\n          bevelEnabled = false; // bevels not supported for path extrusion\n          // SETUP TNB variables\n          // TODO1 - have a .isClosed in spline?\n\n          splineTube = extrudePath.computeFrenetFrames(steps, false); // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n          binormal = new Vector3();\n          normal = new Vector3();\n          position2 = new Vector3();\n        } // Safeguards if bevels are not enabled\n\n\n        if (!bevelEnabled) {\n          bevelSegments = 0;\n          bevelThickness = 0;\n          bevelSize = 0;\n          bevelOffset = 0;\n        } // Variables initialization\n\n\n        const shapePoints = shape.extractPoints(curveSegments);\n        let vertices = shapePoints.shape;\n        const holes = shapePoints.holes;\n        const reverse = !ShapeUtils.isClockWise(vertices);\n\n        if (reverse) {\n          vertices = vertices.reverse(); // Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n          for (let h = 0, hl = holes.length; h < hl; h++) {\n            const ahole = holes[h];\n\n            if (ShapeUtils.isClockWise(ahole)) {\n              holes[h] = ahole.reverse();\n            }\n          }\n        }\n\n        const faces = ShapeUtils.triangulateShape(vertices, holes);\n        /* Vertices */\n\n        const contour = vertices; // vertices has all points but contour has only points of circumference\n\n        for (let h = 0, hl = holes.length; h < hl; h++) {\n          const ahole = holes[h];\n          vertices = vertices.concat(ahole);\n        }\n\n        function scalePt2(pt, vec, size) {\n          if (!vec) console.error('THREE.ExtrudeGeometry: vec does not exist');\n          return vec.clone().multiplyScalar(size).add(pt);\n        }\n\n        const vlen = vertices.length,\n              flen = faces.length; // Find directions for point movement\n\n        function getBevelVec(inPt, inPrev, inNext) {\n          // computes for inPt the corresponding point inPt' on a new contour\n          //\t shifted by 1 unit (length of normalized vector) to the left\n          // if we walk along contour clockwise, this new contour is outside the old one\n          //\n          // inPt' is the intersection of the two lines parallel to the two\n          //\tadjacent edges of inPt at a distance of 1 unit on the left side.\n          let v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n          // good reading for geometry algorithms (here: line-line intersection)\n          // http://geomalgorithms.com/a05-_intersect-1.html\n\n          const v_prev_x = inPt.x - inPrev.x,\n                v_prev_y = inPt.y - inPrev.y;\n          const v_next_x = inNext.x - inPt.x,\n                v_next_y = inNext.y - inPt.y;\n          const v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y; // check for collinear edges\n\n          const collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;\n\n          if (Math.abs(collinear0) > Number.EPSILON) {\n            // not collinear\n            // length of vectors for normalizing\n            const v_prev_len = Math.sqrt(v_prev_lensq);\n            const v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y); // shift adjacent points by unit vectors to the left\n\n            const ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;\n            const ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;\n            const ptNextShift_x = inNext.x - v_next_y / v_next_len;\n            const ptNextShift_y = inNext.y + v_next_x / v_next_len; // scaling factor for v_prev to intersection point\n\n            const sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x); // vector from inPt to intersection point\n\n            v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;\n            v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y; // Don't normalize!, otherwise sharp corners become ugly\n            //\tbut prevent crazy spikes\n\n            const v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;\n\n            if (v_trans_lensq <= 2) {\n              return new Vector2(v_trans_x, v_trans_y);\n            } else {\n              shrink_by = Math.sqrt(v_trans_lensq / 2);\n            }\n          } else {\n            // handle special case of collinear edges\n            let direction_eq = false; // assumes: opposite\n\n            if (v_prev_x > Number.EPSILON) {\n              if (v_next_x > Number.EPSILON) {\n                direction_eq = true;\n              }\n            } else {\n              if (v_prev_x < -Number.EPSILON) {\n                if (v_next_x < -Number.EPSILON) {\n                  direction_eq = true;\n                }\n              } else {\n                if (Math.sign(v_prev_y) === Math.sign(v_next_y)) {\n                  direction_eq = true;\n                }\n              }\n            }\n\n            if (direction_eq) {\n              // console.log(\"Warning: lines are a straight sequence\");\n              v_trans_x = -v_prev_y;\n              v_trans_y = v_prev_x;\n              shrink_by = Math.sqrt(v_prev_lensq);\n            } else {\n              // console.log(\"Warning: lines are a straight spike\");\n              v_trans_x = v_prev_x;\n              v_trans_y = v_prev_y;\n              shrink_by = Math.sqrt(v_prev_lensq / 2);\n            }\n          }\n\n          return new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);\n        }\n\n        const contourMovements = [];\n\n        for (let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {\n          if (j === il) j = 0;\n          if (k === il) k = 0; //\t(j)---(i)---(k)\n          // console.log('i,j,k', i, j , k)\n\n          contourMovements[i] = getBevelVec(contour[i], contour[j], contour[k]);\n        }\n\n        const holesMovements = [];\n        let oneHoleMovements,\n            verticesMovements = contourMovements.concat();\n\n        for (let h = 0, hl = holes.length; h < hl; h++) {\n          const ahole = holes[h];\n          oneHoleMovements = [];\n\n          for (let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {\n            if (j === il) j = 0;\n            if (k === il) k = 0; //\t(j)---(i)---(k)\n\n            oneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k]);\n          }\n\n          holesMovements.push(oneHoleMovements);\n          verticesMovements = verticesMovements.concat(oneHoleMovements);\n        } // Loop bevelSegments, 1 for the front, 1 for the back\n\n\n        for (let b = 0; b < bevelSegments; b++) {\n          //for ( b = bevelSegments; b > 0; b -- ) {\n          const t = b / bevelSegments;\n          const z = bevelThickness * Math.cos(t * Math.PI / 2);\n          const bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape\n\n          for (let i = 0, il = contour.length; i < il; i++) {\n            const vert = scalePt2(contour[i], contourMovements[i], bs);\n            v(vert.x, vert.y, -z);\n          } // expand holes\n\n\n          for (let h = 0, hl = holes.length; h < hl; h++) {\n            const ahole = holes[h];\n            oneHoleMovements = holesMovements[h];\n\n            for (let i = 0, il = ahole.length; i < il; i++) {\n              const vert = scalePt2(ahole[i], oneHoleMovements[i], bs);\n              v(vert.x, vert.y, -z);\n            }\n          }\n        }\n\n        const bs = bevelSize + bevelOffset; // Back facing vertices\n\n        for (let i = 0; i < vlen; i++) {\n          const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];\n\n          if (!extrudeByPath) {\n            v(vert.x, vert.y, 0);\n          } else {\n            // v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n            normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);\n            binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);\n            position2.copy(extrudePts[0]).add(normal).add(binormal);\n            v(position2.x, position2.y, position2.z);\n          }\n        } // Add stepped vertices...\n        // Including front facing vertices\n\n\n        for (let s = 1; s <= steps; s++) {\n          for (let i = 0; i < vlen; i++) {\n            const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];\n\n            if (!extrudeByPath) {\n              v(vert.x, vert.y, depth / steps * s);\n            } else {\n              // v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n              normal.copy(splineTube.normals[s]).multiplyScalar(vert.x);\n              binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);\n              position2.copy(extrudePts[s]).add(normal).add(binormal);\n              v(position2.x, position2.y, position2.z);\n            }\n          }\n        } // Add bevel segments planes\n        //for ( b = 1; b <= bevelSegments; b ++ ) {\n\n\n        for (let b = bevelSegments - 1; b >= 0; b--) {\n          const t = b / bevelSegments;\n          const z = bevelThickness * Math.cos(t * Math.PI / 2);\n          const bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape\n\n          for (let i = 0, il = contour.length; i < il; i++) {\n            const vert = scalePt2(contour[i], contourMovements[i], bs);\n            v(vert.x, vert.y, depth + z);\n          } // expand holes\n\n\n          for (let h = 0, hl = holes.length; h < hl; h++) {\n            const ahole = holes[h];\n            oneHoleMovements = holesMovements[h];\n\n            for (let i = 0, il = ahole.length; i < il; i++) {\n              const vert = scalePt2(ahole[i], oneHoleMovements[i], bs);\n\n              if (!extrudeByPath) {\n                v(vert.x, vert.y, depth + z);\n              } else {\n                v(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z);\n              }\n            }\n          }\n        }\n        /* Faces */\n        // Top and bottom faces\n\n\n        buildLidFaces(); // Sides faces\n\n        buildSideFaces(); /////\tInternal functions\n\n        function buildLidFaces() {\n          const start = verticesArray.length / 3;\n\n          if (bevelEnabled) {\n            let layer = 0; // steps + 1\n\n            let offset = vlen * layer; // Bottom faces\n\n            for (let i = 0; i < flen; i++) {\n              const face = faces[i];\n              f3(face[2] + offset, face[1] + offset, face[0] + offset);\n            }\n\n            layer = steps + bevelSegments * 2;\n            offset = vlen * layer; // Top faces\n\n            for (let i = 0; i < flen; i++) {\n              const face = faces[i];\n              f3(face[0] + offset, face[1] + offset, face[2] + offset);\n            }\n          } else {\n            // Bottom faces\n            for (let i = 0; i < flen; i++) {\n              const face = faces[i];\n              f3(face[2], face[1], face[0]);\n            } // Top faces\n\n\n            for (let i = 0; i < flen; i++) {\n              const face = faces[i];\n              f3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);\n            }\n          }\n\n          scope.addGroup(start, verticesArray.length / 3 - start, 0);\n        } // Create faces for the z-sides of the shape\n\n\n        function buildSideFaces() {\n          const start = verticesArray.length / 3;\n          let layeroffset = 0;\n          sidewalls(contour, layeroffset);\n          layeroffset += contour.length;\n\n          for (let h = 0, hl = holes.length; h < hl; h++) {\n            const ahole = holes[h];\n            sidewalls(ahole, layeroffset); //, true\n\n            layeroffset += ahole.length;\n          }\n\n          scope.addGroup(start, verticesArray.length / 3 - start, 1);\n        }\n\n        function sidewalls(contour, layeroffset) {\n          let i = contour.length;\n\n          while (--i >= 0) {\n            const j = i;\n            let k = i - 1;\n            if (k < 0) k = contour.length - 1; //console.log('b', i,j, i-1, k,vertices.length);\n\n            for (let s = 0, sl = steps + bevelSegments * 2; s < sl; s++) {\n              const slen1 = vlen * s;\n              const slen2 = vlen * (s + 1);\n              const a = layeroffset + j + slen1,\n                    b = layeroffset + k + slen1,\n                    c = layeroffset + k + slen2,\n                    d = layeroffset + j + slen2;\n              f4(a, b, c, d);\n            }\n          }\n        }\n\n        function v(x, y, z) {\n          placeholder.push(x);\n          placeholder.push(y);\n          placeholder.push(z);\n        }\n\n        function f3(a, b, c) {\n          addVertex(a);\n          addVertex(b);\n          addVertex(c);\n          const nextIndex = verticesArray.length / 3;\n          const uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n          addUV(uvs[0]);\n          addUV(uvs[1]);\n          addUV(uvs[2]);\n        }\n\n        function f4(a, b, c, d) {\n          addVertex(a);\n          addVertex(b);\n          addVertex(d);\n          addVertex(b);\n          addVertex(c);\n          addVertex(d);\n          const nextIndex = verticesArray.length / 3;\n          const uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n          addUV(uvs[0]);\n          addUV(uvs[1]);\n          addUV(uvs[3]);\n          addUV(uvs[1]);\n          addUV(uvs[2]);\n          addUV(uvs[3]);\n        }\n\n        function addVertex(index) {\n          verticesArray.push(placeholder[index * 3 + 0]);\n          verticesArray.push(placeholder[index * 3 + 1]);\n          verticesArray.push(placeholder[index * 3 + 2]);\n        }\n\n        function addUV(vector2) {\n          uvArray.push(vector2.x);\n          uvArray.push(vector2.y);\n        }\n      }\n    }\n\n    toJSON() {\n      const data = super.toJSON();\n      const shapes = this.parameters.shapes;\n      const options = this.parameters.options;\n      return toJSON$1(shapes, options, data);\n    }\n\n    static fromJSON(data, shapes) {\n      const geometryShapes = [];\n\n      for (let j = 0, jl = data.shapes.length; j < jl; j++) {\n        const shape = shapes[data.shapes[j]];\n        geometryShapes.push(shape);\n      }\n\n      const extrudePath = data.options.extrudePath;\n\n      if (extrudePath !== undefined) {\n        data.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);\n      }\n\n      return new ExtrudeGeometry(geometryShapes, data.options);\n    }\n\n  }\n\n  const WorldUVGenerator = {\n    generateTopUV: function (geometry, vertices, indexA, indexB, indexC) {\n      const a_x = vertices[indexA * 3];\n      const a_y = vertices[indexA * 3 + 1];\n      const b_x = vertices[indexB * 3];\n      const b_y = vertices[indexB * 3 + 1];\n      const c_x = vertices[indexC * 3];\n      const c_y = vertices[indexC * 3 + 1];\n      return [new Vector2(a_x, a_y), new Vector2(b_x, b_y), new Vector2(c_x, c_y)];\n    },\n    generateSideWallUV: function (geometry, vertices, indexA, indexB, indexC, indexD) {\n      const a_x = vertices[indexA * 3];\n      const a_y = vertices[indexA * 3 + 1];\n      const a_z = vertices[indexA * 3 + 2];\n      const b_x = vertices[indexB * 3];\n      const b_y = vertices[indexB * 3 + 1];\n      const b_z = vertices[indexB * 3 + 2];\n      const c_x = vertices[indexC * 3];\n      const c_y = vertices[indexC * 3 + 1];\n      const c_z = vertices[indexC * 3 + 2];\n      const d_x = vertices[indexD * 3];\n      const d_y = vertices[indexD * 3 + 1];\n      const d_z = vertices[indexD * 3 + 2];\n\n      if (Math.abs(a_y - b_y) < Math.abs(a_x - b_x)) {\n        return [new Vector2(a_x, 1 - a_z), new Vector2(b_x, 1 - b_z), new Vector2(c_x, 1 - c_z), new Vector2(d_x, 1 - d_z)];\n      } else {\n        return [new Vector2(a_y, 1 - a_z), new Vector2(b_y, 1 - b_z), new Vector2(c_y, 1 - c_z), new Vector2(d_y, 1 - d_z)];\n      }\n    }\n  };\n\n  function toJSON$1(shapes, options, data) {\n    data.shapes = [];\n\n    if (Array.isArray(shapes)) {\n      for (let i = 0, l = shapes.length; i < l; i++) {\n        const shape = shapes[i];\n        data.shapes.push(shape.uuid);\n      }\n    } else {\n      data.shapes.push(shapes.uuid);\n    }\n\n    if (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();\n    return data;\n  }\n\n  class IcosahedronGeometry extends PolyhedronGeometry {\n    constructor() {\n      let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      let detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      const t = (1 + Math.sqrt(5)) / 2;\n      const vertices = [-1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, 0, 0, -1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, t, 0, -1, t, 0, 1, -t, 0, -1, -t, 0, 1];\n      const indices = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1];\n      super(vertices, indices, radius, detail);\n      this.type = 'IcosahedronGeometry';\n      this.parameters = {\n        radius: radius,\n        detail: detail\n      };\n    }\n\n    static fromJSON(data) {\n      return new IcosahedronGeometry(data.radius, data.detail);\n    }\n\n  }\n\n  class LatheGeometry extends BufferGeometry {\n    constructor() {\n      let points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [new Vector2(0, 0.5), new Vector2(0.5, 0), new Vector2(0, -0.5)];\n      let segments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 12;\n      let phiStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      let phiLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Math.PI * 2;\n      super();\n      this.type = 'LatheGeometry';\n      this.parameters = {\n        points: points,\n        segments: segments,\n        phiStart: phiStart,\n        phiLength: phiLength\n      };\n      segments = Math.floor(segments); // clamp phiLength so it's in range of [ 0, 2PI ]\n\n      phiLength = clamp(phiLength, 0, Math.PI * 2); // buffers\n\n      const indices = [];\n      const vertices = [];\n      const uvs = []; // helper variables\n\n      const inverseSegments = 1.0 / segments;\n      const vertex = new Vector3();\n      const uv = new Vector2(); // generate vertices and uvs\n\n      for (let i = 0; i <= segments; i++) {\n        const phi = phiStart + i * inverseSegments * phiLength;\n        const sin = Math.sin(phi);\n        const cos = Math.cos(phi);\n\n        for (let j = 0; j <= points.length - 1; j++) {\n          // vertex\n          vertex.x = points[j].x * sin;\n          vertex.y = points[j].y;\n          vertex.z = points[j].x * cos;\n          vertices.push(vertex.x, vertex.y, vertex.z); // uv\n\n          uv.x = i / segments;\n          uv.y = j / (points.length - 1);\n          uvs.push(uv.x, uv.y);\n        }\n      } // indices\n\n\n      for (let i = 0; i < segments; i++) {\n        for (let j = 0; j < points.length - 1; j++) {\n          const base = j + i * points.length;\n          const a = base;\n          const b = base + points.length;\n          const c = base + points.length + 1;\n          const d = base + 1; // faces\n\n          indices.push(a, b, d);\n          indices.push(b, c, d);\n        }\n      } // build geometry\n\n\n      this.setIndex(indices);\n      this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // generate normals\n\n      this.computeVertexNormals(); // if the geometry is closed, we need to average the normals along the seam.\n      // because the corresponding vertices are identical (but still have different UVs).\n\n      if (phiLength === Math.PI * 2) {\n        const normals = this.attributes.normal.array;\n        const n1 = new Vector3();\n        const n2 = new Vector3();\n        const n = new Vector3(); // this is the buffer offset for the last line of vertices\n\n        const base = segments * points.length * 3;\n\n        for (let i = 0, j = 0; i < points.length; i++, j += 3) {\n          // select the normal of the vertex in the first line\n          n1.x = normals[j + 0];\n          n1.y = normals[j + 1];\n          n1.z = normals[j + 2]; // select the normal of the vertex in the last line\n\n          n2.x = normals[base + j + 0];\n          n2.y = normals[base + j + 1];\n          n2.z = normals[base + j + 2]; // average normals\n\n          n.addVectors(n1, n2).normalize(); // assign the new values to both normals\n\n          normals[j + 0] = normals[base + j + 0] = n.x;\n          normals[j + 1] = normals[base + j + 1] = n.y;\n          normals[j + 2] = normals[base + j + 2] = n.z;\n        }\n      }\n    }\n\n    static fromJSON(data) {\n      return new LatheGeometry(data.points, data.segments, data.phiStart, data.phiLength);\n    }\n\n  }\n\n  class OctahedronGeometry extends PolyhedronGeometry {\n    constructor() {\n      let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      let detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      const vertices = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1];\n      const indices = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2];\n      super(vertices, indices, radius, detail);\n      this.type = 'OctahedronGeometry';\n      this.parameters = {\n        radius: radius,\n        detail: detail\n      };\n    }\n\n    static fromJSON(data) {\n      return new OctahedronGeometry(data.radius, data.detail);\n    }\n\n  }\n\n  class RingGeometry extends BufferGeometry {\n    constructor() {\n      let innerRadius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.5;\n      let outerRadius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      let thetaSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 8;\n      let phiSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      let thetaStart = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      let thetaLength = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Math.PI * 2;\n      super();\n      this.type = 'RingGeometry';\n      this.parameters = {\n        innerRadius: innerRadius,\n        outerRadius: outerRadius,\n        thetaSegments: thetaSegments,\n        phiSegments: phiSegments,\n        thetaStart: thetaStart,\n        thetaLength: thetaLength\n      };\n      thetaSegments = Math.max(3, thetaSegments);\n      phiSegments = Math.max(1, phiSegments); // buffers\n\n      const indices = [];\n      const vertices = [];\n      const normals = [];\n      const uvs = []; // some helper variables\n\n      let radius = innerRadius;\n      const radiusStep = (outerRadius - innerRadius) / phiSegments;\n      const vertex = new Vector3();\n      const uv = new Vector2(); // generate vertices, normals and uvs\n\n      for (let j = 0; j <= phiSegments; j++) {\n        for (let i = 0; i <= thetaSegments; i++) {\n          // values are generate from the inside of the ring to the outside\n          const segment = thetaStart + i / thetaSegments * thetaLength; // vertex\n\n          vertex.x = radius * Math.cos(segment);\n          vertex.y = radius * Math.sin(segment);\n          vertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n          normals.push(0, 0, 1); // uv\n\n          uv.x = (vertex.x / outerRadius + 1) / 2;\n          uv.y = (vertex.y / outerRadius + 1) / 2;\n          uvs.push(uv.x, uv.y);\n        } // increase the radius for next row of vertices\n\n\n        radius += radiusStep;\n      } // indices\n\n\n      for (let j = 0; j < phiSegments; j++) {\n        const thetaSegmentLevel = j * (thetaSegments + 1);\n\n        for (let i = 0; i < thetaSegments; i++) {\n          const segment = i + thetaSegmentLevel;\n          const a = segment;\n          const b = segment + thetaSegments + 1;\n          const c = segment + thetaSegments + 2;\n          const d = segment + 1; // faces\n\n          indices.push(a, b, d);\n          indices.push(b, c, d);\n        }\n      } // build geometry\n\n\n      this.setIndex(indices);\n      this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n    }\n\n    static fromJSON(data) {\n      return new RingGeometry(data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);\n    }\n\n  }\n\n  class ShapeGeometry extends BufferGeometry {\n    constructor() {\n      let shapes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Shape([new Vector2(0, 0.5), new Vector2(-0.5, -0.5), new Vector2(0.5, -0.5)]);\n      let curveSegments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 12;\n      super();\n      this.type = 'ShapeGeometry';\n      this.parameters = {\n        shapes: shapes,\n        curveSegments: curveSegments\n      }; // buffers\n\n      const indices = [];\n      const vertices = [];\n      const normals = [];\n      const uvs = []; // helper variables\n\n      let groupStart = 0;\n      let groupCount = 0; // allow single and array values for \"shapes\" parameter\n\n      if (Array.isArray(shapes) === false) {\n        addShape(shapes);\n      } else {\n        for (let i = 0; i < shapes.length; i++) {\n          addShape(shapes[i]);\n          this.addGroup(groupStart, groupCount, i); // enables MultiMaterial support\n\n          groupStart += groupCount;\n          groupCount = 0;\n        }\n      } // build geometry\n\n\n      this.setIndex(indices);\n      this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // helper functions\n\n      function addShape(shape) {\n        const indexOffset = vertices.length / 3;\n        const points = shape.extractPoints(curveSegments);\n        let shapeVertices = points.shape;\n        const shapeHoles = points.holes; // check direction of vertices\n\n        if (ShapeUtils.isClockWise(shapeVertices) === false) {\n          shapeVertices = shapeVertices.reverse();\n        }\n\n        for (let i = 0, l = shapeHoles.length; i < l; i++) {\n          const shapeHole = shapeHoles[i];\n\n          if (ShapeUtils.isClockWise(shapeHole) === true) {\n            shapeHoles[i] = shapeHole.reverse();\n          }\n        }\n\n        const faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles); // join vertices of inner and outer paths to a single array\n\n        for (let i = 0, l = shapeHoles.length; i < l; i++) {\n          const shapeHole = shapeHoles[i];\n          shapeVertices = shapeVertices.concat(shapeHole);\n        } // vertices, normals, uvs\n\n\n        for (let i = 0, l = shapeVertices.length; i < l; i++) {\n          const vertex = shapeVertices[i];\n          vertices.push(vertex.x, vertex.y, 0);\n          normals.push(0, 0, 1);\n          uvs.push(vertex.x, vertex.y); // world uvs\n        } // incides\n\n\n        for (let i = 0, l = faces.length; i < l; i++) {\n          const face = faces[i];\n          const a = face[0] + indexOffset;\n          const b = face[1] + indexOffset;\n          const c = face[2] + indexOffset;\n          indices.push(a, b, c);\n          groupCount += 3;\n        }\n      }\n    }\n\n    toJSON() {\n      const data = super.toJSON();\n      const shapes = this.parameters.shapes;\n      return toJSON(shapes, data);\n    }\n\n    static fromJSON(data, shapes) {\n      const geometryShapes = [];\n\n      for (let j = 0, jl = data.shapes.length; j < jl; j++) {\n        const shape = shapes[data.shapes[j]];\n        geometryShapes.push(shape);\n      }\n\n      return new ShapeGeometry(geometryShapes, data.curveSegments);\n    }\n\n  }\n\n  function toJSON(shapes, data) {\n    data.shapes = [];\n\n    if (Array.isArray(shapes)) {\n      for (let i = 0, l = shapes.length; i < l; i++) {\n        const shape = shapes[i];\n        data.shapes.push(shape.uuid);\n      }\n    } else {\n      data.shapes.push(shapes.uuid);\n    }\n\n    return data;\n  }\n\n  class SphereGeometry extends BufferGeometry {\n    constructor() {\n      let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      let widthSegments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;\n      let heightSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 16;\n      let phiStart = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      let phiLength = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Math.PI * 2;\n      let thetaStart = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n      let thetaLength = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : Math.PI;\n      super();\n      this.type = 'SphereGeometry';\n      this.parameters = {\n        radius: radius,\n        widthSegments: widthSegments,\n        heightSegments: heightSegments,\n        phiStart: phiStart,\n        phiLength: phiLength,\n        thetaStart: thetaStart,\n        thetaLength: thetaLength\n      };\n      widthSegments = Math.max(3, Math.floor(widthSegments));\n      heightSegments = Math.max(2, Math.floor(heightSegments));\n      const thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);\n      let index = 0;\n      const grid = [];\n      const vertex = new Vector3();\n      const normal = new Vector3(); // buffers\n\n      const indices = [];\n      const vertices = [];\n      const normals = [];\n      const uvs = []; // generate vertices, normals and uvs\n\n      for (let iy = 0; iy <= heightSegments; iy++) {\n        const verticesRow = [];\n        const v = iy / heightSegments; // special case for the poles\n\n        let uOffset = 0;\n\n        if (iy == 0 && thetaStart == 0) {\n          uOffset = 0.5 / widthSegments;\n        } else if (iy == heightSegments && thetaEnd == Math.PI) {\n          uOffset = -0.5 / widthSegments;\n        }\n\n        for (let ix = 0; ix <= widthSegments; ix++) {\n          const u = ix / widthSegments; // vertex\n\n          vertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n          vertex.y = radius * Math.cos(thetaStart + v * thetaLength);\n          vertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n          vertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n          normal.copy(vertex).normalize();\n          normals.push(normal.x, normal.y, normal.z); // uv\n\n          uvs.push(u + uOffset, 1 - v);\n          verticesRow.push(index++);\n        }\n\n        grid.push(verticesRow);\n      } // indices\n\n\n      for (let iy = 0; iy < heightSegments; iy++) {\n        for (let ix = 0; ix < widthSegments; ix++) {\n          const a = grid[iy][ix + 1];\n          const b = grid[iy][ix];\n          const c = grid[iy + 1][ix];\n          const d = grid[iy + 1][ix + 1];\n          if (iy !== 0 || thetaStart > 0) indices.push(a, b, d);\n          if (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);\n        }\n      } // build geometry\n\n\n      this.setIndex(indices);\n      this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n    }\n\n    static fromJSON(data) {\n      return new SphereGeometry(data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);\n    }\n\n  }\n\n  class TetrahedronGeometry extends PolyhedronGeometry {\n    constructor() {\n      let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      let detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      const vertices = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1];\n      const indices = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1];\n      super(vertices, indices, radius, detail);\n      this.type = 'TetrahedronGeometry';\n      this.parameters = {\n        radius: radius,\n        detail: detail\n      };\n    }\n\n    static fromJSON(data) {\n      return new TetrahedronGeometry(data.radius, data.detail);\n    }\n\n  }\n\n  class TorusGeometry extends BufferGeometry {\n    constructor() {\n      let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      let tube = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.4;\n      let radialSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 8;\n      let tubularSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 6;\n      let arc = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Math.PI * 2;\n      super();\n      this.type = 'TorusGeometry';\n      this.parameters = {\n        radius: radius,\n        tube: tube,\n        radialSegments: radialSegments,\n        tubularSegments: tubularSegments,\n        arc: arc\n      };\n      radialSegments = Math.floor(radialSegments);\n      tubularSegments = Math.floor(tubularSegments); // buffers\n\n      const indices = [];\n      const vertices = [];\n      const normals = [];\n      const uvs = []; // helper variables\n\n      const center = new Vector3();\n      const vertex = new Vector3();\n      const normal = new Vector3(); // generate vertices, normals and uvs\n\n      for (let j = 0; j <= radialSegments; j++) {\n        for (let i = 0; i <= tubularSegments; i++) {\n          const u = i / tubularSegments * arc;\n          const v = j / radialSegments * Math.PI * 2; // vertex\n\n          vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n          vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n          vertex.z = tube * Math.sin(v);\n          vertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n          center.x = radius * Math.cos(u);\n          center.y = radius * Math.sin(u);\n          normal.subVectors(vertex, center).normalize();\n          normals.push(normal.x, normal.y, normal.z); // uv\n\n          uvs.push(i / tubularSegments);\n          uvs.push(j / radialSegments);\n        }\n      } // generate indices\n\n\n      for (let j = 1; j <= radialSegments; j++) {\n        for (let i = 1; i <= tubularSegments; i++) {\n          // indices\n          const a = (tubularSegments + 1) * j + i - 1;\n          const b = (tubularSegments + 1) * (j - 1) + i - 1;\n          const c = (tubularSegments + 1) * (j - 1) + i;\n          const d = (tubularSegments + 1) * j + i; // faces\n\n          indices.push(a, b, d);\n          indices.push(b, c, d);\n        }\n      } // build geometry\n\n\n      this.setIndex(indices);\n      this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n    }\n\n    static fromJSON(data) {\n      return new TorusGeometry(data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);\n    }\n\n  }\n\n  class TorusKnotGeometry extends BufferGeometry {\n    constructor() {\n      let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      let tube = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.4;\n      let tubularSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 64;\n      let radialSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;\n      let p = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 2;\n      let q = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 3;\n      super();\n      this.type = 'TorusKnotGeometry';\n      this.parameters = {\n        radius: radius,\n        tube: tube,\n        tubularSegments: tubularSegments,\n        radialSegments: radialSegments,\n        p: p,\n        q: q\n      };\n      tubularSegments = Math.floor(tubularSegments);\n      radialSegments = Math.floor(radialSegments); // buffers\n\n      const indices = [];\n      const vertices = [];\n      const normals = [];\n      const uvs = []; // helper variables\n\n      const vertex = new Vector3();\n      const normal = new Vector3();\n      const P1 = new Vector3();\n      const P2 = new Vector3();\n      const B = new Vector3();\n      const T = new Vector3();\n      const N = new Vector3(); // generate vertices, normals and uvs\n\n      for (let i = 0; i <= tubularSegments; ++i) {\n        // the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n        const u = i / tubularSegments * p * Math.PI * 2; // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n        // these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n        calculatePositionOnCurve(u, p, q, radius, P1);\n        calculatePositionOnCurve(u + 0.01, p, q, radius, P2); // calculate orthonormal basis\n\n        T.subVectors(P2, P1);\n        N.addVectors(P2, P1);\n        B.crossVectors(T, N);\n        N.crossVectors(B, T); // normalize B, N. T can be ignored, we don't use it\n\n        B.normalize();\n        N.normalize();\n\n        for (let j = 0; j <= radialSegments; ++j) {\n          // now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n          // because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n          const v = j / radialSegments * Math.PI * 2;\n          const cx = -tube * Math.cos(v);\n          const cy = tube * Math.sin(v); // now calculate the final vertex position.\n          // first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n          vertex.x = P1.x + (cx * N.x + cy * B.x);\n          vertex.y = P1.y + (cx * N.y + cy * B.y);\n          vertex.z = P1.z + (cx * N.z + cy * B.z);\n          vertices.push(vertex.x, vertex.y, vertex.z); // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n          normal.subVectors(vertex, P1).normalize();\n          normals.push(normal.x, normal.y, normal.z); // uv\n\n          uvs.push(i / tubularSegments);\n          uvs.push(j / radialSegments);\n        }\n      } // generate indices\n\n\n      for (let j = 1; j <= tubularSegments; j++) {\n        for (let i = 1; i <= radialSegments; i++) {\n          // indices\n          const a = (radialSegments + 1) * (j - 1) + (i - 1);\n          const b = (radialSegments + 1) * j + (i - 1);\n          const c = (radialSegments + 1) * j + i;\n          const d = (radialSegments + 1) * (j - 1) + i; // faces\n\n          indices.push(a, b, d);\n          indices.push(b, c, d);\n        }\n      } // build geometry\n\n\n      this.setIndex(indices);\n      this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // this function calculates the current position on the torus curve\n\n      function calculatePositionOnCurve(u, p, q, radius, position) {\n        const cu = Math.cos(u);\n        const su = Math.sin(u);\n        const quOverP = q / p * u;\n        const cs = Math.cos(quOverP);\n        position.x = radius * (2 + cs) * 0.5 * cu;\n        position.y = radius * (2 + cs) * su * 0.5;\n        position.z = radius * Math.sin(quOverP) * 0.5;\n      }\n    }\n\n    static fromJSON(data) {\n      return new TorusKnotGeometry(data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);\n    }\n\n  }\n\n  class TubeGeometry extends BufferGeometry {\n    constructor() {\n      let path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new QuadraticBezierCurve3(new Vector3(-1, -1, 0), new Vector3(-1, 1, 0), new Vector3(1, 1, 0));\n      let tubularSegments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 64;\n      let radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      let radialSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;\n      let closed = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      super();\n      this.type = 'TubeGeometry';\n      this.parameters = {\n        path: path,\n        tubularSegments: tubularSegments,\n        radius: radius,\n        radialSegments: radialSegments,\n        closed: closed\n      };\n      const frames = path.computeFrenetFrames(tubularSegments, closed); // expose internals\n\n      this.tangents = frames.tangents;\n      this.normals = frames.normals;\n      this.binormals = frames.binormals; // helper variables\n\n      const vertex = new Vector3();\n      const normal = new Vector3();\n      const uv = new Vector2();\n      let P = new Vector3(); // buffer\n\n      const vertices = [];\n      const normals = [];\n      const uvs = [];\n      const indices = []; // create buffer data\n\n      generateBufferData(); // build geometry\n\n      this.setIndex(indices);\n      this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n      this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // functions\n\n      function generateBufferData() {\n        for (let i = 0; i < tubularSegments; i++) {\n          generateSegment(i);\n        } // if the geometry is not closed, generate the last row of vertices and normals\n        // at the regular position on the given path\n        //\n        // if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\n        generateSegment(closed === false ? tubularSegments : 0); // uvs are generated in a separate function.\n        // this makes it easy compute correct values for closed geometries\n\n        generateUVs(); // finally create faces\n\n        generateIndices();\n      }\n\n      function generateSegment(i) {\n        // we use getPointAt to sample evenly distributed points from the given path\n        P = path.getPointAt(i / tubularSegments, P); // retrieve corresponding normal and binormal\n\n        const N = frames.normals[i];\n        const B = frames.binormals[i]; // generate normals and vertices for the current segment\n\n        for (let j = 0; j <= radialSegments; j++) {\n          const v = j / radialSegments * Math.PI * 2;\n          const sin = Math.sin(v);\n          const cos = -Math.cos(v); // normal\n\n          normal.x = cos * N.x + sin * B.x;\n          normal.y = cos * N.y + sin * B.y;\n          normal.z = cos * N.z + sin * B.z;\n          normal.normalize();\n          normals.push(normal.x, normal.y, normal.z); // vertex\n\n          vertex.x = P.x + radius * normal.x;\n          vertex.y = P.y + radius * normal.y;\n          vertex.z = P.z + radius * normal.z;\n          vertices.push(vertex.x, vertex.y, vertex.z);\n        }\n      }\n\n      function generateIndices() {\n        for (let j = 1; j <= tubularSegments; j++) {\n          for (let i = 1; i <= radialSegments; i++) {\n            const a = (radialSegments + 1) * (j - 1) + (i - 1);\n            const b = (radialSegments + 1) * j + (i - 1);\n            const c = (radialSegments + 1) * j + i;\n            const d = (radialSegments + 1) * (j - 1) + i; // faces\n\n            indices.push(a, b, d);\n            indices.push(b, c, d);\n          }\n        }\n      }\n\n      function generateUVs() {\n        for (let i = 0; i <= tubularSegments; i++) {\n          for (let j = 0; j <= radialSegments; j++) {\n            uv.x = i / tubularSegments;\n            uv.y = j / radialSegments;\n            uvs.push(uv.x, uv.y);\n          }\n        }\n      }\n    }\n\n    toJSON() {\n      const data = super.toJSON();\n      data.path = this.parameters.path.toJSON();\n      return data;\n    }\n\n    static fromJSON(data) {\n      // This only works for built-in curves (e.g. CatmullRomCurve3).\n      // User defined curves or instances of CurvePath will not be deserialized.\n      return new TubeGeometry(new Curves[data.path.type]().fromJSON(data.path), data.tubularSegments, data.radius, data.radialSegments, data.closed);\n    }\n\n  }\n\n  class WireframeGeometry extends BufferGeometry {\n    constructor() {\n      let geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      super();\n      this.type = 'WireframeGeometry';\n      this.parameters = {\n        geometry: geometry\n      };\n\n      if (geometry !== null) {\n        // buffer\n        const vertices = [];\n        const edges = new Set(); // helper variables\n\n        const start = new Vector3();\n        const end = new Vector3();\n\n        if (geometry.index !== null) {\n          // indexed BufferGeometry\n          const position = geometry.attributes.position;\n          const indices = geometry.index;\n          let groups = geometry.groups;\n\n          if (groups.length === 0) {\n            groups = [{\n              start: 0,\n              count: indices.count,\n              materialIndex: 0\n            }];\n          } // create a data structure that contains all eges without duplicates\n\n\n          for (let o = 0, ol = groups.length; o < ol; ++o) {\n            const group = groups[o];\n            const groupStart = group.start;\n            const groupCount = group.count;\n\n            for (let i = groupStart, l = groupStart + groupCount; i < l; i += 3) {\n              for (let j = 0; j < 3; j++) {\n                const index1 = indices.getX(i + j);\n                const index2 = indices.getX(i + (j + 1) % 3);\n                start.fromBufferAttribute(position, index1);\n                end.fromBufferAttribute(position, index2);\n\n                if (isUniqueEdge(start, end, edges) === true) {\n                  vertices.push(start.x, start.y, start.z);\n                  vertices.push(end.x, end.y, end.z);\n                }\n              }\n            }\n          }\n        } else {\n          // non-indexed BufferGeometry\n          const position = geometry.attributes.position;\n\n          for (let i = 0, l = position.count / 3; i < l; i++) {\n            for (let j = 0; j < 3; j++) {\n              // three edges per triangle, an edge is represented as (index1, index2)\n              // e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n              const index1 = 3 * i + j;\n              const index2 = 3 * i + (j + 1) % 3;\n              start.fromBufferAttribute(position, index1);\n              end.fromBufferAttribute(position, index2);\n\n              if (isUniqueEdge(start, end, edges) === true) {\n                vertices.push(start.x, start.y, start.z);\n                vertices.push(end.x, end.y, end.z);\n              }\n            }\n          }\n        } // build geometry\n\n\n        this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      }\n    }\n\n  }\n\n  function isUniqueEdge(start, end, edges) {\n    const hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;\n    const hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`; // coincident edge\n\n    if (edges.has(hash1) === true || edges.has(hash2) === true) {\n      return false;\n    } else {\n      edges.add(hash1, hash2);\n      return true;\n    }\n  }\n\n  var Geometries = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    BoxGeometry: BoxGeometry,\n    BoxBufferGeometry: BoxGeometry,\n    CircleGeometry: CircleGeometry,\n    CircleBufferGeometry: CircleGeometry,\n    ConeGeometry: ConeGeometry,\n    ConeBufferGeometry: ConeGeometry,\n    CylinderGeometry: CylinderGeometry,\n    CylinderBufferGeometry: CylinderGeometry,\n    DodecahedronGeometry: DodecahedronGeometry,\n    DodecahedronBufferGeometry: DodecahedronGeometry,\n    EdgesGeometry: EdgesGeometry,\n    ExtrudeGeometry: ExtrudeGeometry,\n    ExtrudeBufferGeometry: ExtrudeGeometry,\n    IcosahedronGeometry: IcosahedronGeometry,\n    IcosahedronBufferGeometry: IcosahedronGeometry,\n    LatheGeometry: LatheGeometry,\n    LatheBufferGeometry: LatheGeometry,\n    OctahedronGeometry: OctahedronGeometry,\n    OctahedronBufferGeometry: OctahedronGeometry,\n    PlaneGeometry: PlaneGeometry,\n    PlaneBufferGeometry: PlaneGeometry,\n    PolyhedronGeometry: PolyhedronGeometry,\n    PolyhedronBufferGeometry: PolyhedronGeometry,\n    RingGeometry: RingGeometry,\n    RingBufferGeometry: RingGeometry,\n    ShapeGeometry: ShapeGeometry,\n    ShapeBufferGeometry: ShapeGeometry,\n    SphereGeometry: SphereGeometry,\n    SphereBufferGeometry: SphereGeometry,\n    TetrahedronGeometry: TetrahedronGeometry,\n    TetrahedronBufferGeometry: TetrahedronGeometry,\n    TorusGeometry: TorusGeometry,\n    TorusBufferGeometry: TorusGeometry,\n    TorusKnotGeometry: TorusKnotGeometry,\n    TorusKnotBufferGeometry: TorusKnotGeometry,\n    TubeGeometry: TubeGeometry,\n    TubeBufferGeometry: TubeGeometry,\n    WireframeGeometry: WireframeGeometry\n  });\n  /**\n   * parameters = {\n   *\tcolor: <THREE.Color>\n   * }\n   */\n\n  class ShadowMaterial extends Material {\n    constructor(parameters) {\n      super();\n      this.type = 'ShadowMaterial';\n      this.color = new Color(0x000000);\n      this.transparent = true;\n      this.setValues(parameters);\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.color.copy(source.color);\n      return this;\n    }\n\n  }\n\n  ShadowMaterial.prototype.isShadowMaterial = true;\n  /**\n   * parameters = {\n   *\tcolor: <hex>,\n   *\troughness: <float>,\n   *\tmetalness: <float>,\n   *\topacity: <float>,\n   *\n   *\tmap: new THREE.Texture( <Image> ),\n   *\n   *\tlightMap: new THREE.Texture( <Image> ),\n   *\tlightMapIntensity: <float>\n   *\n   *\taoMap: new THREE.Texture( <Image> ),\n   *\taoMapIntensity: <float>\n   *\n   *\temissive: <hex>,\n   *\temissiveIntensity: <float>\n   *\temissiveMap: new THREE.Texture( <Image> ),\n   *\n   *\tbumpMap: new THREE.Texture( <Image> ),\n   *\tbumpScale: <float>,\n   *\n   *\tnormalMap: new THREE.Texture( <Image> ),\n   *\tnormalMapType: THREE.TangentSpaceNormalMap,\n   *\tnormalScale: <Vector2>,\n   *\n   *\tdisplacementMap: new THREE.Texture( <Image> ),\n   *\tdisplacementScale: <float>,\n   *\tdisplacementBias: <float>,\n   *\n   *\troughnessMap: new THREE.Texture( <Image> ),\n   *\n   *\tmetalnessMap: new THREE.Texture( <Image> ),\n   *\n   *\talphaMap: new THREE.Texture( <Image> ),\n   *\n   *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n   *\tenvMapIntensity: <float>\n   *\n   *\trefractionRatio: <float>,\n   *\n   *\twireframe: <boolean>,\n   *\twireframeLinewidth: <float>,\n   *\n   *\tflatShading: <bool>\n   * }\n   */\n\n  class MeshStandardMaterial extends Material {\n    constructor(parameters) {\n      super();\n      this.defines = {\n        'STANDARD': ''\n      };\n      this.type = 'MeshStandardMaterial';\n      this.color = new Color(0xffffff); // diffuse\n\n      this.roughness = 1.0;\n      this.metalness = 0.0;\n      this.map = null;\n      this.lightMap = null;\n      this.lightMapIntensity = 1.0;\n      this.aoMap = null;\n      this.aoMapIntensity = 1.0;\n      this.emissive = new Color(0x000000);\n      this.emissiveIntensity = 1.0;\n      this.emissiveMap = null;\n      this.bumpMap = null;\n      this.bumpScale = 1;\n      this.normalMap = null;\n      this.normalMapType = TangentSpaceNormalMap;\n      this.normalScale = new Vector2(1, 1);\n      this.displacementMap = null;\n      this.displacementScale = 1;\n      this.displacementBias = 0;\n      this.roughnessMap = null;\n      this.metalnessMap = null;\n      this.alphaMap = null;\n      this.envMap = null;\n      this.envMapIntensity = 1.0;\n      this.refractionRatio = 0.98;\n      this.wireframe = false;\n      this.wireframeLinewidth = 1;\n      this.wireframeLinecap = 'round';\n      this.wireframeLinejoin = 'round';\n      this.flatShading = false;\n      this.setValues(parameters);\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.defines = {\n        'STANDARD': ''\n      };\n      this.color.copy(source.color);\n      this.roughness = source.roughness;\n      this.metalness = source.metalness;\n      this.map = source.map;\n      this.lightMap = source.lightMap;\n      this.lightMapIntensity = source.lightMapIntensity;\n      this.aoMap = source.aoMap;\n      this.aoMapIntensity = source.aoMapIntensity;\n      this.emissive.copy(source.emissive);\n      this.emissiveMap = source.emissiveMap;\n      this.emissiveIntensity = source.emissiveIntensity;\n      this.bumpMap = source.bumpMap;\n      this.bumpScale = source.bumpScale;\n      this.normalMap = source.normalMap;\n      this.normalMapType = source.normalMapType;\n      this.normalScale.copy(source.normalScale);\n      this.displacementMap = source.displacementMap;\n      this.displacementScale = source.displacementScale;\n      this.displacementBias = source.displacementBias;\n      this.roughnessMap = source.roughnessMap;\n      this.metalnessMap = source.metalnessMap;\n      this.alphaMap = source.alphaMap;\n      this.envMap = source.envMap;\n      this.envMapIntensity = source.envMapIntensity;\n      this.refractionRatio = source.refractionRatio;\n      this.wireframe = source.wireframe;\n      this.wireframeLinewidth = source.wireframeLinewidth;\n      this.wireframeLinecap = source.wireframeLinecap;\n      this.wireframeLinejoin = source.wireframeLinejoin;\n      this.flatShading = source.flatShading;\n      return this;\n    }\n\n  }\n\n  MeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n  /**\n   * parameters = {\n   *\tclearcoat: <float>,\n   *\tclearcoatMap: new THREE.Texture( <Image> ),\n   *\tclearcoatRoughness: <float>,\n   *\tclearcoatRoughnessMap: new THREE.Texture( <Image> ),\n   *\tclearcoatNormalScale: <Vector2>,\n   *\tclearcoatNormalMap: new THREE.Texture( <Image> ),\n   *\n   *\tior: <float>,\n   *\treflectivity: <float>,\n   *\n   *\tsheen: <float>,\n   *\tsheenColor: <Color>,\n   *\tsheenColorMap: new THREE.Texture( <Image> ),\n   *\tsheenRoughness: <float>,\n   *\tsheenRoughnessMap: new THREE.Texture( <Image> ),\n   *\n   *\ttransmission: <float>,\n   *\ttransmissionMap: new THREE.Texture( <Image> ),\n   *\n   *\tthickness: <float>,\n   *\tthicknessMap: new THREE.Texture( <Image> ),\n   *\tattenuationDistance: <float>,\n   *\tattenuationColor: <Color>,\n   *\n   *\tspecularIntensity: <float>,\n   *\tspecularIntensityMap: new THREE.Texture( <Image> ),\n   *\tspecularColor: <Color>,\n   *\tspecularColorMap: new THREE.Texture( <Image> )\n   * }\n   */\n\n  class MeshPhysicalMaterial extends MeshStandardMaterial {\n    constructor(parameters) {\n      super();\n      this.defines = {\n        'STANDARD': '',\n        'PHYSICAL': ''\n      };\n      this.type = 'MeshPhysicalMaterial';\n      this.clearcoatMap = null;\n      this.clearcoatRoughness = 0.0;\n      this.clearcoatRoughnessMap = null;\n      this.clearcoatNormalScale = new Vector2(1, 1);\n      this.clearcoatNormalMap = null;\n      this.ior = 1.5;\n      Object.defineProperty(this, 'reflectivity', {\n        get: function () {\n          return clamp(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);\n        },\n        set: function (reflectivity) {\n          this.ior = (1 + 0.4 * reflectivity) / (1 - 0.4 * reflectivity);\n        }\n      });\n      this.sheenColor = new Color(0x000000);\n      this.sheenColorMap = null;\n      this.sheenRoughness = 1.0;\n      this.sheenRoughnessMap = null;\n      this.transmissionMap = null;\n      this.thickness = 0.01;\n      this.thicknessMap = null;\n      this.attenuationDistance = 0.0;\n      this.attenuationColor = new Color(1, 1, 1);\n      this.specularIntensity = 1.0;\n      this.specularIntensityMap = null;\n      this.specularColor = new Color(1, 1, 1);\n      this.specularColorMap = null;\n      this._sheen = 0.0;\n      this._clearcoat = 0;\n      this._transmission = 0;\n      this.setValues(parameters);\n    }\n\n    get sheen() {\n      return this._sheen;\n    }\n\n    set sheen(value) {\n      if (this._sheen > 0 !== value > 0) {\n        this.version++;\n      }\n\n      this._sheen = value;\n    }\n\n    get clearcoat() {\n      return this._clearcoat;\n    }\n\n    set clearcoat(value) {\n      if (this._clearcoat > 0 !== value > 0) {\n        this.version++;\n      }\n\n      this._clearcoat = value;\n    }\n\n    get transmission() {\n      return this._transmission;\n    }\n\n    set transmission(value) {\n      if (this._transmission > 0 !== value > 0) {\n        this.version++;\n      }\n\n      this._transmission = value;\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.defines = {\n        'STANDARD': '',\n        'PHYSICAL': ''\n      };\n      this.clearcoat = source.clearcoat;\n      this.clearcoatMap = source.clearcoatMap;\n      this.clearcoatRoughness = source.clearcoatRoughness;\n      this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n      this.clearcoatNormalMap = source.clearcoatNormalMap;\n      this.clearcoatNormalScale.copy(source.clearcoatNormalScale);\n      this.ior = source.ior;\n      this.sheen = source.sheen;\n      this.sheenColor.copy(source.sheenColor);\n      this.sheenColorMap = source.sheenColorMap;\n      this.sheenRoughness = source.sheenRoughness;\n      this.sheenRoughnessMap = source.sheenRoughnessMap;\n      this.transmission = source.transmission;\n      this.transmissionMap = source.transmissionMap;\n      this.thickness = source.thickness;\n      this.thicknessMap = source.thicknessMap;\n      this.attenuationDistance = source.attenuationDistance;\n      this.attenuationColor.copy(source.attenuationColor);\n      this.specularIntensity = source.specularIntensity;\n      this.specularIntensityMap = source.specularIntensityMap;\n      this.specularColor.copy(source.specularColor);\n      this.specularColorMap = source.specularColorMap;\n      return this;\n    }\n\n  }\n\n  MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n  /**\n   * parameters = {\n   *\tcolor: <hex>,\n   *\tspecular: <hex>,\n   *\tshininess: <float>,\n   *\topacity: <float>,\n   *\n   *\tmap: new THREE.Texture( <Image> ),\n   *\n   *\tlightMap: new THREE.Texture( <Image> ),\n   *\tlightMapIntensity: <float>\n   *\n   *\taoMap: new THREE.Texture( <Image> ),\n   *\taoMapIntensity: <float>\n   *\n   *\temissive: <hex>,\n   *\temissiveIntensity: <float>\n   *\temissiveMap: new THREE.Texture( <Image> ),\n   *\n   *\tbumpMap: new THREE.Texture( <Image> ),\n   *\tbumpScale: <float>,\n   *\n   *\tnormalMap: new THREE.Texture( <Image> ),\n   *\tnormalMapType: THREE.TangentSpaceNormalMap,\n   *\tnormalScale: <Vector2>,\n   *\n   *\tdisplacementMap: new THREE.Texture( <Image> ),\n   *\tdisplacementScale: <float>,\n   *\tdisplacementBias: <float>,\n   *\n   *\tspecularMap: new THREE.Texture( <Image> ),\n   *\n   *\talphaMap: new THREE.Texture( <Image> ),\n   *\n   *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n   *\tcombine: THREE.MultiplyOperation,\n   *\treflectivity: <float>,\n   *\trefractionRatio: <float>,\n   *\n   *\twireframe: <boolean>,\n   *\twireframeLinewidth: <float>,\n   *\n   *\tflatShading: <bool>\n   * }\n   */\n\n  class MeshPhongMaterial extends Material {\n    constructor(parameters) {\n      super();\n      this.type = 'MeshPhongMaterial';\n      this.color = new Color(0xffffff); // diffuse\n\n      this.specular = new Color(0x111111);\n      this.shininess = 30;\n      this.map = null;\n      this.lightMap = null;\n      this.lightMapIntensity = 1.0;\n      this.aoMap = null;\n      this.aoMapIntensity = 1.0;\n      this.emissive = new Color(0x000000);\n      this.emissiveIntensity = 1.0;\n      this.emissiveMap = null;\n      this.bumpMap = null;\n      this.bumpScale = 1;\n      this.normalMap = null;\n      this.normalMapType = TangentSpaceNormalMap;\n      this.normalScale = new Vector2(1, 1);\n      this.displacementMap = null;\n      this.displacementScale = 1;\n      this.displacementBias = 0;\n      this.specularMap = null;\n      this.alphaMap = null;\n      this.envMap = null;\n      this.combine = MultiplyOperation;\n      this.reflectivity = 1;\n      this.refractionRatio = 0.98;\n      this.wireframe = false;\n      this.wireframeLinewidth = 1;\n      this.wireframeLinecap = 'round';\n      this.wireframeLinejoin = 'round';\n      this.flatShading = false;\n      this.setValues(parameters);\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.color.copy(source.color);\n      this.specular.copy(source.specular);\n      this.shininess = source.shininess;\n      this.map = source.map;\n      this.lightMap = source.lightMap;\n      this.lightMapIntensity = source.lightMapIntensity;\n      this.aoMap = source.aoMap;\n      this.aoMapIntensity = source.aoMapIntensity;\n      this.emissive.copy(source.emissive);\n      this.emissiveMap = source.emissiveMap;\n      this.emissiveIntensity = source.emissiveIntensity;\n      this.bumpMap = source.bumpMap;\n      this.bumpScale = source.bumpScale;\n      this.normalMap = source.normalMap;\n      this.normalMapType = source.normalMapType;\n      this.normalScale.copy(source.normalScale);\n      this.displacementMap = source.displacementMap;\n      this.displacementScale = source.displacementScale;\n      this.displacementBias = source.displacementBias;\n      this.specularMap = source.specularMap;\n      this.alphaMap = source.alphaMap;\n      this.envMap = source.envMap;\n      this.combine = source.combine;\n      this.reflectivity = source.reflectivity;\n      this.refractionRatio = source.refractionRatio;\n      this.wireframe = source.wireframe;\n      this.wireframeLinewidth = source.wireframeLinewidth;\n      this.wireframeLinecap = source.wireframeLinecap;\n      this.wireframeLinejoin = source.wireframeLinejoin;\n      this.flatShading = source.flatShading;\n      return this;\n    }\n\n  }\n\n  MeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n  /**\n   * parameters = {\n   *\tcolor: <hex>,\n   *\n   *\tmap: new THREE.Texture( <Image> ),\n   *\tgradientMap: new THREE.Texture( <Image> ),\n   *\n   *\tlightMap: new THREE.Texture( <Image> ),\n   *\tlightMapIntensity: <float>\n   *\n   *\taoMap: new THREE.Texture( <Image> ),\n   *\taoMapIntensity: <float>\n   *\n   *\temissive: <hex>,\n   *\temissiveIntensity: <float>\n   *\temissiveMap: new THREE.Texture( <Image> ),\n   *\n   *\tbumpMap: new THREE.Texture( <Image> ),\n   *\tbumpScale: <float>,\n   *\n   *\tnormalMap: new THREE.Texture( <Image> ),\n   *\tnormalMapType: THREE.TangentSpaceNormalMap,\n   *\tnormalScale: <Vector2>,\n   *\n   *\tdisplacementMap: new THREE.Texture( <Image> ),\n   *\tdisplacementScale: <float>,\n   *\tdisplacementBias: <float>,\n   *\n   *\talphaMap: new THREE.Texture( <Image> ),\n   *\n   *\twireframe: <boolean>,\n   *\twireframeLinewidth: <float>,\n   *\n   * }\n   */\n\n  class MeshToonMaterial extends Material {\n    constructor(parameters) {\n      super();\n      this.defines = {\n        'TOON': ''\n      };\n      this.type = 'MeshToonMaterial';\n      this.color = new Color(0xffffff);\n      this.map = null;\n      this.gradientMap = null;\n      this.lightMap = null;\n      this.lightMapIntensity = 1.0;\n      this.aoMap = null;\n      this.aoMapIntensity = 1.0;\n      this.emissive = new Color(0x000000);\n      this.emissiveIntensity = 1.0;\n      this.emissiveMap = null;\n      this.bumpMap = null;\n      this.bumpScale = 1;\n      this.normalMap = null;\n      this.normalMapType = TangentSpaceNormalMap;\n      this.normalScale = new Vector2(1, 1);\n      this.displacementMap = null;\n      this.displacementScale = 1;\n      this.displacementBias = 0;\n      this.alphaMap = null;\n      this.wireframe = false;\n      this.wireframeLinewidth = 1;\n      this.wireframeLinecap = 'round';\n      this.wireframeLinejoin = 'round';\n      this.setValues(parameters);\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.color.copy(source.color);\n      this.map = source.map;\n      this.gradientMap = source.gradientMap;\n      this.lightMap = source.lightMap;\n      this.lightMapIntensity = source.lightMapIntensity;\n      this.aoMap = source.aoMap;\n      this.aoMapIntensity = source.aoMapIntensity;\n      this.emissive.copy(source.emissive);\n      this.emissiveMap = source.emissiveMap;\n      this.emissiveIntensity = source.emissiveIntensity;\n      this.bumpMap = source.bumpMap;\n      this.bumpScale = source.bumpScale;\n      this.normalMap = source.normalMap;\n      this.normalMapType = source.normalMapType;\n      this.normalScale.copy(source.normalScale);\n      this.displacementMap = source.displacementMap;\n      this.displacementScale = source.displacementScale;\n      this.displacementBias = source.displacementBias;\n      this.alphaMap = source.alphaMap;\n      this.wireframe = source.wireframe;\n      this.wireframeLinewidth = source.wireframeLinewidth;\n      this.wireframeLinecap = source.wireframeLinecap;\n      this.wireframeLinejoin = source.wireframeLinejoin;\n      return this;\n    }\n\n  }\n\n  MeshToonMaterial.prototype.isMeshToonMaterial = true;\n  /**\n   * parameters = {\n   *\topacity: <float>,\n   *\n   *\tbumpMap: new THREE.Texture( <Image> ),\n   *\tbumpScale: <float>,\n   *\n   *\tnormalMap: new THREE.Texture( <Image> ),\n   *\tnormalMapType: THREE.TangentSpaceNormalMap,\n   *\tnormalScale: <Vector2>,\n   *\n   *\tdisplacementMap: new THREE.Texture( <Image> ),\n   *\tdisplacementScale: <float>,\n   *\tdisplacementBias: <float>,\n   *\n   *\twireframe: <boolean>,\n   *\twireframeLinewidth: <float>\n   *\n   *\tflatShading: <bool>\n   * }\n   */\n\n  class MeshNormalMaterial extends Material {\n    constructor(parameters) {\n      super();\n      this.type = 'MeshNormalMaterial';\n      this.bumpMap = null;\n      this.bumpScale = 1;\n      this.normalMap = null;\n      this.normalMapType = TangentSpaceNormalMap;\n      this.normalScale = new Vector2(1, 1);\n      this.displacementMap = null;\n      this.displacementScale = 1;\n      this.displacementBias = 0;\n      this.wireframe = false;\n      this.wireframeLinewidth = 1;\n      this.fog = false;\n      this.flatShading = false;\n      this.setValues(parameters);\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.bumpMap = source.bumpMap;\n      this.bumpScale = source.bumpScale;\n      this.normalMap = source.normalMap;\n      this.normalMapType = source.normalMapType;\n      this.normalScale.copy(source.normalScale);\n      this.displacementMap = source.displacementMap;\n      this.displacementScale = source.displacementScale;\n      this.displacementBias = source.displacementBias;\n      this.wireframe = source.wireframe;\n      this.wireframeLinewidth = source.wireframeLinewidth;\n      this.flatShading = source.flatShading;\n      return this;\n    }\n\n  }\n\n  MeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n  /**\n   * parameters = {\n   *\tcolor: <hex>,\n   *\topacity: <float>,\n   *\n   *\tmap: new THREE.Texture( <Image> ),\n   *\n   *\tlightMap: new THREE.Texture( <Image> ),\n   *\tlightMapIntensity: <float>\n   *\n   *\taoMap: new THREE.Texture( <Image> ),\n   *\taoMapIntensity: <float>\n   *\n   *\temissive: <hex>,\n   *\temissiveIntensity: <float>\n   *\temissiveMap: new THREE.Texture( <Image> ),\n   *\n   *\tspecularMap: new THREE.Texture( <Image> ),\n   *\n   *\talphaMap: new THREE.Texture( <Image> ),\n   *\n   *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n   *\tcombine: THREE.Multiply,\n   *\treflectivity: <float>,\n   *\trefractionRatio: <float>,\n   *\n   *\twireframe: <boolean>,\n   *\twireframeLinewidth: <float>,\n   *\n   * }\n   */\n\n  class MeshLambertMaterial extends Material {\n    constructor(parameters) {\n      super();\n      this.type = 'MeshLambertMaterial';\n      this.color = new Color(0xffffff); // diffuse\n\n      this.map = null;\n      this.lightMap = null;\n      this.lightMapIntensity = 1.0;\n      this.aoMap = null;\n      this.aoMapIntensity = 1.0;\n      this.emissive = new Color(0x000000);\n      this.emissiveIntensity = 1.0;\n      this.emissiveMap = null;\n      this.specularMap = null;\n      this.alphaMap = null;\n      this.envMap = null;\n      this.combine = MultiplyOperation;\n      this.reflectivity = 1;\n      this.refractionRatio = 0.98;\n      this.wireframe = false;\n      this.wireframeLinewidth = 1;\n      this.wireframeLinecap = 'round';\n      this.wireframeLinejoin = 'round';\n      this.setValues(parameters);\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.color.copy(source.color);\n      this.map = source.map;\n      this.lightMap = source.lightMap;\n      this.lightMapIntensity = source.lightMapIntensity;\n      this.aoMap = source.aoMap;\n      this.aoMapIntensity = source.aoMapIntensity;\n      this.emissive.copy(source.emissive);\n      this.emissiveMap = source.emissiveMap;\n      this.emissiveIntensity = source.emissiveIntensity;\n      this.specularMap = source.specularMap;\n      this.alphaMap = source.alphaMap;\n      this.envMap = source.envMap;\n      this.combine = source.combine;\n      this.reflectivity = source.reflectivity;\n      this.refractionRatio = source.refractionRatio;\n      this.wireframe = source.wireframe;\n      this.wireframeLinewidth = source.wireframeLinewidth;\n      this.wireframeLinecap = source.wireframeLinecap;\n      this.wireframeLinejoin = source.wireframeLinejoin;\n      return this;\n    }\n\n  }\n\n  MeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n  /**\n   * parameters = {\n   *\tcolor: <hex>,\n   *\topacity: <float>,\n   *\n   *\tmatcap: new THREE.Texture( <Image> ),\n   *\n   *\tmap: new THREE.Texture( <Image> ),\n   *\n   *\tbumpMap: new THREE.Texture( <Image> ),\n   *\tbumpScale: <float>,\n   *\n   *\tnormalMap: new THREE.Texture( <Image> ),\n   *\tnormalMapType: THREE.TangentSpaceNormalMap,\n   *\tnormalScale: <Vector2>,\n   *\n   *\tdisplacementMap: new THREE.Texture( <Image> ),\n   *\tdisplacementScale: <float>,\n   *\tdisplacementBias: <float>,\n   *\n   *\talphaMap: new THREE.Texture( <Image> ),\n   *\n   *\tflatShading: <bool>\n   * }\n   */\n\n  class MeshMatcapMaterial extends Material {\n    constructor(parameters) {\n      super();\n      this.defines = {\n        'MATCAP': ''\n      };\n      this.type = 'MeshMatcapMaterial';\n      this.color = new Color(0xffffff); // diffuse\n\n      this.matcap = null;\n      this.map = null;\n      this.bumpMap = null;\n      this.bumpScale = 1;\n      this.normalMap = null;\n      this.normalMapType = TangentSpaceNormalMap;\n      this.normalScale = new Vector2(1, 1);\n      this.displacementMap = null;\n      this.displacementScale = 1;\n      this.displacementBias = 0;\n      this.alphaMap = null;\n      this.flatShading = false;\n      this.setValues(parameters);\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.defines = {\n        'MATCAP': ''\n      };\n      this.color.copy(source.color);\n      this.matcap = source.matcap;\n      this.map = source.map;\n      this.bumpMap = source.bumpMap;\n      this.bumpScale = source.bumpScale;\n      this.normalMap = source.normalMap;\n      this.normalMapType = source.normalMapType;\n      this.normalScale.copy(source.normalScale);\n      this.displacementMap = source.displacementMap;\n      this.displacementScale = source.displacementScale;\n      this.displacementBias = source.displacementBias;\n      this.alphaMap = source.alphaMap;\n      this.flatShading = source.flatShading;\n      return this;\n    }\n\n  }\n\n  MeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n  /**\n   * parameters = {\n   *\tcolor: <hex>,\n   *\topacity: <float>,\n   *\n   *\tlinewidth: <float>,\n   *\n   *\tscale: <float>,\n   *\tdashSize: <float>,\n   *\tgapSize: <float>\n   * }\n   */\n\n  class LineDashedMaterial extends LineBasicMaterial {\n    constructor(parameters) {\n      super();\n      this.type = 'LineDashedMaterial';\n      this.scale = 1;\n      this.dashSize = 3;\n      this.gapSize = 1;\n      this.setValues(parameters);\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.scale = source.scale;\n      this.dashSize = source.dashSize;\n      this.gapSize = source.gapSize;\n      return this;\n    }\n\n  }\n\n  LineDashedMaterial.prototype.isLineDashedMaterial = true;\n  var Materials = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ShadowMaterial: ShadowMaterial,\n    SpriteMaterial: SpriteMaterial,\n    RawShaderMaterial: RawShaderMaterial,\n    ShaderMaterial: ShaderMaterial,\n    PointsMaterial: PointsMaterial,\n    MeshPhysicalMaterial: MeshPhysicalMaterial,\n    MeshStandardMaterial: MeshStandardMaterial,\n    MeshPhongMaterial: MeshPhongMaterial,\n    MeshToonMaterial: MeshToonMaterial,\n    MeshNormalMaterial: MeshNormalMaterial,\n    MeshLambertMaterial: MeshLambertMaterial,\n    MeshDepthMaterial: MeshDepthMaterial,\n    MeshDistanceMaterial: MeshDistanceMaterial,\n    MeshBasicMaterial: MeshBasicMaterial,\n    MeshMatcapMaterial: MeshMatcapMaterial,\n    LineDashedMaterial: LineDashedMaterial,\n    LineBasicMaterial: LineBasicMaterial,\n    Material: Material\n  });\n  const AnimationUtils = {\n    // same as Array.prototype.slice, but also works on typed arrays\n    arraySlice: function (array, from, to) {\n      if (AnimationUtils.isTypedArray(array)) {\n        // in ios9 array.subarray(from, undefined) will return empty array\n        // but array.subarray(from) or array.subarray(from, len) is correct\n        return new array.constructor(array.subarray(from, to !== undefined ? to : array.length));\n      }\n\n      return array.slice(from, to);\n    },\n    // converts an array to a specific type\n    convertArray: function (array, type, forceClone) {\n      if (!array || // let 'undefined' and 'null' pass\n      !forceClone && array.constructor === type) return array;\n\n      if (typeof type.BYTES_PER_ELEMENT === 'number') {\n        return new type(array); // create typed array\n      }\n\n      return Array.prototype.slice.call(array); // create Array\n    },\n    isTypedArray: function (object) {\n      return ArrayBuffer.isView(object) && !(object instanceof DataView);\n    },\n    // returns an array by which times and values can be sorted\n    getKeyframeOrder: function (times) {\n      function compareTime(i, j) {\n        return times[i] - times[j];\n      }\n\n      const n = times.length;\n      const result = new Array(n);\n\n      for (let i = 0; i !== n; ++i) result[i] = i;\n\n      result.sort(compareTime);\n      return result;\n    },\n    // uses the array previously returned by 'getKeyframeOrder' to sort data\n    sortedArray: function (values, stride, order) {\n      const nValues = values.length;\n      const result = new values.constructor(nValues);\n\n      for (let i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {\n        const srcOffset = order[i] * stride;\n\n        for (let j = 0; j !== stride; ++j) {\n          result[dstOffset++] = values[srcOffset + j];\n        }\n      }\n\n      return result;\n    },\n    // function for parsing AOS keyframe formats\n    flattenJSON: function (jsonKeys, times, values, valuePropertyName) {\n      let i = 1,\n          key = jsonKeys[0];\n\n      while (key !== undefined && key[valuePropertyName] === undefined) {\n        key = jsonKeys[i++];\n      }\n\n      if (key === undefined) return; // no data\n\n      let value = key[valuePropertyName];\n      if (value === undefined) return; // no data\n\n      if (Array.isArray(value)) {\n        do {\n          value = key[valuePropertyName];\n\n          if (value !== undefined) {\n            times.push(key.time);\n            values.push.apply(values, value); // push all elements\n          }\n\n          key = jsonKeys[i++];\n        } while (key !== undefined);\n      } else if (value.toArray !== undefined) {\n        // ...assume THREE.Math-ish\n        do {\n          value = key[valuePropertyName];\n\n          if (value !== undefined) {\n            times.push(key.time);\n            value.toArray(values, values.length);\n          }\n\n          key = jsonKeys[i++];\n        } while (key !== undefined);\n      } else {\n        // otherwise push as-is\n        do {\n          value = key[valuePropertyName];\n\n          if (value !== undefined) {\n            times.push(key.time);\n            values.push(value);\n          }\n\n          key = jsonKeys[i++];\n        } while (key !== undefined);\n      }\n    },\n    subclip: function (sourceClip, name, startFrame, endFrame) {\n      let fps = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 30;\n      const clip = sourceClip.clone();\n      clip.name = name;\n      const tracks = [];\n\n      for (let i = 0; i < clip.tracks.length; ++i) {\n        const track = clip.tracks[i];\n        const valueSize = track.getValueSize();\n        const times = [];\n        const values = [];\n\n        for (let j = 0; j < track.times.length; ++j) {\n          const frame = track.times[j] * fps;\n          if (frame < startFrame || frame >= endFrame) continue;\n          times.push(track.times[j]);\n\n          for (let k = 0; k < valueSize; ++k) {\n            values.push(track.values[j * valueSize + k]);\n          }\n        }\n\n        if (times.length === 0) continue;\n        track.times = AnimationUtils.convertArray(times, track.times.constructor);\n        track.values = AnimationUtils.convertArray(values, track.values.constructor);\n        tracks.push(track);\n      }\n\n      clip.tracks = tracks; // find minimum .times value across all tracks in the trimmed clip\n\n      let minStartTime = Infinity;\n\n      for (let i = 0; i < clip.tracks.length; ++i) {\n        if (minStartTime > clip.tracks[i].times[0]) {\n          minStartTime = clip.tracks[i].times[0];\n        }\n      } // shift all tracks such that clip begins at t=0\n\n\n      for (let i = 0; i < clip.tracks.length; ++i) {\n        clip.tracks[i].shift(-1 * minStartTime);\n      }\n\n      clip.resetDuration();\n      return clip;\n    },\n    makeClipAdditive: function (targetClip) {\n      let referenceFrame = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      let referenceClip = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : targetClip;\n      let fps = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 30;\n      if (fps <= 0) fps = 30;\n      const numTracks = referenceClip.tracks.length;\n      const referenceTime = referenceFrame / fps; // Make each track's values relative to the values at the reference frame\n\n      for (let i = 0; i < numTracks; ++i) {\n        const referenceTrack = referenceClip.tracks[i];\n        const referenceTrackType = referenceTrack.ValueTypeName; // Skip this track if it's non-numeric\n\n        if (referenceTrackType === 'bool' || referenceTrackType === 'string') continue; // Find the track in the target clip whose name and type matches the reference track\n\n        const targetTrack = targetClip.tracks.find(function (track) {\n          return track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;\n        });\n        if (targetTrack === undefined) continue;\n        let referenceOffset = 0;\n        const referenceValueSize = referenceTrack.getValueSize();\n\n        if (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n          referenceOffset = referenceValueSize / 3;\n        }\n\n        let targetOffset = 0;\n        const targetValueSize = targetTrack.getValueSize();\n\n        if (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n          targetOffset = targetValueSize / 3;\n        }\n\n        const lastIndex = referenceTrack.times.length - 1;\n        let referenceValue; // Find the value to subtract out of the track\n\n        if (referenceTime <= referenceTrack.times[0]) {\n          // Reference frame is earlier than the first keyframe, so just use the first keyframe\n          const startIndex = referenceOffset;\n          const endIndex = referenceValueSize - referenceOffset;\n          referenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);\n        } else if (referenceTime >= referenceTrack.times[lastIndex]) {\n          // Reference frame is after the last keyframe, so just use the last keyframe\n          const startIndex = lastIndex * referenceValueSize + referenceOffset;\n          const endIndex = startIndex + referenceValueSize - referenceOffset;\n          referenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);\n        } else {\n          // Interpolate to the reference value\n          const interpolant = referenceTrack.createInterpolant();\n          const startIndex = referenceOffset;\n          const endIndex = referenceValueSize - referenceOffset;\n          interpolant.evaluate(referenceTime);\n          referenceValue = AnimationUtils.arraySlice(interpolant.resultBuffer, startIndex, endIndex);\n        } // Conjugate the quaternion\n\n\n        if (referenceTrackType === 'quaternion') {\n          const referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();\n          referenceQuat.toArray(referenceValue);\n        } // Subtract the reference value from all of the track values\n\n\n        const numTimes = targetTrack.times.length;\n\n        for (let j = 0; j < numTimes; ++j) {\n          const valueStart = j * targetValueSize + targetOffset;\n\n          if (referenceTrackType === 'quaternion') {\n            // Multiply the conjugate for quaternion track types\n            Quaternion.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);\n          } else {\n            const valueEnd = targetValueSize - targetOffset * 2; // Subtract each value for all other numeric track types\n\n            for (let k = 0; k < valueEnd; ++k) {\n              targetTrack.values[valueStart + k] -= referenceValue[k];\n            }\n          }\n        }\n      }\n\n      targetClip.blendMode = AdditiveAnimationBlendMode;\n      return targetClip;\n    }\n  };\n  /**\n   * Abstract base class of interpolants over parametric samples.\n   *\n   * The parameter domain is one dimensional, typically the time or a path\n   * along a curve defined by the data.\n   *\n   * The sample values can have any dimensionality and derived classes may\n   * apply special interpretations to the data.\n   *\n   * This class provides the interval seek in a Template Method, deferring\n   * the actual interpolation to derived classes.\n   *\n   * Time complexity is O(1) for linear access crossing at most two points\n   * and O(log N) for random access, where N is the number of positions.\n   *\n   * References:\n   *\n   * \t\thttp://www.oodesign.com/template-method-pattern.html\n   *\n   */\n\n  class Interpolant {\n    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n      this.parameterPositions = parameterPositions;\n      this._cachedIndex = 0;\n      this.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor(sampleSize);\n      this.sampleValues = sampleValues;\n      this.valueSize = sampleSize;\n      this.settings = null;\n      this.DefaultSettings_ = {};\n    }\n\n    evaluate(t) {\n      const pp = this.parameterPositions;\n      let i1 = this._cachedIndex,\n          t1 = pp[i1],\n          t0 = pp[i1 - 1];\n\n      validate_interval: {\n        seek: {\n          let right;\n\n          linear_scan: {\n            //- See http://jsperf.com/comparison-to-undefined/3\n            //- slower code:\n            //-\n            //- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n            forward_scan: if (!(t < t1)) {\n              for (let giveUpAt = i1 + 2;;) {\n                if (t1 === undefined) {\n                  if (t < t0) break forward_scan; // after end\n\n                  i1 = pp.length;\n                  this._cachedIndex = i1;\n                  return this.afterEnd_(i1 - 1, t, t0);\n                }\n\n                if (i1 === giveUpAt) break; // this loop\n\n                t0 = t1;\n                t1 = pp[++i1];\n\n                if (t < t1) {\n                  // we have arrived at the sought interval\n                  break seek;\n                }\n              } // prepare binary search on the right side of the index\n\n\n              right = pp.length;\n              break linear_scan;\n            } //- slower code:\n            //-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\n\n            if (!(t >= t0)) {\n              // looping?\n              const t1global = pp[1];\n\n              if (t < t1global) {\n                i1 = 2; // + 1, using the scan for the details\n\n                t0 = t1global;\n              } // linear reverse scan\n\n\n              for (let giveUpAt = i1 - 2;;) {\n                if (t0 === undefined) {\n                  // before start\n                  this._cachedIndex = 0;\n                  return this.beforeStart_(0, t, t1);\n                }\n\n                if (i1 === giveUpAt) break; // this loop\n\n                t1 = t0;\n                t0 = pp[--i1 - 1];\n\n                if (t >= t0) {\n                  // we have arrived at the sought interval\n                  break seek;\n                }\n              } // prepare binary search on the left side of the index\n\n\n              right = i1;\n              i1 = 0;\n              break linear_scan;\n            } // the interval is valid\n\n\n            break validate_interval;\n          } // linear scan\n          // binary search\n\n\n          while (i1 < right) {\n            const mid = i1 + right >>> 1;\n\n            if (t < pp[mid]) {\n              right = mid;\n            } else {\n              i1 = mid + 1;\n            }\n          }\n\n          t1 = pp[i1];\n          t0 = pp[i1 - 1]; // check boundary cases, again\n\n          if (t0 === undefined) {\n            this._cachedIndex = 0;\n            return this.beforeStart_(0, t, t1);\n          }\n\n          if (t1 === undefined) {\n            i1 = pp.length;\n            this._cachedIndex = i1;\n            return this.afterEnd_(i1 - 1, t0, t);\n          }\n        } // seek\n\n\n        this._cachedIndex = i1;\n        this.intervalChanged_(i1, t0, t1);\n      } // validate_interval\n\n\n      return this.interpolate_(i1, t0, t, t1);\n    }\n\n    getSettings_() {\n      return this.settings || this.DefaultSettings_;\n    }\n\n    copySampleValue_(index) {\n      // copies a sample value to the result buffer\n      const result = this.resultBuffer,\n            values = this.sampleValues,\n            stride = this.valueSize,\n            offset = index * stride;\n\n      for (let i = 0; i !== stride; ++i) {\n        result[i] = values[offset + i];\n      }\n\n      return result;\n    } // Template methods for derived classes:\n\n\n    interpolate_() {\n      throw new Error('call to abstract method'); // implementations shall return this.resultBuffer\n    }\n\n    intervalChanged_() {// empty\n    }\n\n  } // ALIAS DEFINITIONS\n\n\n  Interpolant.prototype.beforeStart_ = Interpolant.prototype.copySampleValue_;\n  Interpolant.prototype.afterEnd_ = Interpolant.prototype.copySampleValue_;\n  /**\n   * Fast and simple cubic spline interpolant.\n   *\n   * It was derived from a Hermitian construction setting the first derivative\n   * at each sample position to the linear slope between neighboring positions\n   * over their parameter interval.\n   */\n\n  class CubicInterpolant extends Interpolant {\n    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n      super(parameterPositions, sampleValues, sampleSize, resultBuffer);\n      this._weightPrev = -0;\n      this._offsetPrev = -0;\n      this._weightNext = -0;\n      this._offsetNext = -0;\n      this.DefaultSettings_ = {\n        endingStart: ZeroCurvatureEnding,\n        endingEnd: ZeroCurvatureEnding\n      };\n    }\n\n    intervalChanged_(i1, t0, t1) {\n      const pp = this.parameterPositions;\n      let iPrev = i1 - 2,\n          iNext = i1 + 1,\n          tPrev = pp[iPrev],\n          tNext = pp[iNext];\n\n      if (tPrev === undefined) {\n        switch (this.getSettings_().endingStart) {\n          case ZeroSlopeEnding:\n            // f'(t0) = 0\n            iPrev = i1;\n            tPrev = 2 * t0 - t1;\n            break;\n\n          case WrapAroundEnding:\n            // use the other end of the curve\n            iPrev = pp.length - 2;\n            tPrev = t0 + pp[iPrev] - pp[iPrev + 1];\n            break;\n\n          default:\n            // ZeroCurvatureEnding\n            // f''(t0) = 0 a.k.a. Natural Spline\n            iPrev = i1;\n            tPrev = t1;\n        }\n      }\n\n      if (tNext === undefined) {\n        switch (this.getSettings_().endingEnd) {\n          case ZeroSlopeEnding:\n            // f'(tN) = 0\n            iNext = i1;\n            tNext = 2 * t1 - t0;\n            break;\n\n          case WrapAroundEnding:\n            // use the other end of the curve\n            iNext = 1;\n            tNext = t1 + pp[1] - pp[0];\n            break;\n\n          default:\n            // ZeroCurvatureEnding\n            // f''(tN) = 0, a.k.a. Natural Spline\n            iNext = i1 - 1;\n            tNext = t0;\n        }\n      }\n\n      const halfDt = (t1 - t0) * 0.5,\n            stride = this.valueSize;\n      this._weightPrev = halfDt / (t0 - tPrev);\n      this._weightNext = halfDt / (tNext - t1);\n      this._offsetPrev = iPrev * stride;\n      this._offsetNext = iNext * stride;\n    }\n\n    interpolate_(i1, t0, t, t1) {\n      const result = this.resultBuffer,\n            values = this.sampleValues,\n            stride = this.valueSize,\n            o1 = i1 * stride,\n            o0 = o1 - stride,\n            oP = this._offsetPrev,\n            oN = this._offsetNext,\n            wP = this._weightPrev,\n            wN = this._weightNext,\n            p = (t - t0) / (t1 - t0),\n            pp = p * p,\n            ppp = pp * p; // evaluate polynomials\n\n      const sP = -wP * ppp + 2 * wP * pp - wP * p;\n      const s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;\n      const s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;\n      const sN = wN * ppp - wN * pp; // combine data linearly\n\n      for (let i = 0; i !== stride; ++i) {\n        result[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];\n      }\n\n      return result;\n    }\n\n  }\n\n  class LinearInterpolant extends Interpolant {\n    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n      super(parameterPositions, sampleValues, sampleSize, resultBuffer);\n    }\n\n    interpolate_(i1, t0, t, t1) {\n      const result = this.resultBuffer,\n            values = this.sampleValues,\n            stride = this.valueSize,\n            offset1 = i1 * stride,\n            offset0 = offset1 - stride,\n            weight1 = (t - t0) / (t1 - t0),\n            weight0 = 1 - weight1;\n\n      for (let i = 0; i !== stride; ++i) {\n        result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;\n      }\n\n      return result;\n    }\n\n  }\n  /**\n   *\n   * Interpolant that evaluates to the sample value at the position preceeding\n   * the parameter.\n   */\n\n\n  class DiscreteInterpolant extends Interpolant {\n    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n      super(parameterPositions, sampleValues, sampleSize, resultBuffer);\n    }\n\n    interpolate_(i1\n    /*, t0, t, t1 */\n    ) {\n      return this.copySampleValue_(i1 - 1);\n    }\n\n  }\n\n  class KeyframeTrack {\n    constructor(name, times, values, interpolation) {\n      if (name === undefined) throw new Error('THREE.KeyframeTrack: track name is undefined');\n      if (times === undefined || times.length === 0) throw new Error('THREE.KeyframeTrack: no keyframes in track named ' + name);\n      this.name = name;\n      this.times = AnimationUtils.convertArray(times, this.TimeBufferType);\n      this.values = AnimationUtils.convertArray(values, this.ValueBufferType);\n      this.setInterpolation(interpolation || this.DefaultInterpolation);\n    } // Serialization (in static context, because of constructor invocation\n    // and automatic invocation of .toJSON):\n\n\n    static toJSON(track) {\n      const trackType = track.constructor;\n      let json; // derived classes can define a static toJSON method\n\n      if (trackType.toJSON !== this.toJSON) {\n        json = trackType.toJSON(track);\n      } else {\n        // by default, we assume the data can be serialized as-is\n        json = {\n          'name': track.name,\n          'times': AnimationUtils.convertArray(track.times, Array),\n          'values': AnimationUtils.convertArray(track.values, Array)\n        };\n        const interpolation = track.getInterpolation();\n\n        if (interpolation !== track.DefaultInterpolation) {\n          json.interpolation = interpolation;\n        }\n      }\n\n      json.type = track.ValueTypeName; // mandatory\n\n      return json;\n    }\n\n    InterpolantFactoryMethodDiscrete(result) {\n      return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);\n    }\n\n    InterpolantFactoryMethodLinear(result) {\n      return new LinearInterpolant(this.times, this.values, this.getValueSize(), result);\n    }\n\n    InterpolantFactoryMethodSmooth(result) {\n      return new CubicInterpolant(this.times, this.values, this.getValueSize(), result);\n    }\n\n    setInterpolation(interpolation) {\n      let factoryMethod;\n\n      switch (interpolation) {\n        case InterpolateDiscrete:\n          factoryMethod = this.InterpolantFactoryMethodDiscrete;\n          break;\n\n        case InterpolateLinear:\n          factoryMethod = this.InterpolantFactoryMethodLinear;\n          break;\n\n        case InterpolateSmooth:\n          factoryMethod = this.InterpolantFactoryMethodSmooth;\n          break;\n      }\n\n      if (factoryMethod === undefined) {\n        const message = 'unsupported interpolation for ' + this.ValueTypeName + ' keyframe track named ' + this.name;\n\n        if (this.createInterpolant === undefined) {\n          // fall back to default, unless the default itself is messed up\n          if (interpolation !== this.DefaultInterpolation) {\n            this.setInterpolation(this.DefaultInterpolation);\n          } else {\n            throw new Error(message); // fatal, in this case\n          }\n        }\n\n        console.warn('THREE.KeyframeTrack:', message);\n        return this;\n      }\n\n      this.createInterpolant = factoryMethod;\n      return this;\n    }\n\n    getInterpolation() {\n      switch (this.createInterpolant) {\n        case this.InterpolantFactoryMethodDiscrete:\n          return InterpolateDiscrete;\n\n        case this.InterpolantFactoryMethodLinear:\n          return InterpolateLinear;\n\n        case this.InterpolantFactoryMethodSmooth:\n          return InterpolateSmooth;\n      }\n    }\n\n    getValueSize() {\n      return this.values.length / this.times.length;\n    } // move all keyframes either forwards or backwards in time\n\n\n    shift(timeOffset) {\n      if (timeOffset !== 0.0) {\n        const times = this.times;\n\n        for (let i = 0, n = times.length; i !== n; ++i) {\n          times[i] += timeOffset;\n        }\n      }\n\n      return this;\n    } // scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\n\n    scale(timeScale) {\n      if (timeScale !== 1.0) {\n        const times = this.times;\n\n        for (let i = 0, n = times.length; i !== n; ++i) {\n          times[i] *= timeScale;\n        }\n      }\n\n      return this;\n    } // removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n    // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\n\n    trim(startTime, endTime) {\n      const times = this.times,\n            nKeys = times.length;\n      let from = 0,\n          to = nKeys - 1;\n\n      while (from !== nKeys && times[from] < startTime) {\n        ++from;\n      }\n\n      while (to !== -1 && times[to] > endTime) {\n        --to;\n      }\n\n      ++to; // inclusive -> exclusive bound\n\n      if (from !== 0 || to !== nKeys) {\n        // empty tracks are forbidden, so keep at least one keyframe\n        if (from >= to) {\n          to = Math.max(to, 1);\n          from = to - 1;\n        }\n\n        const stride = this.getValueSize();\n        this.times = AnimationUtils.arraySlice(times, from, to);\n        this.values = AnimationUtils.arraySlice(this.values, from * stride, to * stride);\n      }\n\n      return this;\n    } // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\n\n    validate() {\n      let valid = true;\n      const valueSize = this.getValueSize();\n\n      if (valueSize - Math.floor(valueSize) !== 0) {\n        console.error('THREE.KeyframeTrack: Invalid value size in track.', this);\n        valid = false;\n      }\n\n      const times = this.times,\n            values = this.values,\n            nKeys = times.length;\n\n      if (nKeys === 0) {\n        console.error('THREE.KeyframeTrack: Track is empty.', this);\n        valid = false;\n      }\n\n      let prevTime = null;\n\n      for (let i = 0; i !== nKeys; i++) {\n        const currTime = times[i];\n\n        if (typeof currTime === 'number' && isNaN(currTime)) {\n          console.error('THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime);\n          valid = false;\n          break;\n        }\n\n        if (prevTime !== null && prevTime > currTime) {\n          console.error('THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime);\n          valid = false;\n          break;\n        }\n\n        prevTime = currTime;\n      }\n\n      if (values !== undefined) {\n        if (AnimationUtils.isTypedArray(values)) {\n          for (let i = 0, n = values.length; i !== n; ++i) {\n            const value = values[i];\n\n            if (isNaN(value)) {\n              console.error('THREE.KeyframeTrack: Value is not a valid number.', this, i, value);\n              valid = false;\n              break;\n            }\n          }\n        }\n      }\n\n      return valid;\n    } // removes equivalent sequential keys as common in morph target sequences\n    // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\n\n    optimize() {\n      // times or values may be shared with other tracks, so overwriting is unsafe\n      const times = AnimationUtils.arraySlice(this.times),\n            values = AnimationUtils.arraySlice(this.values),\n            stride = this.getValueSize(),\n            smoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n            lastIndex = times.length - 1;\n      let writeIndex = 1;\n\n      for (let i = 1; i < lastIndex; ++i) {\n        let keep = false;\n        const time = times[i];\n        const timeNext = times[i + 1]; // remove adjacent keyframes scheduled at the same time\n\n        if (time !== timeNext && (i !== 1 || time !== times[0])) {\n          if (!smoothInterpolation) {\n            // remove unnecessary keyframes same as their neighbors\n            const offset = i * stride,\n                  offsetP = offset - stride,\n                  offsetN = offset + stride;\n\n            for (let j = 0; j !== stride; ++j) {\n              const value = values[offset + j];\n\n              if (value !== values[offsetP + j] || value !== values[offsetN + j]) {\n                keep = true;\n                break;\n              }\n            }\n          } else {\n            keep = true;\n          }\n        } // in-place compaction\n\n\n        if (keep) {\n          if (i !== writeIndex) {\n            times[writeIndex] = times[i];\n            const readOffset = i * stride,\n                  writeOffset = writeIndex * stride;\n\n            for (let j = 0; j !== stride; ++j) {\n              values[writeOffset + j] = values[readOffset + j];\n            }\n          }\n\n          ++writeIndex;\n        }\n      } // flush last keyframe (compaction looks ahead)\n\n\n      if (lastIndex > 0) {\n        times[writeIndex] = times[lastIndex];\n\n        for (let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j) {\n          values[writeOffset + j] = values[readOffset + j];\n        }\n\n        ++writeIndex;\n      }\n\n      if (writeIndex !== times.length) {\n        this.times = AnimationUtils.arraySlice(times, 0, writeIndex);\n        this.values = AnimationUtils.arraySlice(values, 0, writeIndex * stride);\n      } else {\n        this.times = times;\n        this.values = values;\n      }\n\n      return this;\n    }\n\n    clone() {\n      const times = AnimationUtils.arraySlice(this.times, 0);\n      const values = AnimationUtils.arraySlice(this.values, 0);\n      const TypedKeyframeTrack = this.constructor;\n      const track = new TypedKeyframeTrack(this.name, times, values); // Interpolant argument to constructor is not saved, so copy the factory method directly.\n\n      track.createInterpolant = this.createInterpolant;\n      return track;\n    }\n\n  }\n\n  KeyframeTrack.prototype.TimeBufferType = Float32Array;\n  KeyframeTrack.prototype.ValueBufferType = Float32Array;\n  KeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n  /**\n   * A Track of Boolean keyframe values.\n   */\n\n  class BooleanKeyframeTrack extends KeyframeTrack {}\n\n  BooleanKeyframeTrack.prototype.ValueTypeName = 'bool';\n  BooleanKeyframeTrack.prototype.ValueBufferType = Array;\n  BooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\n  BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\n  BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined; // Note: Actually this track could have a optimized / compressed\n\n  /**\n   * A Track of keyframe values that represent color.\n   */\n\n  class ColorKeyframeTrack extends KeyframeTrack {}\n\n  ColorKeyframeTrack.prototype.ValueTypeName = 'color'; // ValueBufferType is inherited\n\n  /**\n   * A Track of numeric keyframe values.\n   */\n\n  class NumberKeyframeTrack extends KeyframeTrack {}\n\n  NumberKeyframeTrack.prototype.ValueTypeName = 'number'; // ValueBufferType is inherited\n\n  /**\n   * Spherical linear unit quaternion interpolant.\n   */\n\n  class QuaternionLinearInterpolant extends Interpolant {\n    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n      super(parameterPositions, sampleValues, sampleSize, resultBuffer);\n    }\n\n    interpolate_(i1, t0, t, t1) {\n      const result = this.resultBuffer,\n            values = this.sampleValues,\n            stride = this.valueSize,\n            alpha = (t - t0) / (t1 - t0);\n      let offset = i1 * stride;\n\n      for (let end = offset + stride; offset !== end; offset += 4) {\n        Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);\n      }\n\n      return result;\n    }\n\n  }\n  /**\n   * A Track of quaternion keyframe values.\n   */\n\n\n  class QuaternionKeyframeTrack extends KeyframeTrack {\n    InterpolantFactoryMethodLinear(result) {\n      return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);\n    }\n\n  }\n\n  QuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion'; // ValueBufferType is inherited\n\n  QuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n  QuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n  /**\n   * A Track that interpolates Strings\n   */\n\n  class StringKeyframeTrack extends KeyframeTrack {}\n\n  StringKeyframeTrack.prototype.ValueTypeName = 'string';\n  StringKeyframeTrack.prototype.ValueBufferType = Array;\n  StringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\n  StringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\n  StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n  /**\n   * A Track of vectored keyframe values.\n   */\n\n  class VectorKeyframeTrack extends KeyframeTrack {}\n\n  VectorKeyframeTrack.prototype.ValueTypeName = 'vector'; // ValueBufferType is inherited\n\n  class AnimationClip {\n    constructor(name) {\n      let duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n      let tracks = arguments.length > 2 ? arguments[2] : undefined;\n      let blendMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : NormalAnimationBlendMode;\n      this.name = name;\n      this.tracks = tracks;\n      this.duration = duration;\n      this.blendMode = blendMode;\n      this.uuid = generateUUID(); // this means it should figure out its duration by scanning the tracks\n\n      if (this.duration < 0) {\n        this.resetDuration();\n      }\n    }\n\n    static parse(json) {\n      const tracks = [],\n            jsonTracks = json.tracks,\n            frameTime = 1.0 / (json.fps || 1.0);\n\n      for (let i = 0, n = jsonTracks.length; i !== n; ++i) {\n        tracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));\n      }\n\n      const clip = new this(json.name, json.duration, tracks, json.blendMode);\n      clip.uuid = json.uuid;\n      return clip;\n    }\n\n    static toJSON(clip) {\n      const tracks = [],\n            clipTracks = clip.tracks;\n      const json = {\n        'name': clip.name,\n        'duration': clip.duration,\n        'tracks': tracks,\n        'uuid': clip.uuid,\n        'blendMode': clip.blendMode\n      };\n\n      for (let i = 0, n = clipTracks.length; i !== n; ++i) {\n        tracks.push(KeyframeTrack.toJSON(clipTracks[i]));\n      }\n\n      return json;\n    }\n\n    static CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {\n      const numMorphTargets = morphTargetSequence.length;\n      const tracks = [];\n\n      for (let i = 0; i < numMorphTargets; i++) {\n        let times = [];\n        let values = [];\n        times.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);\n        values.push(0, 1, 0);\n        const order = AnimationUtils.getKeyframeOrder(times);\n        times = AnimationUtils.sortedArray(times, 1, order);\n        values = AnimationUtils.sortedArray(values, 1, order); // if there is a key at the first frame, duplicate it as the\n        // last frame as well for perfect loop.\n\n        if (!noLoop && times[0] === 0) {\n          times.push(numMorphTargets);\n          values.push(values[0]);\n        }\n\n        tracks.push(new NumberKeyframeTrack('.morphTargetInfluences[' + morphTargetSequence[i].name + ']', times, values).scale(1.0 / fps));\n      }\n\n      return new this(name, -1, tracks);\n    }\n\n    static findByName(objectOrClipArray, name) {\n      let clipArray = objectOrClipArray;\n\n      if (!Array.isArray(objectOrClipArray)) {\n        const o = objectOrClipArray;\n        clipArray = o.geometry && o.geometry.animations || o.animations;\n      }\n\n      for (let i = 0; i < clipArray.length; i++) {\n        if (clipArray[i].name === name) {\n          return clipArray[i];\n        }\n      }\n\n      return null;\n    }\n\n    static CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {\n      const animationToMorphTargets = {}; // tested with https://regex101.com/ on trick sequences\n      // such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\n      const pattern = /^([\\w-]*?)([\\d]+)$/; // sort morph target names into animation groups based\n      // patterns like Walk_001, Walk_002, Run_001, Run_002\n\n      for (let i = 0, il = morphTargets.length; i < il; i++) {\n        const morphTarget = morphTargets[i];\n        const parts = morphTarget.name.match(pattern);\n\n        if (parts && parts.length > 1) {\n          const name = parts[1];\n          let animationMorphTargets = animationToMorphTargets[name];\n\n          if (!animationMorphTargets) {\n            animationToMorphTargets[name] = animationMorphTargets = [];\n          }\n\n          animationMorphTargets.push(morphTarget);\n        }\n      }\n\n      const clips = [];\n\n      for (const name in animationToMorphTargets) {\n        clips.push(this.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));\n      }\n\n      return clips;\n    } // parse the animation.hierarchy format\n\n\n    static parseAnimation(animation, bones) {\n      if (!animation) {\n        console.error('THREE.AnimationClip: No animation in JSONLoader data.');\n        return null;\n      }\n\n      const addNonemptyTrack = function (trackType, trackName, animationKeys, propertyName, destTracks) {\n        // only return track if there are actually keys.\n        if (animationKeys.length !== 0) {\n          const times = [];\n          const values = [];\n          AnimationUtils.flattenJSON(animationKeys, times, values, propertyName); // empty keys are filtered out, so check again\n\n          if (times.length !== 0) {\n            destTracks.push(new trackType(trackName, times, values));\n          }\n        }\n      };\n\n      const tracks = [];\n      const clipName = animation.name || 'default';\n      const fps = animation.fps || 30;\n      const blendMode = animation.blendMode; // automatic length determination in AnimationClip.\n\n      let duration = animation.length || -1;\n      const hierarchyTracks = animation.hierarchy || [];\n\n      for (let h = 0; h < hierarchyTracks.length; h++) {\n        const animationKeys = hierarchyTracks[h].keys; // skip empty tracks\n\n        if (!animationKeys || animationKeys.length === 0) continue; // process morph targets\n\n        if (animationKeys[0].morphTargets) {\n          // figure out all morph targets used in this track\n          const morphTargetNames = {};\n          let k;\n\n          for (k = 0; k < animationKeys.length; k++) {\n            if (animationKeys[k].morphTargets) {\n              for (let m = 0; m < animationKeys[k].morphTargets.length; m++) {\n                morphTargetNames[animationKeys[k].morphTargets[m]] = -1;\n              }\n            }\n          } // create a track for each morph target with all zero\n          // morphTargetInfluences except for the keys in which\n          // the morphTarget is named.\n\n\n          for (const morphTargetName in morphTargetNames) {\n            const times = [];\n            const values = [];\n\n            for (let m = 0; m !== animationKeys[k].morphTargets.length; ++m) {\n              const animationKey = animationKeys[k];\n              times.push(animationKey.time);\n              values.push(animationKey.morphTarget === morphTargetName ? 1 : 0);\n            }\n\n            tracks.push(new NumberKeyframeTrack('.morphTargetInfluence[' + morphTargetName + ']', times, values));\n          }\n\n          duration = morphTargetNames.length * (fps || 1.0);\n        } else {\n          // ...assume skeletal animation\n          const boneName = '.bones[' + bones[h].name + ']';\n          addNonemptyTrack(VectorKeyframeTrack, boneName + '.position', animationKeys, 'pos', tracks);\n          addNonemptyTrack(QuaternionKeyframeTrack, boneName + '.quaternion', animationKeys, 'rot', tracks);\n          addNonemptyTrack(VectorKeyframeTrack, boneName + '.scale', animationKeys, 'scl', tracks);\n        }\n      }\n\n      if (tracks.length === 0) {\n        return null;\n      }\n\n      const clip = new this(clipName, duration, tracks, blendMode);\n      return clip;\n    }\n\n    resetDuration() {\n      const tracks = this.tracks;\n      let duration = 0;\n\n      for (let i = 0, n = tracks.length; i !== n; ++i) {\n        const track = this.tracks[i];\n        duration = Math.max(duration, track.times[track.times.length - 1]);\n      }\n\n      this.duration = duration;\n      return this;\n    }\n\n    trim() {\n      for (let i = 0; i < this.tracks.length; i++) {\n        this.tracks[i].trim(0, this.duration);\n      }\n\n      return this;\n    }\n\n    validate() {\n      let valid = true;\n\n      for (let i = 0; i < this.tracks.length; i++) {\n        valid = valid && this.tracks[i].validate();\n      }\n\n      return valid;\n    }\n\n    optimize() {\n      for (let i = 0; i < this.tracks.length; i++) {\n        this.tracks[i].optimize();\n      }\n\n      return this;\n    }\n\n    clone() {\n      const tracks = [];\n\n      for (let i = 0; i < this.tracks.length; i++) {\n        tracks.push(this.tracks[i].clone());\n      }\n\n      return new this.constructor(this.name, this.duration, tracks, this.blendMode);\n    }\n\n    toJSON() {\n      return this.constructor.toJSON(this);\n    }\n\n  }\n\n  function getTrackTypeForValueTypeName(typeName) {\n    switch (typeName.toLowerCase()) {\n      case 'scalar':\n      case 'double':\n      case 'float':\n      case 'number':\n      case 'integer':\n        return NumberKeyframeTrack;\n\n      case 'vector':\n      case 'vector2':\n      case 'vector3':\n      case 'vector4':\n        return VectorKeyframeTrack;\n\n      case 'color':\n        return ColorKeyframeTrack;\n\n      case 'quaternion':\n        return QuaternionKeyframeTrack;\n\n      case 'bool':\n      case 'boolean':\n        return BooleanKeyframeTrack;\n\n      case 'string':\n        return StringKeyframeTrack;\n    }\n\n    throw new Error('THREE.KeyframeTrack: Unsupported typeName: ' + typeName);\n  }\n\n  function parseKeyframeTrack(json) {\n    if (json.type === undefined) {\n      throw new Error('THREE.KeyframeTrack: track type undefined, can not parse');\n    }\n\n    const trackType = getTrackTypeForValueTypeName(json.type);\n\n    if (json.times === undefined) {\n      const times = [],\n            values = [];\n      AnimationUtils.flattenJSON(json.keys, times, values, 'value');\n      json.times = times;\n      json.values = values;\n    } // derived classes can define a static parse method\n\n\n    if (trackType.parse !== undefined) {\n      return trackType.parse(json);\n    } else {\n      // by default, we assume a constructor compatible with the base\n      return new trackType(json.name, json.times, json.values, json.interpolation);\n    }\n  }\n\n  const Cache = {\n    enabled: false,\n    files: {},\n    add: function (key, file) {\n      if (this.enabled === false) return; // console.log( 'THREE.Cache', 'Adding key:', key );\n\n      this.files[key] = file;\n    },\n    get: function (key) {\n      if (this.enabled === false) return; // console.log( 'THREE.Cache', 'Checking key:', key );\n\n      return this.files[key];\n    },\n    remove: function (key) {\n      delete this.files[key];\n    },\n    clear: function () {\n      this.files = {};\n    }\n  };\n\n  class LoadingManager {\n    constructor(onLoad, onProgress, onError) {\n      const scope = this;\n      let isLoading = false;\n      let itemsLoaded = 0;\n      let itemsTotal = 0;\n      let urlModifier = undefined;\n      const handlers = []; // Refer to #5689 for the reason why we don't set .onStart\n      // in the constructor\n\n      this.onStart = undefined;\n      this.onLoad = onLoad;\n      this.onProgress = onProgress;\n      this.onError = onError;\n\n      this.itemStart = function (url) {\n        itemsTotal++;\n\n        if (isLoading === false) {\n          if (scope.onStart !== undefined) {\n            scope.onStart(url, itemsLoaded, itemsTotal);\n          }\n        }\n\n        isLoading = true;\n      };\n\n      this.itemEnd = function (url) {\n        itemsLoaded++;\n\n        if (scope.onProgress !== undefined) {\n          scope.onProgress(url, itemsLoaded, itemsTotal);\n        }\n\n        if (itemsLoaded === itemsTotal) {\n          isLoading = false;\n\n          if (scope.onLoad !== undefined) {\n            scope.onLoad();\n          }\n        }\n      };\n\n      this.itemError = function (url) {\n        if (scope.onError !== undefined) {\n          scope.onError(url);\n        }\n      };\n\n      this.resolveURL = function (url) {\n        if (urlModifier) {\n          return urlModifier(url);\n        }\n\n        return url;\n      };\n\n      this.setURLModifier = function (transform) {\n        urlModifier = transform;\n        return this;\n      };\n\n      this.addHandler = function (regex, loader) {\n        handlers.push(regex, loader);\n        return this;\n      };\n\n      this.removeHandler = function (regex) {\n        const index = handlers.indexOf(regex);\n\n        if (index !== -1) {\n          handlers.splice(index, 2);\n        }\n\n        return this;\n      };\n\n      this.getHandler = function (file) {\n        for (let i = 0, l = handlers.length; i < l; i += 2) {\n          const regex = handlers[i];\n          const loader = handlers[i + 1];\n          if (regex.global) regex.lastIndex = 0; // see #17920\n\n          if (regex.test(file)) {\n            return loader;\n          }\n        }\n\n        return null;\n      };\n    }\n\n  }\n\n  const DefaultLoadingManager = new LoadingManager();\n\n  class Loader {\n    constructor(manager) {\n      this.manager = manager !== undefined ? manager : DefaultLoadingManager;\n      this.crossOrigin = 'anonymous';\n      this.withCredentials = false;\n      this.path = '';\n      this.resourcePath = '';\n      this.requestHeader = {};\n    }\n\n    load() {}\n\n    loadAsync(url, onProgress) {\n      const scope = this;\n      return new Promise(function (resolve, reject) {\n        scope.load(url, resolve, onProgress, reject);\n      });\n    }\n\n    parse() {}\n\n    setCrossOrigin(crossOrigin) {\n      this.crossOrigin = crossOrigin;\n      return this;\n    }\n\n    setWithCredentials(value) {\n      this.withCredentials = value;\n      return this;\n    }\n\n    setPath(path) {\n      this.path = path;\n      return this;\n    }\n\n    setResourcePath(resourcePath) {\n      this.resourcePath = resourcePath;\n      return this;\n    }\n\n    setRequestHeader(requestHeader) {\n      this.requestHeader = requestHeader;\n      return this;\n    }\n\n  }\n\n  const loading = {};\n\n  class FileLoader extends Loader {\n    constructor(manager) {\n      super(manager);\n    }\n\n    load(url, onLoad, onProgress, onError) {\n      if (url === undefined) url = '';\n      if (this.path !== undefined) url = this.path + url;\n      url = this.manager.resolveURL(url);\n      const cached = Cache.get(url);\n\n      if (cached !== undefined) {\n        this.manager.itemStart(url);\n        setTimeout(() => {\n          if (onLoad) onLoad(cached);\n          this.manager.itemEnd(url);\n        }, 0);\n        return cached;\n      } // Check if request is duplicate\n\n\n      if (loading[url] !== undefined) {\n        loading[url].push({\n          onLoad: onLoad,\n          onProgress: onProgress,\n          onError: onError\n        });\n        return;\n      } // Initialise array for duplicate requests\n\n\n      loading[url] = [];\n      loading[url].push({\n        onLoad: onLoad,\n        onProgress: onProgress,\n        onError: onError\n      }); // create request\n\n      const req = new Request(url, {\n        headers: new Headers(this.requestHeader),\n        credentials: this.withCredentials ? 'include' : 'same-origin' // An abort controller could be added within a future PR\n\n      }); // start the fetch\n\n      fetch(req).then(response => {\n        if (response.status === 200 || response.status === 0) {\n          // Some browsers return HTTP Status 0 when using non-http protocol\n          // e.g. 'file://' or 'data://'. Handle as success.\n          if (response.status === 0) {\n            console.warn('THREE.FileLoader: HTTP Status 0 received.');\n          }\n\n          const callbacks = loading[url];\n          const reader = response.body.getReader();\n          const contentLength = response.headers.get('Content-Length');\n          const total = contentLength ? parseInt(contentLength) : 0;\n          const lengthComputable = total !== 0;\n          let loaded = 0; // periodically read data into the new stream tracking while download progress\n\n          return new ReadableStream({\n            start(controller) {\n              readData();\n\n              function readData() {\n                reader.read().then(_ref => {\n                  let {\n                    done,\n                    value\n                  } = _ref;\n\n                  if (done) {\n                    controller.close();\n                  } else {\n                    loaded += value.byteLength;\n                    const event = new ProgressEvent('progress', {\n                      lengthComputable,\n                      loaded,\n                      total\n                    });\n\n                    for (let i = 0, il = callbacks.length; i < il; i++) {\n                      const callback = callbacks[i];\n                      if (callback.onProgress) callback.onProgress(event);\n                    }\n\n                    controller.enqueue(value);\n                    readData();\n                  }\n                });\n              }\n            }\n\n          });\n        } else {\n          throw Error(`fetch for \"${response.url}\" responded with ${response.status}: ${response.statusText}`);\n        }\n      }).then(stream => {\n        const response = new Response(stream);\n\n        switch (this.responseType) {\n          case 'arraybuffer':\n            return response.arrayBuffer();\n\n          case 'blob':\n            return response.blob();\n\n          case 'document':\n            return response.text().then(text => {\n              const parser = new DOMParser();\n              return parser.parseFromString(text, this.mimeType);\n            });\n\n          case 'json':\n            return response.json();\n\n          default:\n            return response.text();\n        }\n      }).then(data => {\n        // Add to cache only on HTTP success, so that we do not cache\n        // error response bodies as proper responses to requests.\n        Cache.add(url, data);\n        const callbacks = loading[url];\n        delete loading[url];\n\n        for (let i = 0, il = callbacks.length; i < il; i++) {\n          const callback = callbacks[i];\n          if (callback.onLoad) callback.onLoad(data);\n        }\n\n        this.manager.itemEnd(url);\n      }).catch(err => {\n        // Abort errors and other errors are handled the same\n        const callbacks = loading[url];\n        delete loading[url];\n\n        for (let i = 0, il = callbacks.length; i < il; i++) {\n          const callback = callbacks[i];\n          if (callback.onError) callback.onError(err);\n        }\n\n        this.manager.itemError(url);\n        this.manager.itemEnd(url);\n      });\n      this.manager.itemStart(url);\n    }\n\n    setResponseType(value) {\n      this.responseType = value;\n      return this;\n    }\n\n    setMimeType(value) {\n      this.mimeType = value;\n      return this;\n    }\n\n  }\n\n  class AnimationLoader extends Loader {\n    constructor(manager) {\n      super(manager);\n    }\n\n    load(url, onLoad, onProgress, onError) {\n      const scope = this;\n      const loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setRequestHeader(this.requestHeader);\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(JSON.parse(text)));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n\n    parse(json) {\n      const animations = [];\n\n      for (let i = 0; i < json.length; i++) {\n        const clip = AnimationClip.parse(json[i]);\n        animations.push(clip);\n      }\n\n      return animations;\n    }\n\n  }\n  /**\n   * Abstract Base class to block based textures loader (dds, pvr, ...)\n   *\n   * Sub classes have to implement the parse() method which will be used in load().\n   */\n\n\n  class CompressedTextureLoader extends Loader {\n    constructor(manager) {\n      super(manager);\n    }\n\n    load(url, onLoad, onProgress, onError) {\n      const scope = this;\n      const images = [];\n      const texture = new CompressedTexture();\n      const loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(this.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      let loaded = 0;\n\n      function loadTexture(i) {\n        loader.load(url[i], function (buffer) {\n          const texDatas = scope.parse(buffer, true);\n          images[i] = {\n            width: texDatas.width,\n            height: texDatas.height,\n            format: texDatas.format,\n            mipmaps: texDatas.mipmaps\n          };\n          loaded += 1;\n\n          if (loaded === 6) {\n            if (texDatas.mipmapCount === 1) texture.minFilter = LinearFilter;\n            texture.image = images;\n            texture.format = texDatas.format;\n            texture.needsUpdate = true;\n            if (onLoad) onLoad(texture);\n          }\n        }, onProgress, onError);\n      }\n\n      if (Array.isArray(url)) {\n        for (let i = 0, il = url.length; i < il; ++i) {\n          loadTexture(i);\n        }\n      } else {\n        // compressed cubemap texture stored in a single DDS file\n        loader.load(url, function (buffer) {\n          const texDatas = scope.parse(buffer, true);\n\n          if (texDatas.isCubemap) {\n            const faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n            for (let f = 0; f < faces; f++) {\n              images[f] = {\n                mipmaps: []\n              };\n\n              for (let i = 0; i < texDatas.mipmapCount; i++) {\n                images[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i]);\n                images[f].format = texDatas.format;\n                images[f].width = texDatas.width;\n                images[f].height = texDatas.height;\n              }\n            }\n\n            texture.image = images;\n          } else {\n            texture.image.width = texDatas.width;\n            texture.image.height = texDatas.height;\n            texture.mipmaps = texDatas.mipmaps;\n          }\n\n          if (texDatas.mipmapCount === 1) {\n            texture.minFilter = LinearFilter;\n          }\n\n          texture.format = texDatas.format;\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }, onProgress, onError);\n      }\n\n      return texture;\n    }\n\n  }\n\n  class ImageLoader extends Loader {\n    constructor(manager) {\n      super(manager);\n    }\n\n    load(url, onLoad, onProgress, onError) {\n      if (this.path !== undefined) url = this.path + url;\n      url = this.manager.resolveURL(url);\n      const scope = this;\n      const cached = Cache.get(url);\n\n      if (cached !== undefined) {\n        scope.manager.itemStart(url);\n        setTimeout(function () {\n          if (onLoad) onLoad(cached);\n          scope.manager.itemEnd(url);\n        }, 0);\n        return cached;\n      }\n\n      const image = createElementNS('img');\n\n      function onImageLoad() {\n        removeEventListeners();\n        Cache.add(url, this);\n        if (onLoad) onLoad(this);\n        scope.manager.itemEnd(url);\n      }\n\n      function onImageError(event) {\n        removeEventListeners();\n        if (onError) onError(event);\n        scope.manager.itemError(url);\n        scope.manager.itemEnd(url);\n      }\n\n      function removeEventListeners() {\n        image.removeEventListener('load', onImageLoad, false);\n        image.removeEventListener('error', onImageError, false);\n      }\n\n      image.addEventListener('load', onImageLoad, false);\n      image.addEventListener('error', onImageError, false);\n\n      if (url.substr(0, 5) !== 'data:') {\n        if (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;\n      }\n\n      scope.manager.itemStart(url);\n      image.src = url;\n      return image;\n    }\n\n  }\n\n  class CubeTextureLoader extends Loader {\n    constructor(manager) {\n      super(manager);\n    }\n\n    load(urls, onLoad, onProgress, onError) {\n      const texture = new CubeTexture();\n      const loader = new ImageLoader(this.manager);\n      loader.setCrossOrigin(this.crossOrigin);\n      loader.setPath(this.path);\n      let loaded = 0;\n\n      function loadTexture(i) {\n        loader.load(urls[i], function (image) {\n          texture.images[i] = image;\n          loaded++;\n\n          if (loaded === 6) {\n            texture.needsUpdate = true;\n            if (onLoad) onLoad(texture);\n          }\n        }, undefined, onError);\n      }\n\n      for (let i = 0; i < urls.length; ++i) {\n        loadTexture(i);\n      }\n\n      return texture;\n    }\n\n  }\n  /**\n   * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n   *\n   * Sub classes have to implement the parse() method which will be used in load().\n   */\n\n\n  class DataTextureLoader extends Loader {\n    constructor(manager) {\n      super(manager);\n    }\n\n    load(url, onLoad, onProgress, onError) {\n      const scope = this;\n      const texture = new DataTexture();\n      const loader = new FileLoader(this.manager);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(this.requestHeader);\n      loader.setPath(this.path);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (buffer) {\n        const texData = scope.parse(buffer);\n        if (!texData) return;\n\n        if (texData.image !== undefined) {\n          texture.image = texData.image;\n        } else if (texData.data !== undefined) {\n          texture.image.width = texData.width;\n          texture.image.height = texData.height;\n          texture.image.data = texData.data;\n        }\n\n        texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n        texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n        texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n        texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n        texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n        if (texData.encoding !== undefined) {\n          texture.encoding = texData.encoding;\n        }\n\n        if (texData.flipY !== undefined) {\n          texture.flipY = texData.flipY;\n        }\n\n        if (texData.format !== undefined) {\n          texture.format = texData.format;\n        }\n\n        if (texData.type !== undefined) {\n          texture.type = texData.type;\n        }\n\n        if (texData.mipmaps !== undefined) {\n          texture.mipmaps = texData.mipmaps;\n          texture.minFilter = LinearMipmapLinearFilter; // presumably...\n        }\n\n        if (texData.mipmapCount === 1) {\n          texture.minFilter = LinearFilter;\n        }\n\n        if (texData.generateMipmaps !== undefined) {\n          texture.generateMipmaps = texData.generateMipmaps;\n        }\n\n        texture.needsUpdate = true;\n        if (onLoad) onLoad(texture, texData);\n      }, onProgress, onError);\n      return texture;\n    }\n\n  }\n\n  class TextureLoader extends Loader {\n    constructor(manager) {\n      super(manager);\n    }\n\n    load(url, onLoad, onProgress, onError) {\n      const texture = new Texture();\n      const loader = new ImageLoader(this.manager);\n      loader.setCrossOrigin(this.crossOrigin);\n      loader.setPath(this.path);\n      loader.load(url, function (image) {\n        texture.image = image;\n        texture.needsUpdate = true;\n\n        if (onLoad !== undefined) {\n          onLoad(texture);\n        }\n      }, onProgress, onError);\n      return texture;\n    }\n\n  }\n\n  class Light extends Object3D {\n    constructor(color) {\n      let intensity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      super();\n      this.type = 'Light';\n      this.color = new Color(color);\n      this.intensity = intensity;\n    }\n\n    dispose() {// Empty here in base class; some subclasses override.\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.color.copy(source.color);\n      this.intensity = source.intensity;\n      return this;\n    }\n\n    toJSON(meta) {\n      const data = super.toJSON(meta);\n      data.object.color = this.color.getHex();\n      data.object.intensity = this.intensity;\n      if (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();\n      if (this.distance !== undefined) data.object.distance = this.distance;\n      if (this.angle !== undefined) data.object.angle = this.angle;\n      if (this.decay !== undefined) data.object.decay = this.decay;\n      if (this.penumbra !== undefined) data.object.penumbra = this.penumbra;\n      if (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();\n      return data;\n    }\n\n  }\n\n  Light.prototype.isLight = true;\n\n  class HemisphereLight extends Light {\n    constructor(skyColor, groundColor, intensity) {\n      super(skyColor, intensity);\n      this.type = 'HemisphereLight';\n      this.position.copy(Object3D.DefaultUp);\n      this.updateMatrix();\n      this.groundColor = new Color(groundColor);\n    }\n\n    copy(source) {\n      Light.prototype.copy.call(this, source);\n      this.groundColor.copy(source.groundColor);\n      return this;\n    }\n\n  }\n\n  HemisphereLight.prototype.isHemisphereLight = true;\n\n  const _projScreenMatrix$1 = /*@__PURE__*/new Matrix4();\n\n  const _lightPositionWorld$1 = /*@__PURE__*/new Vector3();\n\n  const _lookTarget$1 = /*@__PURE__*/new Vector3();\n\n  class LightShadow {\n    constructor(camera) {\n      this.camera = camera;\n      this.bias = 0;\n      this.normalBias = 0;\n      this.radius = 1;\n      this.blurSamples = 8;\n      this.mapSize = new Vector2(512, 512);\n      this.map = null;\n      this.mapPass = null;\n      this.matrix = new Matrix4();\n      this.autoUpdate = true;\n      this.needsUpdate = false;\n      this._frustum = new Frustum();\n      this._frameExtents = new Vector2(1, 1);\n      this._viewportCount = 1;\n      this._viewports = [new Vector4(0, 0, 1, 1)];\n    }\n\n    getViewportCount() {\n      return this._viewportCount;\n    }\n\n    getFrustum() {\n      return this._frustum;\n    }\n\n    updateMatrices(light) {\n      const shadowCamera = this.camera;\n      const shadowMatrix = this.matrix;\n\n      _lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);\n\n      shadowCamera.position.copy(_lightPositionWorld$1);\n\n      _lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);\n\n      shadowCamera.lookAt(_lookTarget$1);\n      shadowCamera.updateMatrixWorld();\n\n      _projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);\n\n      this._frustum.setFromProjectionMatrix(_projScreenMatrix$1);\n\n      shadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n      shadowMatrix.multiply(shadowCamera.projectionMatrix);\n      shadowMatrix.multiply(shadowCamera.matrixWorldInverse);\n    }\n\n    getViewport(viewportIndex) {\n      return this._viewports[viewportIndex];\n    }\n\n    getFrameExtents() {\n      return this._frameExtents;\n    }\n\n    dispose() {\n      if (this.map) {\n        this.map.dispose();\n      }\n\n      if (this.mapPass) {\n        this.mapPass.dispose();\n      }\n    }\n\n    copy(source) {\n      this.camera = source.camera.clone();\n      this.bias = source.bias;\n      this.radius = source.radius;\n      this.mapSize.copy(source.mapSize);\n      return this;\n    }\n\n    clone() {\n      return new this.constructor().copy(this);\n    }\n\n    toJSON() {\n      const object = {};\n      if (this.bias !== 0) object.bias = this.bias;\n      if (this.normalBias !== 0) object.normalBias = this.normalBias;\n      if (this.radius !== 1) object.radius = this.radius;\n      if (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();\n      object.camera = this.camera.toJSON(false).object;\n      delete object.camera.matrix;\n      return object;\n    }\n\n  }\n\n  class SpotLightShadow extends LightShadow {\n    constructor() {\n      super(new PerspectiveCamera(50, 1, 0.5, 500));\n      this.focus = 1;\n    }\n\n    updateMatrices(light) {\n      const camera = this.camera;\n      const fov = RAD2DEG * 2 * light.angle * this.focus;\n      const aspect = this.mapSize.width / this.mapSize.height;\n      const far = light.distance || camera.far;\n\n      if (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {\n        camera.fov = fov;\n        camera.aspect = aspect;\n        camera.far = far;\n        camera.updateProjectionMatrix();\n      }\n\n      super.updateMatrices(light);\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.focus = source.focus;\n      return this;\n    }\n\n  }\n\n  SpotLightShadow.prototype.isSpotLightShadow = true;\n\n  class SpotLight extends Light {\n    constructor(color, intensity) {\n      let distance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      let angle = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Math.PI / 3;\n      let penumbra = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      let decay = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n      super(color, intensity);\n      this.type = 'SpotLight';\n      this.position.copy(Object3D.DefaultUp);\n      this.updateMatrix();\n      this.target = new Object3D();\n      this.distance = distance;\n      this.angle = angle;\n      this.penumbra = penumbra;\n      this.decay = decay; // for physically correct lights, should be 2.\n\n      this.shadow = new SpotLightShadow();\n    }\n\n    get power() {\n      // compute the light's luminous power (in lumens) from its intensity (in candela)\n      // by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)\n      return this.intensity * Math.PI;\n    }\n\n    set power(power) {\n      // set the light's intensity (in candela) from the desired luminous power (in lumens)\n      this.intensity = power / Math.PI;\n    }\n\n    dispose() {\n      this.shadow.dispose();\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.distance = source.distance;\n      this.angle = source.angle;\n      this.penumbra = source.penumbra;\n      this.decay = source.decay;\n      this.target = source.target.clone();\n      this.shadow = source.shadow.clone();\n      return this;\n    }\n\n  }\n\n  SpotLight.prototype.isSpotLight = true;\n\n  const _projScreenMatrix = /*@__PURE__*/new Matrix4();\n\n  const _lightPositionWorld = /*@__PURE__*/new Vector3();\n\n  const _lookTarget = /*@__PURE__*/new Vector3();\n\n  class PointLightShadow extends LightShadow {\n    constructor() {\n      super(new PerspectiveCamera(90, 1, 0.5, 500));\n      this._frameExtents = new Vector2(4, 2);\n      this._viewportCount = 6;\n      this._viewports = [// These viewports map a cube-map onto a 2D texture with the\n      // following orientation:\n      //\n      //\txzXZ\n      //\t y Y\n      //\n      // X - Positive x direction\n      // x - Negative x direction\n      // Y - Positive y direction\n      // y - Negative y direction\n      // Z - Positive z direction\n      // z - Negative z direction\n      // positive X\n      new Vector4(2, 1, 1, 1), // negative X\n      new Vector4(0, 1, 1, 1), // positive Z\n      new Vector4(3, 1, 1, 1), // negative Z\n      new Vector4(1, 1, 1, 1), // positive Y\n      new Vector4(3, 0, 1, 1), // negative Y\n      new Vector4(1, 0, 1, 1)];\n      this._cubeDirections = [new Vector3(1, 0, 0), new Vector3(-1, 0, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1), new Vector3(0, 1, 0), new Vector3(0, -1, 0)];\n      this._cubeUps = [new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1)];\n    }\n\n    updateMatrices(light) {\n      let viewportIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      const camera = this.camera;\n      const shadowMatrix = this.matrix;\n      const far = light.distance || camera.far;\n\n      if (far !== camera.far) {\n        camera.far = far;\n        camera.updateProjectionMatrix();\n      }\n\n      _lightPositionWorld.setFromMatrixPosition(light.matrixWorld);\n\n      camera.position.copy(_lightPositionWorld);\n\n      _lookTarget.copy(camera.position);\n\n      _lookTarget.add(this._cubeDirections[viewportIndex]);\n\n      camera.up.copy(this._cubeUps[viewportIndex]);\n      camera.lookAt(_lookTarget);\n      camera.updateMatrixWorld();\n      shadowMatrix.makeTranslation(-_lightPositionWorld.x, -_lightPositionWorld.y, -_lightPositionWorld.z);\n\n      _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n      this._frustum.setFromProjectionMatrix(_projScreenMatrix);\n    }\n\n  }\n\n  PointLightShadow.prototype.isPointLightShadow = true;\n\n  class PointLight extends Light {\n    constructor(color, intensity) {\n      let distance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      let decay = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      super(color, intensity);\n      this.type = 'PointLight';\n      this.distance = distance;\n      this.decay = decay; // for physically correct lights, should be 2.\n\n      this.shadow = new PointLightShadow();\n    }\n\n    get power() {\n      // compute the light's luminous power (in lumens) from its intensity (in candela)\n      // for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)\n      return this.intensity * 4 * Math.PI;\n    }\n\n    set power(power) {\n      // set the light's intensity (in candela) from the desired luminous power (in lumens)\n      this.intensity = power / (4 * Math.PI);\n    }\n\n    dispose() {\n      this.shadow.dispose();\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.distance = source.distance;\n      this.decay = source.decay;\n      this.shadow = source.shadow.clone();\n      return this;\n    }\n\n  }\n\n  PointLight.prototype.isPointLight = true;\n\n  class DirectionalLightShadow extends LightShadow {\n    constructor() {\n      super(new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));\n    }\n\n  }\n\n  DirectionalLightShadow.prototype.isDirectionalLightShadow = true;\n\n  class DirectionalLight extends Light {\n    constructor(color, intensity) {\n      super(color, intensity);\n      this.type = 'DirectionalLight';\n      this.position.copy(Object3D.DefaultUp);\n      this.updateMatrix();\n      this.target = new Object3D();\n      this.shadow = new DirectionalLightShadow();\n    }\n\n    dispose() {\n      this.shadow.dispose();\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.target = source.target.clone();\n      this.shadow = source.shadow.clone();\n      return this;\n    }\n\n  }\n\n  DirectionalLight.prototype.isDirectionalLight = true;\n\n  class AmbientLight extends Light {\n    constructor(color, intensity) {\n      super(color, intensity);\n      this.type = 'AmbientLight';\n    }\n\n  }\n\n  AmbientLight.prototype.isAmbientLight = true;\n\n  class RectAreaLight extends Light {\n    constructor(color, intensity) {\n      let width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n      let height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;\n      super(color, intensity);\n      this.type = 'RectAreaLight';\n      this.width = width;\n      this.height = height;\n    }\n\n    get power() {\n      // compute the light's luminous power (in lumens) from its intensity (in nits)\n      return this.intensity * this.width * this.height * Math.PI;\n    }\n\n    set power(power) {\n      // set the light's intensity (in nits) from the desired luminous power (in lumens)\n      this.intensity = power / (this.width * this.height * Math.PI);\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.width = source.width;\n      this.height = source.height;\n      return this;\n    }\n\n    toJSON(meta) {\n      const data = super.toJSON(meta);\n      data.object.width = this.width;\n      data.object.height = this.height;\n      return data;\n    }\n\n  }\n\n  RectAreaLight.prototype.isRectAreaLight = true;\n  /**\n   * Primary reference:\n   *\t https://graphics.stanford.edu/papers/envmap/envmap.pdf\n   *\n   * Secondary reference:\n   *\t https://www.ppsloan.org/publications/StupidSH36.pdf\n   */\n  // 3-band SH defined by 9 coefficients\n\n  class SphericalHarmonics3 {\n    constructor() {\n      this.coefficients = [];\n\n      for (let i = 0; i < 9; i++) {\n        this.coefficients.push(new Vector3());\n      }\n    }\n\n    set(coefficients) {\n      for (let i = 0; i < 9; i++) {\n        this.coefficients[i].copy(coefficients[i]);\n      }\n\n      return this;\n    }\n\n    zero() {\n      for (let i = 0; i < 9; i++) {\n        this.coefficients[i].set(0, 0, 0);\n      }\n\n      return this;\n    } // get the radiance in the direction of the normal\n    // target is a Vector3\n\n\n    getAt(normal, target) {\n      // normal is assumed to be unit length\n      const x = normal.x,\n            y = normal.y,\n            z = normal.z;\n      const coeff = this.coefficients; // band 0\n\n      target.copy(coeff[0]).multiplyScalar(0.282095); // band 1\n\n      target.addScaledVector(coeff[1], 0.488603 * y);\n      target.addScaledVector(coeff[2], 0.488603 * z);\n      target.addScaledVector(coeff[3], 0.488603 * x); // band 2\n\n      target.addScaledVector(coeff[4], 1.092548 * (x * y));\n      target.addScaledVector(coeff[5], 1.092548 * (y * z));\n      target.addScaledVector(coeff[6], 0.315392 * (3.0 * z * z - 1.0));\n      target.addScaledVector(coeff[7], 1.092548 * (x * z));\n      target.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));\n      return target;\n    } // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n    // target is a Vector3\n    // https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\n\n    getIrradianceAt(normal, target) {\n      // normal is assumed to be unit length\n      const x = normal.x,\n            y = normal.y,\n            z = normal.z;\n      const coeff = this.coefficients; // band 0\n\n      target.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095\n      // band 1\n\n      target.addScaledVector(coeff[1], 2.0 * 0.511664 * y); // ( 2 * π / 3 ) * 0.488603\n\n      target.addScaledVector(coeff[2], 2.0 * 0.511664 * z);\n      target.addScaledVector(coeff[3], 2.0 * 0.511664 * x); // band 2\n\n      target.addScaledVector(coeff[4], 2.0 * 0.429043 * x * y); // ( π / 4 ) * 1.092548\n\n      target.addScaledVector(coeff[5], 2.0 * 0.429043 * y * z);\n      target.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3\n\n      target.addScaledVector(coeff[7], 2.0 * 0.429043 * x * z);\n      target.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274\n\n      return target;\n    }\n\n    add(sh) {\n      for (let i = 0; i < 9; i++) {\n        this.coefficients[i].add(sh.coefficients[i]);\n      }\n\n      return this;\n    }\n\n    addScaledSH(sh, s) {\n      for (let i = 0; i < 9; i++) {\n        this.coefficients[i].addScaledVector(sh.coefficients[i], s);\n      }\n\n      return this;\n    }\n\n    scale(s) {\n      for (let i = 0; i < 9; i++) {\n        this.coefficients[i].multiplyScalar(s);\n      }\n\n      return this;\n    }\n\n    lerp(sh, alpha) {\n      for (let i = 0; i < 9; i++) {\n        this.coefficients[i].lerp(sh.coefficients[i], alpha);\n      }\n\n      return this;\n    }\n\n    equals(sh) {\n      for (let i = 0; i < 9; i++) {\n        if (!this.coefficients[i].equals(sh.coefficients[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    copy(sh) {\n      return this.set(sh.coefficients);\n    }\n\n    clone() {\n      return new this.constructor().copy(this);\n    }\n\n    fromArray(array) {\n      let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      const coefficients = this.coefficients;\n\n      for (let i = 0; i < 9; i++) {\n        coefficients[i].fromArray(array, offset + i * 3);\n      }\n\n      return this;\n    }\n\n    toArray() {\n      let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      const coefficients = this.coefficients;\n\n      for (let i = 0; i < 9; i++) {\n        coefficients[i].toArray(array, offset + i * 3);\n      }\n\n      return array;\n    } // evaluate the basis functions\n    // shBasis is an Array[ 9 ]\n\n\n    static getBasisAt(normal, shBasis) {\n      // normal is assumed to be unit length\n      const x = normal.x,\n            y = normal.y,\n            z = normal.z; // band 0\n\n      shBasis[0] = 0.282095; // band 1\n\n      shBasis[1] = 0.488603 * y;\n      shBasis[2] = 0.488603 * z;\n      shBasis[3] = 0.488603 * x; // band 2\n\n      shBasis[4] = 1.092548 * x * y;\n      shBasis[5] = 1.092548 * y * z;\n      shBasis[6] = 0.315392 * (3 * z * z - 1);\n      shBasis[7] = 1.092548 * x * z;\n      shBasis[8] = 0.546274 * (x * x - y * y);\n    }\n\n  }\n\n  SphericalHarmonics3.prototype.isSphericalHarmonics3 = true;\n\n  class LightProbe extends Light {\n    constructor() {\n      let sh = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new SphericalHarmonics3();\n      let intensity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      super(undefined, intensity);\n      this.sh = sh;\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.sh.copy(source.sh);\n      return this;\n    }\n\n    fromJSON(json) {\n      this.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\n      this.sh.fromArray(json.sh);\n      return this;\n    }\n\n    toJSON(meta) {\n      const data = super.toJSON(meta);\n      data.object.sh = this.sh.toArray();\n      return data;\n    }\n\n  }\n\n  LightProbe.prototype.isLightProbe = true;\n\n  class MaterialLoader extends Loader {\n    constructor(manager) {\n      super(manager);\n      this.textures = {};\n    }\n\n    load(url, onLoad, onProgress, onError) {\n      const scope = this;\n      const loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(JSON.parse(text)));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n\n    parse(json) {\n      const textures = this.textures;\n\n      function getTexture(name) {\n        if (textures[name] === undefined) {\n          console.warn('THREE.MaterialLoader: Undefined texture', name);\n        }\n\n        return textures[name];\n      }\n\n      const material = new Materials[json.type]();\n      if (json.uuid !== undefined) material.uuid = json.uuid;\n      if (json.name !== undefined) material.name = json.name;\n      if (json.color !== undefined && material.color !== undefined) material.color.setHex(json.color);\n      if (json.roughness !== undefined) material.roughness = json.roughness;\n      if (json.metalness !== undefined) material.metalness = json.metalness;\n      if (json.sheen !== undefined) material.sheen = json.sheen;\n      if (json.sheenColor !== undefined) material.sheenColor = new Color().setHex(json.sheenColor);\n      if (json.sheenRoughness !== undefined) material.sheenRoughness = json.sheenRoughness;\n      if (json.emissive !== undefined && material.emissive !== undefined) material.emissive.setHex(json.emissive);\n      if (json.specular !== undefined && material.specular !== undefined) material.specular.setHex(json.specular);\n      if (json.specularIntensity !== undefined) material.specularIntensity = json.specularIntensity;\n      if (json.specularColor !== undefined && material.specularColor !== undefined) material.specularColor.setHex(json.specularColor);\n      if (json.shininess !== undefined) material.shininess = json.shininess;\n      if (json.clearcoat !== undefined) material.clearcoat = json.clearcoat;\n      if (json.clearcoatRoughness !== undefined) material.clearcoatRoughness = json.clearcoatRoughness;\n      if (json.transmission !== undefined) material.transmission = json.transmission;\n      if (json.thickness !== undefined) material.thickness = json.thickness;\n      if (json.attenuationDistance !== undefined) material.attenuationDistance = json.attenuationDistance;\n      if (json.attenuationColor !== undefined && material.attenuationColor !== undefined) material.attenuationColor.setHex(json.attenuationColor);\n      if (json.fog !== undefined) material.fog = json.fog;\n      if (json.flatShading !== undefined) material.flatShading = json.flatShading;\n      if (json.blending !== undefined) material.blending = json.blending;\n      if (json.combine !== undefined) material.combine = json.combine;\n      if (json.side !== undefined) material.side = json.side;\n      if (json.shadowSide !== undefined) material.shadowSide = json.shadowSide;\n      if (json.opacity !== undefined) material.opacity = json.opacity;\n      if (json.format !== undefined) material.format = json.format;\n      if (json.transparent !== undefined) material.transparent = json.transparent;\n      if (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;\n      if (json.depthTest !== undefined) material.depthTest = json.depthTest;\n      if (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;\n      if (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;\n      if (json.stencilWrite !== undefined) material.stencilWrite = json.stencilWrite;\n      if (json.stencilWriteMask !== undefined) material.stencilWriteMask = json.stencilWriteMask;\n      if (json.stencilFunc !== undefined) material.stencilFunc = json.stencilFunc;\n      if (json.stencilRef !== undefined) material.stencilRef = json.stencilRef;\n      if (json.stencilFuncMask !== undefined) material.stencilFuncMask = json.stencilFuncMask;\n      if (json.stencilFail !== undefined) material.stencilFail = json.stencilFail;\n      if (json.stencilZFail !== undefined) material.stencilZFail = json.stencilZFail;\n      if (json.stencilZPass !== undefined) material.stencilZPass = json.stencilZPass;\n      if (json.wireframe !== undefined) material.wireframe = json.wireframe;\n      if (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth;\n      if (json.wireframeLinecap !== undefined) material.wireframeLinecap = json.wireframeLinecap;\n      if (json.wireframeLinejoin !== undefined) material.wireframeLinejoin = json.wireframeLinejoin;\n      if (json.rotation !== undefined) material.rotation = json.rotation;\n      if (json.linewidth !== 1) material.linewidth = json.linewidth;\n      if (json.dashSize !== undefined) material.dashSize = json.dashSize;\n      if (json.gapSize !== undefined) material.gapSize = json.gapSize;\n      if (json.scale !== undefined) material.scale = json.scale;\n      if (json.polygonOffset !== undefined) material.polygonOffset = json.polygonOffset;\n      if (json.polygonOffsetFactor !== undefined) material.polygonOffsetFactor = json.polygonOffsetFactor;\n      if (json.polygonOffsetUnits !== undefined) material.polygonOffsetUnits = json.polygonOffsetUnits;\n      if (json.dithering !== undefined) material.dithering = json.dithering;\n      if (json.alphaToCoverage !== undefined) material.alphaToCoverage = json.alphaToCoverage;\n      if (json.premultipliedAlpha !== undefined) material.premultipliedAlpha = json.premultipliedAlpha;\n      if (json.visible !== undefined) material.visible = json.visible;\n      if (json.toneMapped !== undefined) material.toneMapped = json.toneMapped;\n      if (json.userData !== undefined) material.userData = json.userData;\n\n      if (json.vertexColors !== undefined) {\n        if (typeof json.vertexColors === 'number') {\n          material.vertexColors = json.vertexColors > 0 ? true : false;\n        } else {\n          material.vertexColors = json.vertexColors;\n        }\n      } // Shader Material\n\n\n      if (json.uniforms !== undefined) {\n        for (const name in json.uniforms) {\n          const uniform = json.uniforms[name];\n          material.uniforms[name] = {};\n\n          switch (uniform.type) {\n            case 't':\n              material.uniforms[name].value = getTexture(uniform.value);\n              break;\n\n            case 'c':\n              material.uniforms[name].value = new Color().setHex(uniform.value);\n              break;\n\n            case 'v2':\n              material.uniforms[name].value = new Vector2().fromArray(uniform.value);\n              break;\n\n            case 'v3':\n              material.uniforms[name].value = new Vector3().fromArray(uniform.value);\n              break;\n\n            case 'v4':\n              material.uniforms[name].value = new Vector4().fromArray(uniform.value);\n              break;\n\n            case 'm3':\n              material.uniforms[name].value = new Matrix3().fromArray(uniform.value);\n              break;\n\n            case 'm4':\n              material.uniforms[name].value = new Matrix4().fromArray(uniform.value);\n              break;\n\n            default:\n              material.uniforms[name].value = uniform.value;\n          }\n        }\n      }\n\n      if (json.defines !== undefined) material.defines = json.defines;\n      if (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;\n      if (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;\n\n      if (json.extensions !== undefined) {\n        for (const key in json.extensions) {\n          material.extensions[key] = json.extensions[key];\n        }\n      } // Deprecated\n\n\n      if (json.shading !== undefined) material.flatShading = json.shading === 1; // THREE.FlatShading\n      // for PointsMaterial\n\n      if (json.size !== undefined) material.size = json.size;\n      if (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation; // maps\n\n      if (json.map !== undefined) material.map = getTexture(json.map);\n      if (json.matcap !== undefined) material.matcap = getTexture(json.matcap);\n      if (json.alphaMap !== undefined) material.alphaMap = getTexture(json.alphaMap);\n      if (json.bumpMap !== undefined) material.bumpMap = getTexture(json.bumpMap);\n      if (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;\n      if (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);\n      if (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;\n\n      if (json.normalScale !== undefined) {\n        let normalScale = json.normalScale;\n\n        if (Array.isArray(normalScale) === false) {\n          // Blender exporter used to export a scalar. See #7459\n          normalScale = [normalScale, normalScale];\n        }\n\n        material.normalScale = new Vector2().fromArray(normalScale);\n      }\n\n      if (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);\n      if (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;\n      if (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;\n      if (json.roughnessMap !== undefined) material.roughnessMap = getTexture(json.roughnessMap);\n      if (json.metalnessMap !== undefined) material.metalnessMap = getTexture(json.metalnessMap);\n      if (json.emissiveMap !== undefined) material.emissiveMap = getTexture(json.emissiveMap);\n      if (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;\n      if (json.specularMap !== undefined) material.specularMap = getTexture(json.specularMap);\n      if (json.specularIntensityMap !== undefined) material.specularIntensityMap = getTexture(json.specularIntensityMap);\n      if (json.specularColorMap !== undefined) material.specularColorMap = getTexture(json.specularColorMap);\n      if (json.envMap !== undefined) material.envMap = getTexture(json.envMap);\n      if (json.envMapIntensity !== undefined) material.envMapIntensity = json.envMapIntensity;\n      if (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;\n      if (json.refractionRatio !== undefined) material.refractionRatio = json.refractionRatio;\n      if (json.lightMap !== undefined) material.lightMap = getTexture(json.lightMap);\n      if (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;\n      if (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);\n      if (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity;\n      if (json.gradientMap !== undefined) material.gradientMap = getTexture(json.gradientMap);\n      if (json.clearcoatMap !== undefined) material.clearcoatMap = getTexture(json.clearcoatMap);\n      if (json.clearcoatRoughnessMap !== undefined) material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);\n      if (json.clearcoatNormalMap !== undefined) material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);\n      if (json.clearcoatNormalScale !== undefined) material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale);\n      if (json.transmissionMap !== undefined) material.transmissionMap = getTexture(json.transmissionMap);\n      if (json.thicknessMap !== undefined) material.thicknessMap = getTexture(json.thicknessMap);\n      if (json.sheenColorMap !== undefined) material.sheenColorMap = getTexture(json.sheenColorMap);\n      if (json.sheenRoughnessMap !== undefined) material.sheenRoughnessMap = getTexture(json.sheenRoughnessMap);\n      return material;\n    }\n\n    setTextures(value) {\n      this.textures = value;\n      return this;\n    }\n\n  }\n\n  class LoaderUtils {\n    static decodeText(array) {\n      if (typeof TextDecoder !== 'undefined') {\n        return new TextDecoder().decode(array);\n      } // Avoid the String.fromCharCode.apply(null, array) shortcut, which\n      // throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\n      let s = '';\n\n      for (let i = 0, il = array.length; i < il; i++) {\n        // Implicitly assumes little-endian.\n        s += String.fromCharCode(array[i]);\n      }\n\n      try {\n        // merges multi-byte utf-8 characters.\n        return decodeURIComponent(escape(s));\n      } catch (e) {\n        // see #16358\n        return s;\n      }\n    }\n\n    static extractUrlBase(url) {\n      const index = url.lastIndexOf('/');\n      if (index === -1) return './';\n      return url.substr(0, index + 1);\n    }\n\n    static resolveURL(url, path) {\n      // Invalid URL\n      if (typeof url !== 'string' || url === '') return ''; // Host Relative URL\n\n      if (/^https?:\\/\\//i.test(path) && /^\\//.test(url)) {\n        path = path.replace(/(^https?:\\/\\/[^\\/]+).*/i, '$1');\n      } // Absolute URL http://,https://,//\n\n\n      if (/^(https?:)?\\/\\//i.test(url)) return url; // Data URI\n\n      if (/^data:.*,.*$/i.test(url)) return url; // Blob URL\n\n      if (/^blob:.*$/i.test(url)) return url; // Relative URL\n\n      return path + url;\n    }\n\n  }\n\n  class InstancedBufferGeometry extends BufferGeometry {\n    constructor() {\n      super();\n      this.type = 'InstancedBufferGeometry';\n      this.instanceCount = Infinity;\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.instanceCount = source.instanceCount;\n      return this;\n    }\n\n    clone() {\n      return new this.constructor().copy(this);\n    }\n\n    toJSON() {\n      const data = super.toJSON(this);\n      data.instanceCount = this.instanceCount;\n      data.isInstancedBufferGeometry = true;\n      return data;\n    }\n\n  }\n\n  InstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;\n\n  class BufferGeometryLoader extends Loader {\n    constructor(manager) {\n      super(manager);\n    }\n\n    load(url, onLoad, onProgress, onError) {\n      const scope = this;\n      const loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(JSON.parse(text)));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n\n    parse(json) {\n      const interleavedBufferMap = {};\n      const arrayBufferMap = {};\n\n      function getInterleavedBuffer(json, uuid) {\n        if (interleavedBufferMap[uuid] !== undefined) return interleavedBufferMap[uuid];\n        const interleavedBuffers = json.interleavedBuffers;\n        const interleavedBuffer = interleavedBuffers[uuid];\n        const buffer = getArrayBuffer(json, interleavedBuffer.buffer);\n        const array = getTypedArray(interleavedBuffer.type, buffer);\n        const ib = new InterleavedBuffer(array, interleavedBuffer.stride);\n        ib.uuid = interleavedBuffer.uuid;\n        interleavedBufferMap[uuid] = ib;\n        return ib;\n      }\n\n      function getArrayBuffer(json, uuid) {\n        if (arrayBufferMap[uuid] !== undefined) return arrayBufferMap[uuid];\n        const arrayBuffers = json.arrayBuffers;\n        const arrayBuffer = arrayBuffers[uuid];\n        const ab = new Uint32Array(arrayBuffer).buffer;\n        arrayBufferMap[uuid] = ab;\n        return ab;\n      }\n\n      const geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n      const index = json.data.index;\n\n      if (index !== undefined) {\n        const typedArray = getTypedArray(index.type, index.array);\n        geometry.setIndex(new BufferAttribute(typedArray, 1));\n      }\n\n      const attributes = json.data.attributes;\n\n      for (const key in attributes) {\n        const attribute = attributes[key];\n        let bufferAttribute;\n\n        if (attribute.isInterleavedBufferAttribute) {\n          const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\n          bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);\n        } else {\n          const typedArray = getTypedArray(attribute.type, attribute.array);\n          const bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n          bufferAttribute = new bufferAttributeConstr(typedArray, attribute.itemSize, attribute.normalized);\n        }\n\n        if (attribute.name !== undefined) bufferAttribute.name = attribute.name;\n        if (attribute.usage !== undefined) bufferAttribute.setUsage(attribute.usage);\n\n        if (attribute.updateRange !== undefined) {\n          bufferAttribute.updateRange.offset = attribute.updateRange.offset;\n          bufferAttribute.updateRange.count = attribute.updateRange.count;\n        }\n\n        geometry.setAttribute(key, bufferAttribute);\n      }\n\n      const morphAttributes = json.data.morphAttributes;\n\n      if (morphAttributes) {\n        for (const key in morphAttributes) {\n          const attributeArray = morphAttributes[key];\n          const array = [];\n\n          for (let i = 0, il = attributeArray.length; i < il; i++) {\n            const attribute = attributeArray[i];\n            let bufferAttribute;\n\n            if (attribute.isInterleavedBufferAttribute) {\n              const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\n              bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);\n            } else {\n              const typedArray = getTypedArray(attribute.type, attribute.array);\n              bufferAttribute = new BufferAttribute(typedArray, attribute.itemSize, attribute.normalized);\n            }\n\n            if (attribute.name !== undefined) bufferAttribute.name = attribute.name;\n            array.push(bufferAttribute);\n          }\n\n          geometry.morphAttributes[key] = array;\n        }\n      }\n\n      const morphTargetsRelative = json.data.morphTargetsRelative;\n\n      if (morphTargetsRelative) {\n        geometry.morphTargetsRelative = true;\n      }\n\n      const groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n      if (groups !== undefined) {\n        for (let i = 0, n = groups.length; i !== n; ++i) {\n          const group = groups[i];\n          geometry.addGroup(group.start, group.count, group.materialIndex);\n        }\n      }\n\n      const boundingSphere = json.data.boundingSphere;\n\n      if (boundingSphere !== undefined) {\n        const center = new Vector3();\n\n        if (boundingSphere.center !== undefined) {\n          center.fromArray(boundingSphere.center);\n        }\n\n        geometry.boundingSphere = new Sphere(center, boundingSphere.radius);\n      }\n\n      if (json.name) geometry.name = json.name;\n      if (json.userData) geometry.userData = json.userData;\n      return geometry;\n    }\n\n  }\n\n  class ObjectLoader extends Loader {\n    constructor(manager) {\n      super(manager);\n    }\n\n    load(url, onLoad, onProgress, onError) {\n      const scope = this;\n      const path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n      this.resourcePath = this.resourcePath || path;\n      const loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setRequestHeader(this.requestHeader);\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (text) {\n        let json = null;\n\n        try {\n          json = JSON.parse(text);\n        } catch (error) {\n          if (onError !== undefined) onError(error);\n          console.error('THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message);\n          return;\n        }\n\n        const metadata = json.metadata;\n\n        if (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {\n          console.error('THREE.ObjectLoader: Can\\'t load ' + url);\n          return;\n        }\n\n        scope.parse(json, onLoad);\n      }, onProgress, onError);\n    }\n\n    async loadAsync(url, onProgress) {\n      const scope = this;\n      const path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n      this.resourcePath = this.resourcePath || path;\n      const loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setRequestHeader(this.requestHeader);\n      loader.setWithCredentials(this.withCredentials);\n      const text = await loader.loadAsync(url, onProgress);\n      const json = JSON.parse(text);\n      const metadata = json.metadata;\n\n      if (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {\n        throw new Error('THREE.ObjectLoader: Can\\'t load ' + url);\n      }\n\n      return await scope.parseAsync(json);\n    }\n\n    parse(json, onLoad) {\n      const animations = this.parseAnimations(json.animations);\n      const shapes = this.parseShapes(json.shapes);\n      const geometries = this.parseGeometries(json.geometries, shapes);\n      const images = this.parseImages(json.images, function () {\n        if (onLoad !== undefined) onLoad(object);\n      });\n      const textures = this.parseTextures(json.textures, images);\n      const materials = this.parseMaterials(json.materials, textures);\n      const object = this.parseObject(json.object, geometries, materials, textures, animations);\n      const skeletons = this.parseSkeletons(json.skeletons, object);\n      this.bindSkeletons(object, skeletons); //\n\n      if (onLoad !== undefined) {\n        let hasImages = false;\n\n        for (const uuid in images) {\n          if (images[uuid] instanceof HTMLImageElement) {\n            hasImages = true;\n            break;\n          }\n        }\n\n        if (hasImages === false) onLoad(object);\n      }\n\n      return object;\n    }\n\n    async parseAsync(json) {\n      const animations = this.parseAnimations(json.animations);\n      const shapes = this.parseShapes(json.shapes);\n      const geometries = this.parseGeometries(json.geometries, shapes);\n      const images = await this.parseImagesAsync(json.images);\n      const textures = this.parseTextures(json.textures, images);\n      const materials = this.parseMaterials(json.materials, textures);\n      const object = this.parseObject(json.object, geometries, materials, textures, animations);\n      const skeletons = this.parseSkeletons(json.skeletons, object);\n      this.bindSkeletons(object, skeletons);\n      return object;\n    }\n\n    parseShapes(json) {\n      const shapes = {};\n\n      if (json !== undefined) {\n        for (let i = 0, l = json.length; i < l; i++) {\n          const shape = new Shape().fromJSON(json[i]);\n          shapes[shape.uuid] = shape;\n        }\n      }\n\n      return shapes;\n    }\n\n    parseSkeletons(json, object) {\n      const skeletons = {};\n      const bones = {}; // generate bone lookup table\n\n      object.traverse(function (child) {\n        if (child.isBone) bones[child.uuid] = child;\n      }); // create skeletons\n\n      if (json !== undefined) {\n        for (let i = 0, l = json.length; i < l; i++) {\n          const skeleton = new Skeleton().fromJSON(json[i], bones);\n          skeletons[skeleton.uuid] = skeleton;\n        }\n      }\n\n      return skeletons;\n    }\n\n    parseGeometries(json, shapes) {\n      const geometries = {};\n\n      if (json !== undefined) {\n        const bufferGeometryLoader = new BufferGeometryLoader();\n\n        for (let i = 0, l = json.length; i < l; i++) {\n          let geometry;\n          const data = json[i];\n\n          switch (data.type) {\n            case 'BufferGeometry':\n            case 'InstancedBufferGeometry':\n              geometry = bufferGeometryLoader.parse(data);\n              break;\n\n            case 'Geometry':\n              console.error('THREE.ObjectLoader: The legacy Geometry type is no longer supported.');\n              break;\n\n            default:\n              if (data.type in Geometries) {\n                geometry = Geometries[data.type].fromJSON(data, shapes);\n              } else {\n                console.warn(`THREE.ObjectLoader: Unsupported geometry type \"${data.type}\"`);\n              }\n\n          }\n\n          geometry.uuid = data.uuid;\n          if (data.name !== undefined) geometry.name = data.name;\n          if (geometry.isBufferGeometry === true && data.userData !== undefined) geometry.userData = data.userData;\n          geometries[data.uuid] = geometry;\n        }\n      }\n\n      return geometries;\n    }\n\n    parseMaterials(json, textures) {\n      const cache = {}; // MultiMaterial\n\n      const materials = {};\n\n      if (json !== undefined) {\n        const loader = new MaterialLoader();\n        loader.setTextures(textures);\n\n        for (let i = 0, l = json.length; i < l; i++) {\n          const data = json[i];\n\n          if (data.type === 'MultiMaterial') {\n            // Deprecated\n            const array = [];\n\n            for (let j = 0; j < data.materials.length; j++) {\n              const material = data.materials[j];\n\n              if (cache[material.uuid] === undefined) {\n                cache[material.uuid] = loader.parse(material);\n              }\n\n              array.push(cache[material.uuid]);\n            }\n\n            materials[data.uuid] = array;\n          } else {\n            if (cache[data.uuid] === undefined) {\n              cache[data.uuid] = loader.parse(data);\n            }\n\n            materials[data.uuid] = cache[data.uuid];\n          }\n        }\n      }\n\n      return materials;\n    }\n\n    parseAnimations(json) {\n      const animations = {};\n\n      if (json !== undefined) {\n        for (let i = 0; i < json.length; i++) {\n          const data = json[i];\n          const clip = AnimationClip.parse(data);\n          animations[clip.uuid] = clip;\n        }\n      }\n\n      return animations;\n    }\n\n    parseImages(json, onLoad) {\n      const scope = this;\n      const images = {};\n      let loader;\n\n      function loadImage(url) {\n        scope.manager.itemStart(url);\n        return loader.load(url, function () {\n          scope.manager.itemEnd(url);\n        }, undefined, function () {\n          scope.manager.itemError(url);\n          scope.manager.itemEnd(url);\n        });\n      }\n\n      function deserializeImage(image) {\n        if (typeof image === 'string') {\n          const url = image;\n          const path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(url) ? url : scope.resourcePath + url;\n          return loadImage(path);\n        } else {\n          if (image.data) {\n            return {\n              data: getTypedArray(image.type, image.data),\n              width: image.width,\n              height: image.height\n            };\n          } else {\n            return null;\n          }\n        }\n      }\n\n      if (json !== undefined && json.length > 0) {\n        const manager = new LoadingManager(onLoad);\n        loader = new ImageLoader(manager);\n        loader.setCrossOrigin(this.crossOrigin);\n\n        for (let i = 0, il = json.length; i < il; i++) {\n          const image = json[i];\n          const url = image.url;\n\n          if (Array.isArray(url)) {\n            // load array of images e.g CubeTexture\n            images[image.uuid] = [];\n\n            for (let j = 0, jl = url.length; j < jl; j++) {\n              const currentUrl = url[j];\n              const deserializedImage = deserializeImage(currentUrl);\n\n              if (deserializedImage !== null) {\n                if (deserializedImage instanceof HTMLImageElement) {\n                  images[image.uuid].push(deserializedImage);\n                } else {\n                  // special case: handle array of data textures for cube textures\n                  images[image.uuid].push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));\n                }\n              }\n            }\n          } else {\n            // load single image\n            const deserializedImage = deserializeImage(image.url);\n\n            if (deserializedImage !== null) {\n              images[image.uuid] = deserializedImage;\n            }\n          }\n        }\n      }\n\n      return images;\n    }\n\n    async parseImagesAsync(json) {\n      const scope = this;\n      const images = {};\n      let loader;\n\n      async function deserializeImage(image) {\n        if (typeof image === 'string') {\n          const url = image;\n          const path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(url) ? url : scope.resourcePath + url;\n          return await loader.loadAsync(path);\n        } else {\n          if (image.data) {\n            return {\n              data: getTypedArray(image.type, image.data),\n              width: image.width,\n              height: image.height\n            };\n          } else {\n            return null;\n          }\n        }\n      }\n\n      if (json !== undefined && json.length > 0) {\n        loader = new ImageLoader(this.manager);\n        loader.setCrossOrigin(this.crossOrigin);\n\n        for (let i = 0, il = json.length; i < il; i++) {\n          const image = json[i];\n          const url = image.url;\n\n          if (Array.isArray(url)) {\n            // load array of images e.g CubeTexture\n            images[image.uuid] = [];\n\n            for (let j = 0, jl = url.length; j < jl; j++) {\n              const currentUrl = url[j];\n              const deserializedImage = await deserializeImage(currentUrl);\n\n              if (deserializedImage !== null) {\n                if (deserializedImage instanceof HTMLImageElement) {\n                  images[image.uuid].push(deserializedImage);\n                } else {\n                  // special case: handle array of data textures for cube textures\n                  images[image.uuid].push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));\n                }\n              }\n            }\n          } else {\n            // load single image\n            const deserializedImage = await deserializeImage(image.url);\n\n            if (deserializedImage !== null) {\n              images[image.uuid] = deserializedImage;\n            }\n          }\n        }\n      }\n\n      return images;\n    }\n\n    parseTextures(json, images) {\n      function parseConstant(value, type) {\n        if (typeof value === 'number') return value;\n        console.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value);\n        return type[value];\n      }\n\n      const textures = {};\n\n      if (json !== undefined) {\n        for (let i = 0, l = json.length; i < l; i++) {\n          const data = json[i];\n\n          if (data.image === undefined) {\n            console.warn('THREE.ObjectLoader: No \"image\" specified for', data.uuid);\n          }\n\n          if (images[data.image] === undefined) {\n            console.warn('THREE.ObjectLoader: Undefined image', data.image);\n          }\n\n          let texture;\n          const image = images[data.image];\n\n          if (Array.isArray(image)) {\n            texture = new CubeTexture(image);\n            if (image.length === 6) texture.needsUpdate = true;\n          } else {\n            if (image && image.data) {\n              texture = new DataTexture(image.data, image.width, image.height);\n            } else {\n              texture = new Texture(image);\n            }\n\n            if (image) texture.needsUpdate = true; // textures can have undefined image data\n          }\n\n          texture.uuid = data.uuid;\n          if (data.name !== undefined) texture.name = data.name;\n          if (data.mapping !== undefined) texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);\n          if (data.offset !== undefined) texture.offset.fromArray(data.offset);\n          if (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);\n          if (data.center !== undefined) texture.center.fromArray(data.center);\n          if (data.rotation !== undefined) texture.rotation = data.rotation;\n\n          if (data.wrap !== undefined) {\n            texture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);\n            texture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);\n          }\n\n          if (data.format !== undefined) texture.format = data.format;\n          if (data.type !== undefined) texture.type = data.type;\n          if (data.encoding !== undefined) texture.encoding = data.encoding;\n          if (data.minFilter !== undefined) texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);\n          if (data.magFilter !== undefined) texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);\n          if (data.anisotropy !== undefined) texture.anisotropy = data.anisotropy;\n          if (data.flipY !== undefined) texture.flipY = data.flipY;\n          if (data.premultiplyAlpha !== undefined) texture.premultiplyAlpha = data.premultiplyAlpha;\n          if (data.unpackAlignment !== undefined) texture.unpackAlignment = data.unpackAlignment;\n          if (data.userData !== undefined) texture.userData = data.userData;\n          textures[data.uuid] = texture;\n        }\n      }\n\n      return textures;\n    }\n\n    parseObject(data, geometries, materials, textures, animations) {\n      let object;\n\n      function getGeometry(name) {\n        if (geometries[name] === undefined) {\n          console.warn('THREE.ObjectLoader: Undefined geometry', name);\n        }\n\n        return geometries[name];\n      }\n\n      function getMaterial(name) {\n        if (name === undefined) return undefined;\n\n        if (Array.isArray(name)) {\n          const array = [];\n\n          for (let i = 0, l = name.length; i < l; i++) {\n            const uuid = name[i];\n\n            if (materials[uuid] === undefined) {\n              console.warn('THREE.ObjectLoader: Undefined material', uuid);\n            }\n\n            array.push(materials[uuid]);\n          }\n\n          return array;\n        }\n\n        if (materials[name] === undefined) {\n          console.warn('THREE.ObjectLoader: Undefined material', name);\n        }\n\n        return materials[name];\n      }\n\n      function getTexture(uuid) {\n        if (textures[uuid] === undefined) {\n          console.warn('THREE.ObjectLoader: Undefined texture', uuid);\n        }\n\n        return textures[uuid];\n      }\n\n      let geometry, material;\n\n      switch (data.type) {\n        case 'Scene':\n          object = new Scene();\n\n          if (data.background !== undefined) {\n            if (Number.isInteger(data.background)) {\n              object.background = new Color(data.background);\n            } else {\n              object.background = getTexture(data.background);\n            }\n          }\n\n          if (data.environment !== undefined) {\n            object.environment = getTexture(data.environment);\n          }\n\n          if (data.fog !== undefined) {\n            if (data.fog.type === 'Fog') {\n              object.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);\n            } else if (data.fog.type === 'FogExp2') {\n              object.fog = new FogExp2(data.fog.color, data.fog.density);\n            }\n          }\n\n          break;\n\n        case 'PerspectiveCamera':\n          object = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);\n          if (data.focus !== undefined) object.focus = data.focus;\n          if (data.zoom !== undefined) object.zoom = data.zoom;\n          if (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;\n          if (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;\n          if (data.view !== undefined) object.view = Object.assign({}, data.view);\n          break;\n\n        case 'OrthographicCamera':\n          object = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);\n          if (data.zoom !== undefined) object.zoom = data.zoom;\n          if (data.view !== undefined) object.view = Object.assign({}, data.view);\n          break;\n\n        case 'AmbientLight':\n          object = new AmbientLight(data.color, data.intensity);\n          break;\n\n        case 'DirectionalLight':\n          object = new DirectionalLight(data.color, data.intensity);\n          break;\n\n        case 'PointLight':\n          object = new PointLight(data.color, data.intensity, data.distance, data.decay);\n          break;\n\n        case 'RectAreaLight':\n          object = new RectAreaLight(data.color, data.intensity, data.width, data.height);\n          break;\n\n        case 'SpotLight':\n          object = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);\n          break;\n\n        case 'HemisphereLight':\n          object = new HemisphereLight(data.color, data.groundColor, data.intensity);\n          break;\n\n        case 'LightProbe':\n          object = new LightProbe().fromJSON(data);\n          break;\n\n        case 'SkinnedMesh':\n          geometry = getGeometry(data.geometry);\n          material = getMaterial(data.material);\n          object = new SkinnedMesh(geometry, material);\n          if (data.bindMode !== undefined) object.bindMode = data.bindMode;\n          if (data.bindMatrix !== undefined) object.bindMatrix.fromArray(data.bindMatrix);\n          if (data.skeleton !== undefined) object.skeleton = data.skeleton;\n          break;\n\n        case 'Mesh':\n          geometry = getGeometry(data.geometry);\n          material = getMaterial(data.material);\n          object = new Mesh(geometry, material);\n          break;\n\n        case 'InstancedMesh':\n          geometry = getGeometry(data.geometry);\n          material = getMaterial(data.material);\n          const count = data.count;\n          const instanceMatrix = data.instanceMatrix;\n          const instanceColor = data.instanceColor;\n          object = new InstancedMesh(geometry, material, count);\n          object.instanceMatrix = new InstancedBufferAttribute(new Float32Array(instanceMatrix.array), 16);\n          if (instanceColor !== undefined) object.instanceColor = new InstancedBufferAttribute(new Float32Array(instanceColor.array), instanceColor.itemSize);\n          break;\n\n        case 'LOD':\n          object = new LOD();\n          break;\n\n        case 'Line':\n          object = new Line(getGeometry(data.geometry), getMaterial(data.material));\n          break;\n\n        case 'LineLoop':\n          object = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));\n          break;\n\n        case 'LineSegments':\n          object = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));\n          break;\n\n        case 'PointCloud':\n        case 'Points':\n          object = new Points(getGeometry(data.geometry), getMaterial(data.material));\n          break;\n\n        case 'Sprite':\n          object = new Sprite(getMaterial(data.material));\n          break;\n\n        case 'Group':\n          object = new Group();\n          break;\n\n        case 'Bone':\n          object = new Bone();\n          break;\n\n        default:\n          object = new Object3D();\n      }\n\n      object.uuid = data.uuid;\n      if (data.name !== undefined) object.name = data.name;\n\n      if (data.matrix !== undefined) {\n        object.matrix.fromArray(data.matrix);\n        if (data.matrixAutoUpdate !== undefined) object.matrixAutoUpdate = data.matrixAutoUpdate;\n        if (object.matrixAutoUpdate) object.matrix.decompose(object.position, object.quaternion, object.scale);\n      } else {\n        if (data.position !== undefined) object.position.fromArray(data.position);\n        if (data.rotation !== undefined) object.rotation.fromArray(data.rotation);\n        if (data.quaternion !== undefined) object.quaternion.fromArray(data.quaternion);\n        if (data.scale !== undefined) object.scale.fromArray(data.scale);\n      }\n\n      if (data.castShadow !== undefined) object.castShadow = data.castShadow;\n      if (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;\n\n      if (data.shadow) {\n        if (data.shadow.bias !== undefined) object.shadow.bias = data.shadow.bias;\n        if (data.shadow.normalBias !== undefined) object.shadow.normalBias = data.shadow.normalBias;\n        if (data.shadow.radius !== undefined) object.shadow.radius = data.shadow.radius;\n        if (data.shadow.mapSize !== undefined) object.shadow.mapSize.fromArray(data.shadow.mapSize);\n        if (data.shadow.camera !== undefined) object.shadow.camera = this.parseObject(data.shadow.camera);\n      }\n\n      if (data.visible !== undefined) object.visible = data.visible;\n      if (data.frustumCulled !== undefined) object.frustumCulled = data.frustumCulled;\n      if (data.renderOrder !== undefined) object.renderOrder = data.renderOrder;\n      if (data.userData !== undefined) object.userData = data.userData;\n      if (data.layers !== undefined) object.layers.mask = data.layers;\n\n      if (data.children !== undefined) {\n        const children = data.children;\n\n        for (let i = 0; i < children.length; i++) {\n          object.add(this.parseObject(children[i], geometries, materials, textures, animations));\n        }\n      }\n\n      if (data.animations !== undefined) {\n        const objectAnimations = data.animations;\n\n        for (let i = 0; i < objectAnimations.length; i++) {\n          const uuid = objectAnimations[i];\n          object.animations.push(animations[uuid]);\n        }\n      }\n\n      if (data.type === 'LOD') {\n        if (data.autoUpdate !== undefined) object.autoUpdate = data.autoUpdate;\n        const levels = data.levels;\n\n        for (let l = 0; l < levels.length; l++) {\n          const level = levels[l];\n          const child = object.getObjectByProperty('uuid', level.object);\n\n          if (child !== undefined) {\n            object.addLevel(child, level.distance);\n          }\n        }\n      }\n\n      return object;\n    }\n\n    bindSkeletons(object, skeletons) {\n      if (Object.keys(skeletons).length === 0) return;\n      object.traverse(function (child) {\n        if (child.isSkinnedMesh === true && child.skeleton !== undefined) {\n          const skeleton = skeletons[child.skeleton];\n\n          if (skeleton === undefined) {\n            console.warn('THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton);\n          } else {\n            child.bind(skeleton, child.bindMatrix);\n          }\n        }\n      });\n    }\n    /* DEPRECATED */\n\n\n    setTexturePath(value) {\n      console.warn('THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().');\n      return this.setResourcePath(value);\n    }\n\n  }\n\n  const TEXTURE_MAPPING = {\n    UVMapping: UVMapping,\n    CubeReflectionMapping: CubeReflectionMapping,\n    CubeRefractionMapping: CubeRefractionMapping,\n    EquirectangularReflectionMapping: EquirectangularReflectionMapping,\n    EquirectangularRefractionMapping: EquirectangularRefractionMapping,\n    CubeUVReflectionMapping: CubeUVReflectionMapping,\n    CubeUVRefractionMapping: CubeUVRefractionMapping\n  };\n  const TEXTURE_WRAPPING = {\n    RepeatWrapping: RepeatWrapping,\n    ClampToEdgeWrapping: ClampToEdgeWrapping,\n    MirroredRepeatWrapping: MirroredRepeatWrapping\n  };\n  const TEXTURE_FILTER = {\n    NearestFilter: NearestFilter,\n    NearestMipmapNearestFilter: NearestMipmapNearestFilter,\n    NearestMipmapLinearFilter: NearestMipmapLinearFilter,\n    LinearFilter: LinearFilter,\n    LinearMipmapNearestFilter: LinearMipmapNearestFilter,\n    LinearMipmapLinearFilter: LinearMipmapLinearFilter\n  };\n\n  class ImageBitmapLoader extends Loader {\n    constructor(manager) {\n      super(manager);\n\n      if (typeof createImageBitmap === 'undefined') {\n        console.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');\n      }\n\n      if (typeof fetch === 'undefined') {\n        console.warn('THREE.ImageBitmapLoader: fetch() not supported.');\n      }\n\n      this.options = {\n        premultiplyAlpha: 'none'\n      };\n    }\n\n    setOptions(options) {\n      this.options = options;\n      return this;\n    }\n\n    load(url, onLoad, onProgress, onError) {\n      if (url === undefined) url = '';\n      if (this.path !== undefined) url = this.path + url;\n      url = this.manager.resolveURL(url);\n      const scope = this;\n      const cached = Cache.get(url);\n\n      if (cached !== undefined) {\n        scope.manager.itemStart(url);\n        setTimeout(function () {\n          if (onLoad) onLoad(cached);\n          scope.manager.itemEnd(url);\n        }, 0);\n        return cached;\n      }\n\n      const fetchOptions = {};\n      fetchOptions.credentials = this.crossOrigin === 'anonymous' ? 'same-origin' : 'include';\n      fetchOptions.headers = this.requestHeader;\n      fetch(url, fetchOptions).then(function (res) {\n        return res.blob();\n      }).then(function (blob) {\n        return createImageBitmap(blob, Object.assign(scope.options, {\n          colorSpaceConversion: 'none'\n        }));\n      }).then(function (imageBitmap) {\n        Cache.add(url, imageBitmap);\n        if (onLoad) onLoad(imageBitmap);\n        scope.manager.itemEnd(url);\n      }).catch(function (e) {\n        if (onError) onError(e);\n        scope.manager.itemError(url);\n        scope.manager.itemEnd(url);\n      });\n      scope.manager.itemStart(url);\n    }\n\n  }\n\n  ImageBitmapLoader.prototype.isImageBitmapLoader = true;\n\n  let _context;\n\n  const AudioContext = {\n    getContext: function () {\n      if (_context === undefined) {\n        _context = new (window.AudioContext || window.webkitAudioContext)();\n      }\n\n      return _context;\n    },\n    setContext: function (value) {\n      _context = value;\n    }\n  };\n\n  class AudioLoader extends Loader {\n    constructor(manager) {\n      super(manager);\n    }\n\n    load(url, onLoad, onProgress, onError) {\n      const scope = this;\n      const loader = new FileLoader(this.manager);\n      loader.setResponseType('arraybuffer');\n      loader.setPath(this.path);\n      loader.setRequestHeader(this.requestHeader);\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (buffer) {\n        try {\n          // Create a copy of the buffer. The `decodeAudioData` method\n          // detaches the buffer when complete, preventing reuse.\n          const bufferCopy = buffer.slice(0);\n          const context = AudioContext.getContext();\n          context.decodeAudioData(bufferCopy, function (audioBuffer) {\n            onLoad(audioBuffer);\n          });\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n\n  }\n\n  class HemisphereLightProbe extends LightProbe {\n    constructor(skyColor, groundColor) {\n      let intensity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      super(undefined, intensity);\n      const color1 = new Color().set(skyColor);\n      const color2 = new Color().set(groundColor);\n      const sky = new Vector3(color1.r, color1.g, color1.b);\n      const ground = new Vector3(color2.r, color2.g, color2.b); // without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\n      const c0 = Math.sqrt(Math.PI);\n      const c1 = c0 * Math.sqrt(0.75);\n      this.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);\n      this.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);\n    }\n\n  }\n\n  HemisphereLightProbe.prototype.isHemisphereLightProbe = true;\n\n  class AmbientLightProbe extends LightProbe {\n    constructor(color) {\n      let intensity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      super(undefined, intensity);\n      const color1 = new Color().set(color); // without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\n      this.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));\n    }\n\n  }\n\n  AmbientLightProbe.prototype.isAmbientLightProbe = true;\n\n  const _eyeRight = /*@__PURE__*/new Matrix4();\n\n  const _eyeLeft = /*@__PURE__*/new Matrix4();\n\n  class StereoCamera {\n    constructor() {\n      this.type = 'StereoCamera';\n      this.aspect = 1;\n      this.eyeSep = 0.064;\n      this.cameraL = new PerspectiveCamera();\n      this.cameraL.layers.enable(1);\n      this.cameraL.matrixAutoUpdate = false;\n      this.cameraR = new PerspectiveCamera();\n      this.cameraR.layers.enable(2);\n      this.cameraR.matrixAutoUpdate = false;\n      this._cache = {\n        focus: null,\n        fov: null,\n        aspect: null,\n        near: null,\n        far: null,\n        zoom: null,\n        eyeSep: null\n      };\n    }\n\n    update(camera) {\n      const cache = this._cache;\n      const needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n      if (needsUpdate) {\n        cache.focus = camera.focus;\n        cache.fov = camera.fov;\n        cache.aspect = camera.aspect * this.aspect;\n        cache.near = camera.near;\n        cache.far = camera.far;\n        cache.zoom = camera.zoom;\n        cache.eyeSep = this.eyeSep; // Off-axis stereoscopic effect based on\n        // http://paulbourke.net/stereographics/stereorender/\n\n        const projectionMatrix = camera.projectionMatrix.clone();\n        const eyeSepHalf = cache.eyeSep / 2;\n        const eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n        const ymax = cache.near * Math.tan(DEG2RAD * cache.fov * 0.5) / cache.zoom;\n        let xmin, xmax; // translate xOffset\n\n        _eyeLeft.elements[12] = -eyeSepHalf;\n        _eyeRight.elements[12] = eyeSepHalf; // for left eye\n\n        xmin = -ymax * cache.aspect + eyeSepOnProjection;\n        xmax = ymax * cache.aspect + eyeSepOnProjection;\n        projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n        projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n        this.cameraL.projectionMatrix.copy(projectionMatrix); // for right eye\n\n        xmin = -ymax * cache.aspect - eyeSepOnProjection;\n        xmax = ymax * cache.aspect - eyeSepOnProjection;\n        projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n        projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n        this.cameraR.projectionMatrix.copy(projectionMatrix);\n      }\n\n      this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);\n      this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);\n    }\n\n  }\n\n  class Clock {\n    constructor() {\n      let autoStart = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.autoStart = autoStart;\n      this.startTime = 0;\n      this.oldTime = 0;\n      this.elapsedTime = 0;\n      this.running = false;\n    }\n\n    start() {\n      this.startTime = now();\n      this.oldTime = this.startTime;\n      this.elapsedTime = 0;\n      this.running = true;\n    }\n\n    stop() {\n      this.getElapsedTime();\n      this.running = false;\n      this.autoStart = false;\n    }\n\n    getElapsedTime() {\n      this.getDelta();\n      return this.elapsedTime;\n    }\n\n    getDelta() {\n      let diff = 0;\n\n      if (this.autoStart && !this.running) {\n        this.start();\n        return 0;\n      }\n\n      if (this.running) {\n        const newTime = now();\n        diff = (newTime - this.oldTime) / 1000;\n        this.oldTime = newTime;\n        this.elapsedTime += diff;\n      }\n\n      return diff;\n    }\n\n  }\n\n  function now() {\n    return (typeof performance === 'undefined' ? Date : performance).now(); // see #10732\n  }\n\n  const _position$1 = /*@__PURE__*/new Vector3();\n\n  const _quaternion$1 = /*@__PURE__*/new Quaternion();\n\n  const _scale$1 = /*@__PURE__*/new Vector3();\n\n  const _orientation$1 = /*@__PURE__*/new Vector3();\n\n  class AudioListener extends Object3D {\n    constructor() {\n      super();\n      this.type = 'AudioListener';\n      this.context = AudioContext.getContext();\n      this.gain = this.context.createGain();\n      this.gain.connect(this.context.destination);\n      this.filter = null;\n      this.timeDelta = 0; // private\n\n      this._clock = new Clock();\n    }\n\n    getInput() {\n      return this.gain;\n    }\n\n    removeFilter() {\n      if (this.filter !== null) {\n        this.gain.disconnect(this.filter);\n        this.filter.disconnect(this.context.destination);\n        this.gain.connect(this.context.destination);\n        this.filter = null;\n      }\n\n      return this;\n    }\n\n    getFilter() {\n      return this.filter;\n    }\n\n    setFilter(value) {\n      if (this.filter !== null) {\n        this.gain.disconnect(this.filter);\n        this.filter.disconnect(this.context.destination);\n      } else {\n        this.gain.disconnect(this.context.destination);\n      }\n\n      this.filter = value;\n      this.gain.connect(this.filter);\n      this.filter.connect(this.context.destination);\n      return this;\n    }\n\n    getMasterVolume() {\n      return this.gain.gain.value;\n    }\n\n    setMasterVolume(value) {\n      this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n      return this;\n    }\n\n    updateMatrixWorld(force) {\n      super.updateMatrixWorld(force);\n      const listener = this.context.listener;\n      const up = this.up;\n      this.timeDelta = this._clock.getDelta();\n      this.matrixWorld.decompose(_position$1, _quaternion$1, _scale$1);\n\n      _orientation$1.set(0, 0, -1).applyQuaternion(_quaternion$1);\n\n      if (listener.positionX) {\n        // code path for Chrome (see #14393)\n        const endTime = this.context.currentTime + this.timeDelta;\n        listener.positionX.linearRampToValueAtTime(_position$1.x, endTime);\n        listener.positionY.linearRampToValueAtTime(_position$1.y, endTime);\n        listener.positionZ.linearRampToValueAtTime(_position$1.z, endTime);\n        listener.forwardX.linearRampToValueAtTime(_orientation$1.x, endTime);\n        listener.forwardY.linearRampToValueAtTime(_orientation$1.y, endTime);\n        listener.forwardZ.linearRampToValueAtTime(_orientation$1.z, endTime);\n        listener.upX.linearRampToValueAtTime(up.x, endTime);\n        listener.upY.linearRampToValueAtTime(up.y, endTime);\n        listener.upZ.linearRampToValueAtTime(up.z, endTime);\n      } else {\n        listener.setPosition(_position$1.x, _position$1.y, _position$1.z);\n        listener.setOrientation(_orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z);\n      }\n    }\n\n  }\n\n  class Audio extends Object3D {\n    constructor(listener) {\n      super();\n      this.type = 'Audio';\n      this.listener = listener;\n      this.context = listener.context;\n      this.gain = this.context.createGain();\n      this.gain.connect(listener.getInput());\n      this.autoplay = false;\n      this.buffer = null;\n      this.detune = 0;\n      this.loop = false;\n      this.loopStart = 0;\n      this.loopEnd = 0;\n      this.offset = 0;\n      this.duration = undefined;\n      this.playbackRate = 1;\n      this.isPlaying = false;\n      this.hasPlaybackControl = true;\n      this.source = null;\n      this.sourceType = 'empty';\n      this._startedAt = 0;\n      this._progress = 0;\n      this._connected = false;\n      this.filters = [];\n    }\n\n    getOutput() {\n      return this.gain;\n    }\n\n    setNodeSource(audioNode) {\n      this.hasPlaybackControl = false;\n      this.sourceType = 'audioNode';\n      this.source = audioNode;\n      this.connect();\n      return this;\n    }\n\n    setMediaElementSource(mediaElement) {\n      this.hasPlaybackControl = false;\n      this.sourceType = 'mediaNode';\n      this.source = this.context.createMediaElementSource(mediaElement);\n      this.connect();\n      return this;\n    }\n\n    setMediaStreamSource(mediaStream) {\n      this.hasPlaybackControl = false;\n      this.sourceType = 'mediaStreamNode';\n      this.source = this.context.createMediaStreamSource(mediaStream);\n      this.connect();\n      return this;\n    }\n\n    setBuffer(audioBuffer) {\n      this.buffer = audioBuffer;\n      this.sourceType = 'buffer';\n      if (this.autoplay) this.play();\n      return this;\n    }\n\n    play() {\n      let delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.isPlaying === true) {\n        console.warn('THREE.Audio: Audio is already playing.');\n        return;\n      }\n\n      if (this.hasPlaybackControl === false) {\n        console.warn('THREE.Audio: this Audio has no playback control.');\n        return;\n      }\n\n      this._startedAt = this.context.currentTime + delay;\n      const source = this.context.createBufferSource();\n      source.buffer = this.buffer;\n      source.loop = this.loop;\n      source.loopStart = this.loopStart;\n      source.loopEnd = this.loopEnd;\n      source.onended = this.onEnded.bind(this);\n      source.start(this._startedAt, this._progress + this.offset, this.duration);\n      this.isPlaying = true;\n      this.source = source;\n      this.setDetune(this.detune);\n      this.setPlaybackRate(this.playbackRate);\n      return this.connect();\n    }\n\n    pause() {\n      if (this.hasPlaybackControl === false) {\n        console.warn('THREE.Audio: this Audio has no playback control.');\n        return;\n      }\n\n      if (this.isPlaying === true) {\n        // update current progress\n        this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;\n\n        if (this.loop === true) {\n          // ensure _progress does not exceed duration with looped audios\n          this._progress = this._progress % (this.duration || this.buffer.duration);\n        }\n\n        this.source.stop();\n        this.source.onended = null;\n        this.isPlaying = false;\n      }\n\n      return this;\n    }\n\n    stop() {\n      if (this.hasPlaybackControl === false) {\n        console.warn('THREE.Audio: this Audio has no playback control.');\n        return;\n      }\n\n      this._progress = 0;\n      this.source.stop();\n      this.source.onended = null;\n      this.isPlaying = false;\n      return this;\n    }\n\n    connect() {\n      if (this.filters.length > 0) {\n        this.source.connect(this.filters[0]);\n\n        for (let i = 1, l = this.filters.length; i < l; i++) {\n          this.filters[i - 1].connect(this.filters[i]);\n        }\n\n        this.filters[this.filters.length - 1].connect(this.getOutput());\n      } else {\n        this.source.connect(this.getOutput());\n      }\n\n      this._connected = true;\n      return this;\n    }\n\n    disconnect() {\n      if (this.filters.length > 0) {\n        this.source.disconnect(this.filters[0]);\n\n        for (let i = 1, l = this.filters.length; i < l; i++) {\n          this.filters[i - 1].disconnect(this.filters[i]);\n        }\n\n        this.filters[this.filters.length - 1].disconnect(this.getOutput());\n      } else {\n        this.source.disconnect(this.getOutput());\n      }\n\n      this._connected = false;\n      return this;\n    }\n\n    getFilters() {\n      return this.filters;\n    }\n\n    setFilters(value) {\n      if (!value) value = [];\n\n      if (this._connected === true) {\n        this.disconnect();\n        this.filters = value.slice();\n        this.connect();\n      } else {\n        this.filters = value.slice();\n      }\n\n      return this;\n    }\n\n    setDetune(value) {\n      this.detune = value;\n      if (this.source.detune === undefined) return; // only set detune when available\n\n      if (this.isPlaying === true) {\n        this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);\n      }\n\n      return this;\n    }\n\n    getDetune() {\n      return this.detune;\n    }\n\n    getFilter() {\n      return this.getFilters()[0];\n    }\n\n    setFilter(filter) {\n      return this.setFilters(filter ? [filter] : []);\n    }\n\n    setPlaybackRate(value) {\n      if (this.hasPlaybackControl === false) {\n        console.warn('THREE.Audio: this Audio has no playback control.');\n        return;\n      }\n\n      this.playbackRate = value;\n\n      if (this.isPlaying === true) {\n        this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);\n      }\n\n      return this;\n    }\n\n    getPlaybackRate() {\n      return this.playbackRate;\n    }\n\n    onEnded() {\n      this.isPlaying = false;\n    }\n\n    getLoop() {\n      if (this.hasPlaybackControl === false) {\n        console.warn('THREE.Audio: this Audio has no playback control.');\n        return false;\n      }\n\n      return this.loop;\n    }\n\n    setLoop(value) {\n      if (this.hasPlaybackControl === false) {\n        console.warn('THREE.Audio: this Audio has no playback control.');\n        return;\n      }\n\n      this.loop = value;\n\n      if (this.isPlaying === true) {\n        this.source.loop = this.loop;\n      }\n\n      return this;\n    }\n\n    setLoopStart(value) {\n      this.loopStart = value;\n      return this;\n    }\n\n    setLoopEnd(value) {\n      this.loopEnd = value;\n      return this;\n    }\n\n    getVolume() {\n      return this.gain.gain.value;\n    }\n\n    setVolume(value) {\n      this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n      return this;\n    }\n\n  }\n\n  const _position = /*@__PURE__*/new Vector3();\n\n  const _quaternion = /*@__PURE__*/new Quaternion();\n\n  const _scale = /*@__PURE__*/new Vector3();\n\n  const _orientation = /*@__PURE__*/new Vector3();\n\n  class PositionalAudio extends Audio {\n    constructor(listener) {\n      super(listener);\n      this.panner = this.context.createPanner();\n      this.panner.panningModel = 'HRTF';\n      this.panner.connect(this.gain);\n    }\n\n    getOutput() {\n      return this.panner;\n    }\n\n    getRefDistance() {\n      return this.panner.refDistance;\n    }\n\n    setRefDistance(value) {\n      this.panner.refDistance = value;\n      return this;\n    }\n\n    getRolloffFactor() {\n      return this.panner.rolloffFactor;\n    }\n\n    setRolloffFactor(value) {\n      this.panner.rolloffFactor = value;\n      return this;\n    }\n\n    getDistanceModel() {\n      return this.panner.distanceModel;\n    }\n\n    setDistanceModel(value) {\n      this.panner.distanceModel = value;\n      return this;\n    }\n\n    getMaxDistance() {\n      return this.panner.maxDistance;\n    }\n\n    setMaxDistance(value) {\n      this.panner.maxDistance = value;\n      return this;\n    }\n\n    setDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {\n      this.panner.coneInnerAngle = coneInnerAngle;\n      this.panner.coneOuterAngle = coneOuterAngle;\n      this.panner.coneOuterGain = coneOuterGain;\n      return this;\n    }\n\n    updateMatrixWorld(force) {\n      super.updateMatrixWorld(force);\n      if (this.hasPlaybackControl === true && this.isPlaying === false) return;\n      this.matrixWorld.decompose(_position, _quaternion, _scale);\n\n      _orientation.set(0, 0, 1).applyQuaternion(_quaternion);\n\n      const panner = this.panner;\n\n      if (panner.positionX) {\n        // code path for Chrome and Firefox (see #14393)\n        const endTime = this.context.currentTime + this.listener.timeDelta;\n        panner.positionX.linearRampToValueAtTime(_position.x, endTime);\n        panner.positionY.linearRampToValueAtTime(_position.y, endTime);\n        panner.positionZ.linearRampToValueAtTime(_position.z, endTime);\n        panner.orientationX.linearRampToValueAtTime(_orientation.x, endTime);\n        panner.orientationY.linearRampToValueAtTime(_orientation.y, endTime);\n        panner.orientationZ.linearRampToValueAtTime(_orientation.z, endTime);\n      } else {\n        panner.setPosition(_position.x, _position.y, _position.z);\n        panner.setOrientation(_orientation.x, _orientation.y, _orientation.z);\n      }\n    }\n\n  }\n\n  class AudioAnalyser {\n    constructor(audio) {\n      let fftSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2048;\n      this.analyser = audio.context.createAnalyser();\n      this.analyser.fftSize = fftSize;\n      this.data = new Uint8Array(this.analyser.frequencyBinCount);\n      audio.getOutput().connect(this.analyser);\n    }\n\n    getFrequencyData() {\n      this.analyser.getByteFrequencyData(this.data);\n      return this.data;\n    }\n\n    getAverageFrequency() {\n      let value = 0;\n      const data = this.getFrequencyData();\n\n      for (let i = 0; i < data.length; i++) {\n        value += data[i];\n      }\n\n      return value / data.length;\n    }\n\n  }\n\n  class PropertyMixer {\n    constructor(binding, typeName, valueSize) {\n      this.binding = binding;\n      this.valueSize = valueSize;\n      let mixFunction, mixFunctionAdditive, setIdentity; // buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n      //\n      // interpolators can use .buffer as their .result\n      // the data then goes to 'incoming'\n      //\n      // 'accu0' and 'accu1' are used frame-interleaved for\n      // the cumulative result and are compared to detect\n      // changes\n      //\n      // 'orig' stores the original state of the property\n      //\n      // 'add' is used for additive cumulative results\n      //\n      // 'work' is optional and is only present for quaternion types. It is used\n      // to store intermediate quaternion multiplication results\n\n      switch (typeName) {\n        case 'quaternion':\n          mixFunction = this._slerp;\n          mixFunctionAdditive = this._slerpAdditive;\n          setIdentity = this._setAdditiveIdentityQuaternion;\n          this.buffer = new Float64Array(valueSize * 6);\n          this._workIndex = 5;\n          break;\n\n        case 'string':\n        case 'bool':\n          mixFunction = this._select; // Use the regular mix function and for additive on these types,\n          // additive is not relevant for non-numeric types\n\n          mixFunctionAdditive = this._select;\n          setIdentity = this._setAdditiveIdentityOther;\n          this.buffer = new Array(valueSize * 5);\n          break;\n\n        default:\n          mixFunction = this._lerp;\n          mixFunctionAdditive = this._lerpAdditive;\n          setIdentity = this._setAdditiveIdentityNumeric;\n          this.buffer = new Float64Array(valueSize * 5);\n      }\n\n      this._mixBufferRegion = mixFunction;\n      this._mixBufferRegionAdditive = mixFunctionAdditive;\n      this._setIdentity = setIdentity;\n      this._origIndex = 3;\n      this._addIndex = 4;\n      this.cumulativeWeight = 0;\n      this.cumulativeWeightAdditive = 0;\n      this.useCount = 0;\n      this.referenceCount = 0;\n    } // accumulate data in the 'incoming' region into 'accu<i>'\n\n\n    accumulate(accuIndex, weight) {\n      // note: happily accumulating nothing when weight = 0, the caller knows\n      // the weight and shouldn't have made the call in the first place\n      const buffer = this.buffer,\n            stride = this.valueSize,\n            offset = accuIndex * stride + stride;\n      let currentWeight = this.cumulativeWeight;\n\n      if (currentWeight === 0) {\n        // accuN := incoming * weight\n        for (let i = 0; i !== stride; ++i) {\n          buffer[offset + i] = buffer[i];\n        }\n\n        currentWeight = weight;\n      } else {\n        // accuN := accuN + incoming * weight\n        currentWeight += weight;\n        const mix = weight / currentWeight;\n\n        this._mixBufferRegion(buffer, offset, 0, mix, stride);\n      }\n\n      this.cumulativeWeight = currentWeight;\n    } // accumulate data in the 'incoming' region into 'add'\n\n\n    accumulateAdditive(weight) {\n      const buffer = this.buffer,\n            stride = this.valueSize,\n            offset = stride * this._addIndex;\n\n      if (this.cumulativeWeightAdditive === 0) {\n        // add = identity\n        this._setIdentity();\n      } // add := add + incoming * weight\n\n\n      this._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);\n\n      this.cumulativeWeightAdditive += weight;\n    } // apply the state of 'accu<i>' to the binding when accus differ\n\n\n    apply(accuIndex) {\n      const stride = this.valueSize,\n            buffer = this.buffer,\n            offset = accuIndex * stride + stride,\n            weight = this.cumulativeWeight,\n            weightAdditive = this.cumulativeWeightAdditive,\n            binding = this.binding;\n      this.cumulativeWeight = 0;\n      this.cumulativeWeightAdditive = 0;\n\n      if (weight < 1) {\n        // accuN := accuN + original * ( 1 - cumulativeWeight )\n        const originalValueOffset = stride * this._origIndex;\n\n        this._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);\n      }\n\n      if (weightAdditive > 0) {\n        // accuN := accuN + additive accuN\n        this._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);\n      }\n\n      for (let i = stride, e = stride + stride; i !== e; ++i) {\n        if (buffer[i] !== buffer[i + stride]) {\n          // value has changed -> update scene graph\n          binding.setValue(buffer, offset);\n          break;\n        }\n      }\n    } // remember the state of the bound property and copy it to both accus\n\n\n    saveOriginalState() {\n      const binding = this.binding;\n      const buffer = this.buffer,\n            stride = this.valueSize,\n            originalValueOffset = stride * this._origIndex;\n      binding.getValue(buffer, originalValueOffset); // accu[0..1] := orig -- initially detect changes against the original\n\n      for (let i = stride, e = originalValueOffset; i !== e; ++i) {\n        buffer[i] = buffer[originalValueOffset + i % stride];\n      } // Add to identity for additive\n\n\n      this._setIdentity();\n\n      this.cumulativeWeight = 0;\n      this.cumulativeWeightAdditive = 0;\n    } // apply the state previously taken via 'saveOriginalState' to the binding\n\n\n    restoreOriginalState() {\n      const originalValueOffset = this.valueSize * 3;\n      this.binding.setValue(this.buffer, originalValueOffset);\n    }\n\n    _setAdditiveIdentityNumeric() {\n      const startIndex = this._addIndex * this.valueSize;\n      const endIndex = startIndex + this.valueSize;\n\n      for (let i = startIndex; i < endIndex; i++) {\n        this.buffer[i] = 0;\n      }\n    }\n\n    _setAdditiveIdentityQuaternion() {\n      this._setAdditiveIdentityNumeric();\n\n      this.buffer[this._addIndex * this.valueSize + 3] = 1;\n    }\n\n    _setAdditiveIdentityOther() {\n      const startIndex = this._origIndex * this.valueSize;\n      const targetIndex = this._addIndex * this.valueSize;\n\n      for (let i = 0; i < this.valueSize; i++) {\n        this.buffer[targetIndex + i] = this.buffer[startIndex + i];\n      }\n    } // mix functions\n\n\n    _select(buffer, dstOffset, srcOffset, t, stride) {\n      if (t >= 0.5) {\n        for (let i = 0; i !== stride; ++i) {\n          buffer[dstOffset + i] = buffer[srcOffset + i];\n        }\n      }\n    }\n\n    _slerp(buffer, dstOffset, srcOffset, t) {\n      Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);\n    }\n\n    _slerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n      const workOffset = this._workIndex * stride; // Store result in intermediate buffer offset\n\n      Quaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset); // Slerp to the intermediate result\n\n      Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);\n    }\n\n    _lerp(buffer, dstOffset, srcOffset, t, stride) {\n      const s = 1 - t;\n\n      for (let i = 0; i !== stride; ++i) {\n        const j = dstOffset + i;\n        buffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;\n      }\n    }\n\n    _lerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n      for (let i = 0; i !== stride; ++i) {\n        const j = dstOffset + i;\n        buffer[j] = buffer[j] + buffer[srcOffset + i] * t;\n      }\n    }\n\n  } // Characters [].:/ are reserved for track binding syntax.\n\n\n  const _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n\n  const _reservedRe = new RegExp('[' + _RESERVED_CHARS_RE + ']', 'g'); // Attempts to allow node names from any language. ES5's `\\w` regexp matches\n  // only latin characters, and the unicode \\p{L} is not yet supported. So\n  // instead, we exclude reserved characters and match everything else.\n\n\n  const _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\n\n  const _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace('\\\\.', '') + ']'; // Parent directories, delimited by '/' or ':'. Currently unused, but must\n  // be matched to parse the rest of the track name.\n\n\n  const _directoryRe = /((?:WC+[\\/:])*)/.source.replace('WC', _wordChar); // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\n\n  const _nodeRe = /(WCOD+)?/.source.replace('WCOD', _wordCharOrDot); // Object on target node, and accessor. May not contain reserved\n  // characters. Accessor may contain any character except closing bracket.\n\n\n  const _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace('WC', _wordChar); // Property and accessor. May not contain reserved characters. Accessor may\n  // contain any non-bracket characters.\n\n\n  const _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace('WC', _wordChar);\n\n  const _trackRe = new RegExp('' + '^' + _directoryRe + _nodeRe + _objectRe + _propertyRe + '$');\n\n  const _supportedObjectNames = ['material', 'materials', 'bones'];\n\n  class Composite {\n    constructor(targetGroup, path, optionalParsedPath) {\n      const parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);\n      this._targetGroup = targetGroup;\n      this._bindings = targetGroup.subscribe_(path, parsedPath);\n    }\n\n    getValue(array, offset) {\n      this.bind(); // bind all binding\n\n      const firstValidIndex = this._targetGroup.nCachedObjects_,\n            binding = this._bindings[firstValidIndex]; // and only call .getValue on the first\n\n      if (binding !== undefined) binding.getValue(array, offset);\n    }\n\n    setValue(array, offset) {\n      const bindings = this._bindings;\n\n      for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n        bindings[i].setValue(array, offset);\n      }\n    }\n\n    bind() {\n      const bindings = this._bindings;\n\n      for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n        bindings[i].bind();\n      }\n    }\n\n    unbind() {\n      const bindings = this._bindings;\n\n      for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n        bindings[i].unbind();\n      }\n    }\n\n  } // Note: This class uses a State pattern on a per-method basis:\n  // 'bind' sets 'this.getValue' / 'setValue' and shadows the\n  // prototype version of these methods with one that represents\n  // the bound state. When the property is not found, the methods\n  // become no-ops.\n\n\n  class PropertyBinding {\n    constructor(rootNode, path, parsedPath) {\n      this.path = path;\n      this.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);\n      this.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;\n      this.rootNode = rootNode; // initial state of these methods that calls 'bind'\n\n      this.getValue = this._getValue_unbound;\n      this.setValue = this._setValue_unbound;\n    }\n\n    static create(root, path, parsedPath) {\n      if (!(root && root.isAnimationObjectGroup)) {\n        return new PropertyBinding(root, path, parsedPath);\n      } else {\n        return new PropertyBinding.Composite(root, path, parsedPath);\n      }\n    }\n    /**\n     * Replaces spaces with underscores and removes unsupported characters from\n     * node names, to ensure compatibility with parseTrackName().\n     *\n     * @param {string} name Node name to be sanitized.\n     * @return {string}\n     */\n\n\n    static sanitizeNodeName(name) {\n      return name.replace(/\\s/g, '_').replace(_reservedRe, '');\n    }\n\n    static parseTrackName(trackName) {\n      const matches = _trackRe.exec(trackName);\n\n      if (!matches) {\n        throw new Error('PropertyBinding: Cannot parse trackName: ' + trackName);\n      }\n\n      const results = {\n        // directoryName: matches[ 1 ], // (tschw) currently unused\n        nodeName: matches[2],\n        objectName: matches[3],\n        objectIndex: matches[4],\n        propertyName: matches[5],\n        // required\n        propertyIndex: matches[6]\n      };\n      const lastDot = results.nodeName && results.nodeName.lastIndexOf('.');\n\n      if (lastDot !== undefined && lastDot !== -1) {\n        const objectName = results.nodeName.substring(lastDot + 1); // Object names must be checked against an allowlist. Otherwise, there\n        // is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n        // 'bar' could be the objectName, or part of a nodeName (which can\n        // include '.' characters).\n\n        if (_supportedObjectNames.indexOf(objectName) !== -1) {\n          results.nodeName = results.nodeName.substring(0, lastDot);\n          results.objectName = objectName;\n        }\n      }\n\n      if (results.propertyName === null || results.propertyName.length === 0) {\n        throw new Error('PropertyBinding: can not parse propertyName from trackName: ' + trackName);\n      }\n\n      return results;\n    }\n\n    static findNode(root, nodeName) {\n      if (!nodeName || nodeName === '' || nodeName === '.' || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {\n        return root;\n      } // search into skeleton bones.\n\n\n      if (root.skeleton) {\n        const bone = root.skeleton.getBoneByName(nodeName);\n\n        if (bone !== undefined) {\n          return bone;\n        }\n      } // search into node subtree.\n\n\n      if (root.children) {\n        const searchNodeSubtree = function (children) {\n          for (let i = 0; i < children.length; i++) {\n            const childNode = children[i];\n\n            if (childNode.name === nodeName || childNode.uuid === nodeName) {\n              return childNode;\n            }\n\n            const result = searchNodeSubtree(childNode.children);\n            if (result) return result;\n          }\n\n          return null;\n        };\n\n        const subTreeNode = searchNodeSubtree(root.children);\n\n        if (subTreeNode) {\n          return subTreeNode;\n        }\n      }\n\n      return null;\n    } // these are used to \"bind\" a nonexistent property\n\n\n    _getValue_unavailable() {}\n\n    _setValue_unavailable() {} // Getters\n\n\n    _getValue_direct(buffer, offset) {\n      buffer[offset] = this.targetObject[this.propertyName];\n    }\n\n    _getValue_array(buffer, offset) {\n      const source = this.resolvedProperty;\n\n      for (let i = 0, n = source.length; i !== n; ++i) {\n        buffer[offset++] = source[i];\n      }\n    }\n\n    _getValue_arrayElement(buffer, offset) {\n      buffer[offset] = this.resolvedProperty[this.propertyIndex];\n    }\n\n    _getValue_toArray(buffer, offset) {\n      this.resolvedProperty.toArray(buffer, offset);\n    } // Direct\n\n\n    _setValue_direct(buffer, offset) {\n      this.targetObject[this.propertyName] = buffer[offset];\n    }\n\n    _setValue_direct_setNeedsUpdate(buffer, offset) {\n      this.targetObject[this.propertyName] = buffer[offset];\n      this.targetObject.needsUpdate = true;\n    }\n\n    _setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {\n      this.targetObject[this.propertyName] = buffer[offset];\n      this.targetObject.matrixWorldNeedsUpdate = true;\n    } // EntireArray\n\n\n    _setValue_array(buffer, offset) {\n      const dest = this.resolvedProperty;\n\n      for (let i = 0, n = dest.length; i !== n; ++i) {\n        dest[i] = buffer[offset++];\n      }\n    }\n\n    _setValue_array_setNeedsUpdate(buffer, offset) {\n      const dest = this.resolvedProperty;\n\n      for (let i = 0, n = dest.length; i !== n; ++i) {\n        dest[i] = buffer[offset++];\n      }\n\n      this.targetObject.needsUpdate = true;\n    }\n\n    _setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {\n      const dest = this.resolvedProperty;\n\n      for (let i = 0, n = dest.length; i !== n; ++i) {\n        dest[i] = buffer[offset++];\n      }\n\n      this.targetObject.matrixWorldNeedsUpdate = true;\n    } // ArrayElement\n\n\n    _setValue_arrayElement(buffer, offset) {\n      this.resolvedProperty[this.propertyIndex] = buffer[offset];\n    }\n\n    _setValue_arrayElement_setNeedsUpdate(buffer, offset) {\n      this.resolvedProperty[this.propertyIndex] = buffer[offset];\n      this.targetObject.needsUpdate = true;\n    }\n\n    _setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {\n      this.resolvedProperty[this.propertyIndex] = buffer[offset];\n      this.targetObject.matrixWorldNeedsUpdate = true;\n    } // HasToFromArray\n\n\n    _setValue_fromArray(buffer, offset) {\n      this.resolvedProperty.fromArray(buffer, offset);\n    }\n\n    _setValue_fromArray_setNeedsUpdate(buffer, offset) {\n      this.resolvedProperty.fromArray(buffer, offset);\n      this.targetObject.needsUpdate = true;\n    }\n\n    _setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {\n      this.resolvedProperty.fromArray(buffer, offset);\n      this.targetObject.matrixWorldNeedsUpdate = true;\n    }\n\n    _getValue_unbound(targetArray, offset) {\n      this.bind();\n      this.getValue(targetArray, offset);\n    }\n\n    _setValue_unbound(sourceArray, offset) {\n      this.bind();\n      this.setValue(sourceArray, offset);\n    } // create getter / setter pair for a property in the scene graph\n\n\n    bind() {\n      let targetObject = this.node;\n      const parsedPath = this.parsedPath;\n      const objectName = parsedPath.objectName;\n      const propertyName = parsedPath.propertyName;\n      let propertyIndex = parsedPath.propertyIndex;\n\n      if (!targetObject) {\n        targetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;\n        this.node = targetObject;\n      } // set fail state so we can just 'return' on error\n\n\n      this.getValue = this._getValue_unavailable;\n      this.setValue = this._setValue_unavailable; // ensure there is a value node\n\n      if (!targetObject) {\n        console.error('THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.');\n        return;\n      }\n\n      if (objectName) {\n        let objectIndex = parsedPath.objectIndex; // special cases were we need to reach deeper into the hierarchy to get the face materials....\n\n        switch (objectName) {\n          case 'materials':\n            if (!targetObject.material) {\n              console.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);\n              return;\n            }\n\n            if (!targetObject.material.materials) {\n              console.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this);\n              return;\n            }\n\n            targetObject = targetObject.material.materials;\n            break;\n\n          case 'bones':\n            if (!targetObject.skeleton) {\n              console.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this);\n              return;\n            } // potential future optimization: skip this if propertyIndex is already an integer\n            // and convert the integer string to a true integer.\n\n\n            targetObject = targetObject.skeleton.bones; // support resolving morphTarget names into indices.\n\n            for (let i = 0; i < targetObject.length; i++) {\n              if (targetObject[i].name === objectIndex) {\n                objectIndex = i;\n                break;\n              }\n            }\n\n            break;\n\n          default:\n            if (targetObject[objectName] === undefined) {\n              console.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.', this);\n              return;\n            }\n\n            targetObject = targetObject[objectName];\n        }\n\n        if (objectIndex !== undefined) {\n          if (targetObject[objectIndex] === undefined) {\n            console.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject);\n            return;\n          }\n\n          targetObject = targetObject[objectIndex];\n        }\n      } // resolve property\n\n\n      const nodeProperty = targetObject[propertyName];\n\n      if (nodeProperty === undefined) {\n        const nodeName = parsedPath.nodeName;\n        console.error('THREE.PropertyBinding: Trying to update property for track: ' + nodeName + '.' + propertyName + ' but it wasn\\'t found.', targetObject);\n        return;\n      } // determine versioning scheme\n\n\n      let versioning = this.Versioning.None;\n      this.targetObject = targetObject;\n\n      if (targetObject.needsUpdate !== undefined) {\n        // material\n        versioning = this.Versioning.NeedsUpdate;\n      } else if (targetObject.matrixWorldNeedsUpdate !== undefined) {\n        // node transform\n        versioning = this.Versioning.MatrixWorldNeedsUpdate;\n      } // determine how the property gets bound\n\n\n      let bindingType = this.BindingType.Direct;\n\n      if (propertyIndex !== undefined) {\n        // access a sub element of the property array (only primitives are supported right now)\n        if (propertyName === 'morphTargetInfluences') {\n          // potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n          // support resolving morphTarget names into indices.\n          if (!targetObject.geometry) {\n            console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this);\n            return;\n          }\n\n          if (targetObject.geometry.isBufferGeometry) {\n            if (!targetObject.geometry.morphAttributes) {\n              console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this);\n              return;\n            }\n\n            if (targetObject.morphTargetDictionary[propertyIndex] !== undefined) {\n              propertyIndex = targetObject.morphTargetDictionary[propertyIndex];\n            }\n          } else {\n            console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.', this);\n            return;\n          }\n        }\n\n        bindingType = this.BindingType.ArrayElement;\n        this.resolvedProperty = nodeProperty;\n        this.propertyIndex = propertyIndex;\n      } else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {\n        // must use copy for Object3D.Euler/Quaternion\n        bindingType = this.BindingType.HasFromToArray;\n        this.resolvedProperty = nodeProperty;\n      } else if (Array.isArray(nodeProperty)) {\n        bindingType = this.BindingType.EntireArray;\n        this.resolvedProperty = nodeProperty;\n      } else {\n        this.propertyName = propertyName;\n      } // select getter / setter\n\n\n      this.getValue = this.GetterByBindingType[bindingType];\n      this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];\n    }\n\n    unbind() {\n      this.node = null; // back to the prototype version of getValue / setValue\n      // note: avoiding to mutate the shape of 'this' via 'delete'\n\n      this.getValue = this._getValue_unbound;\n      this.setValue = this._setValue_unbound;\n    }\n\n  }\n\n  PropertyBinding.Composite = Composite;\n  PropertyBinding.prototype.BindingType = {\n    Direct: 0,\n    EntireArray: 1,\n    ArrayElement: 2,\n    HasFromToArray: 3\n  };\n  PropertyBinding.prototype.Versioning = {\n    None: 0,\n    NeedsUpdate: 1,\n    MatrixWorldNeedsUpdate: 2\n  };\n  PropertyBinding.prototype.GetterByBindingType = [PropertyBinding.prototype._getValue_direct, PropertyBinding.prototype._getValue_array, PropertyBinding.prototype._getValue_arrayElement, PropertyBinding.prototype._getValue_toArray];\n  PropertyBinding.prototype.SetterByBindingTypeAndVersioning = [[// Direct\n  PropertyBinding.prototype._setValue_direct, PropertyBinding.prototype._setValue_direct_setNeedsUpdate, PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate], [// EntireArray\n  PropertyBinding.prototype._setValue_array, PropertyBinding.prototype._setValue_array_setNeedsUpdate, PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate], [// ArrayElement\n  PropertyBinding.prototype._setValue_arrayElement, PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate, PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate], [// HasToFromArray\n  PropertyBinding.prototype._setValue_fromArray, PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate, PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];\n  /**\n   *\n   * A group of objects that receives a shared animation state.\n   *\n   * Usage:\n   *\n   *\t- Add objects you would otherwise pass as 'root' to the\n   *\t\tconstructor or the .clipAction method of AnimationMixer.\n   *\n   *\t- Instead pass this object as 'root'.\n   *\n   *\t- You can also add and remove objects later when the mixer\n   *\t\tis running.\n   *\n   * Note:\n   *\n   *\t\tObjects of this class appear as one object to the mixer,\n   *\t\tso cache control of the individual objects must be done\n   *\t\ton the group.\n   *\n   * Limitation:\n   *\n   *\t- The animated properties must be compatible among the\n   *\t\tall objects in the group.\n   *\n   *\t- A single property can either be controlled through a\n   *\t\ttarget group or directly, but not both.\n   */\n\n  class AnimationObjectGroup {\n    constructor() {\n      this.uuid = generateUUID(); // cached objects followed by the active ones\n\n      this._objects = Array.prototype.slice.call(arguments);\n      this.nCachedObjects_ = 0; // threshold\n      // note: read by PropertyBinding.Composite\n\n      const indices = {};\n      this._indicesByUUID = indices; // for bookkeeping\n\n      for (let i = 0, n = arguments.length; i !== n; ++i) {\n        indices[arguments[i].uuid] = i;\n      }\n\n      this._paths = []; // inside: string\n\n      this._parsedPaths = []; // inside: { we don't care, here }\n\n      this._bindings = []; // inside: Array< PropertyBinding >\n\n      this._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n      const scope = this;\n      this.stats = {\n        objects: {\n          get total() {\n            return scope._objects.length;\n          },\n\n          get inUse() {\n            return this.total - scope.nCachedObjects_;\n          }\n\n        },\n\n        get bindingsPerObject() {\n          return scope._bindings.length;\n        }\n\n      };\n    }\n\n    add() {\n      const objects = this._objects,\n            indicesByUUID = this._indicesByUUID,\n            paths = this._paths,\n            parsedPaths = this._parsedPaths,\n            bindings = this._bindings,\n            nBindings = bindings.length;\n      let knownObject = undefined,\n          nObjects = objects.length,\n          nCachedObjects = this.nCachedObjects_;\n\n      for (let i = 0, n = arguments.length; i !== n; ++i) {\n        const object = arguments[i],\n              uuid = object.uuid;\n        let index = indicesByUUID[uuid];\n\n        if (index === undefined) {\n          // unknown object -> add it to the ACTIVE region\n          index = nObjects++;\n          indicesByUUID[uuid] = index;\n          objects.push(object); // accounting is done, now do the same for all bindings\n\n          for (let j = 0, m = nBindings; j !== m; ++j) {\n            bindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));\n          }\n        } else if (index < nCachedObjects) {\n          knownObject = objects[index]; // move existing object to the ACTIVE region\n\n          const firstActiveIndex = --nCachedObjects,\n                lastCachedObject = objects[firstActiveIndex];\n          indicesByUUID[lastCachedObject.uuid] = index;\n          objects[index] = lastCachedObject;\n          indicesByUUID[uuid] = firstActiveIndex;\n          objects[firstActiveIndex] = object; // accounting is done, now do the same for all bindings\n\n          for (let j = 0, m = nBindings; j !== m; ++j) {\n            const bindingsForPath = bindings[j],\n                  lastCached = bindingsForPath[firstActiveIndex];\n            let binding = bindingsForPath[index];\n            bindingsForPath[index] = lastCached;\n\n            if (binding === undefined) {\n              // since we do not bother to create new bindings\n              // for objects that are cached, the binding may\n              // or may not exist\n              binding = new PropertyBinding(object, paths[j], parsedPaths[j]);\n            }\n\n            bindingsForPath[firstActiveIndex] = binding;\n          }\n        } else if (objects[index] !== knownObject) {\n          console.error('THREE.AnimationObjectGroup: Different objects with the same UUID ' + 'detected. Clean the caches or recreate your infrastructure when reloading scenes.');\n        } // else the object is already where we want it to be\n\n      } // for arguments\n\n\n      this.nCachedObjects_ = nCachedObjects;\n    }\n\n    remove() {\n      const objects = this._objects,\n            indicesByUUID = this._indicesByUUID,\n            bindings = this._bindings,\n            nBindings = bindings.length;\n      let nCachedObjects = this.nCachedObjects_;\n\n      for (let i = 0, n = arguments.length; i !== n; ++i) {\n        const object = arguments[i],\n              uuid = object.uuid,\n              index = indicesByUUID[uuid];\n\n        if (index !== undefined && index >= nCachedObjects) {\n          // move existing object into the CACHED region\n          const lastCachedIndex = nCachedObjects++,\n                firstActiveObject = objects[lastCachedIndex];\n          indicesByUUID[firstActiveObject.uuid] = index;\n          objects[index] = firstActiveObject;\n          indicesByUUID[uuid] = lastCachedIndex;\n          objects[lastCachedIndex] = object; // accounting is done, now do the same for all bindings\n\n          for (let j = 0, m = nBindings; j !== m; ++j) {\n            const bindingsForPath = bindings[j],\n                  firstActive = bindingsForPath[lastCachedIndex],\n                  binding = bindingsForPath[index];\n            bindingsForPath[index] = firstActive;\n            bindingsForPath[lastCachedIndex] = binding;\n          }\n        }\n      } // for arguments\n\n\n      this.nCachedObjects_ = nCachedObjects;\n    } // remove & forget\n\n\n    uncache() {\n      const objects = this._objects,\n            indicesByUUID = this._indicesByUUID,\n            bindings = this._bindings,\n            nBindings = bindings.length;\n      let nCachedObjects = this.nCachedObjects_,\n          nObjects = objects.length;\n\n      for (let i = 0, n = arguments.length; i !== n; ++i) {\n        const object = arguments[i],\n              uuid = object.uuid,\n              index = indicesByUUID[uuid];\n\n        if (index !== undefined) {\n          delete indicesByUUID[uuid];\n\n          if (index < nCachedObjects) {\n            // object is cached, shrink the CACHED region\n            const firstActiveIndex = --nCachedObjects,\n                  lastCachedObject = objects[firstActiveIndex],\n                  lastIndex = --nObjects,\n                  lastObject = objects[lastIndex]; // last cached object takes this object's place\n\n            indicesByUUID[lastCachedObject.uuid] = index;\n            objects[index] = lastCachedObject; // last object goes to the activated slot and pop\n\n            indicesByUUID[lastObject.uuid] = firstActiveIndex;\n            objects[firstActiveIndex] = lastObject;\n            objects.pop(); // accounting is done, now do the same for all bindings\n\n            for (let j = 0, m = nBindings; j !== m; ++j) {\n              const bindingsForPath = bindings[j],\n                    lastCached = bindingsForPath[firstActiveIndex],\n                    last = bindingsForPath[lastIndex];\n              bindingsForPath[index] = lastCached;\n              bindingsForPath[firstActiveIndex] = last;\n              bindingsForPath.pop();\n            }\n          } else {\n            // object is active, just swap with the last and pop\n            const lastIndex = --nObjects,\n                  lastObject = objects[lastIndex];\n\n            if (lastIndex > 0) {\n              indicesByUUID[lastObject.uuid] = index;\n            }\n\n            objects[index] = lastObject;\n            objects.pop(); // accounting is done, now do the same for all bindings\n\n            for (let j = 0, m = nBindings; j !== m; ++j) {\n              const bindingsForPath = bindings[j];\n              bindingsForPath[index] = bindingsForPath[lastIndex];\n              bindingsForPath.pop();\n            }\n          } // cached or active\n\n        } // if object is known\n\n      } // for arguments\n\n\n      this.nCachedObjects_ = nCachedObjects;\n    } // Internal interface used by befriended PropertyBinding.Composite:\n\n\n    subscribe_(path, parsedPath) {\n      // returns an array of bindings for the given path that is changed\n      // according to the contained objects in the group\n      const indicesByPath = this._bindingsIndicesByPath;\n      let index = indicesByPath[path];\n      const bindings = this._bindings;\n      if (index !== undefined) return bindings[index];\n      const paths = this._paths,\n            parsedPaths = this._parsedPaths,\n            objects = this._objects,\n            nObjects = objects.length,\n            nCachedObjects = this.nCachedObjects_,\n            bindingsForPath = new Array(nObjects);\n      index = bindings.length;\n      indicesByPath[path] = index;\n      paths.push(path);\n      parsedPaths.push(parsedPath);\n      bindings.push(bindingsForPath);\n\n      for (let i = nCachedObjects, n = objects.length; i !== n; ++i) {\n        const object = objects[i];\n        bindingsForPath[i] = new PropertyBinding(object, path, parsedPath);\n      }\n\n      return bindingsForPath;\n    }\n\n    unsubscribe_(path) {\n      // tells the group to forget about a property path and no longer\n      // update the array previously obtained with 'subscribe_'\n      const indicesByPath = this._bindingsIndicesByPath,\n            index = indicesByPath[path];\n\n      if (index !== undefined) {\n        const paths = this._paths,\n              parsedPaths = this._parsedPaths,\n              bindings = this._bindings,\n              lastBindingsIndex = bindings.length - 1,\n              lastBindings = bindings[lastBindingsIndex],\n              lastBindingsPath = path[lastBindingsIndex];\n        indicesByPath[lastBindingsPath] = index;\n        bindings[index] = lastBindings;\n        bindings.pop();\n        parsedPaths[index] = parsedPaths[lastBindingsIndex];\n        parsedPaths.pop();\n        paths[index] = paths[lastBindingsIndex];\n        paths.pop();\n      }\n    }\n\n  }\n\n  AnimationObjectGroup.prototype.isAnimationObjectGroup = true;\n\n  class AnimationAction {\n    constructor(mixer, clip) {\n      let localRoot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      let blendMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : clip.blendMode;\n      this._mixer = mixer;\n      this._clip = clip;\n      this._localRoot = localRoot;\n      this.blendMode = blendMode;\n      const tracks = clip.tracks,\n            nTracks = tracks.length,\n            interpolants = new Array(nTracks);\n      const interpolantSettings = {\n        endingStart: ZeroCurvatureEnding,\n        endingEnd: ZeroCurvatureEnding\n      };\n\n      for (let i = 0; i !== nTracks; ++i) {\n        const interpolant = tracks[i].createInterpolant(null);\n        interpolants[i] = interpolant;\n        interpolant.settings = interpolantSettings;\n      }\n\n      this._interpolantSettings = interpolantSettings;\n      this._interpolants = interpolants; // bound by the mixer\n      // inside: PropertyMixer (managed by the mixer)\n\n      this._propertyBindings = new Array(nTracks);\n      this._cacheIndex = null; // for the memory manager\n\n      this._byClipCacheIndex = null; // for the memory manager\n\n      this._timeScaleInterpolant = null;\n      this._weightInterpolant = null;\n      this.loop = LoopRepeat;\n      this._loopCount = -1; // global mixer time when the action is to be started\n      // it's set back to 'null' upon start of the action\n\n      this._startTime = null; // scaled local time of the action\n      // gets clamped or wrapped to 0..clip.duration according to loop\n\n      this.time = 0;\n      this.timeScale = 1;\n      this._effectiveTimeScale = 1;\n      this.weight = 1;\n      this._effectiveWeight = 1;\n      this.repetitions = Infinity; // no. of repetitions when looping\n\n      this.paused = false; // true -> zero effective time scale\n\n      this.enabled = true; // false -> zero effective weight\n\n      this.clampWhenFinished = false; // keep feeding the last frame?\n\n      this.zeroSlopeAtStart = true; // for smooth interpolation w/o separate\n\n      this.zeroSlopeAtEnd = true; // clips for start, loop and end\n    } // State & Scheduling\n\n\n    play() {\n      this._mixer._activateAction(this);\n\n      return this;\n    }\n\n    stop() {\n      this._mixer._deactivateAction(this);\n\n      return this.reset();\n    }\n\n    reset() {\n      this.paused = false;\n      this.enabled = true;\n      this.time = 0; // restart clip\n\n      this._loopCount = -1; // forget previous loops\n\n      this._startTime = null; // forget scheduling\n\n      return this.stopFading().stopWarping();\n    }\n\n    isRunning() {\n      return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);\n    } // return true when play has been called\n\n\n    isScheduled() {\n      return this._mixer._isActiveAction(this);\n    }\n\n    startAt(time) {\n      this._startTime = time;\n      return this;\n    }\n\n    setLoop(mode, repetitions) {\n      this.loop = mode;\n      this.repetitions = repetitions;\n      return this;\n    } // Weight\n    // set the weight stopping any scheduled fading\n    // although .enabled = false yields an effective weight of zero, this\n    // method does *not* change .enabled, because it would be confusing\n\n\n    setEffectiveWeight(weight) {\n      this.weight = weight; // note: same logic as when updated at runtime\n\n      this._effectiveWeight = this.enabled ? weight : 0;\n      return this.stopFading();\n    } // return the weight considering fading and .enabled\n\n\n    getEffectiveWeight() {\n      return this._effectiveWeight;\n    }\n\n    fadeIn(duration) {\n      return this._scheduleFading(duration, 0, 1);\n    }\n\n    fadeOut(duration) {\n      return this._scheduleFading(duration, 1, 0);\n    }\n\n    crossFadeFrom(fadeOutAction, duration, warp) {\n      fadeOutAction.fadeOut(duration);\n      this.fadeIn(duration);\n\n      if (warp) {\n        const fadeInDuration = this._clip.duration,\n              fadeOutDuration = fadeOutAction._clip.duration,\n              startEndRatio = fadeOutDuration / fadeInDuration,\n              endStartRatio = fadeInDuration / fadeOutDuration;\n        fadeOutAction.warp(1.0, startEndRatio, duration);\n        this.warp(endStartRatio, 1.0, duration);\n      }\n\n      return this;\n    }\n\n    crossFadeTo(fadeInAction, duration, warp) {\n      return fadeInAction.crossFadeFrom(this, duration, warp);\n    }\n\n    stopFading() {\n      const weightInterpolant = this._weightInterpolant;\n\n      if (weightInterpolant !== null) {\n        this._weightInterpolant = null;\n\n        this._mixer._takeBackControlInterpolant(weightInterpolant);\n      }\n\n      return this;\n    } // Time Scale Control\n    // set the time scale stopping any scheduled warping\n    // although .paused = true yields an effective time scale of zero, this\n    // method does *not* change .paused, because it would be confusing\n\n\n    setEffectiveTimeScale(timeScale) {\n      this.timeScale = timeScale;\n      this._effectiveTimeScale = this.paused ? 0 : timeScale;\n      return this.stopWarping();\n    } // return the time scale considering warping and .paused\n\n\n    getEffectiveTimeScale() {\n      return this._effectiveTimeScale;\n    }\n\n    setDuration(duration) {\n      this.timeScale = this._clip.duration / duration;\n      return this.stopWarping();\n    }\n\n    syncWith(action) {\n      this.time = action.time;\n      this.timeScale = action.timeScale;\n      return this.stopWarping();\n    }\n\n    halt(duration) {\n      return this.warp(this._effectiveTimeScale, 0, duration);\n    }\n\n    warp(startTimeScale, endTimeScale, duration) {\n      const mixer = this._mixer,\n            now = mixer.time,\n            timeScale = this.timeScale;\n      let interpolant = this._timeScaleInterpolant;\n\n      if (interpolant === null) {\n        interpolant = mixer._lendControlInterpolant();\n        this._timeScaleInterpolant = interpolant;\n      }\n\n      const times = interpolant.parameterPositions,\n            values = interpolant.sampleValues;\n      times[0] = now;\n      times[1] = now + duration;\n      values[0] = startTimeScale / timeScale;\n      values[1] = endTimeScale / timeScale;\n      return this;\n    }\n\n    stopWarping() {\n      const timeScaleInterpolant = this._timeScaleInterpolant;\n\n      if (timeScaleInterpolant !== null) {\n        this._timeScaleInterpolant = null;\n\n        this._mixer._takeBackControlInterpolant(timeScaleInterpolant);\n      }\n\n      return this;\n    } // Object Accessors\n\n\n    getMixer() {\n      return this._mixer;\n    }\n\n    getClip() {\n      return this._clip;\n    }\n\n    getRoot() {\n      return this._localRoot || this._mixer._root;\n    } // Interna\n\n\n    _update(time, deltaTime, timeDirection, accuIndex) {\n      // called by the mixer\n      if (!this.enabled) {\n        // call ._updateWeight() to update ._effectiveWeight\n        this._updateWeight(time);\n\n        return;\n      }\n\n      const startTime = this._startTime;\n\n      if (startTime !== null) {\n        // check for scheduled start of action\n        const timeRunning = (time - startTime) * timeDirection;\n\n        if (timeRunning < 0 || timeDirection === 0) {\n          return; // yet to come / don't decide when delta = 0\n        } // start\n\n\n        this._startTime = null; // unschedule\n\n        deltaTime = timeDirection * timeRunning;\n      } // apply time scale and advance time\n\n\n      deltaTime *= this._updateTimeScale(time);\n\n      const clipTime = this._updateTime(deltaTime); // note: _updateTime may disable the action resulting in\n      // an effective weight of 0\n\n\n      const weight = this._updateWeight(time);\n\n      if (weight > 0) {\n        const interpolants = this._interpolants;\n        const propertyMixers = this._propertyBindings;\n\n        switch (this.blendMode) {\n          case AdditiveAnimationBlendMode:\n            for (let j = 0, m = interpolants.length; j !== m; ++j) {\n              interpolants[j].evaluate(clipTime);\n              propertyMixers[j].accumulateAdditive(weight);\n            }\n\n            break;\n\n          case NormalAnimationBlendMode:\n          default:\n            for (let j = 0, m = interpolants.length; j !== m; ++j) {\n              interpolants[j].evaluate(clipTime);\n              propertyMixers[j].accumulate(accuIndex, weight);\n            }\n\n        }\n      }\n    }\n\n    _updateWeight(time) {\n      let weight = 0;\n\n      if (this.enabled) {\n        weight = this.weight;\n        const interpolant = this._weightInterpolant;\n\n        if (interpolant !== null) {\n          const interpolantValue = interpolant.evaluate(time)[0];\n          weight *= interpolantValue;\n\n          if (time > interpolant.parameterPositions[1]) {\n            this.stopFading();\n\n            if (interpolantValue === 0) {\n              // faded out, disable\n              this.enabled = false;\n            }\n          }\n        }\n      }\n\n      this._effectiveWeight = weight;\n      return weight;\n    }\n\n    _updateTimeScale(time) {\n      let timeScale = 0;\n\n      if (!this.paused) {\n        timeScale = this.timeScale;\n        const interpolant = this._timeScaleInterpolant;\n\n        if (interpolant !== null) {\n          const interpolantValue = interpolant.evaluate(time)[0];\n          timeScale *= interpolantValue;\n\n          if (time > interpolant.parameterPositions[1]) {\n            this.stopWarping();\n\n            if (timeScale === 0) {\n              // motion has halted, pause\n              this.paused = true;\n            } else {\n              // warp done - apply final time scale\n              this.timeScale = timeScale;\n            }\n          }\n        }\n      }\n\n      this._effectiveTimeScale = timeScale;\n      return timeScale;\n    }\n\n    _updateTime(deltaTime) {\n      const duration = this._clip.duration;\n      const loop = this.loop;\n      let time = this.time + deltaTime;\n      let loopCount = this._loopCount;\n      const pingPong = loop === LoopPingPong;\n\n      if (deltaTime === 0) {\n        if (loopCount === -1) return time;\n        return pingPong && (loopCount & 1) === 1 ? duration - time : time;\n      }\n\n      if (loop === LoopOnce) {\n        if (loopCount === -1) {\n          // just started\n          this._loopCount = 0;\n\n          this._setEndings(true, true, false);\n        }\n\n        handle_stop: {\n          if (time >= duration) {\n            time = duration;\n          } else if (time < 0) {\n            time = 0;\n          } else {\n            this.time = time;\n            break handle_stop;\n          }\n\n          if (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n          this.time = time;\n\n          this._mixer.dispatchEvent({\n            type: 'finished',\n            action: this,\n            direction: deltaTime < 0 ? -1 : 1\n          });\n        }\n      } else {\n        // repetitive Repeat or PingPong\n        if (loopCount === -1) {\n          // just started\n          if (deltaTime >= 0) {\n            loopCount = 0;\n\n            this._setEndings(true, this.repetitions === 0, pingPong);\n          } else {\n            // when looping in reverse direction, the initial\n            // transition through zero counts as a repetition,\n            // so leave loopCount at -1\n            this._setEndings(this.repetitions === 0, true, pingPong);\n          }\n        }\n\n        if (time >= duration || time < 0) {\n          // wrap around\n          const loopDelta = Math.floor(time / duration); // signed\n\n          time -= duration * loopDelta;\n          loopCount += Math.abs(loopDelta);\n          const pending = this.repetitions - loopCount;\n\n          if (pending <= 0) {\n            // have to stop (switch state, clamp time, fire event)\n            if (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n            time = deltaTime > 0 ? duration : 0;\n            this.time = time;\n\n            this._mixer.dispatchEvent({\n              type: 'finished',\n              action: this,\n              direction: deltaTime > 0 ? 1 : -1\n            });\n          } else {\n            // keep running\n            if (pending === 1) {\n              // entering the last round\n              const atStart = deltaTime < 0;\n\n              this._setEndings(atStart, !atStart, pingPong);\n            } else {\n              this._setEndings(false, false, pingPong);\n            }\n\n            this._loopCount = loopCount;\n            this.time = time;\n\n            this._mixer.dispatchEvent({\n              type: 'loop',\n              action: this,\n              loopDelta: loopDelta\n            });\n          }\n        } else {\n          this.time = time;\n        }\n\n        if (pingPong && (loopCount & 1) === 1) {\n          // invert time for the \"pong round\"\n          return duration - time;\n        }\n      }\n\n      return time;\n    }\n\n    _setEndings(atStart, atEnd, pingPong) {\n      const settings = this._interpolantSettings;\n\n      if (pingPong) {\n        settings.endingStart = ZeroSlopeEnding;\n        settings.endingEnd = ZeroSlopeEnding;\n      } else {\n        // assuming for LoopOnce atStart == atEnd == true\n        if (atStart) {\n          settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n        } else {\n          settings.endingStart = WrapAroundEnding;\n        }\n\n        if (atEnd) {\n          settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n        } else {\n          settings.endingEnd = WrapAroundEnding;\n        }\n      }\n    }\n\n    _scheduleFading(duration, weightNow, weightThen) {\n      const mixer = this._mixer,\n            now = mixer.time;\n      let interpolant = this._weightInterpolant;\n\n      if (interpolant === null) {\n        interpolant = mixer._lendControlInterpolant();\n        this._weightInterpolant = interpolant;\n      }\n\n      const times = interpolant.parameterPositions,\n            values = interpolant.sampleValues;\n      times[0] = now;\n      values[0] = weightNow;\n      times[1] = now + duration;\n      values[1] = weightThen;\n      return this;\n    }\n\n  }\n\n  class AnimationMixer extends EventDispatcher {\n    constructor(root) {\n      super();\n      this._root = root;\n\n      this._initMemoryManager();\n\n      this._accuIndex = 0;\n      this.time = 0;\n      this.timeScale = 1.0;\n    }\n\n    _bindAction(action, prototypeAction) {\n      const root = action._localRoot || this._root,\n            tracks = action._clip.tracks,\n            nTracks = tracks.length,\n            bindings = action._propertyBindings,\n            interpolants = action._interpolants,\n            rootUuid = root.uuid,\n            bindingsByRoot = this._bindingsByRootAndName;\n      let bindingsByName = bindingsByRoot[rootUuid];\n\n      if (bindingsByName === undefined) {\n        bindingsByName = {};\n        bindingsByRoot[rootUuid] = bindingsByName;\n      }\n\n      for (let i = 0; i !== nTracks; ++i) {\n        const track = tracks[i],\n              trackName = track.name;\n        let binding = bindingsByName[trackName];\n\n        if (binding !== undefined) {\n          bindings[i] = binding;\n        } else {\n          binding = bindings[i];\n\n          if (binding !== undefined) {\n            // existing binding, make sure the cache knows\n            if (binding._cacheIndex === null) {\n              ++binding.referenceCount;\n\n              this._addInactiveBinding(binding, rootUuid, trackName);\n            }\n\n            continue;\n          }\n\n          const path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;\n          binding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());\n          ++binding.referenceCount;\n\n          this._addInactiveBinding(binding, rootUuid, trackName);\n\n          bindings[i] = binding;\n        }\n\n        interpolants[i].resultBuffer = binding.buffer;\n      }\n    }\n\n    _activateAction(action) {\n      if (!this._isActiveAction(action)) {\n        if (action._cacheIndex === null) {\n          // this action has been forgotten by the cache, but the user\n          // appears to be still using it -> rebind\n          const rootUuid = (action._localRoot || this._root).uuid,\n                clipUuid = action._clip.uuid,\n                actionsForClip = this._actionsByClip[clipUuid];\n\n          this._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);\n\n          this._addInactiveAction(action, clipUuid, rootUuid);\n        }\n\n        const bindings = action._propertyBindings; // increment reference counts / sort out state\n\n        for (let i = 0, n = bindings.length; i !== n; ++i) {\n          const binding = bindings[i];\n\n          if (binding.useCount++ === 0) {\n            this._lendBinding(binding);\n\n            binding.saveOriginalState();\n          }\n        }\n\n        this._lendAction(action);\n      }\n    }\n\n    _deactivateAction(action) {\n      if (this._isActiveAction(action)) {\n        const bindings = action._propertyBindings; // decrement reference counts / sort out state\n\n        for (let i = 0, n = bindings.length; i !== n; ++i) {\n          const binding = bindings[i];\n\n          if (--binding.useCount === 0) {\n            binding.restoreOriginalState();\n\n            this._takeBackBinding(binding);\n          }\n        }\n\n        this._takeBackAction(action);\n      }\n    } // Memory manager\n\n\n    _initMemoryManager() {\n      this._actions = []; // 'nActiveActions' followed by inactive ones\n\n      this._nActiveActions = 0;\n      this._actionsByClip = {}; // inside:\n      // {\n      // \tknownActions: Array< AnimationAction > - used as prototypes\n      // \tactionByRoot: AnimationAction - lookup\n      // }\n\n      this._bindings = []; // 'nActiveBindings' followed by inactive ones\n\n      this._nActiveBindings = 0;\n      this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n      this._controlInterpolants = []; // same game as above\n\n      this._nActiveControlInterpolants = 0;\n      const scope = this;\n      this.stats = {\n        actions: {\n          get total() {\n            return scope._actions.length;\n          },\n\n          get inUse() {\n            return scope._nActiveActions;\n          }\n\n        },\n        bindings: {\n          get total() {\n            return scope._bindings.length;\n          },\n\n          get inUse() {\n            return scope._nActiveBindings;\n          }\n\n        },\n        controlInterpolants: {\n          get total() {\n            return scope._controlInterpolants.length;\n          },\n\n          get inUse() {\n            return scope._nActiveControlInterpolants;\n          }\n\n        }\n      };\n    } // Memory management for AnimationAction objects\n\n\n    _isActiveAction(action) {\n      const index = action._cacheIndex;\n      return index !== null && index < this._nActiveActions;\n    }\n\n    _addInactiveAction(action, clipUuid, rootUuid) {\n      const actions = this._actions,\n            actionsByClip = this._actionsByClip;\n      let actionsForClip = actionsByClip[clipUuid];\n\n      if (actionsForClip === undefined) {\n        actionsForClip = {\n          knownActions: [action],\n          actionByRoot: {}\n        };\n        action._byClipCacheIndex = 0;\n        actionsByClip[clipUuid] = actionsForClip;\n      } else {\n        const knownActions = actionsForClip.knownActions;\n        action._byClipCacheIndex = knownActions.length;\n        knownActions.push(action);\n      }\n\n      action._cacheIndex = actions.length;\n      actions.push(action);\n      actionsForClip.actionByRoot[rootUuid] = action;\n    }\n\n    _removeInactiveAction(action) {\n      const actions = this._actions,\n            lastInactiveAction = actions[actions.length - 1],\n            cacheIndex = action._cacheIndex;\n      lastInactiveAction._cacheIndex = cacheIndex;\n      actions[cacheIndex] = lastInactiveAction;\n      actions.pop();\n      action._cacheIndex = null;\n      const clipUuid = action._clip.uuid,\n            actionsByClip = this._actionsByClip,\n            actionsForClip = actionsByClip[clipUuid],\n            knownActionsForClip = actionsForClip.knownActions,\n            lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1],\n            byClipCacheIndex = action._byClipCacheIndex;\n      lastKnownAction._byClipCacheIndex = byClipCacheIndex;\n      knownActionsForClip[byClipCacheIndex] = lastKnownAction;\n      knownActionsForClip.pop();\n      action._byClipCacheIndex = null;\n      const actionByRoot = actionsForClip.actionByRoot,\n            rootUuid = (action._localRoot || this._root).uuid;\n      delete actionByRoot[rootUuid];\n\n      if (knownActionsForClip.length === 0) {\n        delete actionsByClip[clipUuid];\n      }\n\n      this._removeInactiveBindingsForAction(action);\n    }\n\n    _removeInactiveBindingsForAction(action) {\n      const bindings = action._propertyBindings;\n\n      for (let i = 0, n = bindings.length; i !== n; ++i) {\n        const binding = bindings[i];\n\n        if (--binding.referenceCount === 0) {\n          this._removeInactiveBinding(binding);\n        }\n      }\n    }\n\n    _lendAction(action) {\n      // [ active actions |\tinactive actions\t]\n      // [\tactive actions >| inactive actions ]\n      //\t\t\t\t\t\t\t\t s\t\t\t\ta\n      //\t\t\t\t\t\t\t\t\t<-swap->\n      //\t\t\t\t\t\t\t\t a\t\t\t\ts\n      const actions = this._actions,\n            prevIndex = action._cacheIndex,\n            lastActiveIndex = this._nActiveActions++,\n            firstInactiveAction = actions[lastActiveIndex];\n      action._cacheIndex = lastActiveIndex;\n      actions[lastActiveIndex] = action;\n      firstInactiveAction._cacheIndex = prevIndex;\n      actions[prevIndex] = firstInactiveAction;\n    }\n\n    _takeBackAction(action) {\n      // [\tactive actions\t| inactive actions ]\n      // [ active actions |< inactive actions\t]\n      //\t\t\t\ta\t\t\t\ts\n      //\t\t\t\t <-swap->\n      //\t\t\t\ts\t\t\t\ta\n      const actions = this._actions,\n            prevIndex = action._cacheIndex,\n            firstInactiveIndex = --this._nActiveActions,\n            lastActiveAction = actions[firstInactiveIndex];\n      action._cacheIndex = firstInactiveIndex;\n      actions[firstInactiveIndex] = action;\n      lastActiveAction._cacheIndex = prevIndex;\n      actions[prevIndex] = lastActiveAction;\n    } // Memory management for PropertyMixer objects\n\n\n    _addInactiveBinding(binding, rootUuid, trackName) {\n      const bindingsByRoot = this._bindingsByRootAndName,\n            bindings = this._bindings;\n      let bindingByName = bindingsByRoot[rootUuid];\n\n      if (bindingByName === undefined) {\n        bindingByName = {};\n        bindingsByRoot[rootUuid] = bindingByName;\n      }\n\n      bindingByName[trackName] = binding;\n      binding._cacheIndex = bindings.length;\n      bindings.push(binding);\n    }\n\n    _removeInactiveBinding(binding) {\n      const bindings = this._bindings,\n            propBinding = binding.binding,\n            rootUuid = propBinding.rootNode.uuid,\n            trackName = propBinding.path,\n            bindingsByRoot = this._bindingsByRootAndName,\n            bindingByName = bindingsByRoot[rootUuid],\n            lastInactiveBinding = bindings[bindings.length - 1],\n            cacheIndex = binding._cacheIndex;\n      lastInactiveBinding._cacheIndex = cacheIndex;\n      bindings[cacheIndex] = lastInactiveBinding;\n      bindings.pop();\n      delete bindingByName[trackName];\n\n      if (Object.keys(bindingByName).length === 0) {\n        delete bindingsByRoot[rootUuid];\n      }\n    }\n\n    _lendBinding(binding) {\n      const bindings = this._bindings,\n            prevIndex = binding._cacheIndex,\n            lastActiveIndex = this._nActiveBindings++,\n            firstInactiveBinding = bindings[lastActiveIndex];\n      binding._cacheIndex = lastActiveIndex;\n      bindings[lastActiveIndex] = binding;\n      firstInactiveBinding._cacheIndex = prevIndex;\n      bindings[prevIndex] = firstInactiveBinding;\n    }\n\n    _takeBackBinding(binding) {\n      const bindings = this._bindings,\n            prevIndex = binding._cacheIndex,\n            firstInactiveIndex = --this._nActiveBindings,\n            lastActiveBinding = bindings[firstInactiveIndex];\n      binding._cacheIndex = firstInactiveIndex;\n      bindings[firstInactiveIndex] = binding;\n      lastActiveBinding._cacheIndex = prevIndex;\n      bindings[prevIndex] = lastActiveBinding;\n    } // Memory management of Interpolants for weight and time scale\n\n\n    _lendControlInterpolant() {\n      const interpolants = this._controlInterpolants,\n            lastActiveIndex = this._nActiveControlInterpolants++;\n      let interpolant = interpolants[lastActiveIndex];\n\n      if (interpolant === undefined) {\n        interpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);\n        interpolant.__cacheIndex = lastActiveIndex;\n        interpolants[lastActiveIndex] = interpolant;\n      }\n\n      return interpolant;\n    }\n\n    _takeBackControlInterpolant(interpolant) {\n      const interpolants = this._controlInterpolants,\n            prevIndex = interpolant.__cacheIndex,\n            firstInactiveIndex = --this._nActiveControlInterpolants,\n            lastActiveInterpolant = interpolants[firstInactiveIndex];\n      interpolant.__cacheIndex = firstInactiveIndex;\n      interpolants[firstInactiveIndex] = interpolant;\n      lastActiveInterpolant.__cacheIndex = prevIndex;\n      interpolants[prevIndex] = lastActiveInterpolant;\n    } // return an action for a clip optionally using a custom root target\n    // object (this method allocates a lot of dynamic memory in case a\n    // previously unknown clip/root combination is specified)\n\n\n    clipAction(clip, optionalRoot, blendMode) {\n      const root = optionalRoot || this._root,\n            rootUuid = root.uuid;\n      let clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip;\n      const clipUuid = clipObject !== null ? clipObject.uuid : clip;\n      const actionsForClip = this._actionsByClip[clipUuid];\n      let prototypeAction = null;\n\n      if (blendMode === undefined) {\n        if (clipObject !== null) {\n          blendMode = clipObject.blendMode;\n        } else {\n          blendMode = NormalAnimationBlendMode;\n        }\n      }\n\n      if (actionsForClip !== undefined) {\n        const existingAction = actionsForClip.actionByRoot[rootUuid];\n\n        if (existingAction !== undefined && existingAction.blendMode === blendMode) {\n          return existingAction;\n        } // we know the clip, so we don't have to parse all\n        // the bindings again but can just copy\n\n\n        prototypeAction = actionsForClip.knownActions[0]; // also, take the clip from the prototype action\n\n        if (clipObject === null) clipObject = prototypeAction._clip;\n      } // clip must be known when specified via string\n\n\n      if (clipObject === null) return null; // allocate all resources required to run it\n\n      const newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);\n\n      this._bindAction(newAction, prototypeAction); // and make the action known to the memory manager\n\n\n      this._addInactiveAction(newAction, clipUuid, rootUuid);\n\n      return newAction;\n    } // get an existing action\n\n\n    existingAction(clip, optionalRoot) {\n      const root = optionalRoot || this._root,\n            rootUuid = root.uuid,\n            clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip,\n            clipUuid = clipObject ? clipObject.uuid : clip,\n            actionsForClip = this._actionsByClip[clipUuid];\n\n      if (actionsForClip !== undefined) {\n        return actionsForClip.actionByRoot[rootUuid] || null;\n      }\n\n      return null;\n    } // deactivates all previously scheduled actions\n\n\n    stopAllAction() {\n      const actions = this._actions,\n            nActions = this._nActiveActions;\n\n      for (let i = nActions - 1; i >= 0; --i) {\n        actions[i].stop();\n      }\n\n      return this;\n    } // advance the time and update apply the animation\n\n\n    update(deltaTime) {\n      deltaTime *= this.timeScale;\n      const actions = this._actions,\n            nActions = this._nActiveActions,\n            time = this.time += deltaTime,\n            timeDirection = Math.sign(deltaTime),\n            accuIndex = this._accuIndex ^= 1; // run active actions\n\n      for (let i = 0; i !== nActions; ++i) {\n        const action = actions[i];\n\n        action._update(time, deltaTime, timeDirection, accuIndex);\n      } // update scene graph\n\n\n      const bindings = this._bindings,\n            nBindings = this._nActiveBindings;\n\n      for (let i = 0; i !== nBindings; ++i) {\n        bindings[i].apply(accuIndex);\n      }\n\n      return this;\n    } // Allows you to seek to a specific time in an animation.\n\n\n    setTime(timeInSeconds) {\n      this.time = 0; // Zero out time attribute for AnimationMixer object;\n\n      for (let i = 0; i < this._actions.length; i++) {\n        this._actions[i].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n      }\n\n      return this.update(timeInSeconds); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n    } // return this mixer's root target object\n\n\n    getRoot() {\n      return this._root;\n    } // free all resources specific to a particular clip\n\n\n    uncacheClip(clip) {\n      const actions = this._actions,\n            clipUuid = clip.uuid,\n            actionsByClip = this._actionsByClip,\n            actionsForClip = actionsByClip[clipUuid];\n\n      if (actionsForClip !== undefined) {\n        // note: just calling _removeInactiveAction would mess up the\n        // iteration state and also require updating the state we can\n        // just throw away\n        const actionsToRemove = actionsForClip.knownActions;\n\n        for (let i = 0, n = actionsToRemove.length; i !== n; ++i) {\n          const action = actionsToRemove[i];\n\n          this._deactivateAction(action);\n\n          const cacheIndex = action._cacheIndex,\n                lastInactiveAction = actions[actions.length - 1];\n          action._cacheIndex = null;\n          action._byClipCacheIndex = null;\n          lastInactiveAction._cacheIndex = cacheIndex;\n          actions[cacheIndex] = lastInactiveAction;\n          actions.pop();\n\n          this._removeInactiveBindingsForAction(action);\n        }\n\n        delete actionsByClip[clipUuid];\n      }\n    } // free all resources specific to a particular root target object\n\n\n    uncacheRoot(root) {\n      const rootUuid = root.uuid,\n            actionsByClip = this._actionsByClip;\n\n      for (const clipUuid in actionsByClip) {\n        const actionByRoot = actionsByClip[clipUuid].actionByRoot,\n              action = actionByRoot[rootUuid];\n\n        if (action !== undefined) {\n          this._deactivateAction(action);\n\n          this._removeInactiveAction(action);\n        }\n      }\n\n      const bindingsByRoot = this._bindingsByRootAndName,\n            bindingByName = bindingsByRoot[rootUuid];\n\n      if (bindingByName !== undefined) {\n        for (const trackName in bindingByName) {\n          const binding = bindingByName[trackName];\n          binding.restoreOriginalState();\n\n          this._removeInactiveBinding(binding);\n        }\n      }\n    } // remove a targeted clip from the cache\n\n\n    uncacheAction(clip, optionalRoot) {\n      const action = this.existingAction(clip, optionalRoot);\n\n      if (action !== null) {\n        this._deactivateAction(action);\n\n        this._removeInactiveAction(action);\n      }\n    }\n\n  }\n\n  AnimationMixer.prototype._controlInterpolantsResultBuffer = new Float32Array(1);\n\n  class Uniform {\n    constructor(value) {\n      if (typeof value === 'string') {\n        console.warn('THREE.Uniform: Type parameter is no longer needed.');\n        value = arguments[1];\n      }\n\n      this.value = value;\n    }\n\n    clone() {\n      return new Uniform(this.value.clone === undefined ? this.value : this.value.clone());\n    }\n\n  }\n\n  class InstancedInterleavedBuffer extends InterleavedBuffer {\n    constructor(array, stride) {\n      let meshPerAttribute = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      super(array, stride);\n      this.meshPerAttribute = meshPerAttribute;\n    }\n\n    copy(source) {\n      super.copy(source);\n      this.meshPerAttribute = source.meshPerAttribute;\n      return this;\n    }\n\n    clone(data) {\n      const ib = super.clone(data);\n      ib.meshPerAttribute = this.meshPerAttribute;\n      return ib;\n    }\n\n    toJSON(data) {\n      const json = super.toJSON(data);\n      json.isInstancedInterleavedBuffer = true;\n      json.meshPerAttribute = this.meshPerAttribute;\n      return json;\n    }\n\n  }\n\n  InstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;\n\n  class GLBufferAttribute {\n    constructor(buffer, type, itemSize, elementSize, count) {\n      this.buffer = buffer;\n      this.type = type;\n      this.itemSize = itemSize;\n      this.elementSize = elementSize;\n      this.count = count;\n      this.version = 0;\n    }\n\n    set needsUpdate(value) {\n      if (value === true) this.version++;\n    }\n\n    setBuffer(buffer) {\n      this.buffer = buffer;\n      return this;\n    }\n\n    setType(type, elementSize) {\n      this.type = type;\n      this.elementSize = elementSize;\n      return this;\n    }\n\n    setItemSize(itemSize) {\n      this.itemSize = itemSize;\n      return this;\n    }\n\n    setCount(count) {\n      this.count = count;\n      return this;\n    }\n\n  }\n\n  GLBufferAttribute.prototype.isGLBufferAttribute = true;\n\n  class Raycaster {\n    constructor(origin, direction) {\n      let near = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      let far = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Infinity;\n      this.ray = new Ray(origin, direction); // direction is assumed to be normalized (for accurate distance calculations)\n\n      this.near = near;\n      this.far = far;\n      this.camera = null;\n      this.layers = new Layers();\n      this.params = {\n        Mesh: {},\n        Line: {\n          threshold: 1\n        },\n        LOD: {},\n        Points: {\n          threshold: 1\n        },\n        Sprite: {}\n      };\n    }\n\n    set(origin, direction) {\n      // direction is assumed to be normalized (for accurate distance calculations)\n      this.ray.set(origin, direction);\n    }\n\n    setFromCamera(coords, camera) {\n      if (camera && camera.isPerspectiveCamera) {\n        this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n        this.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();\n        this.camera = camera;\n      } else if (camera && camera.isOrthographicCamera) {\n        this.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera\n\n        this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n        this.camera = camera;\n      } else {\n        console.error('THREE.Raycaster: Unsupported camera type: ' + camera.type);\n      }\n    }\n\n    intersectObject(object) {\n      let recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      let intersects = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      intersectObject(object, this, intersects, recursive);\n      intersects.sort(ascSort);\n      return intersects;\n    }\n\n    intersectObjects(objects) {\n      let recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      let intersects = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n      for (let i = 0, l = objects.length; i < l; i++) {\n        intersectObject(objects[i], this, intersects, recursive);\n      }\n\n      intersects.sort(ascSort);\n      return intersects;\n    }\n\n  }\n\n  function ascSort(a, b) {\n    return a.distance - b.distance;\n  }\n\n  function intersectObject(object, raycaster, intersects, recursive) {\n    if (object.layers.test(raycaster.layers)) {\n      object.raycast(raycaster, intersects);\n    }\n\n    if (recursive === true) {\n      const children = object.children;\n\n      for (let i = 0, l = children.length; i < l; i++) {\n        intersectObject(children[i], raycaster, intersects, true);\n      }\n    }\n  }\n  /**\n   * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n   *\n   * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n   * The azimuthal angle (theta) is measured from the positive z-axis.\n   */\n\n\n  class Spherical {\n    constructor() {\n      let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      let phi = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      let theta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      this.radius = radius;\n      this.phi = phi; // polar angle\n\n      this.theta = theta; // azimuthal angle\n\n      return this;\n    }\n\n    set(radius, phi, theta) {\n      this.radius = radius;\n      this.phi = phi;\n      this.theta = theta;\n      return this;\n    }\n\n    copy(other) {\n      this.radius = other.radius;\n      this.phi = other.phi;\n      this.theta = other.theta;\n      return this;\n    } // restrict phi to be betwee EPS and PI-EPS\n\n\n    makeSafe() {\n      const EPS = 0.000001;\n      this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));\n      return this;\n    }\n\n    setFromVector3(v) {\n      return this.setFromCartesianCoords(v.x, v.y, v.z);\n    }\n\n    setFromCartesianCoords(x, y, z) {\n      this.radius = Math.sqrt(x * x + y * y + z * z);\n\n      if (this.radius === 0) {\n        this.theta = 0;\n        this.phi = 0;\n      } else {\n        this.theta = Math.atan2(x, z);\n        this.phi = Math.acos(clamp(y / this.radius, -1, 1));\n      }\n\n      return this;\n    }\n\n    clone() {\n      return new this.constructor().copy(this);\n    }\n\n  }\n  /**\n   * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n   */\n\n\n  class Cylindrical {\n    constructor() {\n      let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      let theta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      let y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      this.radius = radius; // distance from the origin to a point in the x-z plane\n\n      this.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\n      this.y = y; // height above the x-z plane\n\n      return this;\n    }\n\n    set(radius, theta, y) {\n      this.radius = radius;\n      this.theta = theta;\n      this.y = y;\n      return this;\n    }\n\n    copy(other) {\n      this.radius = other.radius;\n      this.theta = other.theta;\n      this.y = other.y;\n      return this;\n    }\n\n    setFromVector3(v) {\n      return this.setFromCartesianCoords(v.x, v.y, v.z);\n    }\n\n    setFromCartesianCoords(x, y, z) {\n      this.radius = Math.sqrt(x * x + z * z);\n      this.theta = Math.atan2(x, z);\n      this.y = y;\n      return this;\n    }\n\n    clone() {\n      return new this.constructor().copy(this);\n    }\n\n  }\n\n  const _vector$4 = /*@__PURE__*/new Vector2();\n\n  class Box2 {\n    constructor() {\n      let min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector2(+Infinity, +Infinity);\n      let max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2(-Infinity, -Infinity);\n      this.min = min;\n      this.max = max;\n    }\n\n    set(min, max) {\n      this.min.copy(min);\n      this.max.copy(max);\n      return this;\n    }\n\n    setFromPoints(points) {\n      this.makeEmpty();\n\n      for (let i = 0, il = points.length; i < il; i++) {\n        this.expandByPoint(points[i]);\n      }\n\n      return this;\n    }\n\n    setFromCenterAndSize(center, size) {\n      const halfSize = _vector$4.copy(size).multiplyScalar(0.5);\n\n      this.min.copy(center).sub(halfSize);\n      this.max.copy(center).add(halfSize);\n      return this;\n    }\n\n    clone() {\n      return new this.constructor().copy(this);\n    }\n\n    copy(box) {\n      this.min.copy(box.min);\n      this.max.copy(box.max);\n      return this;\n    }\n\n    makeEmpty() {\n      this.min.x = this.min.y = +Infinity;\n      this.max.x = this.max.y = -Infinity;\n      return this;\n    }\n\n    isEmpty() {\n      // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n      return this.max.x < this.min.x || this.max.y < this.min.y;\n    }\n\n    getCenter(target) {\n      return this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n    }\n\n    getSize(target) {\n      return this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);\n    }\n\n    expandByPoint(point) {\n      this.min.min(point);\n      this.max.max(point);\n      return this;\n    }\n\n    expandByVector(vector) {\n      this.min.sub(vector);\n      this.max.add(vector);\n      return this;\n    }\n\n    expandByScalar(scalar) {\n      this.min.addScalar(-scalar);\n      this.max.addScalar(scalar);\n      return this;\n    }\n\n    containsPoint(point) {\n      return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;\n    }\n\n    containsBox(box) {\n      return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;\n    }\n\n    getParameter(point, target) {\n      // This can potentially have a divide by zero if the box\n      // has a size dimension of 0.\n      return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));\n    }\n\n    intersectsBox(box) {\n      // using 4 splitting planes to rule out intersections\n      return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n    }\n\n    clampPoint(point, target) {\n      return target.copy(point).clamp(this.min, this.max);\n    }\n\n    distanceToPoint(point) {\n      const clampedPoint = _vector$4.copy(point).clamp(this.min, this.max);\n\n      return clampedPoint.sub(point).length();\n    }\n\n    intersect(box) {\n      this.min.max(box.min);\n      this.max.min(box.max);\n      return this;\n    }\n\n    union(box) {\n      this.min.min(box.min);\n      this.max.max(box.max);\n      return this;\n    }\n\n    translate(offset) {\n      this.min.add(offset);\n      this.max.add(offset);\n      return this;\n    }\n\n    equals(box) {\n      return box.min.equals(this.min) && box.max.equals(this.max);\n    }\n\n  }\n\n  Box2.prototype.isBox2 = true;\n\n  const _startP = /*@__PURE__*/new Vector3();\n\n  const _startEnd = /*@__PURE__*/new Vector3();\n\n  class Line3 {\n    constructor() {\n      let start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n      let end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n      this.start = start;\n      this.end = end;\n    }\n\n    set(start, end) {\n      this.start.copy(start);\n      this.end.copy(end);\n      return this;\n    }\n\n    copy(line) {\n      this.start.copy(line.start);\n      this.end.copy(line.end);\n      return this;\n    }\n\n    getCenter(target) {\n      return target.addVectors(this.start, this.end).multiplyScalar(0.5);\n    }\n\n    delta(target) {\n      return target.subVectors(this.end, this.start);\n    }\n\n    distanceSq() {\n      return this.start.distanceToSquared(this.end);\n    }\n\n    distance() {\n      return this.start.distanceTo(this.end);\n    }\n\n    at(t, target) {\n      return this.delta(target).multiplyScalar(t).add(this.start);\n    }\n\n    closestPointToPointParameter(point, clampToLine) {\n      _startP.subVectors(point, this.start);\n\n      _startEnd.subVectors(this.end, this.start);\n\n      const startEnd2 = _startEnd.dot(_startEnd);\n\n      const startEnd_startP = _startEnd.dot(_startP);\n\n      let t = startEnd_startP / startEnd2;\n\n      if (clampToLine) {\n        t = clamp(t, 0, 1);\n      }\n\n      return t;\n    }\n\n    closestPointToPoint(point, clampToLine, target) {\n      const t = this.closestPointToPointParameter(point, clampToLine);\n      return this.delta(target).multiplyScalar(t).add(this.start);\n    }\n\n    applyMatrix4(matrix) {\n      this.start.applyMatrix4(matrix);\n      this.end.applyMatrix4(matrix);\n      return this;\n    }\n\n    equals(line) {\n      return line.start.equals(this.start) && line.end.equals(this.end);\n    }\n\n    clone() {\n      return new this.constructor().copy(this);\n    }\n\n  }\n\n  const _vector$3 = /*@__PURE__*/new Vector3();\n\n  class SpotLightHelper extends Object3D {\n    constructor(light, color) {\n      super();\n      this.light = light;\n      this.light.updateMatrixWorld();\n      this.matrix = light.matrixWorld;\n      this.matrixAutoUpdate = false;\n      this.color = color;\n      const geometry = new BufferGeometry();\n      const positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];\n\n      for (let i = 0, j = 1, l = 32; i < l; i++, j++) {\n        const p1 = i / l * Math.PI * 2;\n        const p2 = j / l * Math.PI * 2;\n        positions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n      const material = new LineBasicMaterial({\n        fog: false,\n        toneMapped: false\n      });\n      this.cone = new LineSegments(geometry, material);\n      this.add(this.cone);\n      this.update();\n    }\n\n    dispose() {\n      this.cone.geometry.dispose();\n      this.cone.material.dispose();\n    }\n\n    update() {\n      this.light.updateMatrixWorld();\n      const coneLength = this.light.distance ? this.light.distance : 1000;\n      const coneWidth = coneLength * Math.tan(this.light.angle);\n      this.cone.scale.set(coneWidth, coneWidth, coneLength);\n\n      _vector$3.setFromMatrixPosition(this.light.target.matrixWorld);\n\n      this.cone.lookAt(_vector$3);\n\n      if (this.color !== undefined) {\n        this.cone.material.color.set(this.color);\n      } else {\n        this.cone.material.color.copy(this.light.color);\n      }\n    }\n\n  }\n\n  const _vector$2 = /*@__PURE__*/new Vector3();\n\n  const _boneMatrix = /*@__PURE__*/new Matrix4();\n\n  const _matrixWorldInv = /*@__PURE__*/new Matrix4();\n\n  class SkeletonHelper extends LineSegments {\n    constructor(object) {\n      const bones = getBoneList(object);\n      const geometry = new BufferGeometry();\n      const vertices = [];\n      const colors = [];\n      const color1 = new Color(0, 0, 1);\n      const color2 = new Color(0, 1, 0);\n\n      for (let i = 0; i < bones.length; i++) {\n        const bone = bones[i];\n\n        if (bone.parent && bone.parent.isBone) {\n          vertices.push(0, 0, 0);\n          vertices.push(0, 0, 0);\n          colors.push(color1.r, color1.g, color1.b);\n          colors.push(color2.r, color2.g, color2.b);\n        }\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n      const material = new LineBasicMaterial({\n        vertexColors: true,\n        depthTest: false,\n        depthWrite: false,\n        toneMapped: false,\n        transparent: true\n      });\n      super(geometry, material);\n      this.type = 'SkeletonHelper';\n      this.isSkeletonHelper = true;\n      this.root = object;\n      this.bones = bones;\n      this.matrix = object.matrixWorld;\n      this.matrixAutoUpdate = false;\n    }\n\n    updateMatrixWorld(force) {\n      const bones = this.bones;\n      const geometry = this.geometry;\n      const position = geometry.getAttribute('position');\n\n      _matrixWorldInv.copy(this.root.matrixWorld).invert();\n\n      for (let i = 0, j = 0; i < bones.length; i++) {\n        const bone = bones[i];\n\n        if (bone.parent && bone.parent.isBone) {\n          _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);\n\n          _vector$2.setFromMatrixPosition(_boneMatrix);\n\n          position.setXYZ(j, _vector$2.x, _vector$2.y, _vector$2.z);\n\n          _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);\n\n          _vector$2.setFromMatrixPosition(_boneMatrix);\n\n          position.setXYZ(j + 1, _vector$2.x, _vector$2.y, _vector$2.z);\n          j += 2;\n        }\n      }\n\n      geometry.getAttribute('position').needsUpdate = true;\n      super.updateMatrixWorld(force);\n    }\n\n  }\n\n  function getBoneList(object) {\n    const boneList = [];\n\n    if (object && object.isBone) {\n      boneList.push(object);\n    }\n\n    for (let i = 0; i < object.children.length; i++) {\n      boneList.push.apply(boneList, getBoneList(object.children[i]));\n    }\n\n    return boneList;\n  }\n\n  class PointLightHelper extends Mesh {\n    constructor(light, sphereSize, color) {\n      const geometry = new SphereGeometry(sphereSize, 4, 2);\n      const material = new MeshBasicMaterial({\n        wireframe: true,\n        fog: false,\n        toneMapped: false\n      });\n      super(geometry, material);\n      this.light = light;\n      this.light.updateMatrixWorld();\n      this.color = color;\n      this.type = 'PointLightHelper';\n      this.matrix = this.light.matrixWorld;\n      this.matrixAutoUpdate = false;\n      this.update();\n      /*\n      // TODO: delete this comment?\n      const distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\n      const distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n      this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n      this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n      const d = light.distance;\n      if ( d === 0.0 ) {\n      \tthis.lightDistance.visible = false;\n      } else {\n      \tthis.lightDistance.scale.set( d, d, d );\n      }\n      this.add( this.lightDistance );\n      */\n    }\n\n    dispose() {\n      this.geometry.dispose();\n      this.material.dispose();\n    }\n\n    update() {\n      if (this.color !== undefined) {\n        this.material.color.set(this.color);\n      } else {\n        this.material.color.copy(this.light.color);\n      }\n      /*\n      const d = this.light.distance;\n      \tif ( d === 0.0 ) {\n      \t\tthis.lightDistance.visible = false;\n      \t} else {\n      \t\tthis.lightDistance.visible = true;\n      \tthis.lightDistance.scale.set( d, d, d );\n      \t}\n      */\n\n    }\n\n  }\n\n  const _vector$1 = /*@__PURE__*/new Vector3();\n\n  const _color1 = /*@__PURE__*/new Color();\n\n  const _color2 = /*@__PURE__*/new Color();\n\n  class HemisphereLightHelper extends Object3D {\n    constructor(light, size, color) {\n      super();\n      this.light = light;\n      this.light.updateMatrixWorld();\n      this.matrix = light.matrixWorld;\n      this.matrixAutoUpdate = false;\n      this.color = color;\n      const geometry = new OctahedronGeometry(size);\n      geometry.rotateY(Math.PI * 0.5);\n      this.material = new MeshBasicMaterial({\n        wireframe: true,\n        fog: false,\n        toneMapped: false\n      });\n      if (this.color === undefined) this.material.vertexColors = true;\n      const position = geometry.getAttribute('position');\n      const colors = new Float32Array(position.count * 3);\n      geometry.setAttribute('color', new BufferAttribute(colors, 3));\n      this.add(new Mesh(geometry, this.material));\n      this.update();\n    }\n\n    dispose() {\n      this.children[0].geometry.dispose();\n      this.children[0].material.dispose();\n    }\n\n    update() {\n      const mesh = this.children[0];\n\n      if (this.color !== undefined) {\n        this.material.color.set(this.color);\n      } else {\n        const colors = mesh.geometry.getAttribute('color');\n\n        _color1.copy(this.light.color);\n\n        _color2.copy(this.light.groundColor);\n\n        for (let i = 0, l = colors.count; i < l; i++) {\n          const color = i < l / 2 ? _color1 : _color2;\n          colors.setXYZ(i, color.r, color.g, color.b);\n        }\n\n        colors.needsUpdate = true;\n      }\n\n      mesh.lookAt(_vector$1.setFromMatrixPosition(this.light.matrixWorld).negate());\n    }\n\n  }\n\n  class GridHelper extends LineSegments {\n    constructor() {\n      let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      let divisions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n      let color1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0x444444;\n      let color2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0x888888;\n      color1 = new Color(color1);\n      color2 = new Color(color2);\n      const center = divisions / 2;\n      const step = size / divisions;\n      const halfSize = size / 2;\n      const vertices = [],\n            colors = [];\n\n      for (let i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {\n        vertices.push(-halfSize, 0, k, halfSize, 0, k);\n        vertices.push(k, 0, -halfSize, k, 0, halfSize);\n        const color = i === center ? color1 : color2;\n        color.toArray(colors, j);\n        j += 3;\n        color.toArray(colors, j);\n        j += 3;\n        color.toArray(colors, j);\n        j += 3;\n        color.toArray(colors, j);\n        j += 3;\n      }\n\n      const geometry = new BufferGeometry();\n      geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n      const material = new LineBasicMaterial({\n        vertexColors: true,\n        toneMapped: false\n      });\n      super(geometry, material);\n      this.type = 'GridHelper';\n    }\n\n  }\n\n  class PolarGridHelper extends LineSegments {\n    constructor() {\n      let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      let radials = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n      let circles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 8;\n      let divisions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 64;\n      let color1 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0x444444;\n      let color2 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0x888888;\n      color1 = new Color(color1);\n      color2 = new Color(color2);\n      const vertices = [];\n      const colors = []; // create the radials\n\n      for (let i = 0; i <= radials; i++) {\n        const v = i / radials * (Math.PI * 2);\n        const x = Math.sin(v) * radius;\n        const z = Math.cos(v) * radius;\n        vertices.push(0, 0, 0);\n        vertices.push(x, 0, z);\n        const color = i & 1 ? color1 : color2;\n        colors.push(color.r, color.g, color.b);\n        colors.push(color.r, color.g, color.b);\n      } // create the circles\n\n\n      for (let i = 0; i <= circles; i++) {\n        const color = i & 1 ? color1 : color2;\n        const r = radius - radius / circles * i;\n\n        for (let j = 0; j < divisions; j++) {\n          // first vertex\n          let v = j / divisions * (Math.PI * 2);\n          let x = Math.sin(v) * r;\n          let z = Math.cos(v) * r;\n          vertices.push(x, 0, z);\n          colors.push(color.r, color.g, color.b); // second vertex\n\n          v = (j + 1) / divisions * (Math.PI * 2);\n          x = Math.sin(v) * r;\n          z = Math.cos(v) * r;\n          vertices.push(x, 0, z);\n          colors.push(color.r, color.g, color.b);\n        }\n      }\n\n      const geometry = new BufferGeometry();\n      geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n      const material = new LineBasicMaterial({\n        vertexColors: true,\n        toneMapped: false\n      });\n      super(geometry, material);\n      this.type = 'PolarGridHelper';\n    }\n\n  }\n\n  const _v1 = /*@__PURE__*/new Vector3();\n\n  const _v2 = /*@__PURE__*/new Vector3();\n\n  const _v3 = /*@__PURE__*/new Vector3();\n\n  class DirectionalLightHelper extends Object3D {\n    constructor(light, size, color) {\n      super();\n      this.light = light;\n      this.light.updateMatrixWorld();\n      this.matrix = light.matrixWorld;\n      this.matrixAutoUpdate = false;\n      this.color = color;\n      if (size === undefined) size = 1;\n      let geometry = new BufferGeometry();\n      geometry.setAttribute('position', new Float32BufferAttribute([-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0], 3));\n      const material = new LineBasicMaterial({\n        fog: false,\n        toneMapped: false\n      });\n      this.lightPlane = new Line(geometry, material);\n      this.add(this.lightPlane);\n      geometry = new BufferGeometry();\n      geometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));\n      this.targetLine = new Line(geometry, material);\n      this.add(this.targetLine);\n      this.update();\n    }\n\n    dispose() {\n      this.lightPlane.geometry.dispose();\n      this.lightPlane.material.dispose();\n      this.targetLine.geometry.dispose();\n      this.targetLine.material.dispose();\n    }\n\n    update() {\n      _v1.setFromMatrixPosition(this.light.matrixWorld);\n\n      _v2.setFromMatrixPosition(this.light.target.matrixWorld);\n\n      _v3.subVectors(_v2, _v1);\n\n      this.lightPlane.lookAt(_v2);\n\n      if (this.color !== undefined) {\n        this.lightPlane.material.color.set(this.color);\n        this.targetLine.material.color.set(this.color);\n      } else {\n        this.lightPlane.material.color.copy(this.light.color);\n        this.targetLine.material.color.copy(this.light.color);\n      }\n\n      this.targetLine.lookAt(_v2);\n      this.targetLine.scale.z = _v3.length();\n    }\n\n  }\n\n  const _vector = /*@__PURE__*/new Vector3();\n\n  const _camera = /*@__PURE__*/new Camera();\n  /**\n   *\t- shows frustum, line of sight and up of the camera\n   *\t- suitable for fast updates\n   * \t- based on frustum visualization in lightgl.js shadowmap example\n   *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n   */\n\n\n  class CameraHelper extends LineSegments {\n    constructor(camera) {\n      const geometry = new BufferGeometry();\n      const material = new LineBasicMaterial({\n        color: 0xffffff,\n        vertexColors: true,\n        toneMapped: false\n      });\n      const vertices = [];\n      const colors = [];\n      const pointMap = {}; // colors\n\n      const colorFrustum = new Color(0xffaa00);\n      const colorCone = new Color(0xff0000);\n      const colorUp = new Color(0x00aaff);\n      const colorTarget = new Color(0xffffff);\n      const colorCross = new Color(0x333333); // near\n\n      addLine('n1', 'n2', colorFrustum);\n      addLine('n2', 'n4', colorFrustum);\n      addLine('n4', 'n3', colorFrustum);\n      addLine('n3', 'n1', colorFrustum); // far\n\n      addLine('f1', 'f2', colorFrustum);\n      addLine('f2', 'f4', colorFrustum);\n      addLine('f4', 'f3', colorFrustum);\n      addLine('f3', 'f1', colorFrustum); // sides\n\n      addLine('n1', 'f1', colorFrustum);\n      addLine('n2', 'f2', colorFrustum);\n      addLine('n3', 'f3', colorFrustum);\n      addLine('n4', 'f4', colorFrustum); // cone\n\n      addLine('p', 'n1', colorCone);\n      addLine('p', 'n2', colorCone);\n      addLine('p', 'n3', colorCone);\n      addLine('p', 'n4', colorCone); // up\n\n      addLine('u1', 'u2', colorUp);\n      addLine('u2', 'u3', colorUp);\n      addLine('u3', 'u1', colorUp); // target\n\n      addLine('c', 't', colorTarget);\n      addLine('p', 'c', colorCross); // cross\n\n      addLine('cn1', 'cn2', colorCross);\n      addLine('cn3', 'cn4', colorCross);\n      addLine('cf1', 'cf2', colorCross);\n      addLine('cf3', 'cf4', colorCross);\n\n      function addLine(a, b, color) {\n        addPoint(a, color);\n        addPoint(b, color);\n      }\n\n      function addPoint(id, color) {\n        vertices.push(0, 0, 0);\n        colors.push(color.r, color.g, color.b);\n\n        if (pointMap[id] === undefined) {\n          pointMap[id] = [];\n        }\n\n        pointMap[id].push(vertices.length / 3 - 1);\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n      super(geometry, material);\n      this.type = 'CameraHelper';\n      this.camera = camera;\n      if (this.camera.updateProjectionMatrix) this.camera.updateProjectionMatrix();\n      this.matrix = camera.matrixWorld;\n      this.matrixAutoUpdate = false;\n      this.pointMap = pointMap;\n      this.update();\n    }\n\n    update() {\n      const geometry = this.geometry;\n      const pointMap = this.pointMap;\n      const w = 1,\n            h = 1; // we need just camera projection matrix inverse\n      // world matrix must be identity\n\n      _camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse); // center / target\n\n\n      setPoint('c', pointMap, geometry, _camera, 0, 0, -1);\n      setPoint('t', pointMap, geometry, _camera, 0, 0, 1); // near\n\n      setPoint('n1', pointMap, geometry, _camera, -w, -h, -1);\n      setPoint('n2', pointMap, geometry, _camera, w, -h, -1);\n      setPoint('n3', pointMap, geometry, _camera, -w, h, -1);\n      setPoint('n4', pointMap, geometry, _camera, w, h, -1); // far\n\n      setPoint('f1', pointMap, geometry, _camera, -w, -h, 1);\n      setPoint('f2', pointMap, geometry, _camera, w, -h, 1);\n      setPoint('f3', pointMap, geometry, _camera, -w, h, 1);\n      setPoint('f4', pointMap, geometry, _camera, w, h, 1); // up\n\n      setPoint('u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, -1);\n      setPoint('u2', pointMap, geometry, _camera, -w * 0.7, h * 1.1, -1);\n      setPoint('u3', pointMap, geometry, _camera, 0, h * 2, -1); // cross\n\n      setPoint('cf1', pointMap, geometry, _camera, -w, 0, 1);\n      setPoint('cf2', pointMap, geometry, _camera, w, 0, 1);\n      setPoint('cf3', pointMap, geometry, _camera, 0, -h, 1);\n      setPoint('cf4', pointMap, geometry, _camera, 0, h, 1);\n      setPoint('cn1', pointMap, geometry, _camera, -w, 0, -1);\n      setPoint('cn2', pointMap, geometry, _camera, w, 0, -1);\n      setPoint('cn3', pointMap, geometry, _camera, 0, -h, -1);\n      setPoint('cn4', pointMap, geometry, _camera, 0, h, -1);\n      geometry.getAttribute('position').needsUpdate = true;\n    }\n\n    dispose() {\n      this.geometry.dispose();\n      this.material.dispose();\n    }\n\n  }\n\n  function setPoint(point, pointMap, geometry, camera, x, y, z) {\n    _vector.set(x, y, z).unproject(camera);\n\n    const points = pointMap[point];\n\n    if (points !== undefined) {\n      const position = geometry.getAttribute('position');\n\n      for (let i = 0, l = points.length; i < l; i++) {\n        position.setXYZ(points[i], _vector.x, _vector.y, _vector.z);\n      }\n    }\n  }\n\n  const _box = /*@__PURE__*/new Box3();\n\n  class BoxHelper extends LineSegments {\n    constructor(object) {\n      let color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0xffff00;\n      const indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n      const positions = new Float32Array(8 * 3);\n      const geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(indices, 1));\n      geometry.setAttribute('position', new BufferAttribute(positions, 3));\n      super(geometry, new LineBasicMaterial({\n        color: color,\n        toneMapped: false\n      }));\n      this.object = object;\n      this.type = 'BoxHelper';\n      this.matrixAutoUpdate = false;\n      this.update();\n    }\n\n    update(object) {\n      if (object !== undefined) {\n        console.warn('THREE.BoxHelper: .update() has no longer arguments.');\n      }\n\n      if (this.object !== undefined) {\n        _box.setFromObject(this.object);\n      }\n\n      if (_box.isEmpty()) return;\n      const min = _box.min;\n      const max = _box.max;\n      /*\n      \t5____4\n      1/___0/|\n      | 6__|_7\n      2/___3/\n      \t0: max.x, max.y, max.z\n      1: min.x, max.y, max.z\n      2: min.x, min.y, max.z\n      3: max.x, min.y, max.z\n      4: max.x, max.y, min.z\n      5: min.x, max.y, min.z\n      6: min.x, min.y, min.z\n      7: max.x, min.y, min.z\n      */\n\n      const position = this.geometry.attributes.position;\n      const array = position.array;\n      array[0] = max.x;\n      array[1] = max.y;\n      array[2] = max.z;\n      array[3] = min.x;\n      array[4] = max.y;\n      array[5] = max.z;\n      array[6] = min.x;\n      array[7] = min.y;\n      array[8] = max.z;\n      array[9] = max.x;\n      array[10] = min.y;\n      array[11] = max.z;\n      array[12] = max.x;\n      array[13] = max.y;\n      array[14] = min.z;\n      array[15] = min.x;\n      array[16] = max.y;\n      array[17] = min.z;\n      array[18] = min.x;\n      array[19] = min.y;\n      array[20] = min.z;\n      array[21] = max.x;\n      array[22] = min.y;\n      array[23] = min.z;\n      position.needsUpdate = true;\n      this.geometry.computeBoundingSphere();\n    }\n\n    setFromObject(object) {\n      this.object = object;\n      this.update();\n      return this;\n    }\n\n    copy(source) {\n      LineSegments.prototype.copy.call(this, source);\n      this.object = source.object;\n      return this;\n    }\n\n  }\n\n  class Box3Helper extends LineSegments {\n    constructor(box) {\n      let color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0xffff00;\n      const indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n      const positions = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1];\n      const geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(indices, 1));\n      geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n      super(geometry, new LineBasicMaterial({\n        color: color,\n        toneMapped: false\n      }));\n      this.box = box;\n      this.type = 'Box3Helper';\n      this.geometry.computeBoundingSphere();\n    }\n\n    updateMatrixWorld(force) {\n      const box = this.box;\n      if (box.isEmpty()) return;\n      box.getCenter(this.position);\n      box.getSize(this.scale);\n      this.scale.multiplyScalar(0.5);\n      super.updateMatrixWorld(force);\n    }\n\n  }\n\n  class PlaneHelper extends Line {\n    constructor(plane) {\n      let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      let hex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0xffff00;\n      const color = hex;\n      const positions = [1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0];\n      const geometry = new BufferGeometry();\n      geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n      geometry.computeBoundingSphere();\n      super(geometry, new LineBasicMaterial({\n        color: color,\n        toneMapped: false\n      }));\n      this.type = 'PlaneHelper';\n      this.plane = plane;\n      this.size = size;\n      const positions2 = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1];\n      const geometry2 = new BufferGeometry();\n      geometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));\n      geometry2.computeBoundingSphere();\n      this.add(new Mesh(geometry2, new MeshBasicMaterial({\n        color: color,\n        opacity: 0.2,\n        transparent: true,\n        depthWrite: false,\n        toneMapped: false\n      })));\n    }\n\n    updateMatrixWorld(force) {\n      let scale = -this.plane.constant;\n      if (Math.abs(scale) < 1e-8) scale = 1e-8; // sign does not matter\n\n      this.scale.set(0.5 * this.size, 0.5 * this.size, scale);\n      this.children[0].material.side = scale < 0 ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n      this.lookAt(this.plane.normal);\n      super.updateMatrixWorld(force);\n    }\n\n  }\n\n  const _axis = /*@__PURE__*/new Vector3();\n\n  let _lineGeometry, _coneGeometry;\n\n  class ArrowHelper extends Object3D {\n    // dir is assumed to be normalized\n    constructor() {\n      let dir = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3(0, 0, 1);\n      let origin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3(0, 0, 0);\n      let length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      let color = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0xffff00;\n      let headLength = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : length * 0.2;\n      let headWidth = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : headLength * 0.2;\n      super();\n      this.type = 'ArrowHelper';\n\n      if (_lineGeometry === undefined) {\n        _lineGeometry = new BufferGeometry();\n\n        _lineGeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));\n\n        _coneGeometry = new CylinderGeometry(0, 0.5, 1, 5, 1);\n\n        _coneGeometry.translate(0, -0.5, 0);\n      }\n\n      this.position.copy(origin);\n      this.line = new Line(_lineGeometry, new LineBasicMaterial({\n        color: color,\n        toneMapped: false\n      }));\n      this.line.matrixAutoUpdate = false;\n      this.add(this.line);\n      this.cone = new Mesh(_coneGeometry, new MeshBasicMaterial({\n        color: color,\n        toneMapped: false\n      }));\n      this.cone.matrixAutoUpdate = false;\n      this.add(this.cone);\n      this.setDirection(dir);\n      this.setLength(length, headLength, headWidth);\n    }\n\n    setDirection(dir) {\n      // dir is assumed to be normalized\n      if (dir.y > 0.99999) {\n        this.quaternion.set(0, 0, 0, 1);\n      } else if (dir.y < -0.99999) {\n        this.quaternion.set(1, 0, 0, 0);\n      } else {\n        _axis.set(dir.z, 0, -dir.x).normalize();\n\n        const radians = Math.acos(dir.y);\n        this.quaternion.setFromAxisAngle(_axis, radians);\n      }\n    }\n\n    setLength(length) {\n      let headLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : length * 0.2;\n      let headWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : headLength * 0.2;\n      this.line.scale.set(1, Math.max(0.0001, length - headLength), 1); // see #17458\n\n      this.line.updateMatrix();\n      this.cone.scale.set(headWidth, headLength, headWidth);\n      this.cone.position.y = length;\n      this.cone.updateMatrix();\n    }\n\n    setColor(color) {\n      this.line.material.color.set(color);\n      this.cone.material.color.set(color);\n    }\n\n    copy(source) {\n      super.copy(source, false);\n      this.line.copy(source.line);\n      this.cone.copy(source.cone);\n      return this;\n    }\n\n  }\n\n  class AxesHelper extends LineSegments {\n    constructor() {\n      let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      const vertices = [0, 0, 0, size, 0, 0, 0, 0, 0, 0, size, 0, 0, 0, 0, 0, 0, size];\n      const colors = [1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1];\n      const geometry = new BufferGeometry();\n      geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n      const material = new LineBasicMaterial({\n        vertexColors: true,\n        toneMapped: false\n      });\n      super(geometry, material);\n      this.type = 'AxesHelper';\n    }\n\n    setColors(xAxisColor, yAxisColor, zAxisColor) {\n      const color = new Color();\n      const array = this.geometry.attributes.color.array;\n      color.set(xAxisColor);\n      color.toArray(array, 0);\n      color.toArray(array, 3);\n      color.set(yAxisColor);\n      color.toArray(array, 6);\n      color.toArray(array, 9);\n      color.set(zAxisColor);\n      color.toArray(array, 12);\n      color.toArray(array, 15);\n      this.geometry.attributes.color.needsUpdate = true;\n      return this;\n    }\n\n    dispose() {\n      this.geometry.dispose();\n      this.material.dispose();\n    }\n\n  }\n\n  class ShapePath {\n    constructor() {\n      this.type = 'ShapePath';\n      this.color = new Color();\n      this.subPaths = [];\n      this.currentPath = null;\n    }\n\n    moveTo(x, y) {\n      this.currentPath = new Path();\n      this.subPaths.push(this.currentPath);\n      this.currentPath.moveTo(x, y);\n      return this;\n    }\n\n    lineTo(x, y) {\n      this.currentPath.lineTo(x, y);\n      return this;\n    }\n\n    quadraticCurveTo(aCPx, aCPy, aX, aY) {\n      this.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);\n      return this;\n    }\n\n    bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n      this.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);\n      return this;\n    }\n\n    splineThru(pts) {\n      this.currentPath.splineThru(pts);\n      return this;\n    }\n\n    toShapes(isCCW, noHoles) {\n      function toShapesNoHoles(inSubpaths) {\n        const shapes = [];\n\n        for (let i = 0, l = inSubpaths.length; i < l; i++) {\n          const tmpPath = inSubpaths[i];\n          const tmpShape = new Shape();\n          tmpShape.curves = tmpPath.curves;\n          shapes.push(tmpShape);\n        }\n\n        return shapes;\n      }\n\n      function isPointInsidePolygon(inPt, inPolygon) {\n        const polyLen = inPolygon.length; // inPt on polygon contour => immediate success\t\tor\n        // toggling of inside/outside at every single! intersection point of an edge\n        //\twith the horizontal line through inPt, left of inPt\n        //\tnot counting lowerY endpoints of edges and whole edges on that line\n\n        let inside = false;\n\n        for (let p = polyLen - 1, q = 0; q < polyLen; p = q++) {\n          let edgeLowPt = inPolygon[p];\n          let edgeHighPt = inPolygon[q];\n          let edgeDx = edgeHighPt.x - edgeLowPt.x;\n          let edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n          if (Math.abs(edgeDy) > Number.EPSILON) {\n            // not parallel\n            if (edgeDy < 0) {\n              edgeLowPt = inPolygon[q];\n              edgeDx = -edgeDx;\n              edgeHighPt = inPolygon[p];\n              edgeDy = -edgeDy;\n            }\n\n            if (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;\n\n            if (inPt.y === edgeLowPt.y) {\n              if (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?\n              // continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n            } else {\n              const perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);\n              if (perpEdge === 0) return true; // inPt is on contour ?\n\n              if (perpEdge < 0) continue;\n              inside = !inside; // true intersection left of inPt\n            }\n          } else {\n            // parallel or collinear\n            if (inPt.y !== edgeLowPt.y) continue; // parallel\n            // edge lies on the same horizontal line as inPt\n\n            if (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true; // inPt: Point on contour !\n            // continue;\n          }\n        }\n\n        return inside;\n      }\n\n      const isClockWise = ShapeUtils.isClockWise;\n      const subPaths = this.subPaths;\n      if (subPaths.length === 0) return [];\n      if (noHoles === true) return toShapesNoHoles(subPaths);\n      let solid, tmpPath, tmpShape;\n      const shapes = [];\n\n      if (subPaths.length === 1) {\n        tmpPath = subPaths[0];\n        tmpShape = new Shape();\n        tmpShape.curves = tmpPath.curves;\n        shapes.push(tmpShape);\n        return shapes;\n      }\n\n      let holesFirst = !isClockWise(subPaths[0].getPoints());\n      holesFirst = isCCW ? !holesFirst : holesFirst; // console.log(\"Holes first\", holesFirst);\n\n      const betterShapeHoles = [];\n      const newShapes = [];\n      let newShapeHoles = [];\n      let mainIdx = 0;\n      let tmpPoints;\n      newShapes[mainIdx] = undefined;\n      newShapeHoles[mainIdx] = [];\n\n      for (let i = 0, l = subPaths.length; i < l; i++) {\n        tmpPath = subPaths[i];\n        tmpPoints = tmpPath.getPoints();\n        solid = isClockWise(tmpPoints);\n        solid = isCCW ? !solid : solid;\n\n        if (solid) {\n          if (!holesFirst && newShapes[mainIdx]) mainIdx++;\n          newShapes[mainIdx] = {\n            s: new Shape(),\n            p: tmpPoints\n          };\n          newShapes[mainIdx].s.curves = tmpPath.curves;\n          if (holesFirst) mainIdx++;\n          newShapeHoles[mainIdx] = []; //console.log('cw', i);\n        } else {\n          newShapeHoles[mainIdx].push({\n            h: tmpPath,\n            p: tmpPoints[0]\n          }); //console.log('ccw', i);\n        }\n      } // only Holes? -> probably all Shapes with wrong orientation\n\n\n      if (!newShapes[0]) return toShapesNoHoles(subPaths);\n\n      if (newShapes.length > 1) {\n        let ambiguous = false;\n        const toChange = [];\n\n        for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n          betterShapeHoles[sIdx] = [];\n        }\n\n        for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n          const sho = newShapeHoles[sIdx];\n\n          for (let hIdx = 0; hIdx < sho.length; hIdx++) {\n            const ho = sho[hIdx];\n            let hole_unassigned = true;\n\n            for (let s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {\n              if (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {\n                if (sIdx !== s2Idx) toChange.push({\n                  froms: sIdx,\n                  tos: s2Idx,\n                  hole: hIdx\n                });\n\n                if (hole_unassigned) {\n                  hole_unassigned = false;\n                  betterShapeHoles[s2Idx].push(ho);\n                } else {\n                  ambiguous = true;\n                }\n              }\n            }\n\n            if (hole_unassigned) {\n              betterShapeHoles[sIdx].push(ho);\n            }\n          }\n        } // console.log(\"ambiguous: \", ambiguous);\n\n\n        if (toChange.length > 0) {\n          // console.log(\"to change: \", toChange);\n          if (!ambiguous) newShapeHoles = betterShapeHoles;\n        }\n      }\n\n      let tmpHoles;\n\n      for (let i = 0, il = newShapes.length; i < il; i++) {\n        tmpShape = newShapes[i].s;\n        shapes.push(tmpShape);\n        tmpHoles = newShapeHoles[i];\n\n        for (let j = 0, jl = tmpHoles.length; j < jl; j++) {\n          tmpShape.holes.push(tmpHoles[j].h);\n        }\n      } //console.log(\"shape\", shapes);\n\n\n      return shapes;\n    }\n\n  }\n\n  const _floatView = new Float32Array(1);\n\n  const _int32View = new Int32Array(_floatView.buffer);\n\n  class DataUtils {\n    // Converts float32 to float16 (stored as uint16 value).\n    static toHalfFloat(val) {\n      if (val > 65504) {\n        console.warn('THREE.DataUtils.toHalfFloat(): value exceeds 65504.');\n        val = 65504; // maximum representable value in float16\n      } // Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410\n\n      /* This method is faster than the OpenEXR implementation (very often\n      * used, eg. in Ogre), with the additional benefit of rounding, inspired\n      * by James Tursa?s half-precision code. */\n\n\n      _floatView[0] = val;\n      const x = _int32View[0];\n      let bits = x >> 16 & 0x8000;\n      /* Get the sign */\n\n      let m = x >> 12 & 0x07ff;\n      /* Keep one extra bit for rounding */\n\n      const e = x >> 23 & 0xff;\n      /* Using int is faster here */\n\n      /* If zero, or denormal, or exponent underflows too much for a denormal\n      \t* half, return signed zero. */\n\n      if (e < 103) return bits;\n      /* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n\n      if (e > 142) {\n        bits |= 0x7c00;\n        /* If exponent was 0xff and one mantissa bit was set, it means NaN,\n        \t\t\t* not Inf, so make sure we set one mantissa bit too. */\n\n        bits |= (e == 255 ? 0 : 1) && x & 0x007fffff;\n        return bits;\n      }\n      /* If exponent underflows but not too much, return a denormal */\n\n\n      if (e < 113) {\n        m |= 0x0800;\n        /* Extra rounding may overflow and set mantissa to 0 and exponent\n        \t* to 1, which is OK. */\n\n        bits |= (m >> 114 - e) + (m >> 113 - e & 1);\n        return bits;\n      }\n\n      bits |= e - 112 << 10 | m >> 1;\n      /* Extra rounding. An overflow will set mantissa to 0 and increment\n      \t* the exponent, which is OK. */\n\n      bits += m & 1;\n      return bits;\n    }\n\n  }\n\n  const LineStrip = 0;\n  const LinePieces = 1;\n  const NoColors = 0;\n  const FaceColors = 1;\n  const VertexColors = 2;\n\n  function MeshFaceMaterial(materials) {\n    console.warn('THREE.MeshFaceMaterial has been removed. Use an Array instead.');\n    return materials;\n  }\n\n  function MultiMaterial() {\n    let materials = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    console.warn('THREE.MultiMaterial has been removed. Use an Array instead.');\n    materials.isMultiMaterial = true;\n    materials.materials = materials;\n\n    materials.clone = function () {\n      return materials.slice();\n    };\n\n    return materials;\n  }\n\n  function PointCloud(geometry, material) {\n    console.warn('THREE.PointCloud has been renamed to THREE.Points.');\n    return new Points(geometry, material);\n  }\n\n  function Particle(material) {\n    console.warn('THREE.Particle has been renamed to THREE.Sprite.');\n    return new Sprite(material);\n  }\n\n  function ParticleSystem(geometry, material) {\n    console.warn('THREE.ParticleSystem has been renamed to THREE.Points.');\n    return new Points(geometry, material);\n  }\n\n  function PointCloudMaterial(parameters) {\n    console.warn('THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.');\n    return new PointsMaterial(parameters);\n  }\n\n  function ParticleBasicMaterial(parameters) {\n    console.warn('THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.');\n    return new PointsMaterial(parameters);\n  }\n\n  function ParticleSystemMaterial(parameters) {\n    console.warn('THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.');\n    return new PointsMaterial(parameters);\n  }\n\n  function Vertex(x, y, z) {\n    console.warn('THREE.Vertex has been removed. Use THREE.Vector3 instead.');\n    return new Vector3(x, y, z);\n  } //\n\n\n  function DynamicBufferAttribute(array, itemSize) {\n    console.warn('THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.');\n    return new BufferAttribute(array, itemSize).setUsage(DynamicDrawUsage);\n  }\n\n  function Int8Attribute(array, itemSize) {\n    console.warn('THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.');\n    return new Int8BufferAttribute(array, itemSize);\n  }\n\n  function Uint8Attribute(array, itemSize) {\n    console.warn('THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.');\n    return new Uint8BufferAttribute(array, itemSize);\n  }\n\n  function Uint8ClampedAttribute(array, itemSize) {\n    console.warn('THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.');\n    return new Uint8ClampedBufferAttribute(array, itemSize);\n  }\n\n  function Int16Attribute(array, itemSize) {\n    console.warn('THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.');\n    return new Int16BufferAttribute(array, itemSize);\n  }\n\n  function Uint16Attribute(array, itemSize) {\n    console.warn('THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.');\n    return new Uint16BufferAttribute(array, itemSize);\n  }\n\n  function Int32Attribute(array, itemSize) {\n    console.warn('THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.');\n    return new Int32BufferAttribute(array, itemSize);\n  }\n\n  function Uint32Attribute(array, itemSize) {\n    console.warn('THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.');\n    return new Uint32BufferAttribute(array, itemSize);\n  }\n\n  function Float32Attribute(array, itemSize) {\n    console.warn('THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.');\n    return new Float32BufferAttribute(array, itemSize);\n  }\n\n  function Float64Attribute(array, itemSize) {\n    console.warn('THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.');\n    return new Float64BufferAttribute(array, itemSize);\n  } //\n\n\n  Curve.create = function (construct, getPoint) {\n    console.log('THREE.Curve.create() has been deprecated');\n    construct.prototype = Object.create(Curve.prototype);\n    construct.prototype.constructor = construct;\n    construct.prototype.getPoint = getPoint;\n    return construct;\n  }; //\n\n\n  Path.prototype.fromPoints = function (points) {\n    console.warn('THREE.Path: .fromPoints() has been renamed to .setFromPoints().');\n    return this.setFromPoints(points);\n  }; //\n\n\n  function AxisHelper(size) {\n    console.warn('THREE.AxisHelper has been renamed to THREE.AxesHelper.');\n    return new AxesHelper(size);\n  }\n\n  function BoundingBoxHelper(object, color) {\n    console.warn('THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.');\n    return new BoxHelper(object, color);\n  }\n\n  function EdgesHelper(object, hex) {\n    console.warn('THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.');\n    return new LineSegments(new EdgesGeometry(object.geometry), new LineBasicMaterial({\n      color: hex !== undefined ? hex : 0xffffff\n    }));\n  }\n\n  GridHelper.prototype.setColors = function () {\n    console.error('THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.');\n  };\n\n  SkeletonHelper.prototype.update = function () {\n    console.error('THREE.SkeletonHelper: update() no longer needs to be called.');\n  };\n\n  function WireframeHelper(object, hex) {\n    console.warn('THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.');\n    return new LineSegments(new WireframeGeometry(object.geometry), new LineBasicMaterial({\n      color: hex !== undefined ? hex : 0xffffff\n    }));\n  } //\n\n\n  Loader.prototype.extractUrlBase = function (url) {\n    console.warn('THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.');\n    return LoaderUtils.extractUrlBase(url);\n  };\n\n  Loader.Handlers = {\n    add: function () {\n      console.error('THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.');\n    },\n    get: function () {\n      console.error('THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.');\n    }\n  };\n\n  function XHRLoader(manager) {\n    console.warn('THREE.XHRLoader has been renamed to THREE.FileLoader.');\n    return new FileLoader(manager);\n  }\n\n  function BinaryTextureLoader(manager) {\n    console.warn('THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.');\n    return new DataTextureLoader(manager);\n  } //\n\n\n  Box2.prototype.center = function (optionalTarget) {\n    console.warn('THREE.Box2: .center() has been renamed to .getCenter().');\n    return this.getCenter(optionalTarget);\n  };\n\n  Box2.prototype.empty = function () {\n    console.warn('THREE.Box2: .empty() has been renamed to .isEmpty().');\n    return this.isEmpty();\n  };\n\n  Box2.prototype.isIntersectionBox = function (box) {\n    console.warn('THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().');\n    return this.intersectsBox(box);\n  };\n\n  Box2.prototype.size = function (optionalTarget) {\n    console.warn('THREE.Box2: .size() has been renamed to .getSize().');\n    return this.getSize(optionalTarget);\n  }; //\n\n\n  Box3.prototype.center = function (optionalTarget) {\n    console.warn('THREE.Box3: .center() has been renamed to .getCenter().');\n    return this.getCenter(optionalTarget);\n  };\n\n  Box3.prototype.empty = function () {\n    console.warn('THREE.Box3: .empty() has been renamed to .isEmpty().');\n    return this.isEmpty();\n  };\n\n  Box3.prototype.isIntersectionBox = function (box) {\n    console.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().');\n    return this.intersectsBox(box);\n  };\n\n  Box3.prototype.isIntersectionSphere = function (sphere) {\n    console.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n    return this.intersectsSphere(sphere);\n  };\n\n  Box3.prototype.size = function (optionalTarget) {\n    console.warn('THREE.Box3: .size() has been renamed to .getSize().');\n    return this.getSize(optionalTarget);\n  }; //\n\n\n  Sphere.prototype.empty = function () {\n    console.warn('THREE.Sphere: .empty() has been renamed to .isEmpty().');\n    return this.isEmpty();\n  }; //\n\n\n  Frustum.prototype.setFromMatrix = function (m) {\n    console.warn('THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().');\n    return this.setFromProjectionMatrix(m);\n  }; //\n\n\n  Line3.prototype.center = function (optionalTarget) {\n    console.warn('THREE.Line3: .center() has been renamed to .getCenter().');\n    return this.getCenter(optionalTarget);\n  }; //\n\n\n  Matrix3.prototype.flattenToArrayOffset = function (array, offset) {\n    console.warn('THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');\n    return this.toArray(array, offset);\n  };\n\n  Matrix3.prototype.multiplyVector3 = function (vector) {\n    console.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.');\n    return vector.applyMatrix3(this);\n  };\n\n  Matrix3.prototype.multiplyVector3Array = function () {\n    console.error('THREE.Matrix3: .multiplyVector3Array() has been removed.');\n  };\n\n  Matrix3.prototype.applyToBufferAttribute = function (attribute) {\n    console.warn('THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.');\n    return attribute.applyMatrix3(this);\n  };\n\n  Matrix3.prototype.applyToVector3Array = function () {\n    console.error('THREE.Matrix3: .applyToVector3Array() has been removed.');\n  };\n\n  Matrix3.prototype.getInverse = function (matrix) {\n    console.warn('THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');\n    return this.copy(matrix).invert();\n  }; //\n\n\n  Matrix4.prototype.extractPosition = function (m) {\n    console.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');\n    return this.copyPosition(m);\n  };\n\n  Matrix4.prototype.flattenToArrayOffset = function (array, offset) {\n    console.warn('THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');\n    return this.toArray(array, offset);\n  };\n\n  Matrix4.prototype.getPosition = function () {\n    console.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.');\n    return new Vector3().setFromMatrixColumn(this, 3);\n  };\n\n  Matrix4.prototype.setRotationFromQuaternion = function (q) {\n    console.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().');\n    return this.makeRotationFromQuaternion(q);\n  };\n\n  Matrix4.prototype.multiplyToArray = function () {\n    console.warn('THREE.Matrix4: .multiplyToArray() has been removed.');\n  };\n\n  Matrix4.prototype.multiplyVector3 = function (vector) {\n    console.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n    return vector.applyMatrix4(this);\n  };\n\n  Matrix4.prototype.multiplyVector4 = function (vector) {\n    console.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n    return vector.applyMatrix4(this);\n  };\n\n  Matrix4.prototype.multiplyVector3Array = function () {\n    console.error('THREE.Matrix4: .multiplyVector3Array() has been removed.');\n  };\n\n  Matrix4.prototype.rotateAxis = function (v) {\n    console.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.');\n    v.transformDirection(this);\n  };\n\n  Matrix4.prototype.crossVector = function (vector) {\n    console.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n    return vector.applyMatrix4(this);\n  };\n\n  Matrix4.prototype.translate = function () {\n    console.error('THREE.Matrix4: .translate() has been removed.');\n  };\n\n  Matrix4.prototype.rotateX = function () {\n    console.error('THREE.Matrix4: .rotateX() has been removed.');\n  };\n\n  Matrix4.prototype.rotateY = function () {\n    console.error('THREE.Matrix4: .rotateY() has been removed.');\n  };\n\n  Matrix4.prototype.rotateZ = function () {\n    console.error('THREE.Matrix4: .rotateZ() has been removed.');\n  };\n\n  Matrix4.prototype.rotateByAxis = function () {\n    console.error('THREE.Matrix4: .rotateByAxis() has been removed.');\n  };\n\n  Matrix4.prototype.applyToBufferAttribute = function (attribute) {\n    console.warn('THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.');\n    return attribute.applyMatrix4(this);\n  };\n\n  Matrix4.prototype.applyToVector3Array = function () {\n    console.error('THREE.Matrix4: .applyToVector3Array() has been removed.');\n  };\n\n  Matrix4.prototype.makeFrustum = function (left, right, bottom, top, near, far) {\n    console.warn('THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.');\n    return this.makePerspective(left, right, top, bottom, near, far);\n  };\n\n  Matrix4.prototype.getInverse = function (matrix) {\n    console.warn('THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');\n    return this.copy(matrix).invert();\n  }; //\n\n\n  Plane.prototype.isIntersectionLine = function (line) {\n    console.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().');\n    return this.intersectsLine(line);\n  }; //\n\n\n  Quaternion.prototype.multiplyVector3 = function (vector) {\n    console.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.');\n    return vector.applyQuaternion(this);\n  };\n\n  Quaternion.prototype.inverse = function () {\n    console.warn('THREE.Quaternion: .inverse() has been renamed to invert().');\n    return this.invert();\n  }; //\n\n\n  Ray.prototype.isIntersectionBox = function (box) {\n    console.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().');\n    return this.intersectsBox(box);\n  };\n\n  Ray.prototype.isIntersectionPlane = function (plane) {\n    console.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().');\n    return this.intersectsPlane(plane);\n  };\n\n  Ray.prototype.isIntersectionSphere = function (sphere) {\n    console.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n    return this.intersectsSphere(sphere);\n  }; //\n\n\n  Triangle.prototype.area = function () {\n    console.warn('THREE.Triangle: .area() has been renamed to .getArea().');\n    return this.getArea();\n  };\n\n  Triangle.prototype.barycoordFromPoint = function (point, target) {\n    console.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');\n    return this.getBarycoord(point, target);\n  };\n\n  Triangle.prototype.midpoint = function (target) {\n    console.warn('THREE.Triangle: .midpoint() has been renamed to .getMidpoint().');\n    return this.getMidpoint(target);\n  };\n\n  Triangle.prototypenormal = function (target) {\n    console.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');\n    return this.getNormal(target);\n  };\n\n  Triangle.prototype.plane = function (target) {\n    console.warn('THREE.Triangle: .plane() has been renamed to .getPlane().');\n    return this.getPlane(target);\n  };\n\n  Triangle.barycoordFromPoint = function (point, a, b, c, target) {\n    console.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');\n    return Triangle.getBarycoord(point, a, b, c, target);\n  };\n\n  Triangle.normal = function (a, b, c, target) {\n    console.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');\n    return Triangle.getNormal(a, b, c, target);\n  }; //\n\n\n  Shape.prototype.extractAllPoints = function (divisions) {\n    console.warn('THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.');\n    return this.extractPoints(divisions);\n  };\n\n  Shape.prototype.extrude = function (options) {\n    console.warn('THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.');\n    return new ExtrudeGeometry(this, options);\n  };\n\n  Shape.prototype.makeGeometry = function (options) {\n    console.warn('THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.');\n    return new ShapeGeometry(this, options);\n  }; //\n\n\n  Vector2.prototype.fromAttribute = function (attribute, index, offset) {\n    console.warn('THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().');\n    return this.fromBufferAttribute(attribute, index, offset);\n  };\n\n  Vector2.prototype.distanceToManhattan = function (v) {\n    console.warn('THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');\n    return this.manhattanDistanceTo(v);\n  };\n\n  Vector2.prototype.lengthManhattan = function () {\n    console.warn('THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().');\n    return this.manhattanLength();\n  }; //\n\n\n  Vector3.prototype.setEulerFromRotationMatrix = function () {\n    console.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');\n  };\n\n  Vector3.prototype.setEulerFromQuaternion = function () {\n    console.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');\n  };\n\n  Vector3.prototype.getPositionFromMatrix = function (m) {\n    console.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');\n    return this.setFromMatrixPosition(m);\n  };\n\n  Vector3.prototype.getScaleFromMatrix = function (m) {\n    console.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');\n    return this.setFromMatrixScale(m);\n  };\n\n  Vector3.prototype.getColumnFromMatrix = function (index, matrix) {\n    console.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');\n    return this.setFromMatrixColumn(matrix, index);\n  };\n\n  Vector3.prototype.applyProjection = function (m) {\n    console.warn('THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.');\n    return this.applyMatrix4(m);\n  };\n\n  Vector3.prototype.fromAttribute = function (attribute, index, offset) {\n    console.warn('THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().');\n    return this.fromBufferAttribute(attribute, index, offset);\n  };\n\n  Vector3.prototype.distanceToManhattan = function (v) {\n    console.warn('THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');\n    return this.manhattanDistanceTo(v);\n  };\n\n  Vector3.prototype.lengthManhattan = function () {\n    console.warn('THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().');\n    return this.manhattanLength();\n  }; //\n\n\n  Vector4.prototype.fromAttribute = function (attribute, index, offset) {\n    console.warn('THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().');\n    return this.fromBufferAttribute(attribute, index, offset);\n  };\n\n  Vector4.prototype.lengthManhattan = function () {\n    console.warn('THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().');\n    return this.manhattanLength();\n  }; //\n\n\n  Object3D.prototype.getChildByName = function (name) {\n    console.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().');\n    return this.getObjectByName(name);\n  };\n\n  Object3D.prototype.renderDepth = function () {\n    console.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');\n  };\n\n  Object3D.prototype.translate = function (distance, axis) {\n    console.warn('THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.');\n    return this.translateOnAxis(axis, distance);\n  };\n\n  Object3D.prototype.getWorldRotation = function () {\n    console.error('THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.');\n  };\n\n  Object3D.prototype.applyMatrix = function (matrix) {\n    console.warn('THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().');\n    return this.applyMatrix4(matrix);\n  };\n\n  Object.defineProperties(Object3D.prototype, {\n    eulerOrder: {\n      get: function () {\n        console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n        return this.rotation.order;\n      },\n      set: function (value) {\n        console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n        this.rotation.order = value;\n      }\n    },\n    useQuaternion: {\n      get: function () {\n        console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n      },\n      set: function () {\n        console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n      }\n    }\n  });\n\n  Mesh.prototype.setDrawMode = function () {\n    console.error('THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');\n  };\n\n  Object.defineProperties(Mesh.prototype, {\n    drawMode: {\n      get: function () {\n        console.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.');\n        return TrianglesDrawMode;\n      },\n      set: function () {\n        console.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');\n      }\n    }\n  });\n\n  SkinnedMesh.prototype.initBones = function () {\n    console.error('THREE.SkinnedMesh: initBones() has been removed.');\n  }; //\n\n\n  PerspectiveCamera.prototype.setLens = function (focalLength, filmGauge) {\n    console.warn('THREE.PerspectiveCamera.setLens is deprecated. ' + 'Use .setFocalLength and .filmGauge for a photographic setup.');\n    if (filmGauge !== undefined) this.filmGauge = filmGauge;\n    this.setFocalLength(focalLength);\n  }; //\n\n\n  Object.defineProperties(Light.prototype, {\n    onlyShadow: {\n      set: function () {\n        console.warn('THREE.Light: .onlyShadow has been removed.');\n      }\n    },\n    shadowCameraFov: {\n      set: function (value) {\n        console.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.');\n        this.shadow.camera.fov = value;\n      }\n    },\n    shadowCameraLeft: {\n      set: function (value) {\n        console.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.');\n        this.shadow.camera.left = value;\n      }\n    },\n    shadowCameraRight: {\n      set: function (value) {\n        console.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.');\n        this.shadow.camera.right = value;\n      }\n    },\n    shadowCameraTop: {\n      set: function (value) {\n        console.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.');\n        this.shadow.camera.top = value;\n      }\n    },\n    shadowCameraBottom: {\n      set: function (value) {\n        console.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.');\n        this.shadow.camera.bottom = value;\n      }\n    },\n    shadowCameraNear: {\n      set: function (value) {\n        console.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.');\n        this.shadow.camera.near = value;\n      }\n    },\n    shadowCameraFar: {\n      set: function (value) {\n        console.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.');\n        this.shadow.camera.far = value;\n      }\n    },\n    shadowCameraVisible: {\n      set: function () {\n        console.warn('THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.');\n      }\n    },\n    shadowBias: {\n      set: function (value) {\n        console.warn('THREE.Light: .shadowBias is now .shadow.bias.');\n        this.shadow.bias = value;\n      }\n    },\n    shadowDarkness: {\n      set: function () {\n        console.warn('THREE.Light: .shadowDarkness has been removed.');\n      }\n    },\n    shadowMapWidth: {\n      set: function (value) {\n        console.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.');\n        this.shadow.mapSize.width = value;\n      }\n    },\n    shadowMapHeight: {\n      set: function (value) {\n        console.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.');\n        this.shadow.mapSize.height = value;\n      }\n    }\n  }); //\n\n  Object.defineProperties(BufferAttribute.prototype, {\n    length: {\n      get: function () {\n        console.warn('THREE.BufferAttribute: .length has been deprecated. Use .count instead.');\n        return this.array.length;\n      }\n    },\n    dynamic: {\n      get: function () {\n        console.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');\n        return this.usage === DynamicDrawUsage;\n      },\n      set: function () {\n        console.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');\n        this.setUsage(DynamicDrawUsage);\n      }\n    }\n  });\n\n  BufferAttribute.prototype.setDynamic = function (value) {\n    console.warn('THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.');\n    this.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);\n    return this;\n  };\n\n  BufferAttribute.prototype.copyIndicesArray = function () {\n    console.error('THREE.BufferAttribute: .copyIndicesArray() has been removed.');\n  }, BufferAttribute.prototype.setArray = function () {\n    console.error('THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');\n  }; //\n\n  BufferGeometry.prototype.addIndex = function (index) {\n    console.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().');\n    this.setIndex(index);\n  };\n\n  BufferGeometry.prototype.addAttribute = function (name, attribute) {\n    console.warn('THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().');\n\n    if (!(attribute && attribute.isBufferAttribute) && !(attribute && attribute.isInterleavedBufferAttribute)) {\n      console.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');\n      return this.setAttribute(name, new BufferAttribute(arguments[1], arguments[2]));\n    }\n\n    if (name === 'index') {\n      console.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');\n      this.setIndex(attribute);\n      return this;\n    }\n\n    return this.setAttribute(name, attribute);\n  };\n\n  BufferGeometry.prototype.addDrawCall = function (start, count, indexOffset) {\n    if (indexOffset !== undefined) {\n      console.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.');\n    }\n\n    console.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().');\n    this.addGroup(start, count);\n  };\n\n  BufferGeometry.prototype.clearDrawCalls = function () {\n    console.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().');\n    this.clearGroups();\n  };\n\n  BufferGeometry.prototype.computeOffsets = function () {\n    console.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');\n  };\n\n  BufferGeometry.prototype.removeAttribute = function (name) {\n    console.warn('THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().');\n    return this.deleteAttribute(name);\n  };\n\n  BufferGeometry.prototype.applyMatrix = function (matrix) {\n    console.warn('THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().');\n    return this.applyMatrix4(matrix);\n  };\n\n  Object.defineProperties(BufferGeometry.prototype, {\n    drawcalls: {\n      get: function () {\n        console.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.');\n        return this.groups;\n      }\n    },\n    offsets: {\n      get: function () {\n        console.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.');\n        return this.groups;\n      }\n    }\n  });\n\n  InterleavedBuffer.prototype.setDynamic = function (value) {\n    console.warn('THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.');\n    this.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);\n    return this;\n  };\n\n  InterleavedBuffer.prototype.setArray = function () {\n    console.error('THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');\n  }; //\n\n\n  ExtrudeGeometry.prototype.getArrays = function () {\n    console.error('THREE.ExtrudeGeometry: .getArrays() has been removed.');\n  };\n\n  ExtrudeGeometry.prototype.addShapeList = function () {\n    console.error('THREE.ExtrudeGeometry: .addShapeList() has been removed.');\n  };\n\n  ExtrudeGeometry.prototype.addShape = function () {\n    console.error('THREE.ExtrudeGeometry: .addShape() has been removed.');\n  }; //\n\n\n  Scene.prototype.dispose = function () {\n    console.error('THREE.Scene: .dispose() has been removed.');\n  }; //\n\n\n  Uniform.prototype.onUpdate = function () {\n    console.warn('THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.');\n    return this;\n  }; //\n\n\n  Object.defineProperties(Material.prototype, {\n    wrapAround: {\n      get: function () {\n        console.warn('THREE.Material: .wrapAround has been removed.');\n      },\n      set: function () {\n        console.warn('THREE.Material: .wrapAround has been removed.');\n      }\n    },\n    overdraw: {\n      get: function () {\n        console.warn('THREE.Material: .overdraw has been removed.');\n      },\n      set: function () {\n        console.warn('THREE.Material: .overdraw has been removed.');\n      }\n    },\n    wrapRGB: {\n      get: function () {\n        console.warn('THREE.Material: .wrapRGB has been removed.');\n        return new Color();\n      }\n    },\n    shading: {\n      get: function () {\n        console.error('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n      },\n      set: function (value) {\n        console.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n        this.flatShading = value === FlatShading;\n      }\n    },\n    stencilMask: {\n      get: function () {\n        console.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');\n        return this.stencilFuncMask;\n      },\n      set: function (value) {\n        console.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');\n        this.stencilFuncMask = value;\n      }\n    },\n    vertexTangents: {\n      get: function () {\n        console.warn('THREE.' + this.type + ': .vertexTangents has been removed.');\n      },\n      set: function () {\n        console.warn('THREE.' + this.type + ': .vertexTangents has been removed.');\n      }\n    }\n  });\n  Object.defineProperties(ShaderMaterial.prototype, {\n    derivatives: {\n      get: function () {\n        console.warn('THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n        return this.extensions.derivatives;\n      },\n      set: function (value) {\n        console.warn('THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n        this.extensions.derivatives = value;\n      }\n    }\n  }); //\n\n  WebGLRenderer.prototype.clearTarget = function (renderTarget, color, depth, stencil) {\n    console.warn('THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.');\n    this.setRenderTarget(renderTarget);\n    this.clear(color, depth, stencil);\n  };\n\n  WebGLRenderer.prototype.animate = function (callback) {\n    console.warn('THREE.WebGLRenderer: .animate() is now .setAnimationLoop().');\n    this.setAnimationLoop(callback);\n  };\n\n  WebGLRenderer.prototype.getCurrentRenderTarget = function () {\n    console.warn('THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().');\n    return this.getRenderTarget();\n  };\n\n  WebGLRenderer.prototype.getMaxAnisotropy = function () {\n    console.warn('THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().');\n    return this.capabilities.getMaxAnisotropy();\n  };\n\n  WebGLRenderer.prototype.getPrecision = function () {\n    console.warn('THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.');\n    return this.capabilities.precision;\n  };\n\n  WebGLRenderer.prototype.resetGLState = function () {\n    console.warn('THREE.WebGLRenderer: .resetGLState() is now .state.reset().');\n    return this.state.reset();\n  };\n\n  WebGLRenderer.prototype.supportsFloatTextures = function () {\n    console.warn('THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).');\n    return this.extensions.get('OES_texture_float');\n  };\n\n  WebGLRenderer.prototype.supportsHalfFloatTextures = function () {\n    console.warn('THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).');\n    return this.extensions.get('OES_texture_half_float');\n  };\n\n  WebGLRenderer.prototype.supportsStandardDerivatives = function () {\n    console.warn('THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).');\n    return this.extensions.get('OES_standard_derivatives');\n  };\n\n  WebGLRenderer.prototype.supportsCompressedTextureS3TC = function () {\n    console.warn('THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).');\n    return this.extensions.get('WEBGL_compressed_texture_s3tc');\n  };\n\n  WebGLRenderer.prototype.supportsCompressedTexturePVRTC = function () {\n    console.warn('THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).');\n    return this.extensions.get('WEBGL_compressed_texture_pvrtc');\n  };\n\n  WebGLRenderer.prototype.supportsBlendMinMax = function () {\n    console.warn('THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).');\n    return this.extensions.get('EXT_blend_minmax');\n  };\n\n  WebGLRenderer.prototype.supportsVertexTextures = function () {\n    console.warn('THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.');\n    return this.capabilities.vertexTextures;\n  };\n\n  WebGLRenderer.prototype.supportsInstancedArrays = function () {\n    console.warn('THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).');\n    return this.extensions.get('ANGLE_instanced_arrays');\n  };\n\n  WebGLRenderer.prototype.enableScissorTest = function (boolean) {\n    console.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().');\n    this.setScissorTest(boolean);\n  };\n\n  WebGLRenderer.prototype.initMaterial = function () {\n    console.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');\n  };\n\n  WebGLRenderer.prototype.addPrePlugin = function () {\n    console.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');\n  };\n\n  WebGLRenderer.prototype.addPostPlugin = function () {\n    console.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');\n  };\n\n  WebGLRenderer.prototype.updateShadowMap = function () {\n    console.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');\n  };\n\n  WebGLRenderer.prototype.setFaceCulling = function () {\n    console.warn('THREE.WebGLRenderer: .setFaceCulling() has been removed.');\n  };\n\n  WebGLRenderer.prototype.allocTextureUnit = function () {\n    console.warn('THREE.WebGLRenderer: .allocTextureUnit() has been removed.');\n  };\n\n  WebGLRenderer.prototype.setTexture = function () {\n    console.warn('THREE.WebGLRenderer: .setTexture() has been removed.');\n  };\n\n  WebGLRenderer.prototype.setTexture2D = function () {\n    console.warn('THREE.WebGLRenderer: .setTexture2D() has been removed.');\n  };\n\n  WebGLRenderer.prototype.setTextureCube = function () {\n    console.warn('THREE.WebGLRenderer: .setTextureCube() has been removed.');\n  };\n\n  WebGLRenderer.prototype.getActiveMipMapLevel = function () {\n    console.warn('THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().');\n    return this.getActiveMipmapLevel();\n  };\n\n  Object.defineProperties(WebGLRenderer.prototype, {\n    shadowMapEnabled: {\n      get: function () {\n        return this.shadowMap.enabled;\n      },\n      set: function (value) {\n        console.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.');\n        this.shadowMap.enabled = value;\n      }\n    },\n    shadowMapType: {\n      get: function () {\n        return this.shadowMap.type;\n      },\n      set: function (value) {\n        console.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.');\n        this.shadowMap.type = value;\n      }\n    },\n    shadowMapCullFace: {\n      get: function () {\n        console.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');\n        return undefined;\n      },\n      set: function () {\n        console.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');\n      }\n    },\n    context: {\n      get: function () {\n        console.warn('THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.');\n        return this.getContext();\n      }\n    },\n    vr: {\n      get: function () {\n        console.warn('THREE.WebGLRenderer: .vr has been renamed to .xr');\n        return this.xr;\n      }\n    },\n    gammaInput: {\n      get: function () {\n        console.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');\n        return false;\n      },\n      set: function () {\n        console.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');\n      }\n    },\n    gammaOutput: {\n      get: function () {\n        console.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');\n        return false;\n      },\n      set: function (value) {\n        console.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');\n        this.outputEncoding = value === true ? sRGBEncoding : LinearEncoding;\n      }\n    },\n    toneMappingWhitePoint: {\n      get: function () {\n        console.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');\n        return 1.0;\n      },\n      set: function () {\n        console.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');\n      }\n    }\n  });\n  Object.defineProperties(WebGLShadowMap.prototype, {\n    cullFace: {\n      get: function () {\n        console.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');\n        return undefined;\n      },\n      set: function () {\n        console.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');\n      }\n    },\n    renderReverseSided: {\n      get: function () {\n        console.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');\n        return undefined;\n      },\n      set: function () {\n        console.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');\n      }\n    },\n    renderSingleSided: {\n      get: function () {\n        console.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');\n        return undefined;\n      },\n      set: function () {\n        console.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');\n      }\n    }\n  });\n\n  function WebGLRenderTargetCube(width, height, options) {\n    console.warn('THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).');\n    return new WebGLCubeRenderTarget(width, options);\n  } //\n\n\n  Object.defineProperties(WebGLRenderTarget.prototype, {\n    wrapS: {\n      get: function () {\n        console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n        return this.texture.wrapS;\n      },\n      set: function (value) {\n        console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n        this.texture.wrapS = value;\n      }\n    },\n    wrapT: {\n      get: function () {\n        console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n        return this.texture.wrapT;\n      },\n      set: function (value) {\n        console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n        this.texture.wrapT = value;\n      }\n    },\n    magFilter: {\n      get: function () {\n        console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n        return this.texture.magFilter;\n      },\n      set: function (value) {\n        console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n        this.texture.magFilter = value;\n      }\n    },\n    minFilter: {\n      get: function () {\n        console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n        return this.texture.minFilter;\n      },\n      set: function (value) {\n        console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n        this.texture.minFilter = value;\n      }\n    },\n    anisotropy: {\n      get: function () {\n        console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n        return this.texture.anisotropy;\n      },\n      set: function (value) {\n        console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n        this.texture.anisotropy = value;\n      }\n    },\n    offset: {\n      get: function () {\n        console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n        return this.texture.offset;\n      },\n      set: function (value) {\n        console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n        this.texture.offset = value;\n      }\n    },\n    repeat: {\n      get: function () {\n        console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n        return this.texture.repeat;\n      },\n      set: function (value) {\n        console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n        this.texture.repeat = value;\n      }\n    },\n    format: {\n      get: function () {\n        console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n        return this.texture.format;\n      },\n      set: function (value) {\n        console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n        this.texture.format = value;\n      }\n    },\n    type: {\n      get: function () {\n        console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n        return this.texture.type;\n      },\n      set: function (value) {\n        console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n        this.texture.type = value;\n      }\n    },\n    generateMipmaps: {\n      get: function () {\n        console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n        return this.texture.generateMipmaps;\n      },\n      set: function (value) {\n        console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n        this.texture.generateMipmaps = value;\n      }\n    }\n  }); //\n\n  Audio.prototype.load = function (file) {\n    console.warn('THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.');\n    const scope = this;\n    const audioLoader = new AudioLoader();\n    audioLoader.load(file, function (buffer) {\n      scope.setBuffer(buffer);\n    });\n    return this;\n  };\n\n  AudioAnalyser.prototype.getData = function () {\n    console.warn('THREE.AudioAnalyser: .getData() is now .getFrequencyData().');\n    return this.getFrequencyData();\n  }; //\n\n\n  CubeCamera.prototype.updateCubeMap = function (renderer, scene) {\n    console.warn('THREE.CubeCamera: .updateCubeMap() is now .update().');\n    return this.update(renderer, scene);\n  };\n\n  CubeCamera.prototype.clear = function (renderer, color, depth, stencil) {\n    console.warn('THREE.CubeCamera: .clear() is now .renderTarget.clear().');\n    return this.renderTarget.clear(renderer, color, depth, stencil);\n  };\n\n  ImageUtils.crossOrigin = undefined;\n\n  ImageUtils.loadTexture = function (url, mapping, onLoad, onError) {\n    console.warn('THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.');\n    const loader = new TextureLoader();\n    loader.setCrossOrigin(this.crossOrigin);\n    const texture = loader.load(url, onLoad, undefined, onError);\n    if (mapping) texture.mapping = mapping;\n    return texture;\n  };\n\n  ImageUtils.loadTextureCube = function (urls, mapping, onLoad, onError) {\n    console.warn('THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.');\n    const loader = new CubeTextureLoader();\n    loader.setCrossOrigin(this.crossOrigin);\n    const texture = loader.load(urls, onLoad, undefined, onError);\n    if (mapping) texture.mapping = mapping;\n    return texture;\n  };\n\n  ImageUtils.loadCompressedTexture = function () {\n    console.error('THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.');\n  };\n\n  ImageUtils.loadCompressedTextureCube = function () {\n    console.error('THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.');\n  }; //\n\n\n  function CanvasRenderer() {\n    console.error('THREE.CanvasRenderer has been removed');\n  } //\n\n\n  function JSONLoader() {\n    console.error('THREE.JSONLoader has been removed.');\n  } //\n\n\n  const SceneUtils = {\n    createMultiMaterialObject: function () {\n      console.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n    },\n    detach: function () {\n      console.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n    },\n    attach: function () {\n      console.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n    }\n  }; //\n\n  function LensFlare() {\n    console.error('THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js');\n  } //\n\n\n  function ParametricGeometry() {\n    console.error('THREE.ParametricGeometry has been moved to /examples/jsm/geometries/ParametricGeometry.js');\n    return new BufferGeometry();\n  }\n\n  function TextGeometry() {\n    console.error('THREE.TextGeometry has been moved to /examples/jsm/geometries/TextGeometry.js');\n    return new BufferGeometry();\n  }\n\n  function FontLoader() {\n    console.error('THREE.FontLoader has been moved to /examples/jsm/loaders/FontLoader.js');\n  }\n\n  function Font() {\n    console.error('THREE.Font has been moved to /examples/jsm/loaders/FontLoader.js');\n  }\n\n  function ImmediateRenderObject() {\n    console.error('THREE.ImmediateRenderObject has been removed.');\n  }\n\n  if (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n    /* eslint-disable no-undef */\n    __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register', {\n      detail: {\n        revision: REVISION\n      }\n    }));\n    /* eslint-enable no-undef */\n\n  }\n\n  if (typeof window !== 'undefined') {\n    if (window.__THREE__) {\n      console.warn('WARNING: Multiple instances of Three.js being imported.');\n    } else {\n      window.__THREE__ = REVISION;\n    }\n  }\n\n  exports.ACESFilmicToneMapping = ACESFilmicToneMapping;\n  exports.AddEquation = AddEquation;\n  exports.AddOperation = AddOperation;\n  exports.AdditiveAnimationBlendMode = AdditiveAnimationBlendMode;\n  exports.AdditiveBlending = AdditiveBlending;\n  exports.AlphaFormat = AlphaFormat;\n  exports.AlwaysDepth = AlwaysDepth;\n  exports.AlwaysStencilFunc = AlwaysStencilFunc;\n  exports.AmbientLight = AmbientLight;\n  exports.AmbientLightProbe = AmbientLightProbe;\n  exports.AnimationClip = AnimationClip;\n  exports.AnimationLoader = AnimationLoader;\n  exports.AnimationMixer = AnimationMixer;\n  exports.AnimationObjectGroup = AnimationObjectGroup;\n  exports.AnimationUtils = AnimationUtils;\n  exports.ArcCurve = ArcCurve;\n  exports.ArrayCamera = ArrayCamera;\n  exports.ArrowHelper = ArrowHelper;\n  exports.Audio = Audio;\n  exports.AudioAnalyser = AudioAnalyser;\n  exports.AudioContext = AudioContext;\n  exports.AudioListener = AudioListener;\n  exports.AudioLoader = AudioLoader;\n  exports.AxesHelper = AxesHelper;\n  exports.AxisHelper = AxisHelper;\n  exports.BackSide = BackSide;\n  exports.BasicDepthPacking = BasicDepthPacking;\n  exports.BasicShadowMap = BasicShadowMap;\n  exports.BinaryTextureLoader = BinaryTextureLoader;\n  exports.Bone = Bone;\n  exports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n  exports.BoundingBoxHelper = BoundingBoxHelper;\n  exports.Box2 = Box2;\n  exports.Box3 = Box3;\n  exports.Box3Helper = Box3Helper;\n  exports.BoxBufferGeometry = BoxGeometry;\n  exports.BoxGeometry = BoxGeometry;\n  exports.BoxHelper = BoxHelper;\n  exports.BufferAttribute = BufferAttribute;\n  exports.BufferGeometry = BufferGeometry;\n  exports.BufferGeometryLoader = BufferGeometryLoader;\n  exports.ByteType = ByteType;\n  exports.Cache = Cache;\n  exports.Camera = Camera;\n  exports.CameraHelper = CameraHelper;\n  exports.CanvasRenderer = CanvasRenderer;\n  exports.CanvasTexture = CanvasTexture;\n  exports.CatmullRomCurve3 = CatmullRomCurve3;\n  exports.CineonToneMapping = CineonToneMapping;\n  exports.CircleBufferGeometry = CircleGeometry;\n  exports.CircleGeometry = CircleGeometry;\n  exports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n  exports.Clock = Clock;\n  exports.Color = Color;\n  exports.ColorKeyframeTrack = ColorKeyframeTrack;\n  exports.CompressedTexture = CompressedTexture;\n  exports.CompressedTextureLoader = CompressedTextureLoader;\n  exports.ConeBufferGeometry = ConeGeometry;\n  exports.ConeGeometry = ConeGeometry;\n  exports.CubeCamera = CubeCamera;\n  exports.CubeReflectionMapping = CubeReflectionMapping;\n  exports.CubeRefractionMapping = CubeRefractionMapping;\n  exports.CubeTexture = CubeTexture;\n  exports.CubeTextureLoader = CubeTextureLoader;\n  exports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n  exports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n  exports.CubicBezierCurve = CubicBezierCurve;\n  exports.CubicBezierCurve3 = CubicBezierCurve3;\n  exports.CubicInterpolant = CubicInterpolant;\n  exports.CullFaceBack = CullFaceBack;\n  exports.CullFaceFront = CullFaceFront;\n  exports.CullFaceFrontBack = CullFaceFrontBack;\n  exports.CullFaceNone = CullFaceNone;\n  exports.Curve = Curve;\n  exports.CurvePath = CurvePath;\n  exports.CustomBlending = CustomBlending;\n  exports.CustomToneMapping = CustomToneMapping;\n  exports.CylinderBufferGeometry = CylinderGeometry;\n  exports.CylinderGeometry = CylinderGeometry;\n  exports.Cylindrical = Cylindrical;\n  exports.DataTexture = DataTexture;\n  exports.DataTexture2DArray = DataTexture2DArray;\n  exports.DataTexture3D = DataTexture3D;\n  exports.DataTextureLoader = DataTextureLoader;\n  exports.DataUtils = DataUtils;\n  exports.DecrementStencilOp = DecrementStencilOp;\n  exports.DecrementWrapStencilOp = DecrementWrapStencilOp;\n  exports.DefaultLoadingManager = DefaultLoadingManager;\n  exports.DepthFormat = DepthFormat;\n  exports.DepthStencilFormat = DepthStencilFormat;\n  exports.DepthTexture = DepthTexture;\n  exports.DirectionalLight = DirectionalLight;\n  exports.DirectionalLightHelper = DirectionalLightHelper;\n  exports.DiscreteInterpolant = DiscreteInterpolant;\n  exports.DodecahedronBufferGeometry = DodecahedronGeometry;\n  exports.DodecahedronGeometry = DodecahedronGeometry;\n  exports.DoubleSide = DoubleSide;\n  exports.DstAlphaFactor = DstAlphaFactor;\n  exports.DstColorFactor = DstColorFactor;\n  exports.DynamicBufferAttribute = DynamicBufferAttribute;\n  exports.DynamicCopyUsage = DynamicCopyUsage;\n  exports.DynamicDrawUsage = DynamicDrawUsage;\n  exports.DynamicReadUsage = DynamicReadUsage;\n  exports.EdgesGeometry = EdgesGeometry;\n  exports.EdgesHelper = EdgesHelper;\n  exports.EllipseCurve = EllipseCurve;\n  exports.EqualDepth = EqualDepth;\n  exports.EqualStencilFunc = EqualStencilFunc;\n  exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n  exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n  exports.Euler = Euler;\n  exports.EventDispatcher = EventDispatcher;\n  exports.ExtrudeBufferGeometry = ExtrudeGeometry;\n  exports.ExtrudeGeometry = ExtrudeGeometry;\n  exports.FaceColors = FaceColors;\n  exports.FileLoader = FileLoader;\n  exports.FlatShading = FlatShading;\n  exports.Float16BufferAttribute = Float16BufferAttribute;\n  exports.Float32Attribute = Float32Attribute;\n  exports.Float32BufferAttribute = Float32BufferAttribute;\n  exports.Float64Attribute = Float64Attribute;\n  exports.Float64BufferAttribute = Float64BufferAttribute;\n  exports.FloatType = FloatType;\n  exports.Fog = Fog;\n  exports.FogExp2 = FogExp2;\n  exports.Font = Font;\n  exports.FontLoader = FontLoader;\n  exports.FrontSide = FrontSide;\n  exports.Frustum = Frustum;\n  exports.GLBufferAttribute = GLBufferAttribute;\n  exports.GLSL1 = GLSL1;\n  exports.GLSL3 = GLSL3;\n  exports.GammaEncoding = GammaEncoding;\n  exports.GreaterDepth = GreaterDepth;\n  exports.GreaterEqualDepth = GreaterEqualDepth;\n  exports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;\n  exports.GreaterStencilFunc = GreaterStencilFunc;\n  exports.GridHelper = GridHelper;\n  exports.Group = Group;\n  exports.HalfFloatType = HalfFloatType;\n  exports.HemisphereLight = HemisphereLight;\n  exports.HemisphereLightHelper = HemisphereLightHelper;\n  exports.HemisphereLightProbe = HemisphereLightProbe;\n  exports.IcosahedronBufferGeometry = IcosahedronGeometry;\n  exports.IcosahedronGeometry = IcosahedronGeometry;\n  exports.ImageBitmapLoader = ImageBitmapLoader;\n  exports.ImageLoader = ImageLoader;\n  exports.ImageUtils = ImageUtils;\n  exports.ImmediateRenderObject = ImmediateRenderObject;\n  exports.IncrementStencilOp = IncrementStencilOp;\n  exports.IncrementWrapStencilOp = IncrementWrapStencilOp;\n  exports.InstancedBufferAttribute = InstancedBufferAttribute;\n  exports.InstancedBufferGeometry = InstancedBufferGeometry;\n  exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n  exports.InstancedMesh = InstancedMesh;\n  exports.Int16Attribute = Int16Attribute;\n  exports.Int16BufferAttribute = Int16BufferAttribute;\n  exports.Int32Attribute = Int32Attribute;\n  exports.Int32BufferAttribute = Int32BufferAttribute;\n  exports.Int8Attribute = Int8Attribute;\n  exports.Int8BufferAttribute = Int8BufferAttribute;\n  exports.IntType = IntType;\n  exports.InterleavedBuffer = InterleavedBuffer;\n  exports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n  exports.Interpolant = Interpolant;\n  exports.InterpolateDiscrete = InterpolateDiscrete;\n  exports.InterpolateLinear = InterpolateLinear;\n  exports.InterpolateSmooth = InterpolateSmooth;\n  exports.InvertStencilOp = InvertStencilOp;\n  exports.JSONLoader = JSONLoader;\n  exports.KeepStencilOp = KeepStencilOp;\n  exports.KeyframeTrack = KeyframeTrack;\n  exports.LOD = LOD;\n  exports.LatheBufferGeometry = LatheGeometry;\n  exports.LatheGeometry = LatheGeometry;\n  exports.Layers = Layers;\n  exports.LensFlare = LensFlare;\n  exports.LessDepth = LessDepth;\n  exports.LessEqualDepth = LessEqualDepth;\n  exports.LessEqualStencilFunc = LessEqualStencilFunc;\n  exports.LessStencilFunc = LessStencilFunc;\n  exports.Light = Light;\n  exports.LightProbe = LightProbe;\n  exports.Line = Line;\n  exports.Line3 = Line3;\n  exports.LineBasicMaterial = LineBasicMaterial;\n  exports.LineCurve = LineCurve;\n  exports.LineCurve3 = LineCurve3;\n  exports.LineDashedMaterial = LineDashedMaterial;\n  exports.LineLoop = LineLoop;\n  exports.LinePieces = LinePieces;\n  exports.LineSegments = LineSegments;\n  exports.LineStrip = LineStrip;\n  exports.LinearEncoding = LinearEncoding;\n  exports.LinearFilter = LinearFilter;\n  exports.LinearInterpolant = LinearInterpolant;\n  exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n  exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n  exports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;\n  exports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;\n  exports.LinearToneMapping = LinearToneMapping;\n  exports.Loader = Loader;\n  exports.LoaderUtils = LoaderUtils;\n  exports.LoadingManager = LoadingManager;\n  exports.LogLuvEncoding = LogLuvEncoding;\n  exports.LoopOnce = LoopOnce;\n  exports.LoopPingPong = LoopPingPong;\n  exports.LoopRepeat = LoopRepeat;\n  exports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n  exports.LuminanceFormat = LuminanceFormat;\n  exports.MOUSE = MOUSE;\n  exports.Material = Material;\n  exports.MaterialLoader = MaterialLoader;\n  exports.Math = MathUtils;\n  exports.MathUtils = MathUtils;\n  exports.Matrix3 = Matrix3;\n  exports.Matrix4 = Matrix4;\n  exports.MaxEquation = MaxEquation;\n  exports.Mesh = Mesh;\n  exports.MeshBasicMaterial = MeshBasicMaterial;\n  exports.MeshDepthMaterial = MeshDepthMaterial;\n  exports.MeshDistanceMaterial = MeshDistanceMaterial;\n  exports.MeshFaceMaterial = MeshFaceMaterial;\n  exports.MeshLambertMaterial = MeshLambertMaterial;\n  exports.MeshMatcapMaterial = MeshMatcapMaterial;\n  exports.MeshNormalMaterial = MeshNormalMaterial;\n  exports.MeshPhongMaterial = MeshPhongMaterial;\n  exports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n  exports.MeshStandardMaterial = MeshStandardMaterial;\n  exports.MeshToonMaterial = MeshToonMaterial;\n  exports.MinEquation = MinEquation;\n  exports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n  exports.MixOperation = MixOperation;\n  exports.MultiMaterial = MultiMaterial;\n  exports.MultiplyBlending = MultiplyBlending;\n  exports.MultiplyOperation = MultiplyOperation;\n  exports.NearestFilter = NearestFilter;\n  exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n  exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n  exports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;\n  exports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;\n  exports.NeverDepth = NeverDepth;\n  exports.NeverStencilFunc = NeverStencilFunc;\n  exports.NoBlending = NoBlending;\n  exports.NoColors = NoColors;\n  exports.NoToneMapping = NoToneMapping;\n  exports.NormalAnimationBlendMode = NormalAnimationBlendMode;\n  exports.NormalBlending = NormalBlending;\n  exports.NotEqualDepth = NotEqualDepth;\n  exports.NotEqualStencilFunc = NotEqualStencilFunc;\n  exports.NumberKeyframeTrack = NumberKeyframeTrack;\n  exports.Object3D = Object3D;\n  exports.ObjectLoader = ObjectLoader;\n  exports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\n  exports.OctahedronBufferGeometry = OctahedronGeometry;\n  exports.OctahedronGeometry = OctahedronGeometry;\n  exports.OneFactor = OneFactor;\n  exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n  exports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n  exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n  exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n  exports.OrthographicCamera = OrthographicCamera;\n  exports.PCFShadowMap = PCFShadowMap;\n  exports.PCFSoftShadowMap = PCFSoftShadowMap;\n  exports.PMREMGenerator = PMREMGenerator;\n  exports.ParametricGeometry = ParametricGeometry;\n  exports.Particle = Particle;\n  exports.ParticleBasicMaterial = ParticleBasicMaterial;\n  exports.ParticleSystem = ParticleSystem;\n  exports.ParticleSystemMaterial = ParticleSystemMaterial;\n  exports.Path = Path;\n  exports.PerspectiveCamera = PerspectiveCamera;\n  exports.Plane = Plane;\n  exports.PlaneBufferGeometry = PlaneGeometry;\n  exports.PlaneGeometry = PlaneGeometry;\n  exports.PlaneHelper = PlaneHelper;\n  exports.PointCloud = PointCloud;\n  exports.PointCloudMaterial = PointCloudMaterial;\n  exports.PointLight = PointLight;\n  exports.PointLightHelper = PointLightHelper;\n  exports.Points = Points;\n  exports.PointsMaterial = PointsMaterial;\n  exports.PolarGridHelper = PolarGridHelper;\n  exports.PolyhedronBufferGeometry = PolyhedronGeometry;\n  exports.PolyhedronGeometry = PolyhedronGeometry;\n  exports.PositionalAudio = PositionalAudio;\n  exports.PropertyBinding = PropertyBinding;\n  exports.PropertyMixer = PropertyMixer;\n  exports.QuadraticBezierCurve = QuadraticBezierCurve;\n  exports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n  exports.Quaternion = Quaternion;\n  exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n  exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n  exports.REVISION = REVISION;\n  exports.RGBADepthPacking = RGBADepthPacking;\n  exports.RGBAFormat = RGBAFormat;\n  exports.RGBAIntegerFormat = RGBAIntegerFormat;\n  exports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\n  exports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\n  exports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\n  exports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\n  exports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\n  exports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\n  exports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\n  exports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\n  exports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\n  exports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\n  exports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\n  exports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\n  exports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\n  exports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\n  exports.RGBA_BPTC_Format = RGBA_BPTC_Format;\n  exports.RGBA_ETC2_EAC_Format = RGBA_ETC2_EAC_Format;\n  exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n  exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n  exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n  exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n  exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n  exports.RGBDEncoding = RGBDEncoding;\n  exports.RGBEEncoding = RGBEEncoding;\n  exports.RGBEFormat = RGBEFormat;\n  exports.RGBFormat = RGBFormat;\n  exports.RGBIntegerFormat = RGBIntegerFormat;\n  exports.RGBM16Encoding = RGBM16Encoding;\n  exports.RGBM7Encoding = RGBM7Encoding;\n  exports.RGB_ETC1_Format = RGB_ETC1_Format;\n  exports.RGB_ETC2_Format = RGB_ETC2_Format;\n  exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n  exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n  exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n  exports.RGFormat = RGFormat;\n  exports.RGIntegerFormat = RGIntegerFormat;\n  exports.RawShaderMaterial = RawShaderMaterial;\n  exports.Ray = Ray;\n  exports.Raycaster = Raycaster;\n  exports.RectAreaLight = RectAreaLight;\n  exports.RedFormat = RedFormat;\n  exports.RedIntegerFormat = RedIntegerFormat;\n  exports.ReinhardToneMapping = ReinhardToneMapping;\n  exports.RepeatWrapping = RepeatWrapping;\n  exports.ReplaceStencilOp = ReplaceStencilOp;\n  exports.ReverseSubtractEquation = ReverseSubtractEquation;\n  exports.RingBufferGeometry = RingGeometry;\n  exports.RingGeometry = RingGeometry;\n  exports.SRGB8_ALPHA8_ASTC_10x10_Format = SRGB8_ALPHA8_ASTC_10x10_Format;\n  exports.SRGB8_ALPHA8_ASTC_10x5_Format = SRGB8_ALPHA8_ASTC_10x5_Format;\n  exports.SRGB8_ALPHA8_ASTC_10x6_Format = SRGB8_ALPHA8_ASTC_10x6_Format;\n  exports.SRGB8_ALPHA8_ASTC_10x8_Format = SRGB8_ALPHA8_ASTC_10x8_Format;\n  exports.SRGB8_ALPHA8_ASTC_12x10_Format = SRGB8_ALPHA8_ASTC_12x10_Format;\n  exports.SRGB8_ALPHA8_ASTC_12x12_Format = SRGB8_ALPHA8_ASTC_12x12_Format;\n  exports.SRGB8_ALPHA8_ASTC_4x4_Format = SRGB8_ALPHA8_ASTC_4x4_Format;\n  exports.SRGB8_ALPHA8_ASTC_5x4_Format = SRGB8_ALPHA8_ASTC_5x4_Format;\n  exports.SRGB8_ALPHA8_ASTC_5x5_Format = SRGB8_ALPHA8_ASTC_5x5_Format;\n  exports.SRGB8_ALPHA8_ASTC_6x5_Format = SRGB8_ALPHA8_ASTC_6x5_Format;\n  exports.SRGB8_ALPHA8_ASTC_6x6_Format = SRGB8_ALPHA8_ASTC_6x6_Format;\n  exports.SRGB8_ALPHA8_ASTC_8x5_Format = SRGB8_ALPHA8_ASTC_8x5_Format;\n  exports.SRGB8_ALPHA8_ASTC_8x6_Format = SRGB8_ALPHA8_ASTC_8x6_Format;\n  exports.SRGB8_ALPHA8_ASTC_8x8_Format = SRGB8_ALPHA8_ASTC_8x8_Format;\n  exports.Scene = Scene;\n  exports.SceneUtils = SceneUtils;\n  exports.ShaderChunk = ShaderChunk;\n  exports.ShaderLib = ShaderLib;\n  exports.ShaderMaterial = ShaderMaterial;\n  exports.ShadowMaterial = ShadowMaterial;\n  exports.Shape = Shape;\n  exports.ShapeBufferGeometry = ShapeGeometry;\n  exports.ShapeGeometry = ShapeGeometry;\n  exports.ShapePath = ShapePath;\n  exports.ShapeUtils = ShapeUtils;\n  exports.ShortType = ShortType;\n  exports.Skeleton = Skeleton;\n  exports.SkeletonHelper = SkeletonHelper;\n  exports.SkinnedMesh = SkinnedMesh;\n  exports.SmoothShading = SmoothShading;\n  exports.Sphere = Sphere;\n  exports.SphereBufferGeometry = SphereGeometry;\n  exports.SphereGeometry = SphereGeometry;\n  exports.Spherical = Spherical;\n  exports.SphericalHarmonics3 = SphericalHarmonics3;\n  exports.SplineCurve = SplineCurve;\n  exports.SpotLight = SpotLight;\n  exports.SpotLightHelper = SpotLightHelper;\n  exports.Sprite = Sprite;\n  exports.SpriteMaterial = SpriteMaterial;\n  exports.SrcAlphaFactor = SrcAlphaFactor;\n  exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n  exports.SrcColorFactor = SrcColorFactor;\n  exports.StaticCopyUsage = StaticCopyUsage;\n  exports.StaticDrawUsage = StaticDrawUsage;\n  exports.StaticReadUsage = StaticReadUsage;\n  exports.StereoCamera = StereoCamera;\n  exports.StreamCopyUsage = StreamCopyUsage;\n  exports.StreamDrawUsage = StreamDrawUsage;\n  exports.StreamReadUsage = StreamReadUsage;\n  exports.StringKeyframeTrack = StringKeyframeTrack;\n  exports.SubtractEquation = SubtractEquation;\n  exports.SubtractiveBlending = SubtractiveBlending;\n  exports.TOUCH = TOUCH;\n  exports.TangentSpaceNormalMap = TangentSpaceNormalMap;\n  exports.TetrahedronBufferGeometry = TetrahedronGeometry;\n  exports.TetrahedronGeometry = TetrahedronGeometry;\n  exports.TextGeometry = TextGeometry;\n  exports.Texture = Texture;\n  exports.TextureLoader = TextureLoader;\n  exports.TorusBufferGeometry = TorusGeometry;\n  exports.TorusGeometry = TorusGeometry;\n  exports.TorusKnotBufferGeometry = TorusKnotGeometry;\n  exports.TorusKnotGeometry = TorusKnotGeometry;\n  exports.Triangle = Triangle;\n  exports.TriangleFanDrawMode = TriangleFanDrawMode;\n  exports.TriangleStripDrawMode = TriangleStripDrawMode;\n  exports.TrianglesDrawMode = TrianglesDrawMode;\n  exports.TubeBufferGeometry = TubeGeometry;\n  exports.TubeGeometry = TubeGeometry;\n  exports.UVMapping = UVMapping;\n  exports.Uint16Attribute = Uint16Attribute;\n  exports.Uint16BufferAttribute = Uint16BufferAttribute;\n  exports.Uint32Attribute = Uint32Attribute;\n  exports.Uint32BufferAttribute = Uint32BufferAttribute;\n  exports.Uint8Attribute = Uint8Attribute;\n  exports.Uint8BufferAttribute = Uint8BufferAttribute;\n  exports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n  exports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\n  exports.Uniform = Uniform;\n  exports.UniformsLib = UniformsLib;\n  exports.UniformsUtils = UniformsUtils;\n  exports.UnsignedByteType = UnsignedByteType;\n  exports.UnsignedInt248Type = UnsignedInt248Type;\n  exports.UnsignedIntType = UnsignedIntType;\n  exports.UnsignedShort4444Type = UnsignedShort4444Type;\n  exports.UnsignedShort5551Type = UnsignedShort5551Type;\n  exports.UnsignedShort565Type = UnsignedShort565Type;\n  exports.UnsignedShortType = UnsignedShortType;\n  exports.VSMShadowMap = VSMShadowMap;\n  exports.Vector2 = Vector2;\n  exports.Vector3 = Vector3;\n  exports.Vector4 = Vector4;\n  exports.VectorKeyframeTrack = VectorKeyframeTrack;\n  exports.Vertex = Vertex;\n  exports.VertexColors = VertexColors;\n  exports.VideoTexture = VideoTexture;\n  exports.WebGL1Renderer = WebGL1Renderer;\n  exports.WebGLCubeRenderTarget = WebGLCubeRenderTarget;\n  exports.WebGLMultipleRenderTargets = WebGLMultipleRenderTargets;\n  exports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;\n  exports.WebGLRenderTarget = WebGLRenderTarget;\n  exports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n  exports.WebGLRenderer = WebGLRenderer;\n  exports.WebGLUtils = WebGLUtils;\n  exports.WireframeGeometry = WireframeGeometry;\n  exports.WireframeHelper = WireframeHelper;\n  exports.WrapAroundEnding = WrapAroundEnding;\n  exports.XHRLoader = XHRLoader;\n  exports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n  exports.ZeroFactor = ZeroFactor;\n  exports.ZeroSlopeEnding = ZeroSlopeEnding;\n  exports.ZeroStencilOp = ZeroStencilOp;\n  exports.sRGBEncoding = sRGBEncoding;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"sources":["/Users/arnaudavocatgros/Documents/GitHub/AReaExplorerWebApp/node_modules/three/build/three.js"],"names":["global","factory","exports","module","define","amd","globalThis","self","THREE","REVISION","MOUSE","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","TOUCH","DOLLY_PAN","DOLLY_ROTATE","CullFaceNone","CullFaceBack","CullFaceFront","CullFaceFrontBack","BasicShadowMap","PCFShadowMap","PCFSoftShadowMap","VSMShadowMap","FrontSide","BackSide","DoubleSide","FlatShading","SmoothShading","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","CineonToneMapping","ACESFilmicToneMapping","CustomToneMapping","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipmapNearestFilter","NearestMipMapNearestFilter","NearestMipmapLinearFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipMapNearestFilter","LinearMipmapLinearFilter","LinearMipMapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedInt248Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RedFormat","RedIntegerFormat","RGFormat","RGIntegerFormat","RGBIntegerFormat","RGBAIntegerFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGBA_ETC2_EAC_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","RGBA_BPTC_Format","SRGB8_ALPHA8_ASTC_4x4_Format","SRGB8_ALPHA8_ASTC_5x4_Format","SRGB8_ALPHA8_ASTC_5x5_Format","SRGB8_ALPHA8_ASTC_6x5_Format","SRGB8_ALPHA8_ASTC_6x6_Format","SRGB8_ALPHA8_ASTC_8x5_Format","SRGB8_ALPHA8_ASTC_8x6_Format","SRGB8_ALPHA8_ASTC_8x8_Format","SRGB8_ALPHA8_ASTC_10x5_Format","SRGB8_ALPHA8_ASTC_10x6_Format","SRGB8_ALPHA8_ASTC_10x8_Format","SRGB8_ALPHA8_ASTC_10x10_Format","SRGB8_ALPHA8_ASTC_12x10_Format","SRGB8_ALPHA8_ASTC_12x12_Format","LoopOnce","LoopRepeat","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroCurvatureEnding","ZeroSlopeEnding","WrapAroundEnding","NormalAnimationBlendMode","AdditiveAnimationBlendMode","TrianglesDrawMode","TriangleStripDrawMode","TriangleFanDrawMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","TangentSpaceNormalMap","ObjectSpaceNormalMap","ZeroStencilOp","KeepStencilOp","ReplaceStencilOp","IncrementStencilOp","DecrementStencilOp","IncrementWrapStencilOp","DecrementWrapStencilOp","InvertStencilOp","NeverStencilFunc","LessStencilFunc","EqualStencilFunc","LessEqualStencilFunc","GreaterStencilFunc","NotEqualStencilFunc","GreaterEqualStencilFunc","AlwaysStencilFunc","StaticDrawUsage","DynamicDrawUsage","StreamDrawUsage","StaticReadUsage","DynamicReadUsage","StreamReadUsage","StaticCopyUsage","DynamicCopyUsage","StreamCopyUsage","GLSL1","GLSL3","EventDispatcher","addEventListener","type","listener","_listeners","undefined","listeners","indexOf","push","hasEventListener","removeEventListener","listenerArray","index","splice","dispatchEvent","event","target","array","slice","i","l","length","call","_seed","DEG2RAD","Math","PI","RAD2DEG","_lut","toString","hasRandomUUID","crypto","generateUUID","randomUUID","toUpperCase","d0","random","d1","d2","d3","uuid","clamp","value","min","max","euclideanModulo","n","m","mapLinear","x","a1","a2","b1","b2","inverseLerp","y","lerp","t","damp","lambda","dt","exp","pingpong","abs","smoothstep","smootherstep","randInt","low","high","floor","randFloat","randFloatSpread","range","seededRandom","s","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","pow","ceil","log","LN2","floorPowerOfTwo","setQuaternionFromProperEuler","q","a","b","c","order","cos","sin","c2","s2","c13","s13","c1_3","s1_3","c3_1","s3_1","set","console","warn","MathUtils","Object","freeze","__proto__","Vector2","constructor","width","height","setScalar","scalar","setX","setY","setComponent","Error","getComponent","clone","copy","v","add","w","addVectors","addScalar","addScaledVector","sub","subVectors","subScalar","multiply","multiplyScalar","divide","divideScalar","applyMatrix3","e","elements","clampScalar","minVal","maxVal","clampLength","round","roundToZero","negate","dot","cross","lengthSq","sqrt","manhattanLength","normalize","angle","atan2","distanceTo","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","alpha","lerpVectors","v1","v2","equals","fromArray","offset","toArray","fromBufferAttribute","attribute","getX","getY","rotateAround","center","Symbol","iterator","prototype","isVector2","Matrix3","arguments","error","n11","n12","n13","n21","n22","n23","n31","n32","n33","te","identity","me","extractBasis","xAxis","yAxis","zAxis","setFromMatrix3Column","setFromMatrix4","multiplyMatrices","premultiply","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","determinant","d","f","g","h","invert","t11","t12","t13","det","detInv","transpose","tmp","getNormalMatrix","matrix4","transposeIntoArray","r","setUvTransform","tx","ty","sx","sy","rotation","cx","cy","scale","rotate","theta","translate","matrix","isMatrix3","arrayMax","Infinity","TYPED_ARRAYS","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","getTypedArray","buffer","createElementNS","name","document","hashString","str","seed","h1","h2","ch","charCodeAt","imul","_canvas","ImageUtils","getDataURL","image","test","src","HTMLCanvasElement","canvas","context","getContext","ImageData","putImageData","drawImage","toDataURL","textureId","Texture","DEFAULT_IMAGE","mapping","DEFAULT_MAPPING","wrapS","wrapT","magFilter","minFilter","format","anisotropy","encoding","defineProperty","mipmaps","internalFormat","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","userData","version","onUpdate","isRenderTargetTexture","updateMatrix","source","JSON","parse","stringify","toJSON","meta","isRootObject","textures","output","metadata","generator","wrap","images","url","Array","isArray","isDataTexture","serializeImage","dispose","transformUv","uv","needsUpdate","isTexture","HTMLImageElement","ImageBitmap","data","Vector4","z","setZ","setW","applyMatrix4","setAxisAngleFromQuaternion","acos","setAxisAngleFromRotationMatrix","epsilon","epsilon2","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","yy","zz","xy","xz","yz","getZ","getW","isVector4","WebGLRenderTarget","options","depth","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","setTexture","setSize","isWebGLRenderTarget","WebGLMultipleRenderTargets","count","il","isWebGLMultipleRenderTargets","WebGLMultisampleRenderTarget","samples","isWebGLMultisampleRenderTarget","Quaternion","_x","_y","_z","_w","slerp","qa","qb","qm","slerpQuaternions","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","Number","EPSILON","len","tDir","multiplyQuaternionsFlat","_onChangeCallback","quaternion","setFromEuler","euler","update","isEuler","_order","c1","c3","s1","s3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","trace","setFromUnitVectors","vFrom","vTo","angleTo","rotateTowards","step","conjugate","p","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","u1","sqrt1u1","sqrtu1","u2","u3","_onChange","callback","isQuaternion","Vector3","multiplyVectors","applyEuler","applyQuaternion","_quaternion$4","applyAxisAngle","applyNormalMatrix","qx","qy","qz","qw","ix","iy","iz","iw","project","camera","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","denominator","projectOnPlane","planeNormal","_vector$c","reflect","normal","dz","setFromSpherical","setFromSphericalCoords","radius","phi","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","setFromMatrixColumn","sz","randomDirection","u","isVector3","Box3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","setFromPoints","points","makeEmpty","expandByPoint","setFromCenterAndSize","size","halfSize","_vector$b","setFromObject","object","expandByObject","box","isEmpty","getCenter","getSize","point","expandByVector","vector","expandByScalar","updateWorldMatrix","geometry","boundingBox","computeBoundingBox","_box$3","union","children","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","intersectsPlane","plane","constant","intersectsTriangle","triangle","_center","_extents","_v0$2","_v1$7","_v2$3","_f0","_f1","_f2","axes","satForAxes","_triangleNormal","distanceToPoint","clampedPoint","getBoundingSphere","intersect","_points","isBox3","_testAxis","v0","extents","j","p0","p1","p2","_box$2","_v1$6","_toFarthestPoint","_toPoint","Sphere","optionalCenter","maxRadiusSq","radiusSum","deltaLengthSq","getBoundingBox","getMaxScaleOnAxis","missingRadiusHalf","_vector$a","_segCenter","_segDir","_diff","_edge1","_edge2","_normal$1","Ray","origin","direction","ray","at","lookAt","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","segExtent","a01","b0","s0","sqrDist","extDet","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","backfaceCulling","DdN","sign","DdQxE2","DdE1xQ","QdN","Matrix4","n14","n24","n34","n41","n42","n43","n44","copyPosition","setFromMatrix3","makeBasis","extractRotation","scaleX","_v1$5","scaleY","scaleZ","makeRotationFromEuler","af","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","compose","_zero","_one","eye","up","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","setPosition","t14","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeScale","makeShear","yx","zx","zy","position","x2","y2","z2","wx","wy","wz","decompose","_m1$2","invSX","invSY","invSZ","makePerspective","left","right","top","bottom","near","far","makeOrthographic","isMatrix4","_matrix$1","_quaternion$3","Euler","DefaultOrder","asin","setFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","RotationOrders","Layers","mask","channel","enable","enableAll","toggle","disable","disableAll","layers","_object3DId","_v1$4","_q1","_m1$1","_target","_position$3","_scale$2","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","Object3D","parent","DefaultUp","onRotationChange","onQuaternionChange","defineProperties","configurable","enumerable","modelViewMatrix","normalMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","animations","onBeforeRender","onAfterRender","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","distance","translateX","translateY","translateZ","localToWorld","worldToLocal","isCamera","isLight","isObject3D","remove","removeFromParent","clear","attach","getObjectById","id","getObjectByProperty","getObjectByName","child","getWorldPosition","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverse","traverseVisible","traverseAncestors","updateMatrixWorld","force","updateParents","updateChildren","geometries","materials","shapes","skeletons","isInstancedMesh","instanceMatrix","instanceColor","serialize","library","element","isScene","background","isColor","environment","isMesh","isLine","isPoints","parameters","shape","isSkinnedMesh","bindMode","bindMatrix","skeleton","material","uuids","animation","extractFromCache","cache","values","key","recursive","_v0$1","_v1$3","_v2$2","_v3$1","_vab","_vac","_vbc","_vap","_vbp","_vcp","Triangle","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","getUV","p3","uv1","uv2","uv3","isFrontFacing","setFromPointsAndIndices","i0","i1","i2","setFromAttributeAndIndices","getArea","getMidpoint","getPlane","setFromCoplanarPoints","d4","vc","d5","d6","vb","va","materialId","Material","fog","blending","side","vertexColors","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaToCoverage","premultipliedAlpha","toneMapped","_alphaTest","alphaTest","onBuild","onBeforeCompile","customProgramCacheKey","setValues","newValue","flatShading","currentValue","isRoot","color","getHex","roughness","metalness","sheen","sheenColor","sheenRoughness","emissive","emissiveIntensity","specular","specularIntensity","specularColor","shininess","clearcoat","clearcoatRoughness","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","map","matcap","alphaMap","lightMap","lightMapIntensity","aoMap","aoMapIntensity","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","specularMap","specularIntensityMap","specularColorMap","envMap","combine","envMapIntensity","reflectivity","refractionRatio","gradientMap","transmission","transmissionMap","thickness","thicknessMap","attenuationDistance","attenuationColor","sizeAttenuation","linewidth","dashSize","gapSize","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","srcPlanes","dstPlanes","isMaterial","_colorKeywords","_hslA","_hslB","hue2rgb","SRGBToLinear","LinearToSRGB","Color","setRGB","setHex","setStyle","hex","setHSL","style","handleAlpha","string","parseFloat","exec","components","parseInt","charAt","setColorName","toLowerCase","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","copySRGBToLinear","copyLinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHexString","getHSL","hue","saturation","lightness","delta","getStyle","offsetHSL","addColors","color1","color2","lerpColors","lerpHSL","normalized","NAMES","MeshBasicMaterial","isMeshBasicMaterial","_vector$9","_vector2$1","BufferAttribute","itemSize","TypeError","usage","updateRange","onUploadCallback","setUsage","copyAt","index1","index2","copyArray","copyColorsArray","colors","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXY","setXYZ","setXYZW","onUpload","isBufferAttribute","Int8BufferAttribute","Uint8BufferAttribute","Uint8ClampedBufferAttribute","Int16BufferAttribute","Uint16BufferAttribute","Int32BufferAttribute","Uint32BufferAttribute","Float16BufferAttribute","isFloat16BufferAttribute","Float32BufferAttribute","Float64BufferAttribute","_id","_m1","_obj","_offset","_box$1","_boxMorphTargets","_vector$8","BufferGeometry","attributes","morphAttributes","morphTargetsRelative","groups","boundingSphere","drawRange","start","getIndex","setIndex","getAttribute","setAttribute","deleteAttribute","hasAttribute","addGroup","materialIndex","clearGroups","setDrawRange","tangent","computeBoundingSphere","morphAttributesPosition","isGLBufferAttribute","morphAttribute","isNaN","jl","computeTangents","indices","positions","normals","uvs","nVertices","tangents","tan1","tan2","vA","vB","vC","uvA","uvB","uvC","sdir","tdir","handleTriangle","isFinite","group","tmp2","n2","handleVertex","computeVertexNormals","positionAttribute","normalAttribute","pA","pB","pC","nA","nB","nC","cb","ab","normalizeNormals","merge","isBufferGeometry","attribute1","attributeArray1","attribute2","attributeArray2","attributeOffset","toNonIndexed","convertBufferAttribute","array2","isInterleavedBufferAttribute","stride","geometry2","newAttribute","morphArray","keys","hasMorphAttributes","attributeArray","assign","_inverseMatrix$2","_ray$2","_sphere$3","_vA$1","_vB$1","_vC$1","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA$1","_uvB$1","_uvC$1","_intersectionPoint","_intersectionPointWorld","Mesh","updateMorphTargets","morphTargetInfluences","morphTargetDictionary","ml","String","morphTargets","raycaster","intersects","intersection","morphPosition","groupMaterial","end","checkBufferGeometryIntersection","faceIndex","face","isGeometry","checkIntersection","morphInfluences","influence","boneTransform","BoxGeometry","widthSegments","heightSegments","depthSegments","scope","vertices","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","fromJSON","cloneUniforms","property","mergeUniforms","uniforms","merged","UniformsUtils","default_vertex","default_fragment","ShaderMaterial","defines","vertexShader","fragmentShader","lights","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","glslVersion","uniform","isShaderMaterial","Camera","PerspectiveCamera","fov","aspect","zoom","focus","view","filmGauge","filmOffset","updateProjectionMatrix","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","tan","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","enabled","offsetX","offsetY","clearViewOffset","skew","isPerspectiveCamera","CubeCamera","renderTarget","isWebGLCubeRenderTarget","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","renderer","scene","currentXrEnabled","xr","currentRenderTarget","getRenderTarget","setRenderTarget","render","CubeTexture","isCubeTexture","WebGLCubeRenderTarget","dummy","isInteger","_needsFlipEnvMap","fromEquirectangularTexture","shader","tEquirect","mesh","currentMinFilter","stencil","_vector1","_vector2","_normalMatrix","Plane","setComponents","setFromNormalAndCoplanarPoint","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","line","intersectsLine","startSign","endSign","coplanarPoint","optionalNormalMatrix","referencePoint","isPlane","_sphere$2","_vector$7","Frustum","p4","p5","planes","frustum","setFromProjectionMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsObject","intersectsSprite","sprite","negRadius","WebGLAnimation","isAnimating","animationLoop","requestId","onAnimationFrame","time","frame","requestAnimationFrame","stop","cancelAnimationFrame","setAnimationLoop","setContext","WebGLAttributes","gl","capabilities","isWebGL2","buffers","WeakMap","createBuffer","bufferType","bindBuffer","bufferData","FLOAT","HALF_FLOAT","UNSIGNED_SHORT","SHORT","UNSIGNED_INT","INT","BYTE","UNSIGNED_BYTE","bytesPerElement","BYTES_PER_ELEMENT","updateBuffer","bufferSubData","subarray","get","deleteBuffer","delete","cached","elementSize","PlaneGeometry","width_half","height_half","segment_width","segment_height","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","alphatest_pars_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","envmap_physical_pars_fragment","lights_toon_fragment","lights_toon_pars_fragment","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normal_pars_fragment","normal_pars_vertex","normal_vertex","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_pars_fragment","output_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","transmission_fragment","transmission_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","vertex$g","fragment$g","vertex$f","fragment$f","vertex$e","fragment$e","vertex$d","fragment$d","vertex$c","fragment$c","vertex$b","fragment$b","vertex$a","fragment$a","vertex$9","fragment$9","vertex$8","fragment$8","vertex$7","fragment$7","vertex$6","fragment$6","vertex$5","fragment$5","vertex$4","fragment$4","vertex$3","fragment$3","vertex$2","fragment$2","vertex$1","fragment$1","ShaderChunk","background_vert","background_frag","cube_vert","cube_frag","depth_vert","depth_frag","distanceRGBA_vert","distanceRGBA_frag","equirect_vert","equirect_frag","linedashed_vert","linedashed_frag","meshbasic_vert","meshbasic_frag","meshlambert_vert","meshlambert_frag","meshmatcap_vert","meshmatcap_frag","meshnormal_vert","meshnormal_frag","meshphong_vert","meshphong_frag","meshphysical_vert","meshphysical_frag","meshtoon_vert","meshtoon_frag","points_vert","points_frag","shadow_vert","shadow_frag","sprite_vert","sprite_frag","UniformsLib","diffuse","uvTransform","uv2Transform","specularmap","envmap","flipEnvMap","ior","maxMipLevel","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","lightProbe","directionalLights","properties","directionalLightShadows","shadowBias","shadowNormalBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","decay","spotLightShadows","spotShadowMap","spotShadowMatrix","pointLights","pointLightShadows","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","ltc_1","ltc_2","ShaderLib","basic","lambert","phong","standard","toon","dashed","totalSize","t2D","cube","equirect","distanceRGBA","referencePosition","nearDistance","farDistance","shadow","physical","sheenColorMap","sheenRoughnessMap","transmissionSamplerSize","transmissionSamplerMap","WebGLBackground","cubemaps","state","objects","clearColor","clearAlpha","planeMesh","boxMesh","currentBackground","currentBackgroundVersion","currentTonemapping","renderList","forceClear","session","getSession","environmentBlendMode","setClear","autoClear","autoClearColor","autoClearDepth","autoClearStencil","toneMapping","unshift","getClearColor","setClearColor","getClearAlpha","setClearAlpha","WebGLBindingStates","maxVertexAttributes","MAX_VERTEX_ATTRIBS","extension","vaoAvailable","bindingStates","defaultState","createBindingState","currentState","setup","program","updateBuffers","getBindingState","bindVertexArrayObject","saveCache","ELEMENT_ARRAY_BUFFER","setupVertexAttributes","createVertexArrayObject","createVertexArray","createVertexArrayOES","vao","bindVertexArray","bindVertexArrayOES","deleteVertexArrayObject","deleteVertexArray","deleteVertexArrayOES","programMap","stateMap","newAttributes","enabledAttributes","attributeDivisors","cachedAttributes","geometryAttributes","attributesNum","cachedAttribute","geometryAttribute","initAttributes","enableAttribute","enableAttributeAndDivisor","meshPerAttribute","enableVertexAttribArray","disableUnusedAttributes","disableVertexAttribArray","vertexAttribPointer","vertexAttribIPointer","isInstancedBufferGeometry","programAttributes","getAttributes","materialDefaultAttributeValues","programAttribute","location","isInstancedInterleavedBuffer","locationSize","_maxInstanceCount","ARRAY_BUFFER","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","reset","geometryId","programId","releaseStatesOfGeometry","releaseStatesOfProgram","resetDefaultState","WebGLBufferRenderer","info","mode","setMode","drawArrays","renderInstances","primcount","methodName","WebGLCapabilities","maxAnisotropy","getMaxAnisotropy","has","MAX_TEXTURE_MAX_ANISOTROPY_EXT","getMaxPrecision","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","logarithmicDepthBuffer","maxTextures","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubemapSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","floatVertexTextures","maxSamples","MAX_SAMPLES","WebGLClipping","globalState","numGlobalPlanes","localClippingEnabled","renderingShadows","viewNormalMatrix","numPlanes","numIntersection","init","enableLocalClipping","projectPlanes","beginShadows","endShadows","resetGlobalState","setState","useCache","materialProperties","nGlobal","lGlobal","dstArray","clippingState","skipTransform","nPlanes","flatSize","viewMatrix","i4","WebGLCubeMaps","mapTextureMapping","cubemap","onTextureDispose","OrthographicCamera","scaleW","scaleH","isOrthographicCamera","RawShaderMaterial","isRawShaderMaterial","LOD_MIN","LOD_MAX","SIZE_MAX","EXTRA_LOD_SIGMA","TOTAL_LODS","ENCODINGS","_flatCamera","_lodPlanes","_sizeLods","_sigmas","_createPlanes","_clearColor","_oldTarget","PHI","INV_PHI","_axisDirections","PMREMGenerator","_renderer","_pingPongRenderTarget","_blurMaterial","_getBlurShader","_equirectShader","_cubemapShader","_compileMaterial","fromScene","sigma","cubeUVRenderTarget","_allocateTargets","_sceneToCubeUV","_blur","_applyPMREM","_cleanup","fromEquirectangular","equirectangular","_fromTexture","fromCubemap","compileCubemapShader","_getCubemapShader","compileEquirectangularShader","_getEquirectShader","outputTarget","_setViewport","_textureToCubeUV","params","_isLDR","_createRenderTarget","tmpMesh","compile","cubeCamera","upSign","forwardSign","originalAutoClear","outputEncoding","backgroundMaterial","backgroundBox","useSolidColor","col","_setEncoding","poleAxis","lodIn","lodOut","pingPongRenderTarget","_halfBlur","targetIn","targetOut","sigmaRadians","blurMaterial","STANDARD_DEVIATIONS","blurMesh","blurUniforms","pixels","radiansPerPixel","sigmaPixels","weights","sum","weight","outputSize","lod","sizeLod","texelSize","cubeFaces","positionSize","uvSize","faceIndexSize","coordinates","fill","shaderMaterial","_getCommonVertexShader","_getEncodings","WebGLCubeUVMaps","cubeUVmaps","pmremGenerator","isEquirectMap","isCubeMap","isCubeTextureComplete","cubemapUV","WebGLExtensions","getExtension","WebGLGeometries","wireframeAttributes","onGeometryDispose","memory","updateWireframeAttribute","geometryIndex","geometryPosition","previousAttribute","getWireframeAttribute","currentAttribute","WebGLIndexedBufferRenderer","drawElements","WebGLInfo","calls","triangles","lines","instanceCount","TRIANGLES","LINES","LINE_STRIP","LINE_LOOP","POINTS","programs","autoReset","DataTexture2DArray","wrapR","isDataTexture2DArray","numericalSort","absNumericalSort","denormalize","morph","WebGLMorphtargets","influencesList","morphTextures","workInfluences","objectInfluences","numberOfMorphTargets","entry","hasMorphNormals","morphNormals","numberOfVertexData","vertexDataStride","morphTarget","morphNormal","morphInfluencesSum","morphBaseInfluence","getUniforms","setValue","influences","sort","MAX_SAFE_INTEGER","WebGLObjects","updateMap","buffergeometry","onInstancedMeshDispose","instancedMesh","DataTexture3D","isDataTexture3D","emptyTexture","emptyTexture2dArray","emptyTexture3d","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","flatten","nBlocks","blockSize","firstElem","arraysEqual","allocTexUnits","allocateTextureUnit","setValueV1f","uniform1f","addr","setValueV2f","uniform2f","uniform2fv","setValueV3f","uniform3f","uniform3fv","setValueV4f","uniform4f","uniform4fv","setValueM2","uniformMatrix2fv","setValueM3","uniformMatrix3fv","setValueM4","uniformMatrix4fv","setValueV1i","uniform1i","setValueV2i","uniform2iv","setValueV3i","uniform3iv","setValueV4i","uniform4iv","setValueV1ui","uniform1ui","setValueV2ui","uniform2uiv","setValueV3ui","uniform3uiv","setValueV4ui","uniform4uiv","setValueT1","unit","safeSetTexture2D","setValueT3D1","setTexture3D","setValueT6","safeSetTextureCube","setValueT2DArray1","setTexture2DArray","getSingularSetter","setValueV1fArray","uniform1fv","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueV1iArray","uniform1iv","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV1uiArray","uniform1uiv","setValueV2uiArray","setValueV3uiArray","setValueV4uiArray","setValueT1Array","units","setValueT6Array","getPureArraySetter","SingleUniform","activeInfo","PureArrayUniform","updateCache","StructuredUniform","seq","RePathPart","addUniform","container","uniformObject","parseUniform","path","pathLength","lastIndex","match","matchEnd","idIsIndex","subscript","next","WebGLUniforms","getProgramParameter","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","setOptional","upload","seqWithValue","WebGLShader","createShader","shaderSource","compileShader","programIdCount","addLineNumbers","split","join","getEncodingComponents","getShaderErrors","status","getShaderParameter","COMPILE_STATUS","errors","getShaderInfoLog","trim","getShaderSource","getTexelDecodingFunction","functionName","getTexelEncodingFunction","getToneMappingFunction","toneMappingName","generateExtensions","chunks","extensionDerivatives","envMapCubeUV","tangentSpaceNormalMap","shaderID","extensionFragDepth","rendererExtensionFragDepth","extensionDrawBuffers","rendererExtensionDrawBuffers","extensionShaderTextureLOD","rendererExtensionShaderTextureLod","filter","filterEmptyLine","generateDefines","fetchAttributeLocations","ACTIVE_ATTRIBUTES","getActiveAttrib","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","getAttribLocation","replaceLightNums","replace","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numSpotLightShadows","numPointLightShadows","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","includePattern","resolveIncludes","includeReplacer","include","deprecatedUnrollLoopPattern","unrollLoopPattern","unrollLoops","loopReplacer","deprecatedLoopReplacer","snippet","generatePrecision","precisionstring","generateShadowMapTypeDefine","shadowMapTypeDefine","shadowMapType","generateEnvMapTypeDefine","envMapTypeDefine","envMapMode","generateEnvMapModeDefine","envMapModeDefine","generateEnvMapBlendingDefine","envMapBlendingDefine","WebGLProgram","cacheKey","gammaFactorDefine","customExtensions","customDefines","createProgram","prefixVertex","prefixFragment","versionString","shaderName","instancing","instancingColor","supportsVertexTextures","maxBones","useFog","fogExp2","objectSpaceNormalMap","vertexTangents","vertexAlphas","vertexUvs","uvsVertexOnly","skinning","useVertexTexture","morphTargetsCount","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","mapEncoding","matcapEncoding","envMapEncoding","emissiveMapEncoding","specularColorMapEncoding","sheenColorMapEncoding","lightMapEncoding","depthPacking","vertexGlsl","fragmentGlsl","glVertexShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","LINK_STATUS","vertexErrors","fragmentErrors","getError","VALIDATE_STATUS","diagnostics","prefix","deleteShader","cachedUniforms","destroy","deleteProgram","usedTimes","WebGLPrograms","cubeuvmaps","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","getMaxBones","bones","nVertexUniforms","nVertexMatrices","getTextureEncodingFromMap","getParameters","shadows","isMeshStandardMaterial","useAlphaTest","useClearcoat","isFogExp2","directional","spot","rectArea","hemi","shadowMap","getProgramCacheKey","acquireProgram","pl","preexistingProgram","releaseProgram","pop","WebGLProperties","painterSortStable","groupOrder","reversePainterSortStable","WebGLRenderList","renderItems","renderItemsIndex","opaque","transmissive","defaultProgram","getNextRenderItem","renderItem","customOpaqueSort","customTransparentSort","finish","WebGLRenderLists","lists","renderCallDepth","list","UniformsCache","light","halfWidth","halfHeight","ShadowUniformsCache","nextVersion","shadowCastingLightsFirst","lightA","lightB","WebGLLights","shadowCache","hash","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","ambient","probe","directionalShadow","spotShadow","rectAreaLTC1","rectAreaLTC2","pointShadow","vector3","matrix42","scaleFactor","intensity","isAmbientLight","isLightProbe","sh","coefficients","isDirectionalLight","shadowUniforms","bias","normalBias","mapSize","isSpotLight","penumbra","isRectAreaLight","isPointLight","isHemisphereLight","LTC_FLOAT_1","LTC_FLOAT_2","LTC_HALF_1","LTC_HALF_2","setupView","WebGLRenderState","lightsArray","shadowsArray","pushLight","pushShadow","shadowLight","setupLights","setupLightsView","WebGLRenderStates","renderStates","renderState","isMeshDepthMaterial","isMeshDistanceMaterial","vertex","fragment","WebGLShadowMap","_objects","_capabilities","_frustum","_shadowMapSize","_viewportSize","_viewport","_depthMaterial","_distanceMaterial","_materialCache","_maxTextureSize","shadowMaterialVertical","VSM_SAMPLES","shadow_pass","resolution","shadowMaterialHorizontal","HORIZONTAL_PASS","fullScreenTri","fullScreenMesh","autoUpdate","activeCubeFace","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","_state","setBlending","setTest","setScissorTest","shadowFrameExtents","getFrameExtents","isPointLightShadow","pars","mapPass","viewportCount","getViewportCount","vp","getViewport","updateMatrices","getFrustum","renderObject","VSMPass","blurSamples","renderBufferDirect","getDepthMaterial","result","customMaterial","customDistanceMaterial","customDepthMaterial","keyA","keyB","materialsForVariant","cachedMaterial","shadowCamera","k","kl","depthMaterial","WebGLState","ColorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","DepthBuffer","currentDepthMask","currentDepthFunc","currentDepthClear","DEPTH_TEST","depthMask","setFunc","NEVER","ALWAYS","LESS","LEQUAL","EQUAL","GEQUAL","GREATER","NOTEQUAL","clearDepth","StencilBuffer","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","STENCIL_TEST","stencilMask","setOp","stencilOp","clearStencil","colorBuffer","enabledCapabilities","xrFramebuffer","currentBoundFramebuffers","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","MAX_COMBINED_TEXTURE_IMAGE_UNITS","lineWidthAvailable","glVersion","VERSION","currentTextureSlot","currentBoundTextures","scissorParam","SCISSOR_BOX","viewportParam","VIEWPORT","currentScissor","currentViewport","createTexture","bindTexture","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texImage2D","RGBA","emptyTextures","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_CUBE_MAP_POSITIVE_X","setFlipSided","setCullFace","CULL_FACE","bindXRFramebuffer","framebuffer","bindFramebuffer","FRAMEBUFFER","DRAW_FRAMEBUFFER","useProgram","equationToGL","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","MIN","MAX","MIN_EXT","MAX_EXT","factorToGL","ZERO","ONE","SRC_COLOR","SRC_ALPHA","SRC_ALPHA_SATURATE","DST_COLOR","DST_ALPHA","ONE_MINUS_SRC_COLOR","ONE_MINUS_SRC_ALPHA","ONE_MINUS_DST_COLOR","ONE_MINUS_DST_ALPHA","BLEND","blendFuncSeparate","blendFunc","blendEquationSeparate","setMaterial","frontFaceCW","setPolygonOffset","SAMPLE_ALPHA_TO_COVERAGE","frontFace","CW","CCW","cullFace","BACK","FRONT","FRONT_AND_BACK","setLineWidth","lineWidth","factor","POLYGON_OFFSET_FILL","SCISSOR_TEST","activeTexture","webglSlot","TEXTURE0","webglType","webglTexture","boundTexture","unbindTexture","compressedTexImage2D","apply","texImage3D","KEEP","READ_FRAMEBUFFER","WebGLTextures","_gl","utils","_videoTextures","useOffscreenCanvas","OffscreenCanvas","err","createCanvas","resizeImage","needsPowerOfTwo","needsNewCanvas","maxSize","isPowerOfTwo$1","textureNeedsPowerOfTwo","textureNeedsGenerateMipmaps","supportsMips","generateMipmap","textureProperties","__maxMipLevel","log2","getInternalFormat","internalFormatName","glFormat","glType","RED","R32F","R16F","R8","RGB","RGB32F","RGB16F","RGB8","RGBA32F","RGBA16F","SRGB8_ALPHA8","RGBA8","filterFallback","LINEAR","deallocateTexture","isVideoTexture","onRenderTargetDispose","deallocateRenderTarget","__webglInit","deleteTexture","__webglTexture","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","attachmentProperties","textureUnits","resetTextureUnits","textureUnit","setTexture2D","slot","updateVideoTexture","__version","complete","uploadTexture","TEXTURE_2D_ARRAY","TEXTURE_3D","setTextureCube","uploadCubeTexture","wrappingToGL","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","filterToGL","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","setTextureParameters","textureType","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_WRAP_R","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","initTexture","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","UNPACK_COLORSPACE_CONVERSION_WEBGL","NONE","convert","glInternalFormat","mipmap","isDepthTexture","DEPTH_COMPONENT","DEPTH_COMPONENT32F","DEPTH_COMPONENT24","DEPTH24_STENCIL8","DEPTH_COMPONENT16","DEPTH_STENCIL","isCompressedTexture","isCompressed","cubeImage","mipmapImage","setupFrameBufferTexture","attachment","textureTarget","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","RENDERBUFFER","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","setupDepthTexture","isCube","webglDepthTexture","setupDepthRenderbuffer","createRenderbuffer","setupRenderTarget","isMultipleRenderTargets","isRenderTarget3D","createFramebuffer","COLOR_ATTACHMENT0","glTextureType","isTexture3D","updateRenderTargetMipmap","updateMultisampleRenderTarget","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","blitFramebuffer","warnedTexture2D","warnedTextureCube","WebGLUtils","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT_OES","ALPHA","LUMINANCE","LUMINANCE_ALPHA","RED_INTEGER","RG","RG_INTEGER","RGB_INTEGER","RGBA_INTEGER","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_ETC2_EAC","UNSIGNED_INT_24_8","UNSIGNED_INT_24_8_WEBGL","ArrayCamera","cameras","isArrayCamera","Group","isGroup","_moveEvent","WebXRController","_targetRay","_grip","_hand","getHandSpace","joints","inputState","pinching","getTargetRaySpace","hasLinearVelocity","linearVelocity","hasAngularVelocity","angularVelocity","getGripSpace","disconnect","inputSource","referenceSpace","inputPose","gripPose","handPose","targetRay","grip","hand","visibilityState","getPose","targetRaySpace","transform","inputjoint","jointPose","getJointPose","jointName","joint","jointRadius","indexTip","thumbTip","distanceToPinch","threshold","handedness","gripSpace","WebXRManager","framebufferScaleFactor","referenceSpaceType","pose","glBinding","glFramebuffer","glProjLayer","glBaseLayer","glMultisampledFramebuffer","glColorRenderbuffer","glDepthRenderbuffer","xrFrame","depthStyle","clearStyle","controllers","inputSourcesMap","Map","cameraL","cameraR","cameraVR","_currentDepthNear","_currentDepthFar","cameraAutoUpdate","isPresenting","getController","controller","getControllerGrip","getHand","onSessionEvent","onSessionEnd","forEach","setFramebufferScaleFactor","setReferenceSpaceType","getReferenceSpace","getBaseLayer","getBinding","getFrame","setSession","onInputSourcesChange","getContextAttributes","xrCompatible","makeXRCompatible","layerInit","antialias","XRWebGLLayer","updateRenderState","baseLayer","WebGLRenderingContext","depthFormat","projectionlayerInit","colorFormat","XRWebGLBinding","createProjectionLayer","textureWidth","textureHeight","requestReferenceSpace","inputSources","removed","added","cameraLPos","cameraRPos","setProjectionFromUnion","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","near2","far2","left2","right2","top2","bottom2","updateCamera","depthNear","depthFar","getCamera","getFoveation","fixedFoveation","setFoveation","foveation","onAnimationFrameCallback","getViewerPose","views","cameraVRNeedsUpdate","glSubImage","getViewSubImage","depthStencilTexture","colorTexture","invalidateFramebuffer","WebGLMaterials","refreshFogUniforms","isFog","density","refreshMaterialUniforms","pixelRatio","transmissionRenderTarget","refreshUniformsCommon","isMeshLambertMaterial","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsToon","isMeshPhongMaterial","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsPhysical","refreshUniformsStandard","isMeshMatcapMaterial","refreshUniformsMatcap","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","isShadowMaterial","uvScaleMap","uv2ScaleMap","createCanvasElement","display","WebGLRenderer","_context","_alpha","_depth","_stencil","_antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","currentRenderList","currentRenderState","renderListStack","renderStateStack","domElement","sortObjects","toneMappingExposure","_this","_isContextLost","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentMaterialId","_currentCamera","_currentViewport","_currentScissor","_currentScissorTest","_width","_height","_pixelRatio","_opaqueSort","_transparentSort","_scissor","_scissorTest","_currentDrawBuffers","_clippingEnabled","_localClippingEnabled","_transmissionRenderTarget","_projScreenMatrix","_vector3","_emptyScene","overrideMaterial","getTargetPixelRatio","contextNames","contextAttributes","contextName","onContextLost","onContextRestore","isWebGL1Renderer","shift","message","programCache","renderLists","morphtargets","bufferRenderer","indexedBufferRenderer","initGLContext","forceContextLoss","loseContext","forceContextRestore","restoreContext","getPixelRatio","setPixelRatio","updateStyle","setViewport","getDrawingBufferSize","setDrawingBufferSize","getCurrentViewport","getScissor","setScissor","getScissorTest","boolean","setOpaqueSort","method","setTransparentSort","bits","onXRSessionStart","onXRSessionEnd","preventDefault","infoAutoReset","shadowMapAutoUpdate","shadowMapNeedsUpdate","onMaterialDispose","deallocateMaterial","releaseMaterialProgramReferences","setProgram","rangeFactor","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","isLineSegments","isLineLoop","isSprite","material2","getProgram","window","projectObject","camera2","renderScene","isLOD","opaqueObjects","transmissiveObjects","transparentObjects","renderTransmissionPass","renderObjects","needsAntialias","renderTargetType","currentToneMapping","lightsStateVersion","programCacheKey","updateCommonMaterialProperties","needsLights","materialNeedsLights","progUniforms","uniformsList","needsProgramChange","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","boneTexture","computeBoneTexture","boneTextureSize","markUniformsLightsNeedsUpdate","framebufferBound","drawBuffersWEBGL","layer","framebufferTextureLayer","readRenderTargetPixels","activeCubeFaceIndex","textureFormat","IMPLEMENTATION_COLOR_READ_FORMAT","halfFloatSupportedByExt","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","copyFramebufferToTexture","level","levelScale","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","compressedTexSubImage2D","copyTextureToTexture3D","sourceBox","glTarget","unpackRowLen","UNPACK_ROW_LENGTH","unpackImageHeight","UNPACK_IMAGE_HEIGHT","unpackSkipPixels","UNPACK_SKIP_PIXELS","unpackSkipRows","UNPACK_SKIP_ROWS","unpackSkipImages","UNPACK_SKIP_IMAGES","texSubImage3D","compressedTexSubImage3D","resetState","__THREE_DEVTOOLS__","CustomEvent","detail","isWebGLRenderer","WebGL1Renderer","FogExp2","Fog","Scene","InterleavedBuffer","arrayBuffers","_uuid","ib","isInterleavedBuffer","_vector$6","InterleavedBufferAttribute","interleavedBuffer","interleavedBuffers","_geometry","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA","_vB","_vC","_uvA","_uvB","_uvC","Sprite","float32Array","transformVertex","vertexPosition","mvPosition","_v1$2","_v2$1","LOD","_currentLevel","levels","addLevel","getCurrentLevel","getObjectForDistance","_basePosition","_skinIndex","_skinWeight","_vector$5","_matrix","SkinnedMesh","bindMatrixInverse","bind","calculateInverses","normalizeSkinWeights","skinWeight","skinIndex","boneIndex","boneInverses","Bone","isBone","DataTexture","_offsetMatrix","_identityMatrix","Skeleton","boneMatrices","inverse","bone","getBoneByName","json","boneInverse","InstancedBufferAttribute","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_mesh","InstancedMesh","getColorAt","getMatrixAt","raycastTimes","instanceId","setColorAt","setMatrixAt","linecap","linejoin","_start$1","_end$1","_inverseMatrix$1","_ray$1","_sphere$1","Line","computeLineDistances","lineDistances","localThreshold","localThresholdSq","vStart","vEnd","interSegment","interRay","distSq","_start","_end","LineSegments","LineLoop","_inverseMatrix","_ray","_sphere","_position$2","Points","testPoint","rayPointDistanceSq","intersectPoint","distanceToRay","VideoTexture","video","updateVideo","requestVideoFrameCallback","hasVideoFrameCallback","readyState","HAVE_CURRENT_DATA","CompressedTexture","CanvasTexture","isCanvasTexture","DepthTexture","CircleGeometry","segments","thetaStart","thetaLength","segment","CylinderGeometry","radiusTop","radiusBottom","radialSegments","openEnded","indexArray","generateTorso","generateCap","slope","indexRow","sinTheta","cosTheta","centerIndexStart","centerIndexEnd","ConeGeometry","PolyhedronGeometry","vertexBuffer","uvBuffer","subdivide","applyRadius","generateUVs","getVertexByIndex","subdivideFace","cols","aj","bj","rows","pushVertex","azimuth","inclination","correctUVs","correctSeam","centroid","azi","correctUV","details","DodecahedronGeometry","_v0","_v1$1","_normal","_triangle","EdgesGeometry","thresholdAngle","precisionPoints","thresholdDot","indexAttr","positionAttr","indexCount","indexArr","vertKeys","hashes","edgeData","jNext","vecHash0","vecHash1","reverseHash","index0","Curve","arcLengthDivisions","getPoint","getPointAt","optionalTarget","getUtoTmapping","getPoints","divisions","getSpacedPoints","getLength","lengths","getLengths","cacheArcLengths","current","last","updateArcLengths","arcLengths","targetArcLength","comparison","lengthBefore","lengthAfter","segmentLength","segmentFraction","getTangent","t2","pt1","pt2","getTangentAt","computeFrenetFrames","closed","binormals","vec","mat","MAX_VALUE","tz","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","twoPi","deltaAngle","samePoints","isEllipseCurve","ArcCurve","aRadius","isArcCurve","CubicPoly","c0","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","calc","t3","px","py","pz","CatmullRomCurve3","curveType","intPoint","isCatmullRomCurve3","CatmullRom","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","QuadraticBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","CubicBezier","CubicBezierCurve","v3","isCubicBezierCurve","CubicBezierCurve3","isCubicBezierCurve3","LineCurve","isLineCurve","LineCurve3","isLineCurve3","QuadraticBezierCurve","isQuadraticBezierCurve","QuadraticBezierCurve3","isQuadraticBezierCurve3","SplineCurve","isSplineCurve","Curves","CurvePath","curves","autoClose","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","diff","lens","cacheLengths","sums","pts","Path","currentPoint","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","concat","arc","absarc","absellipse","ellipse","firstPoint","lastPoint","Shape","holes","getPointsHoles","holesPts","extractPoints","hole","Earcut","triangulate","holeIndices","dim","hasHoles","outerLen","outerNode","linkedList","prev","invSize","eliminateHoles","earcutLinked","clockwise","signedArea","insertNode","removeNode","filterPoints","again","steiner","area","ear","pass","indexCurve","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","minTX","minTY","maxTX","maxTY","zOrder","prevZ","nextZ","locallyInside","isValidDiagonal","splitPolygon","queue","getLeftmost","compareX","eliminateHole","findHoleBridge","hx","hy","mx","my","tanMin","sectorContainsSector","sortLinked","tail","numMerges","pSize","qSize","inSize","leftmost","intersectsPolygon","middleInside","q1","q2","o1","o2","o3","o4","onSegment","num","inside","Node","an","bp","ShapeUtils","contour","isClockWise","triangulateShape","faces","removeDupEndPts","addContour","holeIndex","ExtrudeGeometry","verticesArray","uvArray","addShape","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","amount","extrudePts","extrudeByPath","splineTube","binormal","position2","shapePoints","reverse","hl","ahole","scalePt2","pt","vlen","flen","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","contourMovements","holesMovements","oneHoleMovements","verticesMovements","bs","vert","buildLidFaces","buildSideFaces","f3","layeroffset","sidewalls","sl","slen1","slen2","f4","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","toJSON$1","geometryShapes","indexA","indexB","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","IcosahedronGeometry","LatheGeometry","phiStart","phiLength","inverseSegments","base","n1","OctahedronGeometry","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","radiusStep","thetaSegmentLevel","ShapeGeometry","indexOffset","shapeVertices","shapeHoles","shapeHole","SphereGeometry","thetaEnd","grid","verticesRow","uOffset","TetrahedronGeometry","TorusGeometry","tube","tubularSegments","TorusKnotGeometry","P1","P2","B","T","N","calculatePositionOnCurve","cu","su","quOverP","cs","TubeGeometry","frames","P","generateBufferData","generateSegment","generateIndices","WireframeGeometry","edges","Set","o","ol","isUniqueEdge","hash1","hash2","Geometries","BoxBufferGeometry","CircleBufferGeometry","ConeBufferGeometry","CylinderBufferGeometry","DodecahedronBufferGeometry","ExtrudeBufferGeometry","IcosahedronBufferGeometry","LatheBufferGeometry","OctahedronBufferGeometry","PlaneBufferGeometry","PolyhedronBufferGeometry","RingBufferGeometry","ShapeBufferGeometry","SphereBufferGeometry","TetrahedronBufferGeometry","TorusBufferGeometry","TorusKnotBufferGeometry","TubeBufferGeometry","_sheen","_clearcoat","_transmission","Materials","AnimationUtils","arraySlice","from","to","isTypedArray","convertArray","forceClone","ArrayBuffer","isView","DataView","getKeyframeOrder","times","compareTime","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","subclip","sourceClip","startFrame","endFrame","fps","clip","tracks","track","valueSize","getValueSize","minStartTime","resetDuration","makeClipAdditive","targetClip","referenceFrame","referenceClip","numTracks","referenceTime","referenceTrack","referenceTrackType","ValueTypeName","targetTrack","find","referenceOffset","referenceValueSize","createInterpolant","isInterpolantFactoryMethodGLTFCubicSpline","targetOffset","targetValueSize","referenceValue","startIndex","endIndex","interpolant","evaluate","resultBuffer","referenceQuat","numTimes","valueStart","valueEnd","blendMode","Interpolant","parameterPositions","sampleValues","sampleSize","_cachedIndex","settings","DefaultSettings_","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","getSettings_","copySampleValue_","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o0","oP","oN","wP","wN","ppp","sP","sN","LinearInterpolant","offset1","offset0","weight1","weight0","DiscreteInterpolant","KeyframeTrack","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","trackType","getInterpolation","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","timeOffset","timeScale","startTime","endTime","nKeys","validate","valid","prevTime","currTime","optimize","smoothInterpolation","writeIndex","keep","timeNext","offsetP","offsetN","readOffset","writeOffset","TypedKeyframeTrack","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","duration","jsonTracks","frameTime","parseKeyframeTrack","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","parts","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","getTrackTypeForValueTypeName","typeName","Cache","files","file","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","loader","removeHandler","getHandler","DefaultLoadingManager","Loader","manager","crossOrigin","withCredentials","resourcePath","requestHeader","load","loadAsync","Promise","resolve","reject","setCrossOrigin","setWithCredentials","setPath","setResourcePath","setRequestHeader","loading","FileLoader","setTimeout","req","Request","headers","Headers","credentials","fetch","then","response","callbacks","reader","body","getReader","contentLength","total","lengthComputable","loaded","ReadableStream","readData","read","done","close","byteLength","ProgressEvent","enqueue","statusText","stream","Response","responseType","arrayBuffer","blob","text","parser","DOMParser","parseFromString","mimeType","catch","setResponseType","setMimeType","AnimationLoader","CompressedTextureLoader","loadTexture","texDatas","mipmapCount","isCubemap","ImageLoader","onImageLoad","removeEventListeners","onImageError","substr","CubeTextureLoader","urls","DataTextureLoader","texData","TextureLoader","Light","HemisphereLight","_projScreenMatrix$1","_lightPositionWorld$1","_lookTarget$1","LightShadow","_frameExtents","_viewportCount","_viewports","shadowMatrix","viewportIndex","SpotLightShadow","isSpotLightShadow","SpotLight","power","_lightPositionWorld","_lookTarget","PointLightShadow","_cubeDirections","_cubeUps","PointLight","DirectionalLightShadow","isDirectionalLightShadow","DirectionalLight","AmbientLight","RectAreaLight","SphericalHarmonics3","zero","getAt","coeff","getIrradianceAt","addScaledSH","getBasisAt","shBasis","isSphericalHarmonics3","LightProbe","MaterialLoader","getTexture","shading","setTextures","LoaderUtils","decodeText","TextDecoder","decode","fromCharCode","decodeURIComponent","escape","extractUrlBase","lastIndexOf","InstancedBufferGeometry","BufferGeometryLoader","interleavedBufferMap","arrayBufferMap","getInterleavedBuffer","getArrayBuffer","typedArray","bufferAttribute","bufferAttributeConstr","drawcalls","offsets","ObjectLoader","parseAsync","parseAnimations","parseShapes","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseSkeletons","bindSkeletons","hasImages","parseImagesAsync","bufferGeometryLoader","loadImage","deserializeImage","currentUrl","deserializedImage","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","objectAnimations","setTexturePath","ImageBitmapLoader","createImageBitmap","setOptions","fetchOptions","res","colorSpaceConversion","imageBitmap","isImageBitmapLoader","AudioContext","webkitAudioContext","AudioLoader","bufferCopy","decodeAudioData","audioBuffer","HemisphereLightProbe","sky","ground","isHemisphereLightProbe","AmbientLightProbe","isAmbientLightProbe","_eyeRight","_eyeLeft","StereoCamera","eyeSep","_cache","eyeSepHalf","eyeSepOnProjection","ymax","xmin","xmax","Clock","autoStart","oldTime","elapsedTime","running","now","getElapsedTime","getDelta","newTime","performance","Date","_position$1","_quaternion$1","_scale$1","_orientation$1","AudioListener","gain","createGain","connect","destination","timeDelta","_clock","getInput","removeFilter","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","currentTime","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","Audio","autoplay","detune","loop","loopStart","loopEnd","playbackRate","isPlaying","hasPlaybackControl","sourceType","_startedAt","_progress","_connected","filters","getOutput","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setMediaStreamSource","mediaStream","createMediaStreamSource","setBuffer","play","delay","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","pause","getFilters","setFilters","getDetune","getPlaybackRate","getLoop","setLoop","setLoopStart","setLoopEnd","getVolume","setVolume","_position","_quaternion","_scale","_orientation","PositionalAudio","panner","createPanner","panningModel","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getFrequencyData","getByteFrequencyData","getAverageFrequency","PropertyMixer","binding","mixFunction","mixFunctionAdditive","setIdentity","_slerp","_slerpAdditive","_setAdditiveIdentityQuaternion","_workIndex","_select","_setAdditiveIdentityOther","_lerp","_lerpAdditive","_setAdditiveIdentityNumeric","_mixBufferRegion","_mixBufferRegionAdditive","_setIdentity","_origIndex","_addIndex","cumulativeWeight","cumulativeWeightAdditive","useCount","referenceCount","accumulate","accuIndex","currentWeight","mix","accumulateAdditive","weightAdditive","originalValueOffset","saveOriginalState","getValue","restoreOriginalState","targetIndex","workOffset","_RESERVED_CHARS_RE","_reservedRe","RegExp","_wordChar","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","firstValidIndex","nCachedObjects_","bindings","unbind","rootNode","node","findNode","nodeName","_getValue_unbound","_setValue_unbound","create","root","isAnimationObjectGroup","sanitizeNodeName","matches","results","objectName","objectIndex","propertyIndex","lastDot","substring","searchNodeSubtree","childNode","subTreeNode","_getValue_unavailable","_setValue_unavailable","_getValue_direct","targetObject","_getValue_array","resolvedProperty","_getValue_arrayElement","_getValue_toArray","_setValue_direct","_setValue_direct_setNeedsUpdate","_setValue_direct_setMatrixWorldNeedsUpdate","_setValue_array","dest","_setValue_array_setNeedsUpdate","_setValue_array_setMatrixWorldNeedsUpdate","_setValue_arrayElement","_setValue_arrayElement_setNeedsUpdate","_setValue_arrayElement_setMatrixWorldNeedsUpdate","_setValue_fromArray","_setValue_fromArray_setNeedsUpdate","_setValue_fromArray_setMatrixWorldNeedsUpdate","targetArray","sourceArray","nodeProperty","versioning","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","bindingType","BindingType","Direct","ArrayElement","HasFromToArray","EntireArray","GetterByBindingType","SetterByBindingTypeAndVersioning","AnimationObjectGroup","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","inUse","bindingsPerObject","indicesByUUID","paths","parsedPaths","nBindings","knownObject","nObjects","nCachedObjects","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","lastBindingsPath","AnimationAction","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","action","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_root","_update","deltaTime","timeDirection","_updateWeight","timeRunning","_updateTimeScale","clipTime","_updateTime","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","AnimationMixer","_initMemoryManager","_accuIndex","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","setTime","timeInSeconds","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","Uniform","InstancedInterleavedBuffer","GLBufferAttribute","setType","setItemSize","setCount","Raycaster","setFromCamera","coords","intersectObject","ascSort","intersectObjects","Spherical","other","makeSafe","EPS","setFromCartesianCoords","Cylindrical","_vector$4","Box2","isBox2","_startP","_startEnd","Line3","distanceSq","closestPointToPointParameter","clampToLine","startEnd2","startEnd_startP","_vector$3","SpotLightHelper","cone","coneLength","coneWidth","_vector$2","_boneMatrix","_matrixWorldInv","SkeletonHelper","getBoneList","isSkeletonHelper","boneList","PointLightHelper","sphereSize","_vector$1","_color1","_color2","HemisphereLightHelper","GridHelper","PolarGridHelper","radials","circles","_v1","_v2","_v3","DirectionalLightHelper","lightPlane","targetLine","_vector","_camera","CameraHelper","pointMap","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","setPoint","_box","BoxHelper","Box3Helper","PlaneHelper","positions2","_axis","_lineGeometry","_coneGeometry","ArrowHelper","headLength","headWidth","setDirection","setColor","AxesHelper","setColors","xAxisColor","yAxisColor","zAxisColor","ShapePath","subPaths","currentPath","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","betterShapeHoles","newShapes","newShapeHoles","mainIdx","tmpPoints","ambiguous","toChange","sIdx","sLen","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","tmpHoles","_floatView","_int32View","DataUtils","toHalfFloat","val","LineStrip","LinePieces","NoColors","FaceColors","VertexColors","MeshFaceMaterial","MultiMaterial","isMultiMaterial","PointCloud","Particle","ParticleSystem","PointCloudMaterial","ParticleBasicMaterial","ParticleSystemMaterial","Vertex","DynamicBufferAttribute","Int8Attribute","Uint8Attribute","Uint8ClampedAttribute","Int16Attribute","Uint16Attribute","Int32Attribute","Uint32Attribute","Float32Attribute","Float64Attribute","construct","fromPoints","AxisHelper","BoundingBoxHelper","EdgesHelper","WireframeHelper","Handlers","XHRLoader","BinaryTextureLoader","empty","isIntersectionBox","isIntersectionSphere","setFromMatrix","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBufferAttribute","applyToVector3Array","getInverse","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","prototypenormal","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","getChildByName","renderDepth","getWorldRotation","applyMatrix","eulerOrder","useQuaternion","setDrawMode","drawMode","initBones","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","dynamic","setDynamic","copyIndicesArray","setArray","addIndex","addAttribute","addDrawCall","clearDrawCalls","computeOffsets","removeAttribute","getArrays","addShapeList","wrapAround","overdraw","wrapRGB","clearTarget","animate","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","initMaterial","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","allocTextureUnit","getActiveMipMapLevel","shadowMapCullFace","vr","gammaInput","gammaOutput","toneMappingWhitePoint","renderReverseSided","renderSingleSided","WebGLRenderTargetCube","audioLoader","getData","updateCubeMap","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","CanvasRenderer","JSONLoader","SceneUtils","createMultiMaterialObject","detach","LensFlare","ParametricGeometry","TextGeometry","FontLoader","Font","ImmediateRenderObject","revision","__THREE__"],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3DE;AA6DA;;AAED,WAASC,aAAT,GAAyB;AACxB;AACC;AACC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlFE;AAoFA;;AAED,WAASC,eAAT,CAAyBpmB,QAAzB,EAAmC;AAClC,QAAIqmB,UAAU,GAAG,IAAIlhB,OAAJ,EAAjB;AACA,QAAImhB,cAAc,GAAG,IAArB;;AAEA,aAASjgB,GAAT,CAAa5gC,OAAb,EAAsB;AACrB,UAAIA,OAAO,IAAIA,OAAO,CAACtC,SAAnB,IAAgCsC,OAAO,CAAC9D,qBAAR,KAAkC,KAAtE,EAA6E;AAC5E,cAAMrB,OAAO,GAAGmF,OAAO,CAACnF,OAAxB;AACA,cAAMimD,aAAa,GAAGjmD,OAAO,KAAK7a,gCAAZ,IAAgD6a,OAAO,KAAK5a,gCAAlF;AACA,cAAM8gE,SAAS,GAAGlmD,OAAO,KAAK/a,qBAAZ,IAAqC+a,OAAO,KAAK9a,qBAAnE;;AAEA,YAAI+gE,aAAa,IAAIC,SAArB,EAAgC;AAC/B;AACA,cAAIH,UAAU,CAAC9J,GAAX,CAAe92C,OAA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","sourcesContent":["/**\n * @license\n * Copyright 2010-2021 Three.js Authors\n * SPDX-License-Identifier: MIT\n */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.THREE = {}));\n})(this, (function (exports) { 'use strict';\n\n\tconst REVISION = '134';\n\tconst MOUSE = {\n\t\tLEFT: 0,\n\t\tMIDDLE: 1,\n\t\tRIGHT: 2,\n\t\tROTATE: 0,\n\t\tDOLLY: 1,\n\t\tPAN: 2\n\t};\n\tconst TOUCH = {\n\t\tROTATE: 0,\n\t\tPAN: 1,\n\t\tDOLLY_PAN: 2,\n\t\tDOLLY_ROTATE: 3\n\t};\n\tconst CullFaceNone = 0;\n\tconst CullFaceBack = 1;\n\tconst CullFaceFront = 2;\n\tconst CullFaceFrontBack = 3;\n\tconst BasicShadowMap = 0;\n\tconst PCFShadowMap = 1;\n\tconst PCFSoftShadowMap = 2;\n\tconst VSMShadowMap = 3;\n\tconst FrontSide = 0;\n\tconst BackSide = 1;\n\tconst DoubleSide = 2;\n\tconst FlatShading = 1;\n\tconst SmoothShading = 2;\n\tconst NoBlending = 0;\n\tconst NormalBlending = 1;\n\tconst AdditiveBlending = 2;\n\tconst SubtractiveBlending = 3;\n\tconst MultiplyBlending = 4;\n\tconst CustomBlending = 5;\n\tconst AddEquation = 100;\n\tconst SubtractEquation = 101;\n\tconst ReverseSubtractEquation = 102;\n\tconst MinEquation = 103;\n\tconst MaxEquation = 104;\n\tconst ZeroFactor = 200;\n\tconst OneFactor = 201;\n\tconst SrcColorFactor = 202;\n\tconst OneMinusSrcColorFactor = 203;\n\tconst SrcAlphaFactor = 204;\n\tconst OneMinusSrcAlphaFactor = 205;\n\tconst DstAlphaFactor = 206;\n\tconst OneMinusDstAlphaFactor = 207;\n\tconst DstColorFactor = 208;\n\tconst OneMinusDstColorFactor = 209;\n\tconst SrcAlphaSaturateFactor = 210;\n\tconst NeverDepth = 0;\n\tconst AlwaysDepth = 1;\n\tconst LessDepth = 2;\n\tconst LessEqualDepth = 3;\n\tconst EqualDepth = 4;\n\tconst GreaterEqualDepth = 5;\n\tconst GreaterDepth = 6;\n\tconst NotEqualDepth = 7;\n\tconst MultiplyOperation = 0;\n\tconst MixOperation = 1;\n\tconst AddOperation = 2;\n\tconst NoToneMapping = 0;\n\tconst LinearToneMapping = 1;\n\tconst ReinhardToneMapping = 2;\n\tconst CineonToneMapping = 3;\n\tconst ACESFilmicToneMapping = 4;\n\tconst CustomToneMapping = 5;\n\tconst UVMapping = 300;\n\tconst CubeReflectionMapping = 301;\n\tconst CubeRefractionMapping = 302;\n\tconst EquirectangularReflectionMapping = 303;\n\tconst EquirectangularRefractionMapping = 304;\n\tconst CubeUVReflectionMapping = 306;\n\tconst CubeUVRefractionMapping = 307;\n\tconst RepeatWrapping = 1000;\n\tconst ClampToEdgeWrapping = 1001;\n\tconst MirroredRepeatWrapping = 1002;\n\tconst NearestFilter = 1003;\n\tconst NearestMipmapNearestFilter = 1004;\n\tconst NearestMipMapNearestFilter = 1004;\n\tconst NearestMipmapLinearFilter = 1005;\n\tconst NearestMipMapLinearFilter = 1005;\n\tconst LinearFilter = 1006;\n\tconst LinearMipmapNearestFilter = 1007;\n\tconst LinearMipMapNearestFilter = 1007;\n\tconst LinearMipmapLinearFilter = 1008;\n\tconst LinearMipMapLinearFilter = 1008;\n\tconst UnsignedByteType = 1009;\n\tconst ByteType = 1010;\n\tconst ShortType = 1011;\n\tconst UnsignedShortType = 1012;\n\tconst IntType = 1013;\n\tconst UnsignedIntType = 1014;\n\tconst FloatType = 1015;\n\tconst HalfFloatType = 1016;\n\tconst UnsignedShort4444Type = 1017;\n\tconst UnsignedShort5551Type = 1018;\n\tconst UnsignedShort565Type = 1019;\n\tconst UnsignedInt248Type = 1020;\n\tconst AlphaFormat = 1021;\n\tconst RGBFormat = 1022;\n\tconst RGBAFormat = 1023;\n\tconst LuminanceFormat = 1024;\n\tconst LuminanceAlphaFormat = 1025;\n\tconst RGBEFormat = RGBAFormat;\n\tconst DepthFormat = 1026;\n\tconst DepthStencilFormat = 1027;\n\tconst RedFormat = 1028;\n\tconst RedIntegerFormat = 1029;\n\tconst RGFormat = 1030;\n\tconst RGIntegerFormat = 1031;\n\tconst RGBIntegerFormat = 1032;\n\tconst RGBAIntegerFormat = 1033;\n\tconst RGB_S3TC_DXT1_Format = 33776;\n\tconst RGBA_S3TC_DXT1_Format = 33777;\n\tconst RGBA_S3TC_DXT3_Format = 33778;\n\tconst RGBA_S3TC_DXT5_Format = 33779;\n\tconst RGB_PVRTC_4BPPV1_Format = 35840;\n\tconst RGB_PVRTC_2BPPV1_Format = 35841;\n\tconst RGBA_PVRTC_4BPPV1_Format = 35842;\n\tconst RGBA_PVRTC_2BPPV1_Format = 35843;\n\tconst RGB_ETC1_Format = 36196;\n\tconst RGB_ETC2_Format = 37492;\n\tconst RGBA_ETC2_EAC_Format = 37496;\n\tconst RGBA_ASTC_4x4_Format = 37808;\n\tconst RGBA_ASTC_5x4_Format = 37809;\n\tconst RGBA_ASTC_5x5_Format = 37810;\n\tconst RGBA_ASTC_6x5_Format = 37811;\n\tconst RGBA_ASTC_6x6_Format = 37812;\n\tconst RGBA_ASTC_8x5_Format = 37813;\n\tconst RGBA_ASTC_8x6_Format = 37814;\n\tconst RGBA_ASTC_8x8_Format = 37815;\n\tconst RGBA_ASTC_10x5_Format = 37816;\n\tconst RGBA_ASTC_10x6_Format = 37817;\n\tconst RGBA_ASTC_10x8_Format = 37818;\n\tconst RGBA_ASTC_10x10_Format = 37819;\n\tconst RGBA_ASTC_12x10_Format = 37820;\n\tconst RGBA_ASTC_12x12_Format = 37821;\n\tconst RGBA_BPTC_Format = 36492;\n\tconst SRGB8_ALPHA8_ASTC_4x4_Format = 37840;\n\tconst SRGB8_ALPHA8_ASTC_5x4_Format = 37841;\n\tconst SRGB8_ALPHA8_ASTC_5x5_Format = 37842;\n\tconst SRGB8_ALPHA8_ASTC_6x5_Format = 37843;\n\tconst SRGB8_ALPHA8_ASTC_6x6_Format = 37844;\n\tconst SRGB8_ALPHA8_ASTC_8x5_Format = 37845;\n\tconst SRGB8_ALPHA8_ASTC_8x6_Format = 37846;\n\tconst SRGB8_ALPHA8_ASTC_8x8_Format = 37847;\n\tconst SRGB8_ALPHA8_ASTC_10x5_Format = 37848;\n\tconst SRGB8_ALPHA8_ASTC_10x6_Format = 37849;\n\tconst SRGB8_ALPHA8_ASTC_10x8_Format = 37850;\n\tconst SRGB8_ALPHA8_ASTC_10x10_Format = 37851;\n\tconst SRGB8_ALPHA8_ASTC_12x10_Format = 37852;\n\tconst SRGB8_ALPHA8_ASTC_12x12_Format = 37853;\n\tconst LoopOnce = 2200;\n\tconst LoopRepeat = 2201;\n\tconst LoopPingPong = 2202;\n\tconst InterpolateDiscrete = 2300;\n\tconst InterpolateLinear = 2301;\n\tconst InterpolateSmooth = 2302;\n\tconst ZeroCurvatureEnding = 2400;\n\tconst ZeroSlopeEnding = 2401;\n\tconst WrapAroundEnding = 2402;\n\tconst NormalAnimationBlendMode = 2500;\n\tconst AdditiveAnimationBlendMode = 2501;\n\tconst TrianglesDrawMode = 0;\n\tconst TriangleStripDrawMode = 1;\n\tconst TriangleFanDrawMode = 2;\n\tconst LinearEncoding = 3000;\n\tconst sRGBEncoding = 3001;\n\tconst GammaEncoding = 3007;\n\tconst RGBEEncoding = 3002;\n\tconst LogLuvEncoding = 3003;\n\tconst RGBM7Encoding = 3004;\n\tconst RGBM16Encoding = 3005;\n\tconst RGBDEncoding = 3006;\n\tconst BasicDepthPacking = 3200;\n\tconst RGBADepthPacking = 3201;\n\tconst TangentSpaceNormalMap = 0;\n\tconst ObjectSpaceNormalMap = 1;\n\tconst ZeroStencilOp = 0;\n\tconst KeepStencilOp = 7680;\n\tconst ReplaceStencilOp = 7681;\n\tconst IncrementStencilOp = 7682;\n\tconst DecrementStencilOp = 7683;\n\tconst IncrementWrapStencilOp = 34055;\n\tconst DecrementWrapStencilOp = 34056;\n\tconst InvertStencilOp = 5386;\n\tconst NeverStencilFunc = 512;\n\tconst LessStencilFunc = 513;\n\tconst EqualStencilFunc = 514;\n\tconst LessEqualStencilFunc = 515;\n\tconst GreaterStencilFunc = 516;\n\tconst NotEqualStencilFunc = 517;\n\tconst GreaterEqualStencilFunc = 518;\n\tconst AlwaysStencilFunc = 519;\n\tconst StaticDrawUsage = 35044;\n\tconst DynamicDrawUsage = 35048;\n\tconst StreamDrawUsage = 35040;\n\tconst StaticReadUsage = 35045;\n\tconst DynamicReadUsage = 35049;\n\tconst StreamReadUsage = 35041;\n\tconst StaticCopyUsage = 35046;\n\tconst DynamicCopyUsage = 35050;\n\tconst StreamCopyUsage = 35042;\n\tconst GLSL1 = '100';\n\tconst GLSL3 = '300 es';\n\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\tclass EventDispatcher {\n\t\taddEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) this._listeners = {};\n\t\t\tconst listeners = this._listeners;\n\n\t\t\tif (listeners[type] === undefined) {\n\t\t\t\tlisteners[type] = [];\n\t\t\t}\n\n\t\t\tif (listeners[type].indexOf(listener) === -1) {\n\t\t\t\tlisteners[type].push(listener);\n\t\t\t}\n\t\t}\n\n\t\thasEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) return false;\n\t\t\tconst listeners = this._listeners;\n\t\t\treturn listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n\t\t}\n\n\t\tremoveEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) return;\n\t\t\tconst listeners = this._listeners;\n\t\t\tconst listenerArray = listeners[type];\n\n\t\t\tif (listenerArray !== undefined) {\n\t\t\t\tconst index = listenerArray.indexOf(listener);\n\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tlistenerArray.splice(index, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdispatchEvent(event) {\n\t\t\tif (this._listeners === undefined) return;\n\t\t\tconst listeners = this._listeners;\n\t\t\tconst listenerArray = listeners[event.type];\n\n\t\t\tif (listenerArray !== undefined) {\n\t\t\t\tevent.target = this; // Make a copy, in case listeners are removed while iterating.\n\n\t\t\t\tconst array = listenerArray.slice(0);\n\n\t\t\t\tfor (let i = 0, l = array.length; i < l; i++) {\n\t\t\t\t\tarray[i].call(this, event);\n\t\t\t\t}\n\n\t\t\t\tevent.target = null;\n\t\t\t}\n\t\t}\n\n\t}\n\n\tlet _seed = 1234567;\n\tconst DEG2RAD = Math.PI / 180;\n\tconst RAD2DEG = 180 / Math.PI; //\n\n\tconst _lut = [];\n\n\tfor (let i = 0; i < 256; i++) {\n\t\t_lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n\t}\n\n\tconst hasRandomUUID = typeof crypto !== 'undefined' && 'randomUUID' in crypto;\n\n\tfunction generateUUID() {\n\t\tif (hasRandomUUID) {\n\t\t\treturn crypto.randomUUID().toUpperCase();\n\t\t} // TODO Remove this code when crypto.randomUUID() is available everywhere\n\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n\n\t\tconst d0 = Math.random() * 0xffffffff | 0;\n\t\tconst d1 = Math.random() * 0xffffffff | 0;\n\t\tconst d2 = Math.random() * 0xffffffff | 0;\n\t\tconst d3 = Math.random() * 0xffffffff | 0;\n\t\tconst uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' + _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' + _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] + _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff]; // .toUpperCase() here flattens concatenated strings to save heap memory space.\n\n\t\treturn uuid.toUpperCase();\n\t}\n\n\tfunction clamp(value, min, max) {\n\t\treturn Math.max(min, Math.min(max, value));\n\t} // compute euclidian modulo of m % n\n\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\n\tfunction euclideanModulo(n, m) {\n\t\treturn (n % m + m) % m;\n\t} // Linear mapping from range <a1, a2> to range <b1, b2>\n\n\n\tfunction mapLinear(x, a1, a2, b1, b2) {\n\t\treturn b1 + (x - a1) * (b2 - b1) / (a2 - a1);\n\t} // https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\n\n\n\tfunction inverseLerp(x, y, value) {\n\t\tif (x !== y) {\n\t\t\treturn (value - x) / (y - x);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t} // https://en.wikipedia.org/wiki/Linear_interpolation\n\n\n\tfunction lerp(x, y, t) {\n\t\treturn (1 - t) * x + t * y;\n\t} // http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\n\n\n\tfunction damp(x, y, lambda, dt) {\n\t\treturn lerp(x, y, 1 - Math.exp(-lambda * dt));\n\t} // https://www.desmos.com/calculator/vcsjnyz7x4\n\n\n\tfunction pingpong(x, length = 1) {\n\t\treturn length - Math.abs(euclideanModulo(x, length * 2) - length);\n\t} // http://en.wikipedia.org/wiki/Smoothstep\n\n\n\tfunction smoothstep(x, min, max) {\n\t\tif (x <= min) return 0;\n\t\tif (x >= max) return 1;\n\t\tx = (x - min) / (max - min);\n\t\treturn x * x * (3 - 2 * x);\n\t}\n\n\tfunction smootherstep(x, min, max) {\n\t\tif (x <= min) return 0;\n\t\tif (x >= max) return 1;\n\t\tx = (x - min) / (max - min);\n\t\treturn x * x * x * (x * (x * 6 - 15) + 10);\n\t} // Random integer from <low, high> interval\n\n\n\tfunction randInt(low, high) {\n\t\treturn low + Math.floor(Math.random() * (high - low + 1));\n\t} // Random float from <low, high> interval\n\n\n\tfunction randFloat(low, high) {\n\t\treturn low + Math.random() * (high - low);\n\t} // Random float from <-range/2, range/2> interval\n\n\n\tfunction randFloatSpread(range) {\n\t\treturn range * (0.5 - Math.random());\n\t} // Deterministic pseudo-random float in the interval [ 0, 1 ]\n\n\n\tfunction seededRandom(s) {\n\t\tif (s !== undefined) _seed = s % 2147483647; // Park-Miller algorithm\n\n\t\t_seed = _seed * 16807 % 2147483647;\n\t\treturn (_seed - 1) / 2147483646;\n\t}\n\n\tfunction degToRad(degrees) {\n\t\treturn degrees * DEG2RAD;\n\t}\n\n\tfunction radToDeg(radians) {\n\t\treturn radians * RAD2DEG;\n\t}\n\n\tfunction isPowerOfTwo(value) {\n\t\treturn (value & value - 1) === 0 && value !== 0;\n\t}\n\n\tfunction ceilPowerOfTwo(value) {\n\t\treturn Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\n\t}\n\n\tfunction floorPowerOfTwo(value) {\n\t\treturn Math.pow(2, Math.floor(Math.log(value) / Math.LN2));\n\t}\n\n\tfunction setQuaternionFromProperEuler(q, a, b, c, order) {\n\t\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\t\t// rotations are applied to the axes in the order specified by 'order'\n\t\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t\t// angles are in radians\n\t\tconst cos = Math.cos;\n\t\tconst sin = Math.sin;\n\t\tconst c2 = cos(b / 2);\n\t\tconst s2 = sin(b / 2);\n\t\tconst c13 = cos((a + c) / 2);\n\t\tconst s13 = sin((a + c) / 2);\n\t\tconst c1_3 = cos((a - c) / 2);\n\t\tconst s1_3 = sin((a - c) / 2);\n\t\tconst c3_1 = cos((c - a) / 2);\n\t\tconst s3_1 = sin((c - a) / 2);\n\n\t\tswitch (order) {\n\t\t\tcase 'XYX':\n\t\t\t\tq.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZY':\n\t\t\t\tq.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXZ':\n\t\t\t\tq.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZX':\n\t\t\t\tq.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXY':\n\t\t\t\tq.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYZ':\n\t\t\t\tq.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order);\n\t\t}\n\t}\n\n\tvar MathUtils = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tDEG2RAD: DEG2RAD,\n\t\tRAD2DEG: RAD2DEG,\n\t\tgenerateUUID: generateUUID,\n\t\tclamp: clamp,\n\t\teuclideanModulo: euclideanModulo,\n\t\tmapLinear: mapLinear,\n\t\tinverseLerp: inverseLerp,\n\t\tlerp: lerp,\n\t\tdamp: damp,\n\t\tpingpong: pingpong,\n\t\tsmoothstep: smoothstep,\n\t\tsmootherstep: smootherstep,\n\t\trandInt: randInt,\n\t\trandFloat: randFloat,\n\t\trandFloatSpread: randFloatSpread,\n\t\tseededRandom: seededRandom,\n\t\tdegToRad: degToRad,\n\t\tradToDeg: radToDeg,\n\t\tisPowerOfTwo: isPowerOfTwo,\n\t\tceilPowerOfTwo: ceilPowerOfTwo,\n\t\tfloorPowerOfTwo: floorPowerOfTwo,\n\t\tsetQuaternionFromProperEuler: setQuaternionFromProperEuler\n\t});\n\n\tclass Vector2 {\n\t\tconstructor(x = 0, y = 0) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\n\t\tget width() {\n\t\t\treturn this.x;\n\t\t}\n\n\t\tset width(value) {\n\t\t\tthis.x = value;\n\t\t}\n\n\t\tget height() {\n\t\t\treturn this.y;\n\t\t}\n\n\t\tset height(value) {\n\t\t\tthis.y = value;\n\t\t}\n\n\t\tset(x, y) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.x, this.y);\n\t\t}\n\n\t\tcopy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tadd(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\treturn this;\n\t\t}\n\n\t\taddVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(v) {\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tdivide(v) {\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tdivideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t}\n\n\t\tapplyMatrix3(m) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y;\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[0] * x + e[3] * y + e[6];\n\t\t\tthis.y = e[1] * x + e[4] * y + e[7];\n\t\t\treturn this;\n\t\t}\n\n\t\tmin(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tmax(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tclamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampLength(min, max) {\n\t\t\tconst length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t}\n\n\t\tfloor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tround() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\treturn this;\n\t\t}\n\n\t\troundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\treturn this;\n\t\t}\n\n\t\tnegate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tdot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y;\n\t\t}\n\n\t\tcross(v) {\n\t\t\treturn this.x * v.y - this.y * v.x;\n\t\t}\n\n\t\tlengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y;\n\t\t}\n\n\t\tlength() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y);\n\t\t}\n\n\t\tmanhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y);\n\t\t}\n\n\t\tnormalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t}\n\n\t\tangle() {\n\t\t\t// computes the angle in radians with respect to the positive x-axis\n\t\t\tconst angle = Math.atan2(-this.y, -this.x) + Math.PI;\n\t\t\treturn angle;\n\t\t}\n\n\t\tdistanceTo(v) {\n\t\t\treturn Math.sqrt(this.distanceToSquared(v));\n\t\t}\n\n\t\tdistanceToSquared(v) {\n\t\t\tconst dx = this.x - v.x,\n\t\t\t\t\t\tdy = this.y - v.y;\n\t\t\treturn dx * dx + dy * dy;\n\t\t}\n\n\t\tmanhattanDistanceTo(v) {\n\t\t\treturn Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\n\t\t}\n\n\t\tsetLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t}\n\n\t\tlerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateAround(center, angle) {\n\t\t\tconst c = Math.cos(angle),\n\t\t\t\t\t\ts = Math.sin(angle);\n\t\t\tconst x = this.x - center.x;\n\t\t\tconst y = this.y - center.y;\n\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\tthis.y = x * s + y * c + center.y;\n\t\t\treturn this;\n\t\t}\n\n\t\trandom() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\treturn this;\n\t\t}\n\n\t\t*[Symbol.iterator]() {\n\t\t\tyield this.x;\n\t\t\tyield this.y;\n\t\t}\n\n\t}\n\n\tVector2.prototype.isVector2 = true;\n\n\tclass Matrix3 {\n\t\tconstructor() {\n\t\t\tthis.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n\t\t\tif (arguments.length > 0) {\n\t\t\t\tconsole.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');\n\t\t\t}\n\t\t}\n\n\t\tset(n11, n12, n13, n21, n22, n23, n31, n32, n33) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] = n11;\n\t\t\tte[1] = n21;\n\t\t\tte[2] = n31;\n\t\t\tte[3] = n12;\n\t\t\tte[4] = n22;\n\t\t\tte[5] = n32;\n\t\t\tte[6] = n13;\n\t\t\tte[7] = n23;\n\t\t\tte[8] = n33;\n\t\t\treturn this;\n\t\t}\n\n\t\tidentity() {\n\t\t\tthis.set(1, 0, 0, 0, 1, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(m) {\n\t\t\tconst te = this.elements;\n\t\t\tconst me = m.elements;\n\t\t\tte[0] = me[0];\n\t\t\tte[1] = me[1];\n\t\t\tte[2] = me[2];\n\t\t\tte[3] = me[3];\n\t\t\tte[4] = me[4];\n\t\t\tte[5] = me[5];\n\t\t\tte[6] = me[6];\n\t\t\tte[7] = me[7];\n\t\t\tte[8] = me[8];\n\t\t\treturn this;\n\t\t}\n\n\t\textractBasis(xAxis, yAxis, zAxis) {\n\t\t\txAxis.setFromMatrix3Column(this, 0);\n\t\t\tyAxis.setFromMatrix3Column(this, 1);\n\t\t\tzAxis.setFromMatrix3Column(this, 2);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrix4(m) {\n\t\t\tconst me = m.elements;\n\t\t\tthis.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(m) {\n\t\t\treturn this.multiplyMatrices(this, m);\n\t\t}\n\n\t\tpremultiply(m) {\n\t\t\treturn this.multiplyMatrices(m, this);\n\t\t}\n\n\t\tmultiplyMatrices(a, b) {\n\t\t\tconst ae = a.elements;\n\t\t\tconst be = b.elements;\n\t\t\tconst te = this.elements;\n\t\t\tconst a11 = ae[0],\n\t\t\t\t\t\ta12 = ae[3],\n\t\t\t\t\t\ta13 = ae[6];\n\t\t\tconst a21 = ae[1],\n\t\t\t\t\t\ta22 = ae[4],\n\t\t\t\t\t\ta23 = ae[7];\n\t\t\tconst a31 = ae[2],\n\t\t\t\t\t\ta32 = ae[5],\n\t\t\t\t\t\ta33 = ae[8];\n\t\t\tconst b11 = be[0],\n\t\t\t\t\t\tb12 = be[3],\n\t\t\t\t\t\tb13 = be[6];\n\t\t\tconst b21 = be[1],\n\t\t\t\t\t\tb22 = be[4],\n\t\t\t\t\t\tb23 = be[7];\n\t\t\tconst b31 = be[2],\n\t\t\t\t\t\tb32 = be[5],\n\t\t\t\t\t\tb33 = be[8];\n\t\t\tte[0] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t\tte[3] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t\tte[6] = a11 * b13 + a12 * b23 + a13 * b33;\n\t\t\tte[1] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t\tte[4] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t\tte[7] = a21 * b13 + a22 * b23 + a23 * b33;\n\t\t\tte[2] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t\tte[5] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t\tte[8] = a31 * b13 + a32 * b23 + a33 * b33;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(s) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] *= s;\n\t\t\tte[3] *= s;\n\t\t\tte[6] *= s;\n\t\t\tte[1] *= s;\n\t\t\tte[4] *= s;\n\t\t\tte[7] *= s;\n\t\t\tte[2] *= s;\n\t\t\tte[5] *= s;\n\t\t\tte[8] *= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tdeterminant() {\n\t\t\tconst te = this.elements;\n\t\t\tconst a = te[0],\n\t\t\t\t\t\tb = te[1],\n\t\t\t\t\t\tc = te[2],\n\t\t\t\t\t\td = te[3],\n\t\t\t\t\t\te = te[4],\n\t\t\t\t\t\tf = te[5],\n\t\t\t\t\t\tg = te[6],\n\t\t\t\t\t\th = te[7],\n\t\t\t\t\t\ti = te[8];\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\t\t}\n\n\t\tinvert() {\n\t\t\tconst te = this.elements,\n\t\t\t\t\t\tn11 = te[0],\n\t\t\t\t\t\tn21 = te[1],\n\t\t\t\t\t\tn31 = te[2],\n\t\t\t\t\t\tn12 = te[3],\n\t\t\t\t\t\tn22 = te[4],\n\t\t\t\t\t\tn32 = te[5],\n\t\t\t\t\t\tn13 = te[6],\n\t\t\t\t\t\tn23 = te[7],\n\t\t\t\t\t\tn33 = te[8],\n\t\t\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\t\t\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\t\t\tif (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);\n\t\t\tconst detInv = 1 / det;\n\t\t\tte[0] = t11 * detInv;\n\t\t\tte[1] = (n31 * n23 - n33 * n21) * detInv;\n\t\t\tte[2] = (n32 * n21 - n31 * n22) * detInv;\n\t\t\tte[3] = t12 * detInv;\n\t\t\tte[4] = (n33 * n11 - n31 * n13) * detInv;\n\t\t\tte[5] = (n31 * n12 - n32 * n11) * detInv;\n\t\t\tte[6] = t13 * detInv;\n\t\t\tte[7] = (n21 * n13 - n23 * n11) * detInv;\n\t\t\tte[8] = (n22 * n11 - n21 * n12) * detInv;\n\t\t\treturn this;\n\t\t}\n\n\t\ttranspose() {\n\t\t\tlet tmp;\n\t\t\tconst m = this.elements;\n\t\t\ttmp = m[1];\n\t\t\tm[1] = m[3];\n\t\t\tm[3] = tmp;\n\t\t\ttmp = m[2];\n\t\t\tm[2] = m[6];\n\t\t\tm[6] = tmp;\n\t\t\ttmp = m[5];\n\t\t\tm[5] = m[7];\n\t\t\tm[7] = tmp;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetNormalMatrix(matrix4) {\n\t\t\treturn this.setFromMatrix4(matrix4).invert().transpose();\n\t\t}\n\n\t\ttransposeIntoArray(r) {\n\t\t\tconst m = this.elements;\n\t\t\tr[0] = m[0];\n\t\t\tr[1] = m[3];\n\t\t\tr[2] = m[6];\n\t\t\tr[3] = m[1];\n\t\t\tr[4] = m[4];\n\t\t\tr[5] = m[7];\n\t\t\tr[6] = m[2];\n\t\t\tr[7] = m[5];\n\t\t\tr[8] = m[8];\n\t\t\treturn this;\n\t\t}\n\n\t\tsetUvTransform(tx, ty, sx, sy, rotation, cx, cy) {\n\t\t\tconst c = Math.cos(rotation);\n\t\t\tconst s = Math.sin(rotation);\n\t\t\tthis.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tscale(sx, sy) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] *= sx;\n\t\t\tte[3] *= sx;\n\t\t\tte[6] *= sx;\n\t\t\tte[1] *= sy;\n\t\t\tte[4] *= sy;\n\t\t\tte[7] *= sy;\n\t\t\treturn this;\n\t\t}\n\n\t\trotate(theta) {\n\t\t\tconst c = Math.cos(theta);\n\t\t\tconst s = Math.sin(theta);\n\t\t\tconst te = this.elements;\n\t\t\tconst a11 = te[0],\n\t\t\t\t\t\ta12 = te[3],\n\t\t\t\t\t\ta13 = te[6];\n\t\t\tconst a21 = te[1],\n\t\t\t\t\t\ta22 = te[4],\n\t\t\t\t\t\ta23 = te[7];\n\t\t\tte[0] = c * a11 + s * a21;\n\t\t\tte[3] = c * a12 + s * a22;\n\t\t\tte[6] = c * a13 + s * a23;\n\t\t\tte[1] = -s * a11 + c * a21;\n\t\t\tte[4] = -s * a12 + c * a22;\n\t\t\tte[7] = -s * a13 + c * a23;\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(tx, ty) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] += tx * te[2];\n\t\t\tte[3] += tx * te[5];\n\t\t\tte[6] += tx * te[8];\n\t\t\tte[1] += ty * te[2];\n\t\t\tte[4] += ty * te[5];\n\t\t\tte[7] += ty * te[8];\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(matrix) {\n\t\t\tconst te = this.elements;\n\t\t\tconst me = matrix.elements;\n\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tif (te[i] !== me[i]) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.elements[i] = array[i + offset];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tconst te = this.elements;\n\t\t\tarray[offset] = te[0];\n\t\t\tarray[offset + 1] = te[1];\n\t\t\tarray[offset + 2] = te[2];\n\t\t\tarray[offset + 3] = te[3];\n\t\t\tarray[offset + 4] = te[4];\n\t\t\tarray[offset + 5] = te[5];\n\t\t\tarray[offset + 6] = te[6];\n\t\t\tarray[offset + 7] = te[7];\n\t\t\tarray[offset + 8] = te[8];\n\t\t\treturn array;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().fromArray(this.elements);\n\t\t}\n\n\t}\n\n\tMatrix3.prototype.isMatrix3 = true;\n\n\tfunction arrayMax(array) {\n\t\tif (array.length === 0) return -Infinity;\n\t\tlet max = array[0];\n\n\t\tfor (let i = 1, l = array.length; i < l; ++i) {\n\t\t\tif (array[i] > max) max = array[i];\n\t\t}\n\n\t\treturn max;\n\t}\n\n\tconst TYPED_ARRAYS = {\n\t\tInt8Array: Int8Array,\n\t\tUint8Array: Uint8Array,\n\t\tUint8ClampedArray: Uint8ClampedArray,\n\t\tInt16Array: Int16Array,\n\t\tUint16Array: Uint16Array,\n\t\tInt32Array: Int32Array,\n\t\tUint32Array: Uint32Array,\n\t\tFloat32Array: Float32Array,\n\t\tFloat64Array: Float64Array\n\t};\n\n\tfunction getTypedArray(type, buffer) {\n\t\treturn new TYPED_ARRAYS[type](buffer);\n\t}\n\n\tfunction createElementNS(name) {\n\t\treturn document.createElementNS('http://www.w3.org/1999/xhtml', name);\n\t}\n\t/**\n\t\t* cyrb53 hash for string from: https://stackoverflow.com/a/52171480\n\t\t*\n\t\t* Public Domain, @bryc - https://stackoverflow.com/users/815680/bryc\n\t\t*\n\t\t* It is roughly similar to the well-known MurmurHash/xxHash algorithms. It uses a combination\n\t\t* of multiplication and Xorshift to generate the hash, but not as thorough. As a result it's\n\t\t* faster than either would be in JavaScript and significantly simpler to implement. Keep in\n\t\t* mind this is not a secure algorithm, if privacy/security is a concern, this is not for you.\n\t\t*\n\t\t* @param {string} str\n\t\t* @param {number} seed, default 0\n\t\t* @returns number\n\t\t*/\n\n\n\tfunction hashString(str, seed = 0) {\n\t\tlet h1 = 0xdeadbeef ^ seed,\n\t\t\t\th2 = 0x41c6ce57 ^ seed;\n\n\t\tfor (let i = 0, ch; i < str.length; i++) {\n\t\t\tch = str.charCodeAt(i);\n\t\t\th1 = Math.imul(h1 ^ ch, 2654435761);\n\t\t\th2 = Math.imul(h2 ^ ch, 1597334677);\n\t\t}\n\n\t\th1 = Math.imul(h1 ^ h1 >>> 16, 2246822507) ^ Math.imul(h2 ^ h2 >>> 13, 3266489909);\n\t\th2 = Math.imul(h2 ^ h2 >>> 16, 2246822507) ^ Math.imul(h1 ^ h1 >>> 13, 3266489909);\n\t\treturn 4294967296 * (2097151 & h2) + (h1 >>> 0);\n\t}\n\n\tlet _canvas;\n\n\tclass ImageUtils {\n\t\tstatic getDataURL(image) {\n\t\t\tif (/^data:/i.test(image.src)) {\n\t\t\t\treturn image.src;\n\t\t\t}\n\n\t\t\tif (typeof HTMLCanvasElement == 'undefined') {\n\t\t\t\treturn image.src;\n\t\t\t}\n\n\t\t\tlet canvas;\n\n\t\t\tif (image instanceof HTMLCanvasElement) {\n\t\t\t\tcanvas = image;\n\t\t\t} else {\n\t\t\t\tif (_canvas === undefined) _canvas = createElementNS('canvas');\n\t\t\t\t_canvas.width = image.width;\n\t\t\t\t_canvas.height = image.height;\n\n\t\t\t\tconst context = _canvas.getContext('2d');\n\n\t\t\t\tif (image instanceof ImageData) {\n\t\t\t\t\tcontext.putImageData(image, 0, 0);\n\t\t\t\t} else {\n\t\t\t\t\tcontext.drawImage(image, 0, 0, image.width, image.height);\n\t\t\t\t}\n\n\t\t\t\tcanvas = _canvas;\n\t\t\t}\n\n\t\t\tif (canvas.width > 2048 || canvas.height > 2048) {\n\t\t\t\tconsole.warn('THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image);\n\t\t\t\treturn canvas.toDataURL('image/jpeg', 0.6);\n\t\t\t} else {\n\t\t\t\treturn canvas.toDataURL('image/png');\n\t\t\t}\n\t\t}\n\n\t}\n\n\tlet textureId = 0;\n\n\tclass Texture extends EventDispatcher {\n\t\tconstructor(image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = 1, encoding = LinearEncoding) {\n\t\t\tsuper();\n\t\t\tObject.defineProperty(this, 'id', {\n\t\t\t\tvalue: textureId++\n\t\t\t});\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.name = '';\n\t\t\tthis.image = image;\n\t\t\tthis.mipmaps = [];\n\t\t\tthis.mapping = mapping;\n\t\t\tthis.wrapS = wrapS;\n\t\t\tthis.wrapT = wrapT;\n\t\t\tthis.magFilter = magFilter;\n\t\t\tthis.minFilter = minFilter;\n\t\t\tthis.anisotropy = anisotropy;\n\t\t\tthis.format = format;\n\t\t\tthis.internalFormat = null;\n\t\t\tthis.type = type;\n\t\t\tthis.offset = new Vector2(0, 0);\n\t\t\tthis.repeat = new Vector2(1, 1);\n\t\t\tthis.center = new Vector2(0, 0);\n\t\t\tthis.rotation = 0;\n\t\t\tthis.matrixAutoUpdate = true;\n\t\t\tthis.matrix = new Matrix3();\n\t\t\tthis.generateMipmaps = true;\n\t\t\tthis.premultiplyAlpha = false;\n\t\t\tthis.flipY = true;\n\t\t\tthis.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\t\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t\t//\n\t\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\n\t\t\tthis.encoding = encoding;\n\t\t\tthis.userData = {};\n\t\t\tthis.version = 0;\n\t\t\tthis.onUpdate = null;\n\t\t\tthis.isRenderTargetTexture = false;\n\t\t}\n\n\t\tupdateMatrix() {\n\t\t\tthis.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice(0);\n\t\t\tthis.mapping = source.mapping;\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\t\t\tthis.anisotropy = source.anisotropy;\n\t\t\tthis.format = source.format;\n\t\t\tthis.internalFormat = source.internalFormat;\n\t\t\tthis.type = source.type;\n\t\t\tthis.offset.copy(source.offset);\n\t\t\tthis.repeat.copy(source.repeat);\n\t\t\tthis.center.copy(source.center);\n\t\t\tthis.rotation = source.rotation;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrix.copy(source.matrix);\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\t\t\tthis.userData = JSON.parse(JSON.stringify(source.userData));\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst isRootObject = meta === undefined || typeof meta === 'string';\n\n\t\t\tif (!isRootObject && meta.textures[this.uuid] !== undefined) {\n\t\t\t\treturn meta.textures[this.uuid];\n\t\t\t}\n\n\t\t\tconst output = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\t\t\t\tmapping: this.mapping,\n\t\t\t\trepeat: [this.repeat.x, this.repeat.y],\n\t\t\t\toffset: [this.offset.x, this.offset.y],\n\t\t\t\tcenter: [this.center.x, this.center.y],\n\t\t\t\trotation: this.rotation,\n\t\t\t\twrap: [this.wrapS, this.wrapT],\n\t\t\t\tformat: this.format,\n\t\t\t\ttype: this.type,\n\t\t\t\tencoding: this.encoding,\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\t\t\t\tflipY: this.flipY,\n\t\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\t\tunpackAlignment: this.unpackAlignment\n\t\t\t};\n\n\t\t\tif (this.image !== undefined) {\n\t\t\t\t// TODO: Move to THREE.Image\n\t\t\t\tconst image = this.image;\n\n\t\t\t\tif (image.uuid === undefined) {\n\t\t\t\t\timage.uuid = generateUUID(); // UGH\n\t\t\t\t}\n\n\t\t\t\tif (!isRootObject && meta.images[image.uuid] === undefined) {\n\t\t\t\t\tlet url;\n\n\t\t\t\t\tif (Array.isArray(image)) {\n\t\t\t\t\t\t// process array of images e.g. CubeTexture\n\t\t\t\t\t\turl = [];\n\n\t\t\t\t\t\tfor (let i = 0, l = image.length; i < l; i++) {\n\t\t\t\t\t\t\t// check cube texture with data textures\n\t\t\t\t\t\t\tif (image[i].isDataTexture) {\n\t\t\t\t\t\t\t\turl.push(serializeImage(image[i].image));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\turl.push(serializeImage(image[i]));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// process single image\n\t\t\t\t\t\turl = serializeImage(image);\n\t\t\t\t\t}\n\n\t\t\t\t\tmeta.images[image.uuid] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: url\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\toutput.image = image.uuid;\n\t\t\t}\n\n\t\t\tif (JSON.stringify(this.userData) !== '{}') output.userData = this.userData;\n\n\t\t\tif (!isRootObject) {\n\t\t\t\tmeta.textures[this.uuid] = output;\n\t\t\t}\n\n\t\t\treturn output;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t\ttransformUv(uv) {\n\t\t\tif (this.mapping !== UVMapping) return uv;\n\t\t\tuv.applyMatrix3(this.matrix);\n\n\t\t\tif (uv.x < 0 || uv.x > 1) {\n\t\t\t\tswitch (this.wrapS) {\n\t\t\t\t\tcase RepeatWrapping:\n\t\t\t\t\t\tuv.x = uv.x - Math.floor(uv.x);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\t\t\t\t\t\tif (Math.abs(Math.floor(uv.x) % 2) === 1) {\n\t\t\t\t\t\t\tuv.x = Math.ceil(uv.x) - uv.x;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor(uv.x);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (uv.y < 0 || uv.y > 1) {\n\t\t\t\tswitch (this.wrapT) {\n\t\t\t\t\tcase RepeatWrapping:\n\t\t\t\t\t\tuv.y = uv.y - Math.floor(uv.y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\t\t\t\t\t\tif (Math.abs(Math.floor(uv.y) % 2) === 1) {\n\t\t\t\t\t\t\tuv.y = Math.ceil(uv.y) - uv.y;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor(uv.y);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.flipY) {\n\t\t\t\tuv.y = 1 - uv.y;\n\t\t\t}\n\n\t\t\treturn uv;\n\t\t}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t}\n\n\tTexture.DEFAULT_IMAGE = undefined;\n\tTexture.DEFAULT_MAPPING = UVMapping;\n\tTexture.prototype.isTexture = true;\n\n\tfunction serializeImage(image) {\n\t\tif (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n\t\t\t// default images\n\t\t\treturn ImageUtils.getDataURL(image);\n\t\t} else {\n\t\t\tif (image.data) {\n\t\t\t\t// images of DataTexture\n\t\t\t\treturn {\n\t\t\t\t\tdata: Array.prototype.slice.call(image.data),\n\t\t\t\t\twidth: image.width,\n\t\t\t\t\theight: image.height,\n\t\t\t\t\ttype: image.data.constructor.name\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.Texture: Unable to serialize Texture.');\n\t\t\t\treturn {};\n\t\t\t}\n\t\t}\n\t}\n\n\tclass Vector4 {\n\t\tconstructor(x = 0, y = 0, z = 0, w = 1) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\t\t}\n\n\t\tget width() {\n\t\t\treturn this.z;\n\t\t}\n\n\t\tset width(value) {\n\t\t\tthis.z = value;\n\t\t}\n\n\t\tget height() {\n\t\t\treturn this.w;\n\t\t}\n\n\t\tset height(value) {\n\t\t\tthis.w = value;\n\t\t}\n\n\t\tset(x, y, z, w) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\tthis.w = scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetZ(z) {\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetW(w) {\n\t\t\tthis.w = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.z = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\tthis.w = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tcase 2:\n\t\t\t\t\treturn this.z;\n\n\t\t\t\tcase 3:\n\t\t\t\t\treturn this.w;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.x, this.y, this.z, this.w);\n\t\t}\n\n\t\tcopy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\tthis.w = v.w !== undefined ? v.w : 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tadd(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\tthis.w += v.w;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\tthis.w += s;\n\t\t\treturn this;\n\t\t}\n\n\t\taddVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\tthis.w = a.w + b.w;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\tthis.w += v.w * s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\tthis.w -= v.w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\tthis.w -= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\tthis.w = a.w - b.w;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(v) {\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\t\t\tthis.w *= v.w;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyMatrix4(m) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z,\n\t\t\t\t\t\tw = this.w;\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;\n\t\t\tthis.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;\n\t\t\tthis.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;\n\t\t\tthis.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;\n\t\t\treturn this;\n\t\t}\n\n\t\tdivideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t}\n\n\t\tsetAxisAngleFromQuaternion(q) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\t\t\t// q is assumed to be normalized\n\t\t\tthis.w = 2 * Math.acos(q.w);\n\t\t\tconst s = Math.sqrt(1 - q.w * q.w);\n\n\t\t\tif (s < 0.0001) {\n\t\t\t\tthis.x = 1;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\t\t\t} else {\n\t\t\t\tthis.x = q.x / s;\n\t\t\t\tthis.y = q.y / s;\n\t\t\t\tthis.z = q.z / s;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetAxisAngleFromRotationMatrix(m) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tlet angle, x, y, z; // variables for result\n\n\t\t\tconst epsilon = 0.01,\n\t\t\t\t\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\n\t\t\t\t\t\t// margin to distinguish between 0 and 180 degrees\n\t\t\tte = m.elements,\n\t\t\t\t\t\tm11 = te[0],\n\t\t\t\t\t\tm12 = te[4],\n\t\t\t\t\t\tm13 = te[8],\n\t\t\t\t\t\tm21 = te[1],\n\t\t\t\t\t\tm22 = te[5],\n\t\t\t\t\t\tm23 = te[9],\n\t\t\t\t\t\tm31 = te[2],\n\t\t\t\t\t\tm32 = te[6],\n\t\t\t\t\t\tm33 = te[10];\n\n\t\t\tif (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {\n\t\t\t\t// singularity found\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t// in leading diagonal and zero in other terms\n\t\t\t\tif (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\t\t\t\t\tthis.set(1, 0, 0, 0);\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\t\t\t\t} // otherwise this singularity is angle = 180\n\n\n\t\t\t\tangle = Math.PI;\n\t\t\t\tconst xx = (m11 + 1) / 2;\n\t\t\t\tconst yy = (m22 + 1) / 2;\n\t\t\t\tconst zz = (m33 + 1) / 2;\n\t\t\t\tconst xy = (m12 + m21) / 4;\n\t\t\t\tconst xz = (m13 + m31) / 4;\n\t\t\t\tconst yz = (m23 + m32) / 4;\n\n\t\t\t\tif (xx > yy && xx > zz) {\n\t\t\t\t\t// m11 is the largest diagonal term\n\t\t\t\t\tif (xx < epsilon) {\n\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0.707106781;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tx = Math.sqrt(xx);\n\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\tz = xz / x;\n\t\t\t\t\t}\n\t\t\t\t} else if (yy > zz) {\n\t\t\t\t\t// m22 is the largest diagonal term\n\t\t\t\t\tif (yy < epsilon) {\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\tz = 0.707106781;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ty = Math.sqrt(yy);\n\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\tz = yz / y;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\t\t\t\t\tif (zz < epsilon) {\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tz = Math.sqrt(zz);\n\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\ty = yz / z;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.set(x, y, z, angle);\n\t\t\t\treturn this; // return 180 deg rotation\n\t\t\t} // as we have reached here there are no singularities so we can handle normally\n\n\n\t\t\tlet s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize\n\n\t\t\tif (Math.abs(s) < 0.001) s = 1; // prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\t\tthis.x = (m32 - m23) / s;\n\t\t\tthis.y = (m13 - m31) / s;\n\t\t\tthis.z = (m21 - m12) / s;\n\t\t\tthis.w = Math.acos((m11 + m22 + m33 - 1) / 2);\n\t\t\treturn this;\n\t\t}\n\n\t\tmin(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\tthis.z = Math.min(this.z, v.z);\n\t\t\tthis.w = Math.min(this.w, v.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tmax(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\tthis.z = Math.max(this.z, v.z);\n\t\t\tthis.w = Math.max(this.w, v.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tclamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\tthis.z = Math.max(min.z, Math.min(max.z, this.z));\n\t\t\tthis.w = Math.max(min.w, Math.min(max.w, this.w));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\tthis.z = Math.max(minVal, Math.min(maxVal, this.z));\n\t\t\tthis.w = Math.max(minVal, Math.min(maxVal, this.w));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampLength(min, max) {\n\t\t\tconst length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t}\n\n\t\tfloor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\tthis.z = Math.floor(this.z);\n\t\t\tthis.w = Math.floor(this.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\tthis.z = Math.ceil(this.z);\n\t\t\tthis.w = Math.ceil(this.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tround() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\tthis.z = Math.round(this.z);\n\t\t\tthis.w = Math.round(this.w);\n\t\t\treturn this;\n\t\t}\n\n\t\troundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\tthis.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n\t\t\tthis.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);\n\t\t\treturn this;\n\t\t}\n\n\t\tnegate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\tthis.z = -this.z;\n\t\t\tthis.w = -this.w;\n\t\t\treturn this;\n\t\t}\n\n\t\tdot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\t\t}\n\n\t\tlengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\t\t}\n\n\t\tlength() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n\t\t}\n\n\t\tmanhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);\n\t\t}\n\n\t\tnormalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t}\n\n\t\tsetLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t}\n\n\t\tlerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\tthis.z += (v.z - this.z) * alpha;\n\t\t\tthis.w += (v.w - this.w) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\tthis.z = v1.z + (v2.z - v1.z) * alpha;\n\t\t\tthis.w = v1.w + (v2.w - v1.w) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\tthis.z = array[offset + 2];\n\t\t\tthis.w = array[offset + 3];\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\tarray[offset + 2] = this.z;\n\t\t\tarray[offset + 3] = this.w;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\tthis.z = attribute.getZ(index);\n\t\t\tthis.w = attribute.getW(index);\n\t\t\treturn this;\n\t\t}\n\n\t\trandom() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\tthis.z = Math.random();\n\t\t\tthis.w = Math.random();\n\t\t\treturn this;\n\t\t}\n\n\t\t*[Symbol.iterator]() {\n\t\t\tyield this.x;\n\t\t\tyield this.y;\n\t\t\tyield this.z;\n\t\t\tyield this.w;\n\t\t}\n\n\t}\n\n\tVector4.prototype.isVector4 = true;\n\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\n\tclass WebGLRenderTarget extends EventDispatcher {\n\t\tconstructor(width, height, options = {}) {\n\t\t\tsuper();\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t\tthis.depth = 1;\n\t\t\tthis.scissor = new Vector4(0, 0, width, height);\n\t\t\tthis.scissorTest = false;\n\t\t\tthis.viewport = new Vector4(0, 0, width, height);\n\t\t\tthis.texture = new Texture(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n\t\t\tthis.texture.isRenderTargetTexture = true;\n\t\t\tthis.texture.image = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: 1\n\t\t\t};\n\t\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\t\tthis.texture.internalFormat = options.internalFormat !== undefined ? options.internalFormat : null;\n\t\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\t\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;\n\t\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\t\t}\n\n\t\tsetTexture(texture) {\n\t\t\ttexture.image = {\n\t\t\t\twidth: this.width,\n\t\t\t\theight: this.height,\n\t\t\t\tdepth: this.depth\n\t\t\t};\n\t\t\tthis.texture = texture;\n\t\t}\n\n\t\tsetSize(width, height, depth = 1) {\n\t\t\tif (this.width !== width || this.height !== height || this.depth !== depth) {\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\t\t\t\tthis.depth = depth;\n\t\t\t\tthis.texture.image.width = width;\n\t\t\t\tthis.texture.image.height = height;\n\t\t\t\tthis.texture.image.depth = depth;\n\t\t\t\tthis.dispose();\n\t\t\t}\n\n\t\t\tthis.viewport.set(0, 0, width, height);\n\t\t\tthis.scissor.set(0, 0, width, height);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\tthis.depth = source.depth;\n\t\t\tthis.viewport.copy(source.viewport);\n\t\t\tthis.texture = source.texture.clone();\n\t\t\tthis.texture.image = { ...this.texture.image\n\t\t\t}; // See #20328.\n\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\t\t\treturn this;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t}\n\n\tWebGLRenderTarget.prototype.isWebGLRenderTarget = true;\n\n\tclass WebGLMultipleRenderTargets extends WebGLRenderTarget {\n\t\tconstructor(width, height, count) {\n\t\t\tsuper(width, height);\n\t\t\tconst texture = this.texture;\n\t\t\tthis.texture = [];\n\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tthis.texture[i] = texture.clone();\n\t\t\t}\n\t\t}\n\n\t\tsetSize(width, height, depth = 1) {\n\t\t\tif (this.width !== width || this.height !== height || this.depth !== depth) {\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\t\t\t\tthis.depth = depth;\n\n\t\t\t\tfor (let i = 0, il = this.texture.length; i < il; i++) {\n\t\t\t\t\tthis.texture[i].image.width = width;\n\t\t\t\t\tthis.texture[i].image.height = height;\n\t\t\t\t\tthis.texture[i].image.depth = depth;\n\t\t\t\t}\n\n\t\t\t\tthis.dispose();\n\t\t\t}\n\n\t\t\tthis.viewport.set(0, 0, width, height);\n\t\t\tthis.scissor.set(0, 0, width, height);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.dispose();\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\tthis.depth = source.depth;\n\t\t\tthis.viewport.set(0, 0, this.width, this.height);\n\t\t\tthis.scissor.set(0, 0, this.width, this.height);\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\t\t\tthis.texture.length = 0;\n\n\t\t\tfor (let i = 0, il = source.texture.length; i < il; i++) {\n\t\t\t\tthis.texture[i] = source.texture[i].clone();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tWebGLMultipleRenderTargets.prototype.isWebGLMultipleRenderTargets = true;\n\n\tclass WebGLMultisampleRenderTarget extends WebGLRenderTarget {\n\t\tconstructor(width, height, options) {\n\t\t\tsuper(width, height, options);\n\t\t\tthis.samples = 4;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy.call(this, source);\n\t\t\tthis.samples = source.samples;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tWebGLMultisampleRenderTarget.prototype.isWebGLMultisampleRenderTarget = true;\n\n\tclass Quaternion {\n\t\tconstructor(x = 0, y = 0, z = 0, w = 1) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\t\t}\n\n\t\tstatic slerp(qa, qb, qm, t) {\n\t\t\tconsole.warn('THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.');\n\t\t\treturn qm.slerpQuaternions(qa, qb, t);\n\t\t}\n\n\t\tstatic slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\t\t\tlet x0 = src0[srcOffset0 + 0],\n\t\t\t\t\ty0 = src0[srcOffset0 + 1],\n\t\t\t\t\tz0 = src0[srcOffset0 + 2],\n\t\t\t\t\tw0 = src0[srcOffset0 + 3];\n\t\t\tconst x1 = src1[srcOffset1 + 0],\n\t\t\t\t\t\ty1 = src1[srcOffset1 + 1],\n\t\t\t\t\t\tz1 = src1[srcOffset1 + 2],\n\t\t\t\t\t\tw1 = src1[srcOffset1 + 3];\n\n\t\t\tif (t === 0) {\n\t\t\t\tdst[dstOffset + 0] = x0;\n\t\t\t\tdst[dstOffset + 1] = y0;\n\t\t\t\tdst[dstOffset + 2] = z0;\n\t\t\t\tdst[dstOffset + 3] = w0;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (t === 1) {\n\t\t\t\tdst[dstOffset + 0] = x1;\n\t\t\t\tdst[dstOffset + 1] = y1;\n\t\t\t\tdst[dstOffset + 2] = z1;\n\t\t\t\tdst[dstOffset + 3] = w1;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {\n\t\t\t\tlet s = 1 - t;\n\t\t\t\tconst cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\t\t\t\t\t\tdir = cos >= 0 ? 1 : -1,\n\t\t\t\t\t\t\tsqrSin = 1 - cos * cos; // Skip the Slerp for tiny steps to avoid numeric problems:\n\n\t\t\t\tif (sqrSin > Number.EPSILON) {\n\t\t\t\t\tconst sin = Math.sqrt(sqrSin),\n\t\t\t\t\t\t\t\tlen = Math.atan2(sin, cos * dir);\n\t\t\t\t\ts = Math.sin(s * len) / sin;\n\t\t\t\t\tt = Math.sin(t * len) / sin;\n\t\t\t\t}\n\n\t\t\t\tconst tDir = t * dir;\n\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\tw0 = w0 * s + w1 * tDir; // Normalize in case we just did a lerp:\n\n\t\t\t\tif (s === 1 - t) {\n\t\t\t\t\tconst f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\n\t\t\t\t\tx0 *= f;\n\t\t\t\t\ty0 *= f;\n\t\t\t\t\tz0 *= f;\n\t\t\t\t\tw0 *= f;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdst[dstOffset] = x0;\n\t\t\tdst[dstOffset + 1] = y0;\n\t\t\tdst[dstOffset + 2] = z0;\n\t\t\tdst[dstOffset + 3] = w0;\n\t\t}\n\n\t\tstatic multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {\n\t\t\tconst x0 = src0[srcOffset0];\n\t\t\tconst y0 = src0[srcOffset0 + 1];\n\t\t\tconst z0 = src0[srcOffset0 + 2];\n\t\t\tconst w0 = src0[srcOffset0 + 3];\n\t\t\tconst x1 = src1[srcOffset1];\n\t\t\tconst y1 = src1[srcOffset1 + 1];\n\t\t\tconst z1 = src1[srcOffset1 + 2];\n\t\t\tconst w1 = src1[srcOffset1 + 3];\n\t\t\tdst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\t\tdst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\t\tdst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\t\tdst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\t\t\treturn dst;\n\t\t}\n\n\t\tget x() {\n\t\t\treturn this._x;\n\t\t}\n\n\t\tset x(value) {\n\t\t\tthis._x = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget y() {\n\t\t\treturn this._y;\n\t\t}\n\n\t\tset y(value) {\n\t\t\tthis._y = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget z() {\n\t\t\treturn this._z;\n\t\t}\n\n\t\tset z(value) {\n\t\t\tthis._z = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget w() {\n\t\t\treturn this._w;\n\t\t}\n\n\t\tset w(value) {\n\t\t\tthis._w = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tset(x, y, z, w) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this._x, this._y, this._z, this._w);\n\t\t}\n\n\t\tcopy(quaternion) {\n\t\t\tthis._x = quaternion.x;\n\t\t\tthis._y = quaternion.y;\n\t\t\tthis._z = quaternion.z;\n\t\t\tthis._w = quaternion.w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromEuler(euler, update) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tthrow new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\tconst x = euler._x,\n\t\t\t\t\t\ty = euler._y,\n\t\t\t\t\t\tz = euler._z,\n\t\t\t\t\t\torder = euler._order; // http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t//\tcontent/SpinCalc.m\n\n\t\t\tconst cos = Math.cos;\n\t\t\tconst sin = Math.sin;\n\t\t\tconst c1 = cos(x / 2);\n\t\t\tconst c2 = cos(y / 2);\n\t\t\tconst c3 = cos(z / 2);\n\t\t\tconst s1 = sin(x / 2);\n\t\t\tconst s2 = sin(y / 2);\n\t\t\tconst s3 = sin(z / 2);\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYZ':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXZ':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXY':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYX':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZX':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZY':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order);\n\t\t\t}\n\n\t\t\tif (update !== false) this._onChangeCallback();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromAxisAngle(axis, angle) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\t\t\t// assumes axis is normalized\n\t\t\tconst halfAngle = angle / 2,\n\t\t\t\t\t\ts = Math.sin(halfAngle);\n\t\t\tthis._x = axis.x * s;\n\t\t\tthis._y = axis.y * s;\n\t\t\tthis._z = axis.z * s;\n\t\t\tthis._w = Math.cos(halfAngle);\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromRotationMatrix(m) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tconst te = m.elements,\n\t\t\t\t\t\tm11 = te[0],\n\t\t\t\t\t\tm12 = te[4],\n\t\t\t\t\t\tm13 = te[8],\n\t\t\t\t\t\tm21 = te[1],\n\t\t\t\t\t\tm22 = te[5],\n\t\t\t\t\t\tm23 = te[9],\n\t\t\t\t\t\tm31 = te[2],\n\t\t\t\t\t\tm32 = te[6],\n\t\t\t\t\t\tm33 = te[10],\n\t\t\t\t\t\ttrace = m11 + m22 + m33;\n\n\t\t\tif (trace > 0) {\n\t\t\t\tconst s = 0.5 / Math.sqrt(trace + 1.0);\n\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\tthis._x = (m32 - m23) * s;\n\t\t\t\tthis._y = (m13 - m31) * s;\n\t\t\t\tthis._z = (m21 - m12) * s;\n\t\t\t} else if (m11 > m22 && m11 > m33) {\n\t\t\t\tconst s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n\t\t\t\tthis._w = (m32 - m23) / s;\n\t\t\t\tthis._x = 0.25 * s;\n\t\t\t\tthis._y = (m12 + m21) / s;\n\t\t\t\tthis._z = (m13 + m31) / s;\n\t\t\t} else if (m22 > m33) {\n\t\t\t\tconst s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n\t\t\t\tthis._w = (m13 - m31) / s;\n\t\t\t\tthis._x = (m12 + m21) / s;\n\t\t\t\tthis._y = 0.25 * s;\n\t\t\t\tthis._z = (m23 + m32) / s;\n\t\t\t} else {\n\t\t\t\tconst s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n\t\t\t\tthis._w = (m21 - m12) / s;\n\t\t\t\tthis._x = (m13 + m31) / s;\n\t\t\t\tthis._y = (m23 + m32) / s;\n\t\t\t\tthis._z = 0.25 * s;\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromUnitVectors(vFrom, vTo) {\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\t\t\tlet r = vFrom.dot(vTo) + 1;\n\n\t\t\tif (r < Number.EPSILON) {\n\t\t\t\t// vFrom and vTo point in opposite directions\n\t\t\t\tr = 0;\n\n\t\t\t\tif (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n\t\t\t\t\tthis._x = -vFrom.y;\n\t\t\t\t\tthis._y = vFrom.x;\n\t\t\t\t\tthis._z = 0;\n\t\t\t\t\tthis._w = r;\n\t\t\t\t} else {\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = -vFrom.z;\n\t\t\t\t\tthis._z = vFrom.y;\n\t\t\t\t\tthis._w = r;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\t\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\t\tthis._w = r;\n\t\t\t}\n\n\t\t\treturn this.normalize();\n\t\t}\n\n\t\tangleTo(q) {\n\t\t\treturn 2 * Math.acos(Math.abs(clamp(this.dot(q), -1, 1)));\n\t\t}\n\n\t\trotateTowards(q, step) {\n\t\t\tconst angle = this.angleTo(q);\n\t\t\tif (angle === 0) return this;\n\t\t\tconst t = Math.min(1, step / angle);\n\t\t\tthis.slerp(q, t);\n\t\t\treturn this;\n\t\t}\n\n\t\tidentity() {\n\t\t\treturn this.set(0, 0, 0, 1);\n\t\t}\n\n\t\tinvert() {\n\t\t\t// quaternion is assumed to have unit length\n\t\t\treturn this.conjugate();\n\t\t}\n\n\t\tconjugate() {\n\t\t\tthis._x *= -1;\n\t\t\tthis._y *= -1;\n\t\t\tthis._z *= -1;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tdot(v) {\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\t\t}\n\n\t\tlengthSq() {\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\t\t}\n\n\t\tlength() {\n\t\t\treturn Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);\n\t\t}\n\n\t\tnormalize() {\n\t\t\tlet l = this.length();\n\n\t\t\tif (l === 0) {\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = 1;\n\t\t\t} else {\n\t\t\t\tl = 1 / l;\n\t\t\t\tthis._x = this._x * l;\n\t\t\t\tthis._y = this._y * l;\n\t\t\t\tthis._z = this._z * l;\n\t\t\t\tthis._w = this._w * l;\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(q, p) {\n\t\t\tif (p !== undefined) {\n\t\t\t\tconsole.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');\n\t\t\t\treturn this.multiplyQuaternions(q, p);\n\t\t\t}\n\n\t\t\treturn this.multiplyQuaternions(this, q);\n\t\t}\n\n\t\tpremultiply(q) {\n\t\t\treturn this.multiplyQuaternions(q, this);\n\t\t}\n\n\t\tmultiplyQuaternions(a, b) {\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\t\t\tconst qax = a._x,\n\t\t\t\t\t\tqay = a._y,\n\t\t\t\t\t\tqaz = a._z,\n\t\t\t\t\t\tqaw = a._w;\n\t\t\tconst qbx = b._x,\n\t\t\t\t\t\tqby = b._y,\n\t\t\t\t\t\tqbz = b._z,\n\t\t\t\t\t\tqbw = b._w;\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tslerp(qb, t) {\n\t\t\tif (t === 0) return this;\n\t\t\tif (t === 1) return this.copy(qb);\n\t\t\tconst x = this._x,\n\t\t\t\t\t\ty = this._y,\n\t\t\t\t\t\tz = this._z,\n\t\t\t\t\t\tw = this._w; // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\t\tlet cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\t\tif (cosHalfTheta < 0) {\n\t\t\t\tthis._w = -qb._w;\n\t\t\t\tthis._x = -qb._x;\n\t\t\t\tthis._y = -qb._y;\n\t\t\t\tthis._z = -qb._z;\n\t\t\t\tcosHalfTheta = -cosHalfTheta;\n\t\t\t} else {\n\t\t\t\tthis.copy(qb);\n\t\t\t}\n\n\t\t\tif (cosHalfTheta >= 1.0) {\n\t\t\t\tthis._w = w;\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tconst sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\t\tif (sqrSinHalfTheta <= Number.EPSILON) {\n\t\t\t\tconst s = 1 - t;\n\t\t\t\tthis._w = s * w + t * this._w;\n\t\t\t\tthis._x = s * x + t * this._x;\n\t\t\t\tthis._y = s * y + t * this._y;\n\t\t\t\tthis._z = s * z + t * this._z;\n\t\t\t\tthis.normalize();\n\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tconst sinHalfTheta = Math.sqrt(sqrSinHalfTheta);\n\t\t\tconst halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n\t\t\tconst ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,\n\t\t\t\t\t\tratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n\t\t\tthis._w = w * ratioA + this._w * ratioB;\n\t\t\tthis._x = x * ratioA + this._x * ratioB;\n\t\t\tthis._y = y * ratioA + this._y * ratioB;\n\t\t\tthis._z = z * ratioA + this._z * ratioB;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tslerpQuaternions(qa, qb, t) {\n\t\t\tthis.copy(qa).slerp(qb, t);\n\t\t}\n\n\t\trandom() {\n\t\t\t// Derived from http://planning.cs.uiuc.edu/node198.html\n\t\t\t// Note, this source uses w, x, y, z ordering,\n\t\t\t// so we swap the order below.\n\t\t\tconst u1 = Math.random();\n\t\t\tconst sqrt1u1 = Math.sqrt(1 - u1);\n\t\t\tconst sqrtu1 = Math.sqrt(u1);\n\t\t\tconst u2 = 2 * Math.PI * Math.random();\n\t\t\tconst u3 = 2 * Math.PI * Math.random();\n\t\t\treturn this.set(sqrt1u1 * Math.cos(u2), sqrtu1 * Math.sin(u3), sqrtu1 * Math.cos(u3), sqrt1u1 * Math.sin(u2));\n\t\t}\n\n\t\tequals(quaternion) {\n\t\t\treturn quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis._x = array[offset];\n\t\t\tthis._y = array[offset + 1];\n\t\t\tthis._z = array[offset + 2];\n\t\t\tthis._w = array[offset + 3];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this._x;\n\t\t\tarray[offset + 1] = this._y;\n\t\t\tarray[offset + 2] = this._z;\n\t\t\tarray[offset + 3] = this._w;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index) {\n\t\t\tthis._x = attribute.getX(index);\n\t\t\tthis._y = attribute.getY(index);\n\t\t\tthis._z = attribute.getZ(index);\n\t\t\tthis._w = attribute.getW(index);\n\t\t\treturn this;\n\t\t}\n\n\t\t_onChange(callback) {\n\t\t\tthis._onChangeCallback = callback;\n\t\t\treturn this;\n\t\t}\n\n\t\t_onChangeCallback() {}\n\n\t}\n\n\tQuaternion.prototype.isQuaternion = true;\n\n\tclass Vector3 {\n\t\tconstructor(x = 0, y = 0, z = 0) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t}\n\n\t\tset(x, y, z) {\n\t\t\tif (z === undefined) z = this.z; // sprite.scale.set(x,y)\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetZ(z) {\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.z = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tcase 2:\n\t\t\t\t\treturn this.z;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.x, this.y, this.z);\n\t\t}\n\n\t\tcopy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tadd(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\treturn this;\n\t\t}\n\n\t\taddVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsubVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');\n\t\t\t\treturn this.multiplyVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyVectors(a, b) {\n\t\t\tthis.x = a.x * b.x;\n\t\t\tthis.y = a.y * b.y;\n\t\t\tthis.z = a.z * b.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyEuler(euler) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tconsole.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\treturn this.applyQuaternion(_quaternion$4.setFromEuler(euler));\n\t\t}\n\n\t\tapplyAxisAngle(axis, angle) {\n\t\t\treturn this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));\n\t\t}\n\n\t\tapplyMatrix3(m) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z;\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[0] * x + e[3] * y + e[6] * z;\n\t\t\tthis.y = e[1] * x + e[4] * y + e[7] * z;\n\t\t\tthis.z = e[2] * x + e[5] * y + e[8] * z;\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyNormalMatrix(m) {\n\t\t\treturn this.applyMatrix3(m).normalize();\n\t\t}\n\n\t\tapplyMatrix4(m) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z;\n\t\t\tconst e = m.elements;\n\t\t\tconst w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\n\t\t\tthis.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;\n\t\t\tthis.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;\n\t\t\tthis.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyQuaternion(q) {\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z;\n\t\t\tconst qx = q.x,\n\t\t\t\t\t\tqy = q.y,\n\t\t\t\t\t\tqz = q.z,\n\t\t\t\t\t\tqw = q.w; // calculate quat * vector\n\n\t\t\tconst ix = qw * x + qy * z - qz * y;\n\t\t\tconst iy = qw * y + qz * x - qx * z;\n\t\t\tconst iz = qw * z + qx * y - qy * x;\n\t\t\tconst iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n\t\t\tthis.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n\t\t\tthis.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n\t\t\tthis.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\t\t\treturn this;\n\t\t}\n\n\t\tproject(camera) {\n\t\t\treturn this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);\n\t\t}\n\n\t\tunproject(camera) {\n\t\t\treturn this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);\n\t\t}\n\n\t\ttransformDirection(m) {\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t// vector interpreted as a direction\n\t\t\tconst x = this.x,\n\t\t\t\t\t\ty = this.y,\n\t\t\t\t\t\tz = this.z;\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[0] * x + e[4] * y + e[8] * z;\n\t\t\tthis.y = e[1] * x + e[5] * y + e[9] * z;\n\t\t\tthis.z = e[2] * x + e[6] * y + e[10] * z;\n\t\t\treturn this.normalize();\n\t\t}\n\n\t\tdivide(v) {\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\tthis.z /= v.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tdivideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t}\n\n\t\tmin(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\tthis.z = Math.min(this.z, v.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tmax(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\tthis.z = Math.max(this.z, v.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tclamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\tthis.z = Math.max(min.z, Math.min(max.z, this.z));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\tthis.z = Math.max(minVal, Math.min(maxVal, this.z));\n\t\t\treturn this;\n\t\t}\n\n\t\tclampLength(min, max) {\n\t\t\tconst length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t}\n\n\t\tfloor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\tthis.z = Math.floor(this.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\tthis.z = Math.ceil(this.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tround() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\tthis.z = Math.round(this.z);\n\t\t\treturn this;\n\t\t}\n\n\t\troundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\tthis.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tnegate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\tthis.z = -this.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tdot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\t\t} // TODO lengthSquared?\n\n\n\t\tlengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\t\t}\n\n\t\tlength() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n\t\t}\n\n\t\tmanhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\n\t\t}\n\n\t\tnormalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t}\n\n\t\tsetLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t}\n\n\t\tlerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\tthis.z += (v.z - this.z) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\tthis.z = v1.z + (v2.z - v1.z) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tcross(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');\n\t\t\t\treturn this.crossVectors(v, w);\n\t\t\t}\n\n\t\t\treturn this.crossVectors(this, v);\n\t\t}\n\n\t\tcrossVectors(a, b) {\n\t\t\tconst ax = a.x,\n\t\t\t\t\t\tay = a.y,\n\t\t\t\t\t\taz = a.z;\n\t\t\tconst bx = b.x,\n\t\t\t\t\t\tby = b.y,\n\t\t\t\t\t\tbz = b.z;\n\t\t\tthis.x = ay * bz - az * by;\n\t\t\tthis.y = az * bx - ax * bz;\n\t\t\tthis.z = ax * by - ay * bx;\n\t\t\treturn this;\n\t\t}\n\n\t\tprojectOnVector(v) {\n\t\t\tconst denominator = v.lengthSq();\n\t\t\tif (denominator === 0) return this.set(0, 0, 0);\n\t\t\tconst scalar = v.dot(this) / denominator;\n\t\t\treturn this.copy(v).multiplyScalar(scalar);\n\t\t}\n\n\t\tprojectOnPlane(planeNormal) {\n\t\t\t_vector$c.copy(this).projectOnVector(planeNormal);\n\n\t\t\treturn this.sub(_vector$c);\n\t\t}\n\n\t\treflect(normal) {\n\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t// normal is assumed to have unit length\n\t\t\treturn this.sub(_vector$c.copy(normal).multiplyScalar(2 * this.dot(normal)));\n\t\t}\n\n\t\tangleTo(v) {\n\t\t\tconst denominator = Math.sqrt(this.lengthSq() * v.lengthSq());\n\t\t\tif (denominator === 0) return Math.PI / 2;\n\t\t\tconst theta = this.dot(v) / denominator; // clamp, to handle numerical problems\n\n\t\t\treturn Math.acos(clamp(theta, -1, 1));\n\t\t}\n\n\t\tdistanceTo(v) {\n\t\t\treturn Math.sqrt(this.distanceToSquared(v));\n\t\t}\n\n\t\tdistanceToSquared(v) {\n\t\t\tconst dx = this.x - v.x,\n\t\t\t\t\t\tdy = this.y - v.y,\n\t\t\t\t\t\tdz = this.z - v.z;\n\t\t\treturn dx * dx + dy * dy + dz * dz;\n\t\t}\n\n\t\tmanhattanDistanceTo(v) {\n\t\t\treturn Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);\n\t\t}\n\n\t\tsetFromSpherical(s) {\n\t\t\treturn this.setFromSphericalCoords(s.radius, s.phi, s.theta);\n\t\t}\n\n\t\tsetFromSphericalCoords(radius, phi, theta) {\n\t\t\tconst sinPhiRadius = Math.sin(phi) * radius;\n\t\t\tthis.x = sinPhiRadius * Math.sin(theta);\n\t\t\tthis.y = Math.cos(phi) * radius;\n\t\t\tthis.z = sinPhiRadius * Math.cos(theta);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromCylindrical(c) {\n\t\t\treturn this.setFromCylindricalCoords(c.radius, c.theta, c.y);\n\t\t}\n\n\t\tsetFromCylindricalCoords(radius, theta, y) {\n\t\t\tthis.x = radius * Math.sin(theta);\n\t\t\tthis.y = y;\n\t\t\tthis.z = radius * Math.cos(theta);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrixPosition(m) {\n\t\t\tconst e = m.elements;\n\t\t\tthis.x = e[12];\n\t\t\tthis.y = e[13];\n\t\t\tthis.z = e[14];\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrixScale(m) {\n\t\t\tconst sx = this.setFromMatrixColumn(m, 0).length();\n\t\t\tconst sy = this.setFromMatrixColumn(m, 1).length();\n\t\t\tconst sz = this.setFromMatrixColumn(m, 2).length();\n\t\t\tthis.x = sx;\n\t\t\tthis.y = sy;\n\t\t\tthis.z = sz;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrixColumn(m, index) {\n\t\t\treturn this.fromArray(m.elements, index * 4);\n\t\t}\n\n\t\tsetFromMatrix3Column(m, index) {\n\t\t\treturn this.fromArray(m.elements, index * 3);\n\t\t}\n\n\t\tequals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y && v.z === this.z;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\tthis.z = array[offset + 2];\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\tarray[offset + 2] = this.z;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\tthis.z = attribute.getZ(index);\n\t\t\treturn this;\n\t\t}\n\n\t\trandom() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\tthis.z = Math.random();\n\t\t\treturn this;\n\t\t}\n\n\t\trandomDirection() {\n\t\t\t// Derived from https://mathworld.wolfram.com/SpherePointPicking.html\n\t\t\tconst u = (Math.random() - 0.5) * 2;\n\t\t\tconst t = Math.random() * Math.PI * 2;\n\t\t\tconst f = Math.sqrt(1 - u ** 2);\n\t\t\tthis.x = f * Math.cos(t);\n\t\t\tthis.y = f * Math.sin(t);\n\t\t\tthis.z = u;\n\t\t\treturn this;\n\t\t}\n\n\t\t*[Symbol.iterator]() {\n\t\t\tyield this.x;\n\t\t\tyield this.y;\n\t\t\tyield this.z;\n\t\t}\n\n\t}\n\n\tVector3.prototype.isVector3 = true;\n\n\tconst _vector$c = /*@__PURE__*/new Vector3();\n\n\tconst _quaternion$4 = /*@__PURE__*/new Quaternion();\n\n\tclass Box3 {\n\t\tconstructor(min = new Vector3(+Infinity, +Infinity, +Infinity), max = new Vector3(-Infinity, -Infinity, -Infinity)) {\n\t\t\tthis.min = min;\n\t\t\tthis.max = max;\n\t\t}\n\n\t\tset(min, max) {\n\t\t\tthis.min.copy(min);\n\t\t\tthis.max.copy(max);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromArray(array) {\n\t\t\tlet minX = +Infinity;\n\t\t\tlet minY = +Infinity;\n\t\t\tlet minZ = +Infinity;\n\t\t\tlet maxX = -Infinity;\n\t\t\tlet maxY = -Infinity;\n\t\t\tlet maxZ = -Infinity;\n\n\t\t\tfor (let i = 0, l = array.length; i < l; i += 3) {\n\t\t\t\tconst x = array[i];\n\t\t\t\tconst y = array[i + 1];\n\t\t\t\tconst z = array[i + 2];\n\t\t\t\tif (x < minX) minX = x;\n\t\t\t\tif (y < minY) minY = y;\n\t\t\t\tif (z < minZ) minZ = z;\n\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\tif (z > maxZ) maxZ = z;\n\t\t\t}\n\n\t\t\tthis.min.set(minX, minY, minZ);\n\t\t\tthis.max.set(maxX, maxY, maxZ);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromBufferAttribute(attribute) {\n\t\t\tlet minX = +Infinity;\n\t\t\tlet minY = +Infinity;\n\t\t\tlet minZ = +Infinity;\n\t\t\tlet maxX = -Infinity;\n\t\t\tlet maxY = -Infinity;\n\t\t\tlet maxZ = -Infinity;\n\n\t\t\tfor (let i = 0, l = attribute.count; i < l; i++) {\n\t\t\t\tconst x = attribute.getX(i);\n\t\t\t\tconst y = attribute.getY(i);\n\t\t\t\tconst z = attribute.getZ(i);\n\t\t\t\tif (x < minX) minX = x;\n\t\t\t\tif (y < minY) minY = y;\n\t\t\t\tif (z < minZ) minZ = z;\n\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\tif (z > maxZ) maxZ = z;\n\t\t\t}\n\n\t\t\tthis.min.set(minX, minY, minZ);\n\t\t\tthis.max.set(maxX, maxY, maxZ);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPoints(points) {\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor (let i = 0, il = points.length; i < il; i++) {\n\t\t\t\tthis.expandByPoint(points[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromCenterAndSize(center, size) {\n\t\t\tconst halfSize = _vector$b.copy(size).multiplyScalar(0.5);\n\n\t\t\tthis.min.copy(center).sub(halfSize);\n\t\t\tthis.max.copy(center).add(halfSize);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromObject(object) {\n\t\t\tthis.makeEmpty();\n\t\t\treturn this.expandByObject(object);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(box) {\n\t\t\tthis.min.copy(box.min);\n\t\t\tthis.max.copy(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeEmpty() {\n\t\t\tthis.min.x = this.min.y = this.min.z = +Infinity;\n\t\t\tthis.max.x = this.max.y = this.max.z = -Infinity;\n\t\t\treturn this;\n\t\t}\n\n\t\tisEmpty() {\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\t\treturn this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;\n\t\t}\n\n\t\tgetCenter(target) {\n\t\t\treturn this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n\t\t}\n\n\t\tgetSize(target) {\n\t\t\treturn this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);\n\t\t}\n\n\t\texpandByPoint(point) {\n\t\t\tthis.min.min(point);\n\t\t\tthis.max.max(point);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByVector(vector) {\n\t\t\tthis.min.sub(vector);\n\t\t\tthis.max.add(vector);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByScalar(scalar) {\n\t\t\tthis.min.addScalar(-scalar);\n\t\t\tthis.max.addScalar(scalar);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByObject(object) {\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t// accounting for both the object's, and children's, world transforms\n\t\t\tobject.updateWorldMatrix(false, false);\n\t\t\tconst geometry = object.geometry;\n\n\t\t\tif (geometry !== undefined) {\n\t\t\t\tif (geometry.boundingBox === null) {\n\t\t\t\t\tgeometry.computeBoundingBox();\n\t\t\t\t}\n\n\t\t\t\t_box$3.copy(geometry.boundingBox);\n\n\t\t\t\t_box$3.applyMatrix4(object.matrixWorld);\n\n\t\t\t\tthis.union(_box$3);\n\t\t\t}\n\n\t\t\tconst children = object.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tthis.expandByObject(children[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\treturn point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;\n\t\t}\n\n\t\tcontainsBox(box) {\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;\n\t\t}\n\n\t\tgetParameter(point, target) {\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\t\t\treturn target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\t// using 6 splitting planes to rule out intersections.\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\tthis.clampPoint(sphere.center, _vector$b); // If that point is inside the sphere, the AABB and sphere intersect.\n\n\t\t\treturn _vector$b.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n\t\t}\n\n\t\tintersectsPlane(plane) {\n\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\t\t\tlet min, max;\n\n\t\t\tif (plane.normal.x > 0) {\n\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\tmax = plane.normal.x * this.max.x;\n\t\t\t} else {\n\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\tmax = plane.normal.x * this.min.x;\n\t\t\t}\n\n\t\t\tif (plane.normal.y > 0) {\n\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\tmax += plane.normal.y * this.max.y;\n\t\t\t} else {\n\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\tmax += plane.normal.y * this.min.y;\n\t\t\t}\n\n\t\t\tif (plane.normal.z > 0) {\n\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\tmax += plane.normal.z * this.max.z;\n\t\t\t} else {\n\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\tmax += plane.normal.z * this.min.z;\n\t\t\t}\n\n\t\t\treturn min <= -plane.constant && max >= -plane.constant;\n\t\t}\n\n\t\tintersectsTriangle(triangle) {\n\t\t\tif (this.isEmpty()) {\n\t\t\t\treturn false;\n\t\t\t} // compute box center and extents\n\n\n\t\t\tthis.getCenter(_center);\n\n\t\t\t_extents.subVectors(this.max, _center); // translate triangle to aabb origin\n\n\n\t\t\t_v0$2.subVectors(triangle.a, _center);\n\n\t\t\t_v1$7.subVectors(triangle.b, _center);\n\n\t\t\t_v2$3.subVectors(triangle.c, _center); // compute edge vectors for triangle\n\n\n\t\t\t_f0.subVectors(_v1$7, _v0$2);\n\n\t\t\t_f1.subVectors(_v2$3, _v1$7);\n\n\t\t\t_f2.subVectors(_v0$2, _v2$3); // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\n\n\t\t\tlet axes = [0, -_f0.z, _f0.y, 0, -_f1.z, _f1.y, 0, -_f2.z, _f2.y, _f0.z, 0, -_f0.x, _f1.z, 0, -_f1.x, _f2.z, 0, -_f2.x, -_f0.y, _f0.x, 0, -_f1.y, _f1.x, 0, -_f2.y, _f2.x, 0];\n\n\t\t\tif (!satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents)) {\n\t\t\t\treturn false;\n\t\t\t} // test 3 face normals from the aabb\n\n\n\t\t\taxes = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n\t\t\tif (!satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents)) {\n\t\t\t\treturn false;\n\t\t\t} // finally testing the face normal of the triangle\n\t\t\t// use already existing triangle edge vectors here\n\n\n\t\t\t_triangleNormal.crossVectors(_f0, _f1);\n\n\t\t\taxes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];\n\t\t\treturn satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents);\n\t\t}\n\n\t\tclampPoint(point, target) {\n\t\t\treturn target.copy(point).clamp(this.min, this.max);\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\tconst clampedPoint = _vector$b.copy(point).clamp(this.min, this.max);\n\n\t\t\treturn clampedPoint.sub(point).length();\n\t\t}\n\n\t\tgetBoundingSphere(target) {\n\t\t\tthis.getCenter(target.center);\n\t\t\ttarget.radius = this.getSize(_vector$b).length() * 0.5;\n\t\t\treturn target;\n\t\t}\n\n\t\tintersect(box) {\n\t\t\tthis.min.max(box.min);\n\t\t\tthis.max.min(box.max); // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\n\t\t\tif (this.isEmpty()) this.makeEmpty();\n\t\t\treturn this;\n\t\t}\n\n\t\tunion(box) {\n\t\t\tthis.min.min(box.min);\n\t\t\tthis.max.max(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\t// transform of empty box is an empty box.\n\t\t\tif (this.isEmpty()) return this; // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\n\t\t\t_points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\n\n\n\t\t\t_points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\n\n\n\t\t\t_points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\n\n\n\t\t\t_points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\n\n\n\t\t\t_points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\n\n\n\t\t\t_points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\n\n\n\t\t\t_points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\n\n\n\t\t\t_points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\n\n\n\t\t\tthis.setFromPoints(_points);\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(offset) {\n\t\t\tthis.min.add(offset);\n\t\t\tthis.max.add(offset);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(box) {\n\t\t\treturn box.min.equals(this.min) && box.max.equals(this.max);\n\t\t}\n\n\t}\n\n\tBox3.prototype.isBox3 = true;\n\tconst _points = [/*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3()];\n\n\tconst _vector$b = /*@__PURE__*/new Vector3();\n\n\tconst _box$3 = /*@__PURE__*/new Box3(); // triangle centered vertices\n\n\n\tconst _v0$2 = /*@__PURE__*/new Vector3();\n\n\tconst _v1$7 = /*@__PURE__*/new Vector3();\n\n\tconst _v2$3 = /*@__PURE__*/new Vector3(); // triangle edge vectors\n\n\n\tconst _f0 = /*@__PURE__*/new Vector3();\n\n\tconst _f1 = /*@__PURE__*/new Vector3();\n\n\tconst _f2 = /*@__PURE__*/new Vector3();\n\n\tconst _center = /*@__PURE__*/new Vector3();\n\n\tconst _extents = /*@__PURE__*/new Vector3();\n\n\tconst _triangleNormal = /*@__PURE__*/new Vector3();\n\n\tconst _testAxis = /*@__PURE__*/new Vector3();\n\n\tfunction satForAxes(axes, v0, v1, v2, extents) {\n\t\tfor (let i = 0, j = axes.length - 3; i <= j; i += 3) {\n\t\t\t_testAxis.fromArray(axes, i); // project the aabb onto the seperating axis\n\n\n\t\t\tconst r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z); // project all 3 vertices of the triangle onto the seperating axis\n\n\t\t\tconst p0 = v0.dot(_testAxis);\n\t\t\tconst p1 = v1.dot(_testAxis);\n\t\t\tconst p2 = v2.dot(_testAxis); // actual test, basically see if either of the most extreme of the triangle points intersects r\n\n\t\t\tif (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {\n\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t\t// the axis is seperating and we can exit\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tconst _box$2 = /*@__PURE__*/new Box3();\n\n\tconst _v1$6 = /*@__PURE__*/new Vector3();\n\n\tconst _toFarthestPoint = /*@__PURE__*/new Vector3();\n\n\tconst _toPoint = /*@__PURE__*/new Vector3();\n\n\tclass Sphere {\n\t\tconstructor(center = new Vector3(), radius = -1) {\n\t\t\tthis.center = center;\n\t\t\tthis.radius = radius;\n\t\t}\n\n\t\tset(center, radius) {\n\t\t\tthis.center.copy(center);\n\t\t\tthis.radius = radius;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPoints(points, optionalCenter) {\n\t\t\tconst center = this.center;\n\n\t\t\tif (optionalCenter !== undefined) {\n\t\t\t\tcenter.copy(optionalCenter);\n\t\t\t} else {\n\t\t\t\t_box$2.setFromPoints(points).getCenter(center);\n\t\t\t}\n\n\t\t\tlet maxRadiusSq = 0;\n\n\t\t\tfor (let i = 0, il = points.length; i < il; i++) {\n\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt(maxRadiusSq);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(sphere) {\n\t\t\tthis.center.copy(sphere.center);\n\t\t\tthis.radius = sphere.radius;\n\t\t\treturn this;\n\t\t}\n\n\t\tisEmpty() {\n\t\t\treturn this.radius < 0;\n\t\t}\n\n\t\tmakeEmpty() {\n\t\t\tthis.center.set(0, 0, 0);\n\t\t\tthis.radius = -1;\n\t\t\treturn this;\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\treturn point.distanceToSquared(this.center) <= this.radius * this.radius;\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\treturn point.distanceTo(this.center) - this.radius;\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\tconst radiusSum = this.radius + sphere.radius;\n\t\t\treturn sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\treturn box.intersectsSphere(this);\n\t\t}\n\n\t\tintersectsPlane(plane) {\n\t\t\treturn Math.abs(plane.distanceToPoint(this.center)) <= this.radius;\n\t\t}\n\n\t\tclampPoint(point, target) {\n\t\t\tconst deltaLengthSq = this.center.distanceToSquared(point);\n\t\t\ttarget.copy(point);\n\n\t\t\tif (deltaLengthSq > this.radius * this.radius) {\n\t\t\t\ttarget.sub(this.center).normalize();\n\t\t\t\ttarget.multiplyScalar(this.radius).add(this.center);\n\t\t\t}\n\n\t\t\treturn target;\n\t\t}\n\n\t\tgetBoundingBox(target) {\n\t\t\tif (this.isEmpty()) {\n\t\t\t\t// Empty sphere produces empty bounding box\n\t\t\t\ttarget.makeEmpty();\n\t\t\t\treturn target;\n\t\t\t}\n\n\t\t\ttarget.set(this.center, this.center);\n\t\t\ttarget.expandByScalar(this.radius);\n\t\t\treturn target;\n\t\t}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\tthis.center.applyMatrix4(matrix);\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(offset) {\n\t\t\tthis.center.add(offset);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByPoint(point) {\n\t\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671\n\t\t\t_toPoint.subVectors(point, this.center);\n\n\t\t\tconst lengthSq = _toPoint.lengthSq();\n\n\t\t\tif (lengthSq > this.radius * this.radius) {\n\t\t\t\tconst length = Math.sqrt(lengthSq);\n\t\t\t\tconst missingRadiusHalf = (length - this.radius) * 0.5; // Nudge this sphere towards the target point. Add half the missing distance to radius,\n\t\t\t\t// and the other half to position. This gives a tighter enclosure, instead of if\n\t\t\t\t// the whole missing distance were just added to radius.\n\n\t\t\t\tthis.center.add(_toPoint.multiplyScalar(missingRadiusHalf / length));\n\t\t\t\tthis.radius += missingRadiusHalf;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tunion(sphere) {\n\t\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769\n\t\t\t// To enclose another sphere into this sphere, we only need to enclose two points:\n\t\t\t// 1) Enclose the farthest point on the other sphere into this sphere.\n\t\t\t// 2) Enclose the opposite point of the farthest point into this sphere.\n\t\t\t_toFarthestPoint.subVectors(sphere.center, this.center).normalize().multiplyScalar(sphere.radius);\n\n\t\t\tthis.expandByPoint(_v1$6.copy(sphere.center).add(_toFarthestPoint));\n\t\t\tthis.expandByPoint(_v1$6.copy(sphere.center).sub(_toFarthestPoint));\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(sphere) {\n\t\t\treturn sphere.center.equals(this.center) && sphere.radius === this.radius;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tconst _vector$a = /*@__PURE__*/new Vector3();\n\n\tconst _segCenter = /*@__PURE__*/new Vector3();\n\n\tconst _segDir = /*@__PURE__*/new Vector3();\n\n\tconst _diff = /*@__PURE__*/new Vector3();\n\n\tconst _edge1 = /*@__PURE__*/new Vector3();\n\n\tconst _edge2 = /*@__PURE__*/new Vector3();\n\n\tconst _normal$1 = /*@__PURE__*/new Vector3();\n\n\tclass Ray {\n\t\tconstructor(origin = new Vector3(), direction = new Vector3(0, 0, -1)) {\n\t\t\tthis.origin = origin;\n\t\t\tthis.direction = direction;\n\t\t}\n\n\t\tset(origin, direction) {\n\t\t\tthis.origin.copy(origin);\n\t\t\tthis.direction.copy(direction);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(ray) {\n\t\t\tthis.origin.copy(ray.origin);\n\t\t\tthis.direction.copy(ray.direction);\n\t\t\treturn this;\n\t\t}\n\n\t\tat(t, target) {\n\t\t\treturn target.copy(this.direction).multiplyScalar(t).add(this.origin);\n\t\t}\n\n\t\tlookAt(v) {\n\t\t\tthis.direction.copy(v).sub(this.origin).normalize();\n\t\t\treturn this;\n\t\t}\n\n\t\trecast(t) {\n\t\t\tthis.origin.copy(this.at(t, _vector$a));\n\t\t\treturn this;\n\t\t}\n\n\t\tclosestPointToPoint(point, target) {\n\t\t\ttarget.subVectors(point, this.origin);\n\t\t\tconst directionDistance = target.dot(this.direction);\n\n\t\t\tif (directionDistance < 0) {\n\t\t\t\treturn target.copy(this.origin);\n\t\t\t}\n\n\t\t\treturn target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\treturn Math.sqrt(this.distanceSqToPoint(point));\n\t\t}\n\n\t\tdistanceSqToPoint(point) {\n\t\t\tconst directionDistance = _vector$a.subVectors(point, this.origin).dot(this.direction); // point behind the ray\n\n\n\t\t\tif (directionDistance < 0) {\n\t\t\t\treturn this.origin.distanceToSquared(point);\n\t\t\t}\n\n\t\t\t_vector$a.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n\n\t\t\treturn _vector$a.distanceToSquared(point);\n\t\t}\n\n\t\tdistanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t// defined by v0 and v1\n\t\t\t// It can also set two optional targets :\n\t\t\t// - The closest point on the ray\n\t\t\t// - The closest point on the segment\n\t\t\t_segCenter.copy(v0).add(v1).multiplyScalar(0.5);\n\n\t\t\t_segDir.copy(v1).sub(v0).normalize();\n\n\t\t\t_diff.copy(this.origin).sub(_segCenter);\n\n\t\t\tconst segExtent = v0.distanceTo(v1) * 0.5;\n\t\t\tconst a01 = -this.direction.dot(_segDir);\n\n\t\t\tconst b0 = _diff.dot(this.direction);\n\n\t\t\tconst b1 = -_diff.dot(_segDir);\n\n\t\t\tconst c = _diff.lengthSq();\n\n\t\t\tconst det = Math.abs(1 - a01 * a01);\n\t\t\tlet s0, s1, sqrDist, extDet;\n\n\t\t\tif (det > 0) {\n\t\t\t\t// The ray and segment are not parallel.\n\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\textDet = segExtent * det;\n\n\t\t\t\tif (s0 >= 0) {\n\t\t\t\t\tif (s1 >= -extDet) {\n\t\t\t\t\t\tif (s1 <= extDet) {\n\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\t\t\t\t\t\t\tconst invDet = 1 / det;\n\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\tsqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// region 1\n\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// region 5\n\t\t\t\t\t\ts1 = -segExtent;\n\t\t\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (s1 <= -extDet) {\n\t\t\t\t\t\t// region 4\n\t\t\t\t\t\ts0 = Math.max(0, -(-a01 * segExtent + b0));\n\t\t\t\t\t\ts1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t} else if (s1 <= extDet) {\n\t\t\t\t\t\t// region 3\n\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\ts1 = Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// region 2\n\t\t\t\t\t\ts0 = Math.max(0, -(a01 * segExtent + b0));\n\t\t\t\t\t\ts1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Ray and segment are parallel.\n\t\t\t\ts1 = a01 > 0 ? -segExtent : segExtent;\n\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t}\n\n\t\t\tif (optionalPointOnRay) {\n\t\t\t\toptionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);\n\t\t\t}\n\n\t\t\tif (optionalPointOnSegment) {\n\t\t\t\toptionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);\n\t\t\t}\n\n\t\t\treturn sqrDist;\n\t\t}\n\n\t\tintersectSphere(sphere, target) {\n\t\t\t_vector$a.subVectors(sphere.center, this.origin);\n\n\t\t\tconst tca = _vector$a.dot(this.direction);\n\n\t\t\tconst d2 = _vector$a.dot(_vector$a) - tca * tca;\n\t\t\tconst radius2 = sphere.radius * sphere.radius;\n\t\t\tif (d2 > radius2) return null;\n\t\t\tconst thc = Math.sqrt(radius2 - d2); // t0 = first intersect point - entrance on front of sphere\n\n\t\t\tconst t0 = tca - thc; // t1 = second intersect point - exit point on back of sphere\n\n\t\t\tconst t1 = tca + thc; // test to see if both t0 and t1 are behind the ray - if so, return null\n\n\t\t\tif (t0 < 0 && t1 < 0) return null; // test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\n\t\t\tif (t0 < 0) return this.at(t1, target); // else t0 is in front of the ray, so return the first collision point scaled by t0\n\n\t\t\treturn this.at(t0, target);\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\treturn this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;\n\t\t}\n\n\t\tdistanceToPlane(plane) {\n\t\t\tconst denominator = plane.normal.dot(this.direction);\n\n\t\t\tif (denominator === 0) {\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif (plane.distanceToPoint(this.origin) === 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t} // Null is preferable to undefined since undefined means.... it is undefined\n\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst t = -(this.origin.dot(plane.normal) + plane.constant) / denominator; // Return if the ray never intersects the plane\n\n\t\t\treturn t >= 0 ? t : null;\n\t\t}\n\n\t\tintersectPlane(plane, target) {\n\t\t\tconst t = this.distanceToPlane(plane);\n\n\t\t\tif (t === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn this.at(t, target);\n\t\t}\n\n\t\tintersectsPlane(plane) {\n\t\t\t// check if the ray lies on the plane first\n\t\t\tconst distToPoint = plane.distanceToPoint(this.origin);\n\n\t\t\tif (distToPoint === 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst denominator = plane.normal.dot(this.direction);\n\n\t\t\tif (denominator * distToPoint < 0) {\n\t\t\t\treturn true;\n\t\t\t} // ray origin is behind the plane (and is pointing behind it)\n\n\n\t\t\treturn false;\n\t\t}\n\n\t\tintersectBox(box, target) {\n\t\t\tlet tmin, tmax, tymin, tymax, tzmin, tzmax;\n\t\t\tconst invdirx = 1 / this.direction.x,\n\t\t\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\t\t\tinvdirz = 1 / this.direction.z;\n\t\t\tconst origin = this.origin;\n\n\t\t\tif (invdirx >= 0) {\n\t\t\t\ttmin = (box.min.x - origin.x) * invdirx;\n\t\t\t\ttmax = (box.max.x - origin.x) * invdirx;\n\t\t\t} else {\n\t\t\t\ttmin = (box.max.x - origin.x) * invdirx;\n\t\t\t\ttmax = (box.min.x - origin.x) * invdirx;\n\t\t\t}\n\n\t\t\tif (invdiry >= 0) {\n\t\t\t\ttymin = (box.min.y - origin.y) * invdiry;\n\t\t\t\ttymax = (box.max.y - origin.y) * invdiry;\n\t\t\t} else {\n\t\t\t\ttymin = (box.max.y - origin.y) * invdiry;\n\t\t\t\ttymax = (box.min.y - origin.y) * invdiry;\n\t\t\t}\n\n\t\t\tif (tmin > tymax || tymin > tmax) return null; // These lines also handle the case where tmin or tmax is NaN\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\t\tif (tymin > tmin || tmin !== tmin) tmin = tymin;\n\t\t\tif (tymax < tmax || tmax !== tmax) tmax = tymax;\n\n\t\t\tif (invdirz >= 0) {\n\t\t\t\ttzmin = (box.min.z - origin.z) * invdirz;\n\t\t\t\ttzmax = (box.max.z - origin.z) * invdirz;\n\t\t\t} else {\n\t\t\t\ttzmin = (box.max.z - origin.z) * invdirz;\n\t\t\t\ttzmax = (box.min.z - origin.z) * invdirz;\n\t\t\t}\n\n\t\t\tif (tmin > tzmax || tzmin > tmax) return null;\n\t\t\tif (tzmin > tmin || tmin !== tmin) tmin = tzmin;\n\t\t\tif (tzmax < tmax || tmax !== tmax) tmax = tzmax; //return point closest to the ray (positive side)\n\n\t\t\tif (tmax < 0) return null;\n\t\t\treturn this.at(tmin >= 0 ? tmin : tmax, target);\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\treturn this.intersectBox(box, _vector$a) !== null;\n\t\t}\n\n\t\tintersectTriangle(a, b, c, backfaceCulling, target) {\n\t\t\t// Compute the offset origin, edges, and normal.\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\t\t\t_edge1.subVectors(b, a);\n\n\t\t\t_edge2.subVectors(c, a);\n\n\t\t\t_normal$1.crossVectors(_edge1, _edge2); // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//\t |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//\t |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//\t |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\n\n\t\t\tlet DdN = this.direction.dot(_normal$1);\n\t\t\tlet sign;\n\n\t\t\tif (DdN > 0) {\n\t\t\t\tif (backfaceCulling) return null;\n\t\t\t\tsign = 1;\n\t\t\t} else if (DdN < 0) {\n\t\t\t\tsign = -1;\n\t\t\t\tDdN = -DdN;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t_diff.subVectors(this.origin, a);\n\n\t\t\tconst DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2)); // b1 < 0, no intersection\n\n\t\t\tif (DdQxE2 < 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff)); // b2 < 0, no intersection\n\n\t\t\tif (DdE1xQ < 0) {\n\t\t\t\treturn null;\n\t\t\t} // b1+b2 > 1, no intersection\n\n\n\t\t\tif (DdQxE2 + DdE1xQ > DdN) {\n\t\t\t\treturn null;\n\t\t\t} // Line intersects triangle, check if ray does.\n\n\n\t\t\tconst QdN = -sign * _diff.dot(_normal$1); // t < 0, no intersection\n\n\n\t\t\tif (QdN < 0) {\n\t\t\t\treturn null;\n\t\t\t} // Ray intersects triangle.\n\n\n\t\t\treturn this.at(QdN / DdN, target);\n\t\t}\n\n\t\tapplyMatrix4(matrix4) {\n\t\t\tthis.origin.applyMatrix4(matrix4);\n\t\t\tthis.direction.transformDirection(matrix4);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(ray) {\n\t\t\treturn ray.origin.equals(this.origin) && ray.direction.equals(this.direction);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tclass Matrix4 {\n\t\tconstructor() {\n\t\t\tthis.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\n\t\t\tif (arguments.length > 0) {\n\t\t\t\tconsole.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');\n\t\t\t}\n\t\t}\n\n\t\tset(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] = n11;\n\t\t\tte[4] = n12;\n\t\t\tte[8] = n13;\n\t\t\tte[12] = n14;\n\t\t\tte[1] = n21;\n\t\t\tte[5] = n22;\n\t\t\tte[9] = n23;\n\t\t\tte[13] = n24;\n\t\t\tte[2] = n31;\n\t\t\tte[6] = n32;\n\t\t\tte[10] = n33;\n\t\t\tte[14] = n34;\n\t\t\tte[3] = n41;\n\t\t\tte[7] = n42;\n\t\t\tte[11] = n43;\n\t\t\tte[15] = n44;\n\t\t\treturn this;\n\t\t}\n\n\t\tidentity() {\n\t\t\tthis.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new Matrix4().fromArray(this.elements);\n\t\t}\n\n\t\tcopy(m) {\n\t\t\tconst te = this.elements;\n\t\t\tconst me = m.elements;\n\t\t\tte[0] = me[0];\n\t\t\tte[1] = me[1];\n\t\t\tte[2] = me[2];\n\t\t\tte[3] = me[3];\n\t\t\tte[4] = me[4];\n\t\t\tte[5] = me[5];\n\t\t\tte[6] = me[6];\n\t\t\tte[7] = me[7];\n\t\t\tte[8] = me[8];\n\t\t\tte[9] = me[9];\n\t\t\tte[10] = me[10];\n\t\t\tte[11] = me[11];\n\t\t\tte[12] = me[12];\n\t\t\tte[13] = me[13];\n\t\t\tte[14] = me[14];\n\t\t\tte[15] = me[15];\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyPosition(m) {\n\t\t\tconst te = this.elements,\n\t\t\t\t\t\tme = m.elements;\n\t\t\tte[12] = me[12];\n\t\t\tte[13] = me[13];\n\t\t\tte[14] = me[14];\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromMatrix3(m) {\n\t\t\tconst me = m.elements;\n\t\t\tthis.set(me[0], me[3], me[6], 0, me[1], me[4], me[7], 0, me[2], me[5], me[8], 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\textractBasis(xAxis, yAxis, zAxis) {\n\t\t\txAxis.setFromMatrixColumn(this, 0);\n\t\t\tyAxis.setFromMatrixColumn(this, 1);\n\t\t\tzAxis.setFromMatrixColumn(this, 2);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeBasis(xAxis, yAxis, zAxis) {\n\t\t\tthis.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\textractRotation(m) {\n\t\t\t// this method does not support reflection matrices\n\t\t\tconst te = this.elements;\n\t\t\tconst me = m.elements;\n\n\t\t\tconst scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();\n\n\t\t\tconst scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();\n\n\t\t\tconst scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();\n\n\t\t\tte[0] = me[0] * scaleX;\n\t\t\tte[1] = me[1] * scaleX;\n\t\t\tte[2] = me[2] * scaleX;\n\t\t\tte[3] = 0;\n\t\t\tte[4] = me[4] * scaleY;\n\t\t\tte[5] = me[5] * scaleY;\n\t\t\tte[6] = me[6] * scaleY;\n\t\t\tte[7] = 0;\n\t\t\tte[8] = me[8] * scaleZ;\n\t\t\tte[9] = me[9] * scaleZ;\n\t\t\tte[10] = me[10] * scaleZ;\n\t\t\tte[11] = 0;\n\t\t\tte[12] = 0;\n\t\t\tte[13] = 0;\n\t\t\tte[14] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationFromEuler(euler) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tconsole.error('THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\tconst te = this.elements;\n\t\t\tconst x = euler.x,\n\t\t\t\t\t\ty = euler.y,\n\t\t\t\t\t\tz = euler.z;\n\t\t\tconst a = Math.cos(x),\n\t\t\t\t\t\tb = Math.sin(x);\n\t\t\tconst c = Math.cos(y),\n\t\t\t\t\t\td = Math.sin(y);\n\t\t\tconst e = Math.cos(z),\n\t\t\t\t\t\tf = Math.sin(z);\n\n\t\t\tif (euler.order === 'XYZ') {\n\t\t\t\tconst ae = a * e,\n\t\t\t\t\t\t\taf = a * f,\n\t\t\t\t\t\t\tbe = b * e,\n\t\t\t\t\t\t\tbf = b * f;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = -c * f;\n\t\t\t\tte[8] = d;\n\t\t\t\tte[1] = af + be * d;\n\t\t\t\tte[5] = ae - bf * d;\n\t\t\t\tte[9] = -b * c;\n\t\t\t\tte[2] = bf - ae * d;\n\t\t\t\tte[6] = be + af * d;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'YXZ') {\n\t\t\t\tconst ce = c * e,\n\t\t\t\t\t\t\tcf = c * f,\n\t\t\t\t\t\t\tde = d * e,\n\t\t\t\t\t\t\tdf = d * f;\n\t\t\t\tte[0] = ce + df * b;\n\t\t\t\tte[4] = de * b - cf;\n\t\t\t\tte[8] = a * d;\n\t\t\t\tte[1] = a * f;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = -b;\n\t\t\t\tte[2] = cf * b - de;\n\t\t\t\tte[6] = df + ce * b;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'ZXY') {\n\t\t\t\tconst ce = c * e,\n\t\t\t\t\t\t\tcf = c * f,\n\t\t\t\t\t\t\tde = d * e,\n\t\t\t\t\t\t\tdf = d * f;\n\t\t\t\tte[0] = ce - df * b;\n\t\t\t\tte[4] = -a * f;\n\t\t\t\tte[8] = de + cf * b;\n\t\t\t\tte[1] = cf + de * b;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = df - ce * b;\n\t\t\t\tte[2] = -a * d;\n\t\t\t\tte[6] = b;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'ZYX') {\n\t\t\t\tconst ae = a * e,\n\t\t\t\t\t\t\taf = a * f,\n\t\t\t\t\t\t\tbe = b * e,\n\t\t\t\t\t\t\tbf = b * f;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = be * d - af;\n\t\t\t\tte[8] = ae * d + bf;\n\t\t\t\tte[1] = c * f;\n\t\t\t\tte[5] = bf * d + ae;\n\t\t\t\tte[9] = af * d - be;\n\t\t\t\tte[2] = -d;\n\t\t\t\tte[6] = b * c;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'YZX') {\n\t\t\t\tconst ac = a * c,\n\t\t\t\t\t\t\tad = a * d,\n\t\t\t\t\t\t\tbc = b * c,\n\t\t\t\t\t\t\tbd = b * d;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = bd - ac * f;\n\t\t\t\tte[8] = bc * f + ad;\n\t\t\t\tte[1] = f;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = -b * e;\n\t\t\t\tte[2] = -d * e;\n\t\t\t\tte[6] = ad * f + bc;\n\t\t\t\tte[10] = ac - bd * f;\n\t\t\t} else if (euler.order === 'XZY') {\n\t\t\t\tconst ac = a * c,\n\t\t\t\t\t\t\tad = a * d,\n\t\t\t\t\t\t\tbc = b * c,\n\t\t\t\t\t\t\tbd = b * d;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = -f;\n\t\t\t\tte[8] = d * e;\n\t\t\t\tte[1] = ac * f + bd;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = ad * f - bc;\n\t\t\t\tte[2] = bc * f - ad;\n\t\t\t\tte[6] = b * e;\n\t\t\t\tte[10] = bd * f + ac;\n\t\t\t} // bottom row\n\n\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = 0; // last column\n\n\t\t\tte[12] = 0;\n\t\t\tte[13] = 0;\n\t\t\tte[14] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationFromQuaternion(q) {\n\t\t\treturn this.compose(_zero, q, _one);\n\t\t}\n\n\t\tlookAt(eye, target, up) {\n\t\t\tconst te = this.elements;\n\n\t\t\t_z.subVectors(eye, target);\n\n\t\t\tif (_z.lengthSq() === 0) {\n\t\t\t\t// eye and target are in the same position\n\t\t\t\t_z.z = 1;\n\t\t\t}\n\n\t\t\t_z.normalize();\n\n\t\t\t_x.crossVectors(up, _z);\n\n\t\t\tif (_x.lengthSq() === 0) {\n\t\t\t\t// up and z are parallel\n\t\t\t\tif (Math.abs(up.z) === 1) {\n\t\t\t\t\t_z.x += 0.0001;\n\t\t\t\t} else {\n\t\t\t\t\t_z.z += 0.0001;\n\t\t\t\t}\n\n\t\t\t\t_z.normalize();\n\n\t\t\t\t_x.crossVectors(up, _z);\n\t\t\t}\n\n\t\t\t_x.normalize();\n\n\t\t\t_y.crossVectors(_z, _x);\n\n\t\t\tte[0] = _x.x;\n\t\t\tte[4] = _y.x;\n\t\t\tte[8] = _z.x;\n\t\t\tte[1] = _x.y;\n\t\t\tte[5] = _y.y;\n\t\t\tte[9] = _z.y;\n\t\t\tte[2] = _x.z;\n\t\t\tte[6] = _y.z;\n\t\t\tte[10] = _z.z;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(m, n) {\n\t\t\tif (n !== undefined) {\n\t\t\t\tconsole.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');\n\t\t\t\treturn this.multiplyMatrices(m, n);\n\t\t\t}\n\n\t\t\treturn this.multiplyMatrices(this, m);\n\t\t}\n\n\t\tpremultiply(m) {\n\t\t\treturn this.multiplyMatrices(m, this);\n\t\t}\n\n\t\tmultiplyMatrices(a, b) {\n\t\t\tconst ae = a.elements;\n\t\t\tconst be = b.elements;\n\t\t\tconst te = this.elements;\n\t\t\tconst a11 = ae[0],\n\t\t\t\t\t\ta12 = ae[4],\n\t\t\t\t\t\ta13 = ae[8],\n\t\t\t\t\t\ta14 = ae[12];\n\t\t\tconst a21 = ae[1],\n\t\t\t\t\t\ta22 = ae[5],\n\t\t\t\t\t\ta23 = ae[9],\n\t\t\t\t\t\ta24 = ae[13];\n\t\t\tconst a31 = ae[2],\n\t\t\t\t\t\ta32 = ae[6],\n\t\t\t\t\t\ta33 = ae[10],\n\t\t\t\t\t\ta34 = ae[14];\n\t\t\tconst a41 = ae[3],\n\t\t\t\t\t\ta42 = ae[7],\n\t\t\t\t\t\ta43 = ae[11],\n\t\t\t\t\t\ta44 = ae[15];\n\t\t\tconst b11 = be[0],\n\t\t\t\t\t\tb12 = be[4],\n\t\t\t\t\t\tb13 = be[8],\n\t\t\t\t\t\tb14 = be[12];\n\t\t\tconst b21 = be[1],\n\t\t\t\t\t\tb22 = be[5],\n\t\t\t\t\t\tb23 = be[9],\n\t\t\t\t\t\tb24 = be[13];\n\t\t\tconst b31 = be[2],\n\t\t\t\t\t\tb32 = be[6],\n\t\t\t\t\t\tb33 = be[10],\n\t\t\t\t\t\tb34 = be[14];\n\t\t\tconst b41 = be[3],\n\t\t\t\t\t\tb42 = be[7],\n\t\t\t\t\t\tb43 = be[11],\n\t\t\t\t\t\tb44 = be[15];\n\t\t\tte[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\tte[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\tte[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\tte[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\t\t\tte[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\tte[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\tte[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\tte[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\t\t\tte[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\tte[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\tte[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\tte[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\t\t\tte[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\tte[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\tte[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\tte[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(s) {\n\t\t\tconst te = this.elements;\n\t\t\tte[0] *= s;\n\t\t\tte[4] *= s;\n\t\t\tte[8] *= s;\n\t\t\tte[12] *= s;\n\t\t\tte[1] *= s;\n\t\t\tte[5] *= s;\n\t\t\tte[9] *= s;\n\t\t\tte[13] *= s;\n\t\t\tte[2] *= s;\n\t\t\tte[6] *= s;\n\t\t\tte[10] *= s;\n\t\t\tte[14] *= s;\n\t\t\tte[3] *= s;\n\t\t\tte[7] *= s;\n\t\t\tte[11] *= s;\n\t\t\tte[15] *= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tdeterminant() {\n\t\t\tconst te = this.elements;\n\t\t\tconst n11 = te[0],\n\t\t\t\t\t\tn12 = te[4],\n\t\t\t\t\t\tn13 = te[8],\n\t\t\t\t\t\tn14 = te[12];\n\t\t\tconst n21 = te[1],\n\t\t\t\t\t\tn22 = te[5],\n\t\t\t\t\t\tn23 = te[9],\n\t\t\t\t\t\tn24 = te[13];\n\t\t\tconst n31 = te[2],\n\t\t\t\t\t\tn32 = te[6],\n\t\t\t\t\t\tn33 = te[10],\n\t\t\t\t\t\tn34 = te[14];\n\t\t\tconst n41 = te[3],\n\t\t\t\t\t\tn42 = te[7],\n\t\t\t\t\t\tn43 = te[11],\n\t\t\t\t\t\tn44 = te[15]; //TODO: make this more efficient\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\t\treturn n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);\n\t\t}\n\n\t\ttranspose() {\n\t\t\tconst te = this.elements;\n\t\t\tlet tmp;\n\t\t\ttmp = te[1];\n\t\t\tte[1] = te[4];\n\t\t\tte[4] = tmp;\n\t\t\ttmp = te[2];\n\t\t\tte[2] = te[8];\n\t\t\tte[8] = tmp;\n\t\t\ttmp = te[6];\n\t\t\tte[6] = te[9];\n\t\t\tte[9] = tmp;\n\t\t\ttmp = te[3];\n\t\t\tte[3] = te[12];\n\t\t\tte[12] = tmp;\n\t\t\ttmp = te[7];\n\t\t\tte[7] = te[13];\n\t\t\tte[13] = tmp;\n\t\t\ttmp = te[11];\n\t\t\tte[11] = te[14];\n\t\t\tte[14] = tmp;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetPosition(x, y, z) {\n\t\t\tconst te = this.elements;\n\n\t\t\tif (x.isVector3) {\n\t\t\t\tte[12] = x.x;\n\t\t\t\tte[13] = x.y;\n\t\t\t\tte[14] = x.z;\n\t\t\t} else {\n\t\t\t\tte[12] = x;\n\t\t\t\tte[13] = y;\n\t\t\t\tte[14] = z;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tinvert() {\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\t\tconst te = this.elements,\n\t\t\t\t\t\tn11 = te[0],\n\t\t\t\t\t\tn21 = te[1],\n\t\t\t\t\t\tn31 = te[2],\n\t\t\t\t\t\tn41 = te[3],\n\t\t\t\t\t\tn12 = te[4],\n\t\t\t\t\t\tn22 = te[5],\n\t\t\t\t\t\tn32 = te[6],\n\t\t\t\t\t\tn42 = te[7],\n\t\t\t\t\t\tn13 = te[8],\n\t\t\t\t\t\tn23 = te[9],\n\t\t\t\t\t\tn33 = te[10],\n\t\t\t\t\t\tn43 = te[11],\n\t\t\t\t\t\tn14 = te[12],\n\t\t\t\t\t\tn24 = te[13],\n\t\t\t\t\t\tn34 = te[14],\n\t\t\t\t\t\tn44 = te[15],\n\t\t\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\t\t\tconst det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\t\t\tif (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n\t\t\tconst detInv = 1 / det;\n\t\t\tte[0] = t11 * detInv;\n\t\t\tte[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;\n\t\t\tte[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;\n\t\t\tte[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;\n\t\t\tte[4] = t12 * detInv;\n\t\t\tte[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;\n\t\t\tte[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;\n\t\t\tte[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;\n\t\t\tte[8] = t13 * detInv;\n\t\t\tte[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;\n\t\t\tte[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;\n\t\t\tte[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;\n\t\t\tte[12] = t14 * detInv;\n\t\t\tte[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;\n\t\t\tte[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;\n\t\t\tte[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;\n\t\t\treturn this;\n\t\t}\n\n\t\tscale(v) {\n\t\t\tconst te = this.elements;\n\t\t\tconst x = v.x,\n\t\t\t\t\t\ty = v.y,\n\t\t\t\t\t\tz = v.z;\n\t\t\tte[0] *= x;\n\t\t\tte[4] *= y;\n\t\t\tte[8] *= z;\n\t\t\tte[1] *= x;\n\t\t\tte[5] *= y;\n\t\t\tte[9] *= z;\n\t\t\tte[2] *= x;\n\t\t\tte[6] *= y;\n\t\t\tte[10] *= z;\n\t\t\tte[3] *= x;\n\t\t\tte[7] *= y;\n\t\t\tte[11] *= z;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetMaxScaleOnAxis() {\n\t\t\tconst te = this.elements;\n\t\t\tconst scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\n\t\t\tconst scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\n\t\t\tconst scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\n\t\t\treturn Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\n\t\t}\n\n\t\tmakeTranslation(x, y, z) {\n\t\t\tthis.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationX(theta) {\n\t\t\tconst c = Math.cos(theta),\n\t\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationY(theta) {\n\t\t\tconst c = Math.cos(theta),\n\t\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationZ(theta) {\n\t\t\tconst c = Math.cos(theta),\n\t\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeRotationAxis(axis, angle) {\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\t\t\tconst c = Math.cos(angle);\n\t\t\tconst s = Math.sin(angle);\n\t\t\tconst t = 1 - c;\n\t\t\tconst x = axis.x,\n\t\t\t\t\t\ty = axis.y,\n\t\t\t\t\t\tz = axis.z;\n\t\t\tconst tx = t * x,\n\t\t\t\t\t\tty = t * y;\n\t\t\tthis.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeScale(x, y, z) {\n\t\t\tthis.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeShear(xy, xz, yx, yz, zx, zy) {\n\t\t\tthis.set(1, yx, zx, 0, xy, 1, zy, 0, xz, yz, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t}\n\n\t\tcompose(position, quaternion, scale) {\n\t\t\tconst te = this.elements;\n\t\t\tconst x = quaternion._x,\n\t\t\t\t\t\ty = quaternion._y,\n\t\t\t\t\t\tz = quaternion._z,\n\t\t\t\t\t\tw = quaternion._w;\n\t\t\tconst x2 = x + x,\n\t\t\t\t\t\ty2 = y + y,\n\t\t\t\t\t\tz2 = z + z;\n\t\t\tconst xx = x * x2,\n\t\t\t\t\t\txy = x * y2,\n\t\t\t\t\t\txz = x * z2;\n\t\t\tconst yy = y * y2,\n\t\t\t\t\t\tyz = y * z2,\n\t\t\t\t\t\tzz = z * z2;\n\t\t\tconst wx = w * x2,\n\t\t\t\t\t\twy = w * y2,\n\t\t\t\t\t\twz = w * z2;\n\t\t\tconst sx = scale.x,\n\t\t\t\t\t\tsy = scale.y,\n\t\t\t\t\t\tsz = scale.z;\n\t\t\tte[0] = (1 - (yy + zz)) * sx;\n\t\t\tte[1] = (xy + wz) * sx;\n\t\t\tte[2] = (xz - wy) * sx;\n\t\t\tte[3] = 0;\n\t\t\tte[4] = (xy - wz) * sy;\n\t\t\tte[5] = (1 - (xx + zz)) * sy;\n\t\t\tte[6] = (yz + wx) * sy;\n\t\t\tte[7] = 0;\n\t\t\tte[8] = (xz + wy) * sz;\n\t\t\tte[9] = (yz - wx) * sz;\n\t\t\tte[10] = (1 - (xx + yy)) * sz;\n\t\t\tte[11] = 0;\n\t\t\tte[12] = position.x;\n\t\t\tte[13] = position.y;\n\t\t\tte[14] = position.z;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tdecompose(position, quaternion, scale) {\n\t\t\tconst te = this.elements;\n\n\t\t\tlet sx = _v1$5.set(te[0], te[1], te[2]).length();\n\n\t\t\tconst sy = _v1$5.set(te[4], te[5], te[6]).length();\n\n\t\t\tconst sz = _v1$5.set(te[8], te[9], te[10]).length(); // if determine is negative, we need to invert one scale\n\n\n\t\t\tconst det = this.determinant();\n\t\t\tif (det < 0) sx = -sx;\n\t\t\tposition.x = te[12];\n\t\t\tposition.y = te[13];\n\t\t\tposition.z = te[14]; // scale the rotation part\n\n\t\t\t_m1$2.copy(this);\n\n\t\t\tconst invSX = 1 / sx;\n\t\t\tconst invSY = 1 / sy;\n\t\t\tconst invSZ = 1 / sz;\n\t\t\t_m1$2.elements[0] *= invSX;\n\t\t\t_m1$2.elements[1] *= invSX;\n\t\t\t_m1$2.elements[2] *= invSX;\n\t\t\t_m1$2.elements[4] *= invSY;\n\t\t\t_m1$2.elements[5] *= invSY;\n\t\t\t_m1$2.elements[6] *= invSY;\n\t\t\t_m1$2.elements[8] *= invSZ;\n\t\t\t_m1$2.elements[9] *= invSZ;\n\t\t\t_m1$2.elements[10] *= invSZ;\n\t\t\tquaternion.setFromRotationMatrix(_m1$2);\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\t\t\treturn this;\n\t\t}\n\n\t\tmakePerspective(left, right, top, bottom, near, far) {\n\t\t\tif (far === undefined) {\n\t\t\t\tconsole.warn('THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.');\n\t\t\t}\n\n\t\t\tconst te = this.elements;\n\t\t\tconst x = 2 * near / (right - left);\n\t\t\tconst y = 2 * near / (top - bottom);\n\t\t\tconst a = (right + left) / (right - left);\n\t\t\tconst b = (top + bottom) / (top - bottom);\n\t\t\tconst c = -(far + near) / (far - near);\n\t\t\tconst d = -2 * far * near / (far - near);\n\t\t\tte[0] = x;\n\t\t\tte[4] = 0;\n\t\t\tte[8] = a;\n\t\t\tte[12] = 0;\n\t\t\tte[1] = 0;\n\t\t\tte[5] = y;\n\t\t\tte[9] = b;\n\t\t\tte[13] = 0;\n\t\t\tte[2] = 0;\n\t\t\tte[6] = 0;\n\t\t\tte[10] = c;\n\t\t\tte[14] = d;\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = -1;\n\t\t\tte[15] = 0;\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeOrthographic(left, right, top, bottom, near, far) {\n\t\t\tconst te = this.elements;\n\t\t\tconst w = 1.0 / (right - left);\n\t\t\tconst h = 1.0 / (top - bottom);\n\t\t\tconst p = 1.0 / (far - near);\n\t\t\tconst x = (right + left) * w;\n\t\t\tconst y = (top + bottom) * h;\n\t\t\tconst z = (far + near) * p;\n\t\t\tte[0] = 2 * w;\n\t\t\tte[4] = 0;\n\t\t\tte[8] = 0;\n\t\t\tte[12] = -x;\n\t\t\tte[1] = 0;\n\t\t\tte[5] = 2 * h;\n\t\t\tte[9] = 0;\n\t\t\tte[13] = -y;\n\t\t\tte[2] = 0;\n\t\t\tte[6] = 0;\n\t\t\tte[10] = -2 * p;\n\t\t\tte[14] = -z;\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(matrix) {\n\t\t\tconst te = this.elements;\n\t\t\tconst me = matrix.elements;\n\n\t\t\tfor (let i = 0; i < 16; i++) {\n\t\t\t\tif (te[i] !== me[i]) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tfor (let i = 0; i < 16; i++) {\n\t\t\t\tthis.elements[i] = array[i + offset];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tconst te = this.elements;\n\t\t\tarray[offset] = te[0];\n\t\t\tarray[offset + 1] = te[1];\n\t\t\tarray[offset + 2] = te[2];\n\t\t\tarray[offset + 3] = te[3];\n\t\t\tarray[offset + 4] = te[4];\n\t\t\tarray[offset + 5] = te[5];\n\t\t\tarray[offset + 6] = te[6];\n\t\t\tarray[offset + 7] = te[7];\n\t\t\tarray[offset + 8] = te[8];\n\t\t\tarray[offset + 9] = te[9];\n\t\t\tarray[offset + 10] = te[10];\n\t\t\tarray[offset + 11] = te[11];\n\t\t\tarray[offset + 12] = te[12];\n\t\t\tarray[offset + 13] = te[13];\n\t\t\tarray[offset + 14] = te[14];\n\t\t\tarray[offset + 15] = te[15];\n\t\t\treturn array;\n\t\t}\n\n\t}\n\n\tMatrix4.prototype.isMatrix4 = true;\n\n\tconst _v1$5 = /*@__PURE__*/new Vector3();\n\n\tconst _m1$2 = /*@__PURE__*/new Matrix4();\n\n\tconst _zero = /*@__PURE__*/new Vector3(0, 0, 0);\n\n\tconst _one = /*@__PURE__*/new Vector3(1, 1, 1);\n\n\tconst _x = /*@__PURE__*/new Vector3();\n\n\tconst _y = /*@__PURE__*/new Vector3();\n\n\tconst _z = /*@__PURE__*/new Vector3();\n\n\tconst _matrix$1 = /*@__PURE__*/new Matrix4();\n\n\tconst _quaternion$3 = /*@__PURE__*/new Quaternion();\n\n\tclass Euler {\n\t\tconstructor(x = 0, y = 0, z = 0, order = Euler.DefaultOrder) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order;\n\t\t}\n\n\t\tget x() {\n\t\t\treturn this._x;\n\t\t}\n\n\t\tset x(value) {\n\t\t\tthis._x = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget y() {\n\t\t\treturn this._y;\n\t\t}\n\n\t\tset y(value) {\n\t\t\tthis._y = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget z() {\n\t\t\treturn this._z;\n\t\t}\n\n\t\tset z(value) {\n\t\t\tthis._z = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tget order() {\n\t\t\treturn this._order;\n\t\t}\n\n\t\tset order(value) {\n\t\t\tthis._order = value;\n\n\t\t\tthis._onChangeCallback();\n\t\t}\n\n\t\tset(x, y, z, order = this._order) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this._x, this._y, this._z, this._order);\n\t\t}\n\n\t\tcopy(euler) {\n\t\t\tthis._x = euler._x;\n\t\t\tthis._y = euler._y;\n\t\t\tthis._z = euler._z;\n\t\t\tthis._order = euler._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromRotationMatrix(m, order = this._order, update = true) {\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tconst te = m.elements;\n\t\t\tconst m11 = te[0],\n\t\t\t\t\t\tm12 = te[4],\n\t\t\t\t\t\tm13 = te[8];\n\t\t\tconst m21 = te[1],\n\t\t\t\t\t\tm22 = te[5],\n\t\t\t\t\t\tm23 = te[9];\n\t\t\tconst m31 = te[2],\n\t\t\t\t\t\tm32 = te[6],\n\t\t\t\t\t\tm33 = te[10];\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYZ':\n\t\t\t\t\tthis._y = Math.asin(clamp(m13, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m13) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m22);\n\t\t\t\t\t\tthis._z = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXZ':\n\t\t\t\t\tthis._x = Math.asin(-clamp(m23, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m23) < 0.9999999) {\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m22);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m11);\n\t\t\t\t\t\tthis._z = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXY':\n\t\t\t\t\tthis._x = Math.asin(clamp(m32, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m32) < 0.9999999) {\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m22);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._y = 0;\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m11);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYX':\n\t\t\t\t\tthis._y = Math.asin(-clamp(m31, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m31) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m22);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZX':\n\t\t\t\t\tthis._z = Math.asin(clamp(m21, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m21) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m22);\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m33);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZY':\n\t\t\t\t\tthis._z = Math.asin(-clamp(m12, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m12) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m22);\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m33);\n\t\t\t\t\t\tthis._y = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order);\n\t\t\t}\n\n\t\t\tthis._order = order;\n\t\t\tif (update === true) this._onChangeCallback();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromQuaternion(q, order, update) {\n\t\t\t_matrix$1.makeRotationFromQuaternion(q);\n\n\t\t\treturn this.setFromRotationMatrix(_matrix$1, order, update);\n\t\t}\n\n\t\tsetFromVector3(v, order = this._order) {\n\t\t\treturn this.set(v.x, v.y, v.z, order);\n\t\t}\n\n\t\treorder(newOrder) {\n\t\t\t// WARNING: this discards revolution information -bhouston\n\t\t\t_quaternion$3.setFromEuler(this);\n\n\t\t\treturn this.setFromQuaternion(_quaternion$3, newOrder);\n\t\t}\n\n\t\tequals(euler) {\n\t\t\treturn euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;\n\t\t}\n\n\t\tfromArray(array) {\n\t\t\tthis._x = array[0];\n\t\t\tthis._y = array[1];\n\t\t\tthis._z = array[2];\n\t\t\tif (array[3] !== undefined) this._order = array[3];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this._x;\n\t\t\tarray[offset + 1] = this._y;\n\t\t\tarray[offset + 2] = this._z;\n\t\t\tarray[offset + 3] = this._order;\n\t\t\treturn array;\n\t\t}\n\n\t\ttoVector3(optionalResult) {\n\t\t\tif (optionalResult) {\n\t\t\t\treturn optionalResult.set(this._x, this._y, this._z);\n\t\t\t} else {\n\t\t\t\treturn new Vector3(this._x, this._y, this._z);\n\t\t\t}\n\t\t}\n\n\t\t_onChange(callback) {\n\t\t\tthis._onChangeCallback = callback;\n\t\t\treturn this;\n\t\t}\n\n\t\t_onChangeCallback() {}\n\n\t}\n\n\tEuler.prototype.isEuler = true;\n\tEuler.DefaultOrder = 'XYZ';\n\tEuler.RotationOrders = ['XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX'];\n\n\tclass Layers {\n\t\tconstructor() {\n\t\t\tthis.mask = 1 | 0;\n\t\t}\n\n\t\tset(channel) {\n\t\t\tthis.mask = 1 << channel | 0;\n\t\t}\n\n\t\tenable(channel) {\n\t\t\tthis.mask |= 1 << channel | 0;\n\t\t}\n\n\t\tenableAll() {\n\t\t\tthis.mask = 0xffffffff | 0;\n\t\t}\n\n\t\ttoggle(channel) {\n\t\t\tthis.mask ^= 1 << channel | 0;\n\t\t}\n\n\t\tdisable(channel) {\n\t\t\tthis.mask &= ~(1 << channel | 0);\n\t\t}\n\n\t\tdisableAll() {\n\t\t\tthis.mask = 0;\n\t\t}\n\n\t\ttest(layers) {\n\t\t\treturn (this.mask & layers.mask) !== 0;\n\t\t}\n\n\t}\n\n\tlet _object3DId = 0;\n\n\tconst _v1$4 = /*@__PURE__*/new Vector3();\n\n\tconst _q1 = /*@__PURE__*/new Quaternion();\n\n\tconst _m1$1 = /*@__PURE__*/new Matrix4();\n\n\tconst _target = /*@__PURE__*/new Vector3();\n\n\tconst _position$3 = /*@__PURE__*/new Vector3();\n\n\tconst _scale$2 = /*@__PURE__*/new Vector3();\n\n\tconst _quaternion$2 = /*@__PURE__*/new Quaternion();\n\n\tconst _xAxis = /*@__PURE__*/new Vector3(1, 0, 0);\n\n\tconst _yAxis = /*@__PURE__*/new Vector3(0, 1, 0);\n\n\tconst _zAxis = /*@__PURE__*/new Vector3(0, 0, 1);\n\n\tconst _addedEvent = {\n\t\ttype: 'added'\n\t};\n\tconst _removedEvent = {\n\t\ttype: 'removed'\n\t};\n\n\tclass Object3D extends EventDispatcher {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tObject.defineProperty(this, 'id', {\n\t\t\t\tvalue: _object3DId++\n\t\t\t});\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.name = '';\n\t\t\tthis.type = 'Object3D';\n\t\t\tthis.parent = null;\n\t\t\tthis.children = [];\n\t\t\tthis.up = Object3D.DefaultUp.clone();\n\t\t\tconst position = new Vector3();\n\t\t\tconst rotation = new Euler();\n\t\t\tconst quaternion = new Quaternion();\n\t\t\tconst scale = new Vector3(1, 1, 1);\n\n\t\t\tfunction onRotationChange() {\n\t\t\t\tquaternion.setFromEuler(rotation, false);\n\t\t\t}\n\n\t\t\tfunction onQuaternionChange() {\n\t\t\t\trotation.setFromQuaternion(quaternion, undefined, false);\n\t\t\t}\n\n\t\t\trotation._onChange(onRotationChange);\n\n\t\t\tquaternion._onChange(onQuaternionChange);\n\n\t\t\tObject.defineProperties(this, {\n\t\t\t\tposition: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: position\n\t\t\t\t},\n\t\t\t\trotation: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: rotation\n\t\t\t\t},\n\t\t\t\tquaternion: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: quaternion\n\t\t\t\t},\n\t\t\t\tscale: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: scale\n\t\t\t\t},\n\t\t\t\tmodelViewMatrix: {\n\t\t\t\t\tvalue: new Matrix4()\n\t\t\t\t},\n\t\t\t\tnormalMatrix: {\n\t\t\t\t\tvalue: new Matrix3()\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.matrix = new Matrix4();\n\t\t\tthis.matrixWorld = new Matrix4();\n\t\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\t\t\tthis.layers = new Layers();\n\t\t\tthis.visible = true;\n\t\t\tthis.castShadow = false;\n\t\t\tthis.receiveShadow = false;\n\t\t\tthis.frustumCulled = true;\n\t\t\tthis.renderOrder = 0;\n\t\t\tthis.animations = [];\n\t\t\tthis.userData = {};\n\t\t}\n\n\t\tonBeforeRender() {}\n\n\t\tonAfterRender() {}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\t\t\tthis.matrix.premultiply(matrix);\n\t\t\tthis.matrix.decompose(this.position, this.quaternion, this.scale);\n\t\t}\n\n\t\tapplyQuaternion(q) {\n\t\t\tthis.quaternion.premultiply(q);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetRotationFromAxisAngle(axis, angle) {\n\t\t\t// assumes axis is normalized\n\t\t\tthis.quaternion.setFromAxisAngle(axis, angle);\n\t\t}\n\n\t\tsetRotationFromEuler(euler) {\n\t\t\tthis.quaternion.setFromEuler(euler, true);\n\t\t}\n\n\t\tsetRotationFromMatrix(m) {\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tthis.quaternion.setFromRotationMatrix(m);\n\t\t}\n\n\t\tsetRotationFromQuaternion(q) {\n\t\t\t// assumes q is normalized\n\t\t\tthis.quaternion.copy(q);\n\t\t}\n\n\t\trotateOnAxis(axis, angle) {\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\t\t\t_q1.setFromAxisAngle(axis, angle);\n\n\t\t\tthis.quaternion.multiply(_q1);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateOnWorldAxis(axis, angle) {\n\t\t\t// rotate object on axis in world space\n\t\t\t// axis is assumed to be normalized\n\t\t\t// method assumes no rotated parent\n\t\t\t_q1.setFromAxisAngle(axis, angle);\n\n\t\t\tthis.quaternion.premultiply(_q1);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateX(angle) {\n\t\t\treturn this.rotateOnAxis(_xAxis, angle);\n\t\t}\n\n\t\trotateY(angle) {\n\t\t\treturn this.rotateOnAxis(_yAxis, angle);\n\t\t}\n\n\t\trotateZ(angle) {\n\t\t\treturn this.rotateOnAxis(_zAxis, angle);\n\t\t}\n\n\t\ttranslateOnAxis(axis, distance) {\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\t\t\t_v1$4.copy(axis).applyQuaternion(this.quaternion);\n\n\t\t\tthis.position.add(_v1$4.multiplyScalar(distance));\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslateX(distance) {\n\t\t\treturn this.translateOnAxis(_xAxis, distance);\n\t\t}\n\n\t\ttranslateY(distance) {\n\t\t\treturn this.translateOnAxis(_yAxis, distance);\n\t\t}\n\n\t\ttranslateZ(distance) {\n\t\t\treturn this.translateOnAxis(_zAxis, distance);\n\t\t}\n\n\t\tlocalToWorld(vector) {\n\t\t\treturn vector.applyMatrix4(this.matrixWorld);\n\t\t}\n\n\t\tworldToLocal(vector) {\n\t\t\treturn vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());\n\t\t}\n\n\t\tlookAt(x, y, z) {\n\t\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\t\t\tif (x.isVector3) {\n\t\t\t\t_target.copy(x);\n\t\t\t} else {\n\t\t\t\t_target.set(x, y, z);\n\t\t\t}\n\n\t\t\tconst parent = this.parent;\n\t\t\tthis.updateWorldMatrix(true, false);\n\n\t\t\t_position$3.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\tif (this.isCamera || this.isLight) {\n\t\t\t\t_m1$1.lookAt(_position$3, _target, this.up);\n\t\t\t} else {\n\t\t\t\t_m1$1.lookAt(_target, _position$3, this.up);\n\t\t\t}\n\n\t\t\tthis.quaternion.setFromRotationMatrix(_m1$1);\n\n\t\t\tif (parent) {\n\t\t\t\t_m1$1.extractRotation(parent.matrixWorld);\n\n\t\t\t\t_q1.setFromRotationMatrix(_m1$1);\n\n\t\t\t\tthis.quaternion.premultiply(_q1.invert());\n\t\t\t}\n\t\t}\n\n\t\tadd(object) {\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tfor (let i = 0; i < arguments.length; i++) {\n\t\t\t\t\tthis.add(arguments[i]);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (object === this) {\n\t\t\t\tconsole.error('THREE.Object3D.add: object can\\'t be added as a child of itself.', object);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (object && object.isObject3D) {\n\t\t\t\tif (object.parent !== null) {\n\t\t\t\t\tobject.parent.remove(object);\n\t\t\t\t}\n\n\t\t\t\tobject.parent = this;\n\t\t\t\tthis.children.push(object);\n\t\t\t\tobject.dispatchEvent(_addedEvent);\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Object3D.add: object not an instance of THREE.Object3D.', object);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tremove(object) {\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tfor (let i = 0; i < arguments.length; i++) {\n\t\t\t\t\tthis.remove(arguments[i]);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tconst index = this.children.indexOf(object);\n\n\t\t\tif (index !== -1) {\n\t\t\t\tobject.parent = null;\n\t\t\t\tthis.children.splice(index, 1);\n\t\t\t\tobject.dispatchEvent(_removedEvent);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tremoveFromParent() {\n\t\t\tconst parent = this.parent;\n\n\t\t\tif (parent !== null) {\n\t\t\t\tparent.remove(this);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclear() {\n\t\t\tfor (let i = 0; i < this.children.length; i++) {\n\t\t\t\tconst object = this.children[i];\n\t\t\t\tobject.parent = null;\n\t\t\t\tobject.dispatchEvent(_removedEvent);\n\t\t\t}\n\n\t\t\tthis.children.length = 0;\n\t\t\treturn this;\n\t\t}\n\n\t\tattach(object) {\n\t\t\t// adds object as a child of this, while maintaining the object's world transform\n\t\t\tthis.updateWorldMatrix(true, false);\n\n\t\t\t_m1$1.copy(this.matrixWorld).invert();\n\n\t\t\tif (object.parent !== null) {\n\t\t\t\tobject.parent.updateWorldMatrix(true, false);\n\n\t\t\t\t_m1$1.multiply(object.parent.matrixWorld);\n\t\t\t}\n\n\t\t\tobject.applyMatrix4(_m1$1);\n\t\t\tthis.add(object);\n\t\t\tobject.updateWorldMatrix(false, true);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetObjectById(id) {\n\t\t\treturn this.getObjectByProperty('id', id);\n\t\t}\n\n\t\tgetObjectByName(name) {\n\t\t\treturn this.getObjectByProperty('name', name);\n\t\t}\n\n\t\tgetObjectByProperty(name, value) {\n\t\t\tif (this[name] === value) return this;\n\n\t\t\tfor (let i = 0, l = this.children.length; i < l; i++) {\n\t\t\t\tconst child = this.children[i];\n\t\t\t\tconst object = child.getObjectByProperty(name, value);\n\n\t\t\t\tif (object !== undefined) {\n\t\t\t\t\treturn object;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\tgetWorldPosition(target) {\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\treturn target.setFromMatrixPosition(this.matrixWorld);\n\t\t}\n\n\t\tgetWorldQuaternion(target) {\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tthis.matrixWorld.decompose(_position$3, target, _scale$2);\n\t\t\treturn target;\n\t\t}\n\n\t\tgetWorldScale(target) {\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tthis.matrixWorld.decompose(_position$3, _quaternion$2, target);\n\t\t\treturn target;\n\t\t}\n\n\t\tgetWorldDirection(target) {\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tconst e = this.matrixWorld.elements;\n\t\t\treturn target.set(e[8], e[9], e[10]).normalize();\n\t\t}\n\n\t\traycast() {}\n\n\t\ttraverse(callback) {\n\t\t\tcallback(this);\n\t\t\tconst children = this.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].traverse(callback);\n\t\t\t}\n\t\t}\n\n\t\ttraverseVisible(callback) {\n\t\t\tif (this.visible === false) return;\n\t\t\tcallback(this);\n\t\t\tconst children = this.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].traverseVisible(callback);\n\t\t\t}\n\t\t}\n\n\t\ttraverseAncestors(callback) {\n\t\t\tconst parent = this.parent;\n\n\t\t\tif (parent !== null) {\n\t\t\t\tcallback(parent);\n\t\t\t\tparent.traverseAncestors(callback);\n\t\t\t}\n\t\t}\n\n\t\tupdateMatrix() {\n\t\t\tthis.matrix.compose(this.position, this.quaternion, this.scale);\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\n\t\t\tif (this.matrixWorldNeedsUpdate || force) {\n\t\t\t\tif (this.parent === null) {\n\t\t\t\t\tthis.matrixWorld.copy(this.matrix);\n\t\t\t\t} else {\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n\t\t\t\t}\n\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\t\t\t\tforce = true;\n\t\t\t} // update children\n\n\n\t\t\tconst children = this.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].updateMatrixWorld(force);\n\t\t\t}\n\t\t}\n\n\t\tupdateWorldMatrix(updateParents, updateChildren) {\n\t\t\tconst parent = this.parent;\n\n\t\t\tif (updateParents === true && parent !== null) {\n\t\t\t\tparent.updateWorldMatrix(true, false);\n\t\t\t}\n\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\n\t\t\tif (this.parent === null) {\n\t\t\t\tthis.matrixWorld.copy(this.matrix);\n\t\t\t} else {\n\t\t\t\tthis.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n\t\t\t} // update children\n\n\n\t\t\tif (updateChildren === true) {\n\t\t\t\tconst children = this.children;\n\n\t\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\t\tchildren[i].updateWorldMatrix(false, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\t// meta is a string when called from JSON.stringify\n\t\t\tconst isRootObject = meta === undefined || typeof meta === 'string';\n\t\t\tconst output = {}; // meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\n\t\t\tif (isRootObject) {\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {},\n\t\t\t\t\tshapes: {},\n\t\t\t\t\tskeletons: {},\n\t\t\t\t\tanimations: {}\n\t\t\t\t};\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\t\t\t} // standard Object3D serialization\n\n\n\t\t\tconst object = {};\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\t\t\tif (this.name !== '') object.name = this.name;\n\t\t\tif (this.castShadow === true) object.castShadow = true;\n\t\t\tif (this.receiveShadow === true) object.receiveShadow = true;\n\t\t\tif (this.visible === false) object.visible = false;\n\t\t\tif (this.frustumCulled === false) object.frustumCulled = false;\n\t\t\tif (this.renderOrder !== 0) object.renderOrder = this.renderOrder;\n\t\t\tif (JSON.stringify(this.userData) !== '{}') object.userData = this.userData;\n\t\t\tobject.layers = this.layers.mask;\n\t\t\tobject.matrix = this.matrix.toArray();\n\t\t\tif (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false; // object specific properties\n\n\t\t\tif (this.isInstancedMesh) {\n\t\t\t\tobject.type = 'InstancedMesh';\n\t\t\t\tobject.count = this.count;\n\t\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\t\t\t\tif (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();\n\t\t\t} //\n\n\n\t\t\tfunction serialize(library, element) {\n\t\t\t\tif (library[element.uuid] === undefined) {\n\t\t\t\t\tlibrary[element.uuid] = element.toJSON(meta);\n\t\t\t\t}\n\n\t\t\t\treturn element.uuid;\n\t\t\t}\n\n\t\t\tif (this.isScene) {\n\t\t\t\tif (this.background) {\n\t\t\t\t\tif (this.background.isColor) {\n\t\t\t\t\t\tobject.background = this.background.toJSON();\n\t\t\t\t\t} else if (this.background.isTexture) {\n\t\t\t\t\t\tobject.background = this.background.toJSON(meta).uuid;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.environment && this.environment.isTexture) {\n\t\t\t\t\tobject.environment = this.environment.toJSON(meta).uuid;\n\t\t\t\t}\n\t\t\t} else if (this.isMesh || this.isLine || this.isPoints) {\n\t\t\t\tobject.geometry = serialize(meta.geometries, this.geometry);\n\t\t\t\tconst parameters = this.geometry.parameters;\n\n\t\t\t\tif (parameters !== undefined && parameters.shapes !== undefined) {\n\t\t\t\t\tconst shapes = parameters.shapes;\n\n\t\t\t\t\tif (Array.isArray(shapes)) {\n\t\t\t\t\t\tfor (let i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\t\t\t\tconst shape = shapes[i];\n\t\t\t\t\t\t\tserialize(meta.shapes, shape);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tserialize(meta.shapes, shapes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.isSkinnedMesh) {\n\t\t\t\tobject.bindMode = this.bindMode;\n\t\t\t\tobject.bindMatrix = this.bindMatrix.toArray();\n\n\t\t\t\tif (this.skeleton !== undefined) {\n\t\t\t\t\tserialize(meta.skeletons, this.skeleton);\n\t\t\t\t\tobject.skeleton = this.skeleton.uuid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.material !== undefined) {\n\t\t\t\tif (Array.isArray(this.material)) {\n\t\t\t\t\tconst uuids = [];\n\n\t\t\t\t\tfor (let i = 0, l = this.material.length; i < l; i++) {\n\t\t\t\t\t\tuuids.push(serialize(meta.materials, this.material[i]));\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.material = uuids;\n\t\t\t\t} else {\n\t\t\t\t\tobject.material = serialize(meta.materials, this.material);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tif (this.children.length > 0) {\n\t\t\t\tobject.children = [];\n\n\t\t\t\tfor (let i = 0; i < this.children.length; i++) {\n\t\t\t\t\tobject.children.push(this.children[i].toJSON(meta).object);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tif (this.animations.length > 0) {\n\t\t\t\tobject.animations = [];\n\n\t\t\t\tfor (let i = 0; i < this.animations.length; i++) {\n\t\t\t\t\tconst animation = this.animations[i];\n\t\t\t\t\tobject.animations.push(serialize(meta.animations, animation));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isRootObject) {\n\t\t\t\tconst geometries = extractFromCache(meta.geometries);\n\t\t\t\tconst materials = extractFromCache(meta.materials);\n\t\t\t\tconst textures = extractFromCache(meta.textures);\n\t\t\t\tconst images = extractFromCache(meta.images);\n\t\t\t\tconst shapes = extractFromCache(meta.shapes);\n\t\t\t\tconst skeletons = extractFromCache(meta.skeletons);\n\t\t\t\tconst animations = extractFromCache(meta.animations);\n\t\t\t\tif (geometries.length > 0) output.geometries = geometries;\n\t\t\t\tif (materials.length > 0) output.materials = materials;\n\t\t\t\tif (textures.length > 0) output.textures = textures;\n\t\t\t\tif (images.length > 0) output.images = images;\n\t\t\t\tif (shapes.length > 0) output.shapes = shapes;\n\t\t\t\tif (skeletons.length > 0) output.skeletons = skeletons;\n\t\t\t\tif (animations.length > 0) output.animations = animations;\n\t\t\t}\n\n\t\t\toutput.object = object;\n\t\t\treturn output; // extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\n\t\t\tfunction extractFromCache(cache) {\n\t\t\t\tconst values = [];\n\n\t\t\t\tfor (const key in cache) {\n\t\t\t\t\tconst data = cache[key];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push(data);\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\n\t\tclone(recursive) {\n\t\t\treturn new this.constructor().copy(this, recursive);\n\t\t}\n\n\t\tcopy(source, recursive = true) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.up.copy(source.up);\n\t\t\tthis.position.copy(source.position);\n\t\t\tthis.rotation.order = source.rotation.order;\n\t\t\tthis.quaternion.copy(source.quaternion);\n\t\t\tthis.scale.copy(source.scale);\n\t\t\tthis.matrix.copy(source.matrix);\n\t\t\tthis.matrixWorld.copy(source.matrixWorld);\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\t\t\tthis.layers.mask = source.layers.mask;\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\t\t\tthis.userData = JSON.parse(JSON.stringify(source.userData));\n\n\t\t\tif (recursive === true) {\n\t\t\t\tfor (let i = 0; i < source.children.length; i++) {\n\t\t\t\t\tconst child = source.children[i];\n\t\t\t\t\tthis.add(child.clone());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tObject3D.DefaultUp = new Vector3(0, 1, 0);\n\tObject3D.DefaultMatrixAutoUpdate = true;\n\tObject3D.prototype.isObject3D = true;\n\n\tconst _v0$1 = /*@__PURE__*/new Vector3();\n\n\tconst _v1$3 = /*@__PURE__*/new Vector3();\n\n\tconst _v2$2 = /*@__PURE__*/new Vector3();\n\n\tconst _v3$1 = /*@__PURE__*/new Vector3();\n\n\tconst _vab = /*@__PURE__*/new Vector3();\n\n\tconst _vac = /*@__PURE__*/new Vector3();\n\n\tconst _vbc = /*@__PURE__*/new Vector3();\n\n\tconst _vap = /*@__PURE__*/new Vector3();\n\n\tconst _vbp = /*@__PURE__*/new Vector3();\n\n\tconst _vcp = /*@__PURE__*/new Vector3();\n\n\tclass Triangle {\n\t\tconstructor(a = new Vector3(), b = new Vector3(), c = new Vector3()) {\n\t\t\tthis.a = a;\n\t\t\tthis.b = b;\n\t\t\tthis.c = c;\n\t\t}\n\n\t\tstatic getNormal(a, b, c, target) {\n\t\t\ttarget.subVectors(c, b);\n\n\t\t\t_v0$1.subVectors(a, b);\n\n\t\t\ttarget.cross(_v0$1);\n\t\t\tconst targetLengthSq = target.lengthSq();\n\n\t\t\tif (targetLengthSq > 0) {\n\t\t\t\treturn target.multiplyScalar(1 / Math.sqrt(targetLengthSq));\n\t\t\t}\n\n\t\t\treturn target.set(0, 0, 0);\n\t\t} // static/instance method to calculate barycentric coordinates\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\n\n\t\tstatic getBarycoord(point, a, b, c, target) {\n\t\t\t_v0$1.subVectors(c, a);\n\n\t\t\t_v1$3.subVectors(b, a);\n\n\t\t\t_v2$2.subVectors(point, a);\n\n\t\t\tconst dot00 = _v0$1.dot(_v0$1);\n\n\t\t\tconst dot01 = _v0$1.dot(_v1$3);\n\n\t\t\tconst dot02 = _v0$1.dot(_v2$2);\n\n\t\t\tconst dot11 = _v1$3.dot(_v1$3);\n\n\t\t\tconst dot12 = _v1$3.dot(_v2$2);\n\n\t\t\tconst denom = dot00 * dot11 - dot01 * dot01; // collinear or singular triangle\n\n\t\t\tif (denom === 0) {\n\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\treturn target.set(-2, -1, -1);\n\t\t\t}\n\n\t\t\tconst invDenom = 1 / denom;\n\t\t\tconst u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n\t\t\tconst v = (dot00 * dot12 - dot01 * dot02) * invDenom; // barycentric coordinates must always sum to 1\n\n\t\t\treturn target.set(1 - u - v, v, u);\n\t\t}\n\n\t\tstatic containsPoint(point, a, b, c) {\n\t\t\tthis.getBarycoord(point, a, b, c, _v3$1);\n\t\t\treturn _v3$1.x >= 0 && _v3$1.y >= 0 && _v3$1.x + _v3$1.y <= 1;\n\t\t}\n\n\t\tstatic getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {\n\t\t\tthis.getBarycoord(point, p1, p2, p3, _v3$1);\n\t\t\ttarget.set(0, 0);\n\t\t\ttarget.addScaledVector(uv1, _v3$1.x);\n\t\t\ttarget.addScaledVector(uv2, _v3$1.y);\n\t\t\ttarget.addScaledVector(uv3, _v3$1.z);\n\t\t\treturn target;\n\t\t}\n\n\t\tstatic isFrontFacing(a, b, c, direction) {\n\t\t\t_v0$1.subVectors(c, b);\n\n\t\t\t_v1$3.subVectors(a, b); // strictly front facing\n\n\n\t\t\treturn _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;\n\t\t}\n\n\t\tset(a, b, c) {\n\t\t\tthis.a.copy(a);\n\t\t\tthis.b.copy(b);\n\t\t\tthis.c.copy(c);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPointsAndIndices(points, i0, i1, i2) {\n\t\t\tthis.a.copy(points[i0]);\n\t\t\tthis.b.copy(points[i1]);\n\t\t\tthis.c.copy(points[i2]);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromAttributeAndIndices(attribute, i0, i1, i2) {\n\t\t\tthis.a.fromBufferAttribute(attribute, i0);\n\t\t\tthis.b.fromBufferAttribute(attribute, i1);\n\t\t\tthis.c.fromBufferAttribute(attribute, i2);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(triangle) {\n\t\t\tthis.a.copy(triangle.a);\n\t\t\tthis.b.copy(triangle.b);\n\t\t\tthis.c.copy(triangle.c);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetArea() {\n\t\t\t_v0$1.subVectors(this.c, this.b);\n\n\t\t\t_v1$3.subVectors(this.a, this.b);\n\n\t\t\treturn _v0$1.cross(_v1$3).length() * 0.5;\n\t\t}\n\n\t\tgetMidpoint(target) {\n\t\t\treturn target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);\n\t\t}\n\n\t\tgetNormal(target) {\n\t\t\treturn Triangle.getNormal(this.a, this.b, this.c, target);\n\t\t}\n\n\t\tgetPlane(target) {\n\t\t\treturn target.setFromCoplanarPoints(this.a, this.b, this.c);\n\t\t}\n\n\t\tgetBarycoord(point, target) {\n\t\t\treturn Triangle.getBarycoord(point, this.a, this.b, this.c, target);\n\t\t}\n\n\t\tgetUV(point, uv1, uv2, uv3, target) {\n\t\t\treturn Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\treturn Triangle.containsPoint(point, this.a, this.b, this.c);\n\t\t}\n\n\t\tisFrontFacing(direction) {\n\t\t\treturn Triangle.isFrontFacing(this.a, this.b, this.c, direction);\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\treturn box.intersectsTriangle(this);\n\t\t}\n\n\t\tclosestPointToPoint(p, target) {\n\t\t\tconst a = this.a,\n\t\t\t\t\t\tb = this.b,\n\t\t\t\t\t\tc = this.c;\n\t\t\tlet v, w; // algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t\t_vab.subVectors(b, a);\n\n\t\t\t_vac.subVectors(c, a);\n\n\t\t\t_vap.subVectors(p, a);\n\n\t\t\tconst d1 = _vab.dot(_vap);\n\n\t\t\tconst d2 = _vac.dot(_vap);\n\n\t\t\tif (d1 <= 0 && d2 <= 0) {\n\t\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\t\treturn target.copy(a);\n\t\t\t}\n\n\t\t\t_vbp.subVectors(p, b);\n\n\t\t\tconst d3 = _vab.dot(_vbp);\n\n\t\t\tconst d4 = _vac.dot(_vbp);\n\n\t\t\tif (d3 >= 0 && d4 <= d3) {\n\t\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\t\treturn target.copy(b);\n\t\t\t}\n\n\t\t\tconst vc = d1 * d4 - d3 * d2;\n\n\t\t\tif (vc <= 0 && d1 >= 0 && d3 <= 0) {\n\t\t\t\tv = d1 / (d1 - d3); // edge region of AB; barycentric coords (1-v, v, 0)\n\n\t\t\t\treturn target.copy(a).addScaledVector(_vab, v);\n\t\t\t}\n\n\t\t\t_vcp.subVectors(p, c);\n\n\t\t\tconst d5 = _vab.dot(_vcp);\n\n\t\t\tconst d6 = _vac.dot(_vcp);\n\n\t\t\tif (d6 >= 0 && d5 <= d6) {\n\t\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\t\treturn target.copy(c);\n\t\t\t}\n\n\t\t\tconst vb = d5 * d2 - d1 * d6;\n\n\t\t\tif (vb <= 0 && d2 >= 0 && d6 <= 0) {\n\t\t\t\tw = d2 / (d2 - d6); // edge region of AC; barycentric coords (1-w, 0, w)\n\n\t\t\t\treturn target.copy(a).addScaledVector(_vac, w);\n\t\t\t}\n\n\t\t\tconst va = d3 * d6 - d5 * d4;\n\n\t\t\tif (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {\n\t\t\t\t_vbc.subVectors(c, b);\n\n\t\t\t\tw = (d4 - d3) / (d4 - d3 + (d5 - d6)); // edge region of BC; barycentric coords (0, 1-w, w)\n\n\t\t\t\treturn target.copy(b).addScaledVector(_vbc, w); // edge region of BC\n\t\t\t} // face region\n\n\n\t\t\tconst denom = 1 / (va + vb + vc); // u = va * denom\n\n\t\t\tv = vb * denom;\n\t\t\tw = vc * denom;\n\t\t\treturn target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);\n\t\t}\n\n\t\tequals(triangle) {\n\t\t\treturn triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);\n\t\t}\n\n\t}\n\n\tlet materialId = 0;\n\n\tclass Material extends EventDispatcher {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tObject.defineProperty(this, 'id', {\n\t\t\t\tvalue: materialId++\n\t\t\t});\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.name = '';\n\t\t\tthis.type = 'Material';\n\t\t\tthis.fog = true;\n\t\t\tthis.blending = NormalBlending;\n\t\t\tthis.side = FrontSide;\n\t\t\tthis.vertexColors = false;\n\t\t\tthis.opacity = 1;\n\t\t\tthis.format = RGBAFormat;\n\t\t\tthis.transparent = false;\n\t\t\tthis.blendSrc = SrcAlphaFactor;\n\t\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\t\tthis.blendEquation = AddEquation;\n\t\t\tthis.blendSrcAlpha = null;\n\t\t\tthis.blendDstAlpha = null;\n\t\t\tthis.blendEquationAlpha = null;\n\t\t\tthis.depthFunc = LessEqualDepth;\n\t\t\tthis.depthTest = true;\n\t\t\tthis.depthWrite = true;\n\t\t\tthis.stencilWriteMask = 0xff;\n\t\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\t\tthis.stencilRef = 0;\n\t\t\tthis.stencilFuncMask = 0xff;\n\t\t\tthis.stencilFail = KeepStencilOp;\n\t\t\tthis.stencilZFail = KeepStencilOp;\n\t\t\tthis.stencilZPass = KeepStencilOp;\n\t\t\tthis.stencilWrite = false;\n\t\t\tthis.clippingPlanes = null;\n\t\t\tthis.clipIntersection = false;\n\t\t\tthis.clipShadows = false;\n\t\t\tthis.shadowSide = null;\n\t\t\tthis.colorWrite = true;\n\t\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\t\tthis.polygonOffset = false;\n\t\t\tthis.polygonOffsetFactor = 0;\n\t\t\tthis.polygonOffsetUnits = 0;\n\t\t\tthis.dithering = false;\n\t\t\tthis.alphaToCoverage = false;\n\t\t\tthis.premultipliedAlpha = false;\n\t\t\tthis.visible = true;\n\t\t\tthis.toneMapped = true;\n\t\t\tthis.userData = {};\n\t\t\tthis.version = 0;\n\t\t\tthis._alphaTest = 0;\n\t\t}\n\n\t\tget alphaTest() {\n\t\t\treturn this._alphaTest;\n\t\t}\n\n\t\tset alphaTest(value) {\n\t\t\tif (this._alphaTest > 0 !== value > 0) {\n\t\t\t\tthis.version++;\n\t\t\t}\n\n\t\t\tthis._alphaTest = value;\n\t\t}\n\n\t\tonBuild() {}\n\n\t\tonBeforeRender() {}\n\n\t\tonBeforeCompile() {}\n\n\t\tcustomProgramCacheKey() {\n\t\t\treturn this.onBeforeCompile.toString();\n\t\t}\n\n\t\tsetValues(values) {\n\t\t\tif (values === undefined) return;\n\n\t\t\tfor (const key in values) {\n\t\t\t\tconst newValue = values[key];\n\n\t\t\t\tif (newValue === undefined) {\n\t\t\t\t\tconsole.warn('THREE.Material: \\'' + key + '\\' parameter is undefined.');\n\t\t\t\t\tcontinue;\n\t\t\t\t} // for backward compatability if shading is set in the constructor\n\n\n\t\t\t\tif (key === 'shading') {\n\t\t\t\t\tconsole.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t\t\tthis.flatShading = newValue === FlatShading ? true : false;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst currentValue = this[key];\n\n\t\t\t\tif (currentValue === undefined) {\n\t\t\t\t\tconsole.warn('THREE.' + this.type + ': \\'' + key + '\\' is not a property of this material.');\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (currentValue && currentValue.isColor) {\n\t\t\t\t\tcurrentValue.set(newValue);\n\t\t\t\t} else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) {\n\t\t\t\t\tcurrentValue.copy(newValue);\n\t\t\t\t} else {\n\t\t\t\t\tthis[key] = newValue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst isRoot = meta === undefined || typeof meta === 'string';\n\n\t\t\tif (isRoot) {\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t}; // standard Material serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (this.color && this.color.isColor) data.color = this.color.getHex();\n\t\t\tif (this.roughness !== undefined) data.roughness = this.roughness;\n\t\t\tif (this.metalness !== undefined) data.metalness = this.metalness;\n\t\t\tif (this.sheen !== undefined) data.sheen = this.sheen;\n\t\t\tif (this.sheenColor && this.sheenColor.isColor) data.sheenColor = this.sheenColor.getHex();\n\t\t\tif (this.sheenRoughness !== undefined) data.sheenRoughness = this.sheenRoughness;\n\t\t\tif (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();\n\t\t\tif (this.emissiveIntensity && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;\n\t\t\tif (this.specular && this.specular.isColor) data.specular = this.specular.getHex();\n\t\t\tif (this.specularIntensity !== undefined) data.specularIntensity = this.specularIntensity;\n\t\t\tif (this.specularColor && this.specularColor.isColor) data.specularColor = this.specularColor.getHex();\n\t\t\tif (this.shininess !== undefined) data.shininess = this.shininess;\n\t\t\tif (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;\n\t\t\tif (this.clearcoatRoughness !== undefined) data.clearcoatRoughness = this.clearcoatRoughness;\n\n\t\t\tif (this.clearcoatMap && this.clearcoatMap.isTexture) {\n\t\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {\n\t\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {\n\t\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;\n\t\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\t\t\t}\n\n\t\t\tif (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;\n\t\t\tif (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;\n\t\t\tif (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;\n\n\t\t\tif (this.lightMap && this.lightMap.isTexture) {\n\t\t\t\tdata.lightMap = this.lightMap.toJSON(meta).uuid;\n\t\t\t\tdata.lightMapIntensity = this.lightMapIntensity;\n\t\t\t}\n\n\t\t\tif (this.aoMap && this.aoMap.isTexture) {\n\t\t\t\tdata.aoMap = this.aoMap.toJSON(meta).uuid;\n\t\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\t\t\t}\n\n\t\t\tif (this.bumpMap && this.bumpMap.isTexture) {\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON(meta).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\t\t\t}\n\n\t\t\tif (this.normalMap && this.normalMap.isTexture) {\n\t\t\t\tdata.normalMap = this.normalMap.toJSON(meta).uuid;\n\t\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\t\t\t}\n\n\t\t\tif (this.displacementMap && this.displacementMap.isTexture) {\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON(meta).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\t\t\t}\n\n\t\t\tif (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;\n\t\t\tif (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;\n\t\t\tif (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;\n\t\t\tif (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;\n\t\t\tif (this.specularIntensityMap && this.specularIntensityMap.isTexture) data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;\n\t\t\tif (this.specularColorMap && this.specularColorMap.isTexture) data.specularColorMap = this.specularColorMap.toJSON(meta).uuid;\n\n\t\t\tif (this.envMap && this.envMap.isTexture) {\n\t\t\t\tdata.envMap = this.envMap.toJSON(meta).uuid;\n\t\t\t\tif (this.combine !== undefined) data.combine = this.combine;\n\t\t\t}\n\n\t\t\tif (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;\n\t\t\tif (this.reflectivity !== undefined) data.reflectivity = this.reflectivity;\n\t\t\tif (this.refractionRatio !== undefined) data.refractionRatio = this.refractionRatio;\n\n\t\t\tif (this.gradientMap && this.gradientMap.isTexture) {\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.transmission !== undefined) data.transmission = this.transmission;\n\t\t\tif (this.transmissionMap && this.transmissionMap.isTexture) data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;\n\t\t\tif (this.thickness !== undefined) data.thickness = this.thickness;\n\t\t\tif (this.thicknessMap && this.thicknessMap.isTexture) data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;\n\t\t\tif (this.attenuationDistance !== undefined) data.attenuationDistance = this.attenuationDistance;\n\t\t\tif (this.attenuationColor !== undefined) data.attenuationColor = this.attenuationColor.getHex();\n\t\t\tif (this.size !== undefined) data.size = this.size;\n\t\t\tif (this.shadowSide !== null) data.shadowSide = this.shadowSide;\n\t\t\tif (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;\n\t\t\tif (this.blending !== NormalBlending) data.blending = this.blending;\n\t\t\tif (this.side !== FrontSide) data.side = this.side;\n\t\t\tif (this.vertexColors) data.vertexColors = true;\n\t\t\tif (this.opacity < 1) data.opacity = this.opacity;\n\t\t\tif (this.format !== RGBAFormat) data.format = this.format;\n\t\t\tif (this.transparent === true) data.transparent = this.transparent;\n\t\t\tdata.depthFunc = this.depthFunc;\n\t\t\tdata.depthTest = this.depthTest;\n\t\t\tdata.depthWrite = this.depthWrite;\n\t\t\tdata.colorWrite = this.colorWrite;\n\t\t\tdata.stencilWrite = this.stencilWrite;\n\t\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\t\tdata.stencilFunc = this.stencilFunc;\n\t\t\tdata.stencilRef = this.stencilRef;\n\t\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\t\tdata.stencilFail = this.stencilFail;\n\t\t\tdata.stencilZFail = this.stencilZFail;\n\t\t\tdata.stencilZPass = this.stencilZPass; // rotation (SpriteMaterial)\n\n\t\t\tif (this.rotation && this.rotation !== 0) data.rotation = this.rotation;\n\t\t\tif (this.polygonOffset === true) data.polygonOffset = true;\n\t\t\tif (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;\n\t\t\tif (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;\n\t\t\tif (this.linewidth && this.linewidth !== 1) data.linewidth = this.linewidth;\n\t\t\tif (this.dashSize !== undefined) data.dashSize = this.dashSize;\n\t\t\tif (this.gapSize !== undefined) data.gapSize = this.gapSize;\n\t\t\tif (this.scale !== undefined) data.scale = this.scale;\n\t\t\tif (this.dithering === true) data.dithering = true;\n\t\t\tif (this.alphaTest > 0) data.alphaTest = this.alphaTest;\n\t\t\tif (this.alphaToCoverage === true) data.alphaToCoverage = this.alphaToCoverage;\n\t\t\tif (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;\n\t\t\tif (this.wireframe === true) data.wireframe = this.wireframe;\n\t\t\tif (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\t\tif (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;\n\t\t\tif (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;\n\t\t\tif (this.flatShading === true) data.flatShading = this.flatShading;\n\t\t\tif (this.visible === false) data.visible = false;\n\t\t\tif (this.toneMapped === false) data.toneMapped = false;\n\t\t\tif (JSON.stringify(this.userData) !== '{}') data.userData = this.userData; // TODO: Copied from Object3D.toJSON\n\n\t\t\tfunction extractFromCache(cache) {\n\t\t\t\tconst values = [];\n\n\t\t\t\tfor (const key in cache) {\n\t\t\t\t\tconst data = cache[key];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push(data);\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t}\n\n\t\t\tif (isRoot) {\n\t\t\t\tconst textures = extractFromCache(meta.textures);\n\t\t\t\tconst images = extractFromCache(meta.images);\n\t\t\t\tif (textures.length > 0) data.textures = textures;\n\t\t\t\tif (images.length > 0) data.images = images;\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.fog = source.fog;\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.vertexColors = source.vertexColors;\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.format = source.format;\n\t\t\tthis.transparent = source.transparent;\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\t\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\t\tthis.stencilFunc = source.stencilFunc;\n\t\t\tthis.stencilRef = source.stencilRef;\n\t\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\t\tthis.stencilFail = source.stencilFail;\n\t\t\tthis.stencilZFail = source.stencilZFail;\n\t\t\tthis.stencilZPass = source.stencilZPass;\n\t\t\tthis.stencilWrite = source.stencilWrite;\n\t\t\tconst srcPlanes = source.clippingPlanes;\n\t\t\tlet dstPlanes = null;\n\n\t\t\tif (srcPlanes !== null) {\n\t\t\t\tconst n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array(n);\n\n\t\t\t\tfor (let i = 0; i !== n; ++i) {\n\t\t\t\t\tdstPlanes[i] = srcPlanes[i].clone();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.clippingPlanes = dstPlanes;\n\t\t\tthis.clipIntersection = source.clipIntersection;\n\t\t\tthis.clipShadows = source.clipShadows;\n\t\t\tthis.shadowSide = source.shadowSide;\n\t\t\tthis.colorWrite = source.colorWrite;\n\t\t\tthis.precision = source.precision;\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\t\t\tthis.dithering = source.dithering;\n\t\t\tthis.alphaTest = source.alphaTest;\n\t\t\tthis.alphaToCoverage = source.alphaToCoverage;\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.toneMapped = source.toneMapped;\n\t\t\tthis.userData = JSON.parse(JSON.stringify(source.userData));\n\t\t\treturn this;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t}\n\n\tMaterial.prototype.isMaterial = true;\n\n\tconst _colorKeywords = {\n\t\t'aliceblue': 0xF0F8FF,\n\t\t'antiquewhite': 0xFAEBD7,\n\t\t'aqua': 0x00FFFF,\n\t\t'aquamarine': 0x7FFFD4,\n\t\t'azure': 0xF0FFFF,\n\t\t'beige': 0xF5F5DC,\n\t\t'bisque': 0xFFE4C4,\n\t\t'black': 0x000000,\n\t\t'blanchedalmond': 0xFFEBCD,\n\t\t'blue': 0x0000FF,\n\t\t'blueviolet': 0x8A2BE2,\n\t\t'brown': 0xA52A2A,\n\t\t'burlywood': 0xDEB887,\n\t\t'cadetblue': 0x5F9EA0,\n\t\t'chartreuse': 0x7FFF00,\n\t\t'chocolate': 0xD2691E,\n\t\t'coral': 0xFF7F50,\n\t\t'cornflowerblue': 0x6495ED,\n\t\t'cornsilk': 0xFFF8DC,\n\t\t'crimson': 0xDC143C,\n\t\t'cyan': 0x00FFFF,\n\t\t'darkblue': 0x00008B,\n\t\t'darkcyan': 0x008B8B,\n\t\t'darkgoldenrod': 0xB8860B,\n\t\t'darkgray': 0xA9A9A9,\n\t\t'darkgreen': 0x006400,\n\t\t'darkgrey': 0xA9A9A9,\n\t\t'darkkhaki': 0xBDB76B,\n\t\t'darkmagenta': 0x8B008B,\n\t\t'darkolivegreen': 0x556B2F,\n\t\t'darkorange': 0xFF8C00,\n\t\t'darkorchid': 0x9932CC,\n\t\t'darkred': 0x8B0000,\n\t\t'darksalmon': 0xE9967A,\n\t\t'darkseagreen': 0x8FBC8F,\n\t\t'darkslateblue': 0x483D8B,\n\t\t'darkslategray': 0x2F4F4F,\n\t\t'darkslategrey': 0x2F4F4F,\n\t\t'darkturquoise': 0x00CED1,\n\t\t'darkviolet': 0x9400D3,\n\t\t'deeppink': 0xFF1493,\n\t\t'deepskyblue': 0x00BFFF,\n\t\t'dimgray': 0x696969,\n\t\t'dimgrey': 0x696969,\n\t\t'dodgerblue': 0x1E90FF,\n\t\t'firebrick': 0xB22222,\n\t\t'floralwhite': 0xFFFAF0,\n\t\t'forestgreen': 0x228B22,\n\t\t'fuchsia': 0xFF00FF,\n\t\t'gainsboro': 0xDCDCDC,\n\t\t'ghostwhite': 0xF8F8FF,\n\t\t'gold': 0xFFD700,\n\t\t'goldenrod': 0xDAA520,\n\t\t'gray': 0x808080,\n\t\t'green': 0x008000,\n\t\t'greenyellow': 0xADFF2F,\n\t\t'grey': 0x808080,\n\t\t'honeydew': 0xF0FFF0,\n\t\t'hotpink': 0xFF69B4,\n\t\t'indianred': 0xCD5C5C,\n\t\t'indigo': 0x4B0082,\n\t\t'ivory': 0xFFFFF0,\n\t\t'khaki': 0xF0E68C,\n\t\t'lavender': 0xE6E6FA,\n\t\t'lavenderblush': 0xFFF0F5,\n\t\t'lawngreen': 0x7CFC00,\n\t\t'lemonchiffon': 0xFFFACD,\n\t\t'lightblue': 0xADD8E6,\n\t\t'lightcoral': 0xF08080,\n\t\t'lightcyan': 0xE0FFFF,\n\t\t'lightgoldenrodyellow': 0xFAFAD2,\n\t\t'lightgray': 0xD3D3D3,\n\t\t'lightgreen': 0x90EE90,\n\t\t'lightgrey': 0xD3D3D3,\n\t\t'lightpink': 0xFFB6C1,\n\t\t'lightsalmon': 0xFFA07A,\n\t\t'lightseagreen': 0x20B2AA,\n\t\t'lightskyblue': 0x87CEFA,\n\t\t'lightslategray': 0x778899,\n\t\t'lightslategrey': 0x778899,\n\t\t'lightsteelblue': 0xB0C4DE,\n\t\t'lightyellow': 0xFFFFE0,\n\t\t'lime': 0x00FF00,\n\t\t'limegreen': 0x32CD32,\n\t\t'linen': 0xFAF0E6,\n\t\t'magenta': 0xFF00FF,\n\t\t'maroon': 0x800000,\n\t\t'mediumaquamarine': 0x66CDAA,\n\t\t'mediumblue': 0x0000CD,\n\t\t'mediumorchid': 0xBA55D3,\n\t\t'mediumpurple': 0x9370DB,\n\t\t'mediumseagreen': 0x3CB371,\n\t\t'mediumslateblue': 0x7B68EE,\n\t\t'mediumspringgreen': 0x00FA9A,\n\t\t'mediumturquoise': 0x48D1CC,\n\t\t'mediumvioletred': 0xC71585,\n\t\t'midnightblue': 0x191970,\n\t\t'mintcream': 0xF5FFFA,\n\t\t'mistyrose': 0xFFE4E1,\n\t\t'moccasin': 0xFFE4B5,\n\t\t'navajowhite': 0xFFDEAD,\n\t\t'navy': 0x000080,\n\t\t'oldlace': 0xFDF5E6,\n\t\t'olive': 0x808000,\n\t\t'olivedrab': 0x6B8E23,\n\t\t'orange': 0xFFA500,\n\t\t'orangered': 0xFF4500,\n\t\t'orchid': 0xDA70D6,\n\t\t'palegoldenrod': 0xEEE8AA,\n\t\t'palegreen': 0x98FB98,\n\t\t'paleturquoise': 0xAFEEEE,\n\t\t'palevioletred': 0xDB7093,\n\t\t'papayawhip': 0xFFEFD5,\n\t\t'peachpuff': 0xFFDAB9,\n\t\t'peru': 0xCD853F,\n\t\t'pink': 0xFFC0CB,\n\t\t'plum': 0xDDA0DD,\n\t\t'powderblue': 0xB0E0E6,\n\t\t'purple': 0x800080,\n\t\t'rebeccapurple': 0x663399,\n\t\t'red': 0xFF0000,\n\t\t'rosybrown': 0xBC8F8F,\n\t\t'royalblue': 0x4169E1,\n\t\t'saddlebrown': 0x8B4513,\n\t\t'salmon': 0xFA8072,\n\t\t'sandybrown': 0xF4A460,\n\t\t'seagreen': 0x2E8B57,\n\t\t'seashell': 0xFFF5EE,\n\t\t'sienna': 0xA0522D,\n\t\t'silver': 0xC0C0C0,\n\t\t'skyblue': 0x87CEEB,\n\t\t'slateblue': 0x6A5ACD,\n\t\t'slategray': 0x708090,\n\t\t'slategrey': 0x708090,\n\t\t'snow': 0xFFFAFA,\n\t\t'springgreen': 0x00FF7F,\n\t\t'steelblue': 0x4682B4,\n\t\t'tan': 0xD2B48C,\n\t\t'teal': 0x008080,\n\t\t'thistle': 0xD8BFD8,\n\t\t'tomato': 0xFF6347,\n\t\t'turquoise': 0x40E0D0,\n\t\t'violet': 0xEE82EE,\n\t\t'wheat': 0xF5DEB3,\n\t\t'white': 0xFFFFFF,\n\t\t'whitesmoke': 0xF5F5F5,\n\t\t'yellow': 0xFFFF00,\n\t\t'yellowgreen': 0x9ACD32\n\t};\n\tconst _hslA = {\n\t\th: 0,\n\t\ts: 0,\n\t\tl: 0\n\t};\n\tconst _hslB = {\n\t\th: 0,\n\t\ts: 0,\n\t\tl: 0\n\t};\n\n\tfunction hue2rgb(p, q, t) {\n\t\tif (t < 0) t += 1;\n\t\tif (t > 1) t -= 1;\n\t\tif (t < 1 / 6) return p + (q - p) * 6 * t;\n\t\tif (t < 1 / 2) return q;\n\t\tif (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);\n\t\treturn p;\n\t}\n\n\tfunction SRGBToLinear(c) {\n\t\treturn c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n\t}\n\n\tfunction LinearToSRGB(c) {\n\t\treturn c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;\n\t}\n\n\tclass Color {\n\t\tconstructor(r, g, b) {\n\t\t\tif (g === undefined && b === undefined) {\n\t\t\t\t// r is THREE.Color, hex or string\n\t\t\t\treturn this.set(r);\n\t\t\t}\n\n\t\t\treturn this.setRGB(r, g, b);\n\t\t}\n\n\t\tset(value) {\n\t\t\tif (value && value.isColor) {\n\t\t\t\tthis.copy(value);\n\t\t\t} else if (typeof value === 'number') {\n\t\t\t\tthis.setHex(value);\n\t\t\t} else if (typeof value === 'string') {\n\t\t\t\tthis.setStyle(value);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetScalar(scalar) {\n\t\t\tthis.r = scalar;\n\t\t\tthis.g = scalar;\n\t\t\tthis.b = scalar;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetHex(hex) {\n\t\t\thex = Math.floor(hex);\n\t\t\tthis.r = (hex >> 16 & 255) / 255;\n\t\t\tthis.g = (hex >> 8 & 255) / 255;\n\t\t\tthis.b = (hex & 255) / 255;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetRGB(r, g, b) {\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetHSL(h, s, l) {\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\th = euclideanModulo(h, 1);\n\t\t\ts = clamp(s, 0, 1);\n\t\t\tl = clamp(l, 0, 1);\n\n\t\t\tif (s === 0) {\n\t\t\t\tthis.r = this.g = this.b = l;\n\t\t\t} else {\n\t\t\t\tconst p = l <= 0.5 ? l * (1 + s) : l + s - l * s;\n\t\t\t\tconst q = 2 * l - p;\n\t\t\t\tthis.r = hue2rgb(q, p, h + 1 / 3);\n\t\t\t\tthis.g = hue2rgb(q, p, h);\n\t\t\t\tthis.b = hue2rgb(q, p, h - 1 / 3);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetStyle(style) {\n\t\t\tfunction handleAlpha(string) {\n\t\t\t\tif (string === undefined) return;\n\n\t\t\t\tif (parseFloat(string) < 1) {\n\t\t\t\t\tconsole.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet m;\n\n\t\t\tif (m = /^((?:rgb|hsl)a?)\\(([^\\)]*)\\)/.exec(style)) {\n\t\t\t\t// rgb / hsl\n\t\t\t\tlet color;\n\t\t\t\tconst name = m[1];\n\t\t\t\tconst components = m[2];\n\n\t\t\t\tswitch (name) {\n\t\t\t\t\tcase 'rgb':\n\t\t\t\t\tcase 'rgba':\n\t\t\t\t\t\tif (color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min(255, parseInt(color[1], 10)) / 255;\n\t\t\t\t\t\t\tthis.g = Math.min(255, parseInt(color[2], 10)) / 255;\n\t\t\t\t\t\t\tthis.b = Math.min(255, parseInt(color[3], 10)) / 255;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min(100, parseInt(color[1], 10)) / 100;\n\t\t\t\t\t\t\tthis.g = Math.min(100, parseInt(color[2], 10)) / 100;\n\t\t\t\t\t\t\tthis.b = Math.min(100, parseInt(color[3], 10)) / 100;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'hsl':\n\t\t\t\t\tcase 'hsla':\n\t\t\t\t\t\tif (color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\tconst h = parseFloat(color[1]) / 360;\n\t\t\t\t\t\t\tconst s = parseInt(color[2], 10) / 100;\n\t\t\t\t\t\t\tconst l = parseInt(color[3], 10) / 100;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this.setHSL(h, s, l);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (m = /^\\#([A-Fa-f\\d]+)$/.exec(style)) {\n\t\t\t\t// hex color\n\t\t\t\tconst hex = m[1];\n\t\t\t\tconst size = hex.length;\n\n\t\t\t\tif (size === 3) {\n\t\t\t\t\t// #ff0\n\t\t\t\t\tthis.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;\n\t\t\t\t\tthis.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;\n\t\t\t\t\tthis.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;\n\t\t\t\t\treturn this;\n\t\t\t\t} else if (size === 6) {\n\t\t\t\t\t// #ff0000\n\t\t\t\t\tthis.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;\n\t\t\t\t\tthis.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;\n\t\t\t\t\tthis.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (style && style.length > 0) {\n\t\t\t\treturn this.setColorName(style);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetColorName(style) {\n\t\t\t// color keywords\n\t\t\tconst hex = _colorKeywords[style.toLowerCase()];\n\n\t\t\tif (hex !== undefined) {\n\t\t\t\t// red\n\t\t\t\tthis.setHex(hex);\n\t\t\t} else {\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn('THREE.Color: Unknown color ' + style);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.r, this.g, this.b);\n\t\t}\n\n\t\tcopy(color) {\n\t\t\tthis.r = color.r;\n\t\t\tthis.g = color.g;\n\t\t\tthis.b = color.b;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyGammaToLinear(color, gammaFactor = 2.0) {\n\t\t\tthis.r = Math.pow(color.r, gammaFactor);\n\t\t\tthis.g = Math.pow(color.g, gammaFactor);\n\t\t\tthis.b = Math.pow(color.b, gammaFactor);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyLinearToGamma(color, gammaFactor = 2.0) {\n\t\t\tconst safeInverse = gammaFactor > 0 ? 1.0 / gammaFactor : 1.0;\n\t\t\tthis.r = Math.pow(color.r, safeInverse);\n\t\t\tthis.g = Math.pow(color.g, safeInverse);\n\t\t\tthis.b = Math.pow(color.b, safeInverse);\n\t\t\treturn this;\n\t\t}\n\n\t\tconvertGammaToLinear(gammaFactor) {\n\t\t\tthis.copyGammaToLinear(this, gammaFactor);\n\t\t\treturn this;\n\t\t}\n\n\t\tconvertLinearToGamma(gammaFactor) {\n\t\t\tthis.copyLinearToGamma(this, gammaFactor);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopySRGBToLinear(color) {\n\t\t\tthis.r = SRGBToLinear(color.r);\n\t\t\tthis.g = SRGBToLinear(color.g);\n\t\t\tthis.b = SRGBToLinear(color.b);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyLinearToSRGB(color) {\n\t\t\tthis.r = LinearToSRGB(color.r);\n\t\t\tthis.g = LinearToSRGB(color.g);\n\t\t\tthis.b = LinearToSRGB(color.b);\n\t\t\treturn this;\n\t\t}\n\n\t\tconvertSRGBToLinear() {\n\t\t\tthis.copySRGBToLinear(this);\n\t\t\treturn this;\n\t\t}\n\n\t\tconvertLinearToSRGB() {\n\t\t\tthis.copyLinearToSRGB(this);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetHex() {\n\t\t\treturn this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;\n\t\t}\n\n\t\tgetHexString() {\n\t\t\treturn ('000000' + this.getHex().toString(16)).slice(-6);\n\t\t}\n\n\t\tgetHSL(target) {\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\tconst r = this.r,\n\t\t\t\t\t\tg = this.g,\n\t\t\t\t\t\tb = this.b;\n\t\t\tconst max = Math.max(r, g, b);\n\t\t\tconst min = Math.min(r, g, b);\n\t\t\tlet hue, saturation;\n\t\t\tconst lightness = (min + max) / 2.0;\n\n\t\t\tif (min === max) {\n\t\t\t\thue = 0;\n\t\t\t\tsaturation = 0;\n\t\t\t} else {\n\t\t\t\tconst delta = max - min;\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);\n\n\t\t\t\tswitch (max) {\n\t\t\t\t\tcase r:\n\t\t\t\t\t\thue = (g - b) / delta + (g < b ? 6 : 0);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase g:\n\t\t\t\t\t\thue = (b - r) / delta + 2;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase b:\n\t\t\t\t\t\thue = (r - g) / delta + 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\thue /= 6;\n\t\t\t}\n\n\t\t\ttarget.h = hue;\n\t\t\ttarget.s = saturation;\n\t\t\ttarget.l = lightness;\n\t\t\treturn target;\n\t\t}\n\n\t\tgetStyle() {\n\t\t\treturn 'rgb(' + (this.r * 255 | 0) + ',' + (this.g * 255 | 0) + ',' + (this.b * 255 | 0) + ')';\n\t\t}\n\n\t\toffsetHSL(h, s, l) {\n\t\t\tthis.getHSL(_hslA);\n\t\t\t_hslA.h += h;\n\t\t\t_hslA.s += s;\n\t\t\t_hslA.l += l;\n\t\t\tthis.setHSL(_hslA.h, _hslA.s, _hslA.l);\n\t\t\treturn this;\n\t\t}\n\n\t\tadd(color) {\n\t\t\tthis.r += color.r;\n\t\t\tthis.g += color.g;\n\t\t\tthis.b += color.b;\n\t\t\treturn this;\n\t\t}\n\n\t\taddColors(color1, color2) {\n\t\t\tthis.r = color1.r + color2.r;\n\t\t\tthis.g = color1.g + color2.g;\n\t\t\tthis.b = color1.b + color2.b;\n\t\t\treturn this;\n\t\t}\n\n\t\taddScalar(s) {\n\t\t\tthis.r += s;\n\t\t\tthis.g += s;\n\t\t\tthis.b += s;\n\t\t\treturn this;\n\t\t}\n\n\t\tsub(color) {\n\t\t\tthis.r = Math.max(0, this.r - color.r);\n\t\t\tthis.g = Math.max(0, this.g - color.g);\n\t\t\tthis.b = Math.max(0, this.b - color.b);\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiply(color) {\n\t\t\tthis.r *= color.r;\n\t\t\tthis.g *= color.g;\n\t\t\tthis.b *= color.b;\n\t\t\treturn this;\n\t\t}\n\n\t\tmultiplyScalar(s) {\n\t\t\tthis.r *= s;\n\t\t\tthis.g *= s;\n\t\t\tthis.b *= s;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerp(color, alpha) {\n\t\t\tthis.r += (color.r - this.r) * alpha;\n\t\t\tthis.g += (color.g - this.g) * alpha;\n\t\t\tthis.b += (color.b - this.b) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpColors(color1, color2, alpha) {\n\t\t\tthis.r = color1.r + (color2.r - color1.r) * alpha;\n\t\t\tthis.g = color1.g + (color2.g - color1.g) * alpha;\n\t\t\tthis.b = color1.b + (color2.b - color1.b) * alpha;\n\t\t\treturn this;\n\t\t}\n\n\t\tlerpHSL(color, alpha) {\n\t\t\tthis.getHSL(_hslA);\n\t\t\tcolor.getHSL(_hslB);\n\t\t\tconst h = lerp(_hslA.h, _hslB.h, alpha);\n\t\t\tconst s = lerp(_hslA.s, _hslB.s, alpha);\n\t\t\tconst l = lerp(_hslA.l, _hslB.l, alpha);\n\t\t\tthis.setHSL(h, s, l);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(c) {\n\t\t\treturn c.r === this.r && c.g === this.g && c.b === this.b;\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tthis.r = array[offset];\n\t\t\tthis.g = array[offset + 1];\n\t\t\tthis.b = array[offset + 2];\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tarray[offset] = this.r;\n\t\t\tarray[offset + 1] = this.g;\n\t\t\tarray[offset + 2] = this.b;\n\t\t\treturn array;\n\t\t}\n\n\t\tfromBufferAttribute(attribute, index) {\n\t\t\tthis.r = attribute.getX(index);\n\t\t\tthis.g = attribute.getY(index);\n\t\t\tthis.b = attribute.getZ(index);\n\n\t\t\tif (attribute.normalized === true) {\n\t\t\t\t// assuming Uint8Array\n\t\t\t\tthis.r /= 255;\n\t\t\t\tthis.g /= 255;\n\t\t\t\tthis.b /= 255;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\treturn this.getHex();\n\t\t}\n\n\t}\n\n\tColor.NAMES = _colorKeywords;\n\tColor.prototype.isColor = true;\n\tColor.prototype.r = 1;\n\tColor.prototype.g = 1;\n\tColor.prototype.b = 1;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.Multiply,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\tdepthTest: <bool>,\n\t *\tdepthWrite: <bool>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t * }\n\t */\n\n\tclass MeshBasicMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshBasicMaterial';\n\t\t\tthis.color = new Color(0xffffff); // emissive\n\n\t\t\tthis.map = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.specularMap = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.envMap = null;\n\t\t\tthis.combine = MultiplyOperation;\n\t\t\tthis.reflectivity = 1;\n\t\t\tthis.refractionRatio = 0.98;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.specularMap = source.specularMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.combine = source.combine;\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n\tconst _vector$9 = /*@__PURE__*/new Vector3();\n\n\tconst _vector2$1 = /*@__PURE__*/new Vector2();\n\n\tclass BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tif (Array.isArray(array)) {\n\t\t\t\tthrow new TypeError('THREE.BufferAttribute: array should be a Typed Array.');\n\t\t\t}\n\n\t\t\tthis.name = '';\n\t\t\tthis.array = array;\n\t\t\tthis.itemSize = itemSize;\n\t\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\t\tthis.normalized = normalized === true;\n\t\t\tthis.usage = StaticDrawUsage;\n\t\t\tthis.updateRange = {\n\t\t\t\toffset: 0,\n\t\t\t\tcount: -1\n\t\t\t};\n\t\t\tthis.version = 0;\n\t\t}\n\n\t\tonUploadCallback() {}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t\tsetUsage(value) {\n\t\t\tthis.usage = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.array = new source.array.constructor(source.array);\n\t\t\tthis.itemSize = source.itemSize;\n\t\t\tthis.count = source.count;\n\t\t\tthis.normalized = source.normalized;\n\t\t\tthis.usage = source.usage;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyAt(index1, attribute, index2) {\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\n\t\t\tfor (let i = 0, l = this.itemSize; i < l; i++) {\n\t\t\t\tthis.array[index1 + i] = attribute.array[index2 + i];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyArray(array) {\n\t\t\tthis.array.set(array);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyColorsArray(colors) {\n\t\t\tconst array = this.array;\n\t\t\tlet offset = 0;\n\n\t\t\tfor (let i = 0, l = colors.length; i < l; i++) {\n\t\t\t\tlet color = colors[i];\n\n\t\t\t\tif (color === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined', i);\n\t\t\t\t\tcolor = new Color();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = color.r;\n\t\t\t\tarray[offset++] = color.g;\n\t\t\t\tarray[offset++] = color.b;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyVector2sArray(vectors) {\n\t\t\tconst array = this.array;\n\t\t\tlet offset = 0;\n\n\t\t\tfor (let i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tlet vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector2();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyVector3sArray(vectors) {\n\t\t\tconst array = this.array;\n\t\t\tlet offset = 0;\n\n\t\t\tfor (let i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tlet vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector3();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t\tarray[offset++] = vector.z;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyVector4sArray(vectors) {\n\t\t\tconst array = this.array;\n\t\t\tlet offset = 0;\n\n\t\t\tfor (let i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tlet vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector4();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t\tarray[offset++] = vector.z;\n\t\t\t\tarray[offset++] = vector.w;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyMatrix3(m) {\n\t\t\tif (this.itemSize === 2) {\n\t\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t\t_vector2$1.fromBufferAttribute(this, i);\n\n\t\t\t\t\t_vector2$1.applyMatrix3(m);\n\n\t\t\t\t\tthis.setXY(i, _vector2$1.x, _vector2$1.y);\n\t\t\t\t}\n\t\t\t} else if (this.itemSize === 3) {\n\t\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t\t_vector$9.fromBufferAttribute(this, i);\n\n\t\t\t\t\t_vector$9.applyMatrix3(m);\n\n\t\t\t\t\tthis.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyMatrix4(m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$9.x = this.getX(i);\n\t\t\t\t_vector$9.y = this.getY(i);\n\t\t\t\t_vector$9.z = this.getZ(i);\n\n\t\t\t\t_vector$9.applyMatrix4(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyNormalMatrix(m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$9.x = this.getX(i);\n\t\t\t\t_vector$9.y = this.getY(i);\n\t\t\t\t_vector$9.z = this.getZ(i);\n\n\t\t\t\t_vector$9.applyNormalMatrix(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttransformDirection(m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$9.x = this.getX(i);\n\t\t\t\t_vector$9.y = this.getY(i);\n\t\t\t\t_vector$9.z = this.getZ(i);\n\n\t\t\t\t_vector$9.transformDirection(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tset(value, offset = 0) {\n\t\t\tthis.array.set(value, offset);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetX(index) {\n\t\t\treturn this.array[index * this.itemSize];\n\t\t}\n\n\t\tsetX(index, x) {\n\t\t\tthis.array[index * this.itemSize] = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetY(index) {\n\t\t\treturn this.array[index * this.itemSize + 1];\n\t\t}\n\n\t\tsetY(index, y) {\n\t\t\tthis.array[index * this.itemSize + 1] = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetZ(index) {\n\t\t\treturn this.array[index * this.itemSize + 2];\n\t\t}\n\n\t\tsetZ(index, z) {\n\t\t\tthis.array[index * this.itemSize + 2] = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetW(index) {\n\t\t\treturn this.array[index * this.itemSize + 3];\n\t\t}\n\n\t\tsetW(index, w) {\n\t\t\tthis.array[index * this.itemSize + 3] = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetXY(index, x, y) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetXYZ(index, x, y, z) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\tthis.array[index + 2] = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetXYZW(index, x, y, z, w) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\tthis.array[index + 2] = z;\n\t\t\tthis.array[index + 3] = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tonUpload(callback) {\n\t\t\tthis.onUploadCallback = callback;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.array, this.itemSize).copy(this);\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call(this.array),\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (this.usage !== StaticDrawUsage) data.usage = this.usage;\n\t\t\tif (this.updateRange.offset !== 0 || this.updateRange.count !== -1) data.updateRange = this.updateRange;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tBufferAttribute.prototype.isBufferAttribute = true; //\n\n\tclass Int8BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Int8Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Uint8BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Uint8Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Uint8ClampedBufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Uint8ClampedArray(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Int16BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Int16Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Uint16BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Uint16Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Int32BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Int32Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Uint32BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Uint32Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Float16BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Uint16Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tFloat16BufferAttribute.prototype.isFloat16BufferAttribute = true;\n\n\tclass Float32BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Float32Array(array), itemSize, normalized);\n\t\t}\n\n\t}\n\n\tclass Float64BufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized) {\n\t\t\tsuper(new Float64Array(array), itemSize, normalized);\n\t\t}\n\n\t} //\n\n\tlet _id = 0;\n\n\tconst _m1 = /*@__PURE__*/new Matrix4();\n\n\tconst _obj = /*@__PURE__*/new Object3D();\n\n\tconst _offset = /*@__PURE__*/new Vector3();\n\n\tconst _box$1 = /*@__PURE__*/new Box3();\n\n\tconst _boxMorphTargets = /*@__PURE__*/new Box3();\n\n\tconst _vector$8 = /*@__PURE__*/new Vector3();\n\n\tclass BufferGeometry extends EventDispatcher {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tObject.defineProperty(this, 'id', {\n\t\t\t\tvalue: _id++\n\t\t\t});\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.name = '';\n\t\t\tthis.type = 'BufferGeometry';\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.morphTargetsRelative = false;\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\t\t\tthis.drawRange = {\n\t\t\t\tstart: 0,\n\t\t\t\tcount: Infinity\n\t\t\t};\n\t\t\tthis.userData = {};\n\t\t}\n\n\t\tgetIndex() {\n\t\t\treturn this.index;\n\t\t}\n\n\t\tsetIndex(index) {\n\t\t\tif (Array.isArray(index)) {\n\t\t\t\tthis.index = new (arrayMax(index) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);\n\t\t\t} else {\n\t\t\t\tthis.index = index;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetAttribute(name) {\n\t\t\treturn this.attributes[name];\n\t\t}\n\n\t\tsetAttribute(name, attribute) {\n\t\t\tthis.attributes[name] = attribute;\n\t\t\treturn this;\n\t\t}\n\n\t\tdeleteAttribute(name) {\n\t\t\tdelete this.attributes[name];\n\t\t\treturn this;\n\t\t}\n\n\t\thasAttribute(name) {\n\t\t\treturn this.attributes[name] !== undefined;\n\t\t}\n\n\t\taddGroup(start, count, materialIndex = 0) {\n\t\t\tthis.groups.push({\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex\n\t\t\t});\n\t\t}\n\n\t\tclearGroups() {\n\t\t\tthis.groups = [];\n\t\t}\n\n\t\tsetDrawRange(start, count) {\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\t\t}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\tconst position = this.attributes.position;\n\n\t\t\tif (position !== undefined) {\n\t\t\t\tposition.applyMatrix4(matrix);\n\t\t\t\tposition.needsUpdate = true;\n\t\t\t}\n\n\t\t\tconst normal = this.attributes.normal;\n\n\t\t\tif (normal !== undefined) {\n\t\t\t\tconst normalMatrix = new Matrix3().getNormalMatrix(matrix);\n\t\t\t\tnormal.applyNormalMatrix(normalMatrix);\n\t\t\t\tnormal.needsUpdate = true;\n\t\t\t}\n\n\t\t\tconst tangent = this.attributes.tangent;\n\n\t\t\tif (tangent !== undefined) {\n\t\t\t\ttangent.transformDirection(matrix);\n\t\t\t\ttangent.needsUpdate = true;\n\t\t\t}\n\n\t\t\tif (this.boundingBox !== null) {\n\t\t\t\tthis.computeBoundingBox();\n\t\t\t}\n\n\t\t\tif (this.boundingSphere !== null) {\n\t\t\t\tthis.computeBoundingSphere();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyQuaternion(q) {\n\t\t\t_m1.makeRotationFromQuaternion(q);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateX(angle) {\n\t\t\t// rotate geometry around world x-axis\n\t\t\t_m1.makeRotationX(angle);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateY(angle) {\n\t\t\t// rotate geometry around world y-axis\n\t\t\t_m1.makeRotationY(angle);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\trotateZ(angle) {\n\t\t\t// rotate geometry around world z-axis\n\t\t\t_m1.makeRotationZ(angle);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(x, y, z) {\n\t\t\t// translate geometry\n\t\t\t_m1.makeTranslation(x, y, z);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\tscale(x, y, z) {\n\t\t\t// scale geometry\n\t\t\t_m1.makeScale(x, y, z);\n\n\t\t\tthis.applyMatrix4(_m1);\n\t\t\treturn this;\n\t\t}\n\n\t\tlookAt(vector) {\n\t\t\t_obj.lookAt(vector);\n\n\t\t\t_obj.updateMatrix();\n\n\t\t\tthis.applyMatrix4(_obj.matrix);\n\t\t\treturn this;\n\t\t}\n\n\t\tcenter() {\n\t\t\tthis.computeBoundingBox();\n\t\t\tthis.boundingBox.getCenter(_offset).negate();\n\t\t\tthis.translate(_offset.x, _offset.y, _offset.z);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPoints(points) {\n\t\t\tconst position = [];\n\n\t\t\tfor (let i = 0, l = points.length; i < l; i++) {\n\t\t\t\tconst point = points[i];\n\t\t\t\tposition.push(point.x, point.y, point.z || 0);\n\t\t\t}\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(position, 3));\n\t\t\treturn this;\n\t\t}\n\n\t\tcomputeBoundingBox() {\n\t\t\tif (this.boundingBox === null) {\n\t\t\t\tthis.boundingBox = new Box3();\n\t\t\t}\n\n\t\t\tconst position = this.attributes.position;\n\t\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif (position && position.isGLBufferAttribute) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set \"mesh.frustumCulled\" to \"false\".', this);\n\t\t\t\tthis.boundingBox.set(new Vector3(-Infinity, -Infinity, -Infinity), new Vector3(+Infinity, +Infinity, +Infinity));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (position !== undefined) {\n\t\t\t\tthis.boundingBox.setFromBufferAttribute(position); // process morph attributes if present\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tconst morphAttribute = morphAttributesPosition[i];\n\n\t\t\t\t\t\t_box$1.setFromBufferAttribute(morphAttribute);\n\n\t\t\t\t\t\tif (this.morphTargetsRelative) {\n\t\t\t\t\t\t\t_vector$8.addVectors(this.boundingBox.min, _box$1.min);\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_vector$8);\n\n\t\t\t\t\t\t\t_vector$8.addVectors(this.boundingBox.max, _box$1.max);\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_vector$8);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_box$1.min);\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_box$1.max);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.boundingBox.makeEmpty();\n\t\t\t}\n\n\t\t\tif (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this);\n\t\t\t}\n\t\t}\n\n\t\tcomputeBoundingSphere() {\n\t\t\tif (this.boundingSphere === null) {\n\t\t\t\tthis.boundingSphere = new Sphere();\n\t\t\t}\n\n\t\t\tconst position = this.attributes.position;\n\t\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif (position && position.isGLBufferAttribute) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set \"mesh.frustumCulled\" to \"false\".', this);\n\t\t\t\tthis.boundingSphere.set(new Vector3(), Infinity);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (position) {\n\t\t\t\t// first, find the center of the bounding sphere\n\t\t\t\tconst center = this.boundingSphere.center;\n\n\t\t\t\t_box$1.setFromBufferAttribute(position); // process morph attributes if present\n\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tconst morphAttribute = morphAttributesPosition[i];\n\n\t\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute(morphAttribute);\n\n\t\t\t\t\t\tif (this.morphTargetsRelative) {\n\t\t\t\t\t\t\t_vector$8.addVectors(_box$1.min, _boxMorphTargets.min);\n\n\t\t\t\t\t\t\t_box$1.expandByPoint(_vector$8);\n\n\t\t\t\t\t\t\t_vector$8.addVectors(_box$1.max, _boxMorphTargets.max);\n\n\t\t\t\t\t\t\t_box$1.expandByPoint(_vector$8);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_box$1.expandByPoint(_boxMorphTargets.min);\n\n\t\t\t\t\t\t\t_box$1.expandByPoint(_boxMorphTargets.max);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t_box$1.getCenter(center); // second, try to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\n\t\t\t\tlet maxRadiusSq = 0;\n\n\t\t\t\tfor (let i = 0, il = position.count; i < il; i++) {\n\t\t\t\t\t_vector$8.fromBufferAttribute(position, i);\n\n\t\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));\n\t\t\t\t} // process morph attributes if present\n\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tconst morphAttribute = morphAttributesPosition[i];\n\t\t\t\t\t\tconst morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\t\tfor (let j = 0, jl = morphAttribute.count; j < jl; j++) {\n\t\t\t\t\t\t\t_vector$8.fromBufferAttribute(morphAttribute, j);\n\n\t\t\t\t\t\t\tif (morphTargetsRelative) {\n\t\t\t\t\t\t\t\t_offset.fromBufferAttribute(position, j);\n\n\t\t\t\t\t\t\t\t_vector$8.add(_offset);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n\n\t\t\t\tif (isNaN(this.boundingSphere.radius)) {\n\t\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcomputeTangents() {\n\t\t\tconst index = this.index;\n\t\t\tconst attributes = this.attributes; // based on http://www.terathon.com/code/tangent.html\n\t\t\t// (per vertex tangents)\n\n\t\t\tif (index === null || attributes.position === undefined || attributes.normal === undefined || attributes.uv === undefined) {\n\t\t\t\tconsole.error('THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst indices = index.array;\n\t\t\tconst positions = attributes.position.array;\n\t\t\tconst normals = attributes.normal.array;\n\t\t\tconst uvs = attributes.uv.array;\n\t\t\tconst nVertices = positions.length / 3;\n\n\t\t\tif (attributes.tangent === undefined) {\n\t\t\t\tthis.setAttribute('tangent', new BufferAttribute(new Float32Array(4 * nVertices), 4));\n\t\t\t}\n\n\t\t\tconst tangents = attributes.tangent.array;\n\t\t\tconst tan1 = [],\n\t\t\t\t\t\ttan2 = [];\n\n\t\t\tfor (let i = 0; i < nVertices; i++) {\n\t\t\t\ttan1[i] = new Vector3();\n\t\t\t\ttan2[i] = new Vector3();\n\t\t\t}\n\n\t\t\tconst vA = new Vector3(),\n\t\t\t\t\t\tvB = new Vector3(),\n\t\t\t\t\t\tvC = new Vector3(),\n\t\t\t\t\t\tuvA = new Vector2(),\n\t\t\t\t\t\tuvB = new Vector2(),\n\t\t\t\t\t\tuvC = new Vector2(),\n\t\t\t\t\t\tsdir = new Vector3(),\n\t\t\t\t\t\ttdir = new Vector3();\n\n\t\t\tfunction handleTriangle(a, b, c) {\n\t\t\t\tvA.fromArray(positions, a * 3);\n\t\t\t\tvB.fromArray(positions, b * 3);\n\t\t\t\tvC.fromArray(positions, c * 3);\n\t\t\t\tuvA.fromArray(uvs, a * 2);\n\t\t\t\tuvB.fromArray(uvs, b * 2);\n\t\t\t\tuvC.fromArray(uvs, c * 2);\n\t\t\t\tvB.sub(vA);\n\t\t\t\tvC.sub(vA);\n\t\t\t\tuvB.sub(uvA);\n\t\t\t\tuvC.sub(uvA);\n\t\t\t\tconst r = 1.0 / (uvB.x * uvC.y - uvC.x * uvB.y); // silently ignore degenerate uv triangles having coincident or colinear vertices\n\n\t\t\t\tif (!isFinite(r)) return;\n\t\t\t\tsdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);\n\t\t\t\ttdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);\n\t\t\t\ttan1[a].add(sdir);\n\t\t\t\ttan1[b].add(sdir);\n\t\t\t\ttan1[c].add(sdir);\n\t\t\t\ttan2[a].add(tdir);\n\t\t\t\ttan2[b].add(tdir);\n\t\t\t\ttan2[c].add(tdir);\n\t\t\t}\n\n\t\t\tlet groups = this.groups;\n\n\t\t\tif (groups.length === 0) {\n\t\t\t\tgroups = [{\n\t\t\t\t\tstart: 0,\n\t\t\t\t\tcount: indices.length\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tfor (let i = 0, il = groups.length; i < il; ++i) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tconst start = group.start;\n\t\t\t\tconst count = group.count;\n\n\t\t\t\tfor (let j = start, jl = start + count; j < jl; j += 3) {\n\t\t\t\t\thandleTriangle(indices[j + 0], indices[j + 1], indices[j + 2]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst tmp = new Vector3(),\n\t\t\t\t\t\ttmp2 = new Vector3();\n\t\t\tconst n = new Vector3(),\n\t\t\t\t\t\tn2 = new Vector3();\n\n\t\t\tfunction handleVertex(v) {\n\t\t\t\tn.fromArray(normals, v * 3);\n\t\t\t\tn2.copy(n);\n\t\t\t\tconst t = tan1[v]; // Gram-Schmidt orthogonalize\n\n\t\t\t\ttmp.copy(t);\n\t\t\t\ttmp.sub(n.multiplyScalar(n.dot(t))).normalize(); // Calculate handedness\n\n\t\t\t\ttmp2.crossVectors(n2, t);\n\t\t\t\tconst test = tmp2.dot(tan2[v]);\n\t\t\t\tconst w = test < 0.0 ? -1.0 : 1.0;\n\t\t\t\ttangents[v * 4] = tmp.x;\n\t\t\t\ttangents[v * 4 + 1] = tmp.y;\n\t\t\t\ttangents[v * 4 + 2] = tmp.z;\n\t\t\t\ttangents[v * 4 + 3] = w;\n\t\t\t}\n\n\t\t\tfor (let i = 0, il = groups.length; i < il; ++i) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tconst start = group.start;\n\t\t\t\tconst count = group.count;\n\n\t\t\t\tfor (let j = start, jl = start + count; j < jl; j += 3) {\n\t\t\t\t\thandleVertex(indices[j + 0]);\n\t\t\t\t\thandleVertex(indices[j + 1]);\n\t\t\t\t\thandleVertex(indices[j + 2]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcomputeVertexNormals() {\n\t\t\tconst index = this.index;\n\t\t\tconst positionAttribute = this.getAttribute('position');\n\n\t\t\tif (positionAttribute !== undefined) {\n\t\t\t\tlet normalAttribute = this.getAttribute('normal');\n\n\t\t\t\tif (normalAttribute === undefined) {\n\t\t\t\t\tnormalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);\n\t\t\t\t\tthis.setAttribute('normal', normalAttribute);\n\t\t\t\t} else {\n\t\t\t\t\t// reset existing normals to zero\n\t\t\t\t\tfor (let i = 0, il = normalAttribute.count; i < il; i++) {\n\t\t\t\t\t\tnormalAttribute.setXYZ(i, 0, 0, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst pA = new Vector3(),\n\t\t\t\t\t\t\tpB = new Vector3(),\n\t\t\t\t\t\t\tpC = new Vector3();\n\t\t\t\tconst nA = new Vector3(),\n\t\t\t\t\t\t\tnB = new Vector3(),\n\t\t\t\t\t\t\tnC = new Vector3();\n\t\t\t\tconst cb = new Vector3(),\n\t\t\t\t\t\t\tab = new Vector3(); // indexed elements\n\n\t\t\t\tif (index) {\n\t\t\t\t\tfor (let i = 0, il = index.count; i < il; i += 3) {\n\t\t\t\t\t\tconst vA = index.getX(i + 0);\n\t\t\t\t\t\tconst vB = index.getX(i + 1);\n\t\t\t\t\t\tconst vC = index.getX(i + 2);\n\t\t\t\t\t\tpA.fromBufferAttribute(positionAttribute, vA);\n\t\t\t\t\t\tpB.fromBufferAttribute(positionAttribute, vB);\n\t\t\t\t\t\tpC.fromBufferAttribute(positionAttribute, vC);\n\t\t\t\t\t\tcb.subVectors(pC, pB);\n\t\t\t\t\t\tab.subVectors(pA, pB);\n\t\t\t\t\t\tcb.cross(ab);\n\t\t\t\t\t\tnA.fromBufferAttribute(normalAttribute, vA);\n\t\t\t\t\t\tnB.fromBufferAttribute(normalAttribute, vB);\n\t\t\t\t\t\tnC.fromBufferAttribute(normalAttribute, vC);\n\t\t\t\t\t\tnA.add(cb);\n\t\t\t\t\t\tnB.add(cb);\n\t\t\t\t\t\tnC.add(cb);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\t\t\t\t\tfor (let i = 0, il = positionAttribute.count; i < il; i += 3) {\n\t\t\t\t\t\tpA.fromBufferAttribute(positionAttribute, i + 0);\n\t\t\t\t\t\tpB.fromBufferAttribute(positionAttribute, i + 1);\n\t\t\t\t\t\tpC.fromBufferAttribute(positionAttribute, i + 2);\n\t\t\t\t\t\tcb.subVectors(pC, pB);\n\t\t\t\t\t\tab.subVectors(pA, pB);\n\t\t\t\t\t\tcb.cross(ab);\n\t\t\t\t\t\tnormalAttribute.setXYZ(i + 0, cb.x, cb.y, cb.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(i + 1, cb.x, cb.y, cb.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(i + 2, cb.x, cb.y, cb.z);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.normalizeNormals();\n\t\t\t\tnormalAttribute.needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t\tmerge(geometry, offset) {\n\t\t\tif (!(geometry && geometry.isBufferGeometry)) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (offset === undefined) {\n\t\t\t\toffset = 0;\n\t\t\t\tconsole.warn('THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. ' + 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.');\n\t\t\t}\n\n\t\t\tconst attributes = this.attributes;\n\n\t\t\tfor (const key in attributes) {\n\t\t\t\tif (geometry.attributes[key] === undefined) continue;\n\t\t\t\tconst attribute1 = attributes[key];\n\t\t\t\tconst attributeArray1 = attribute1.array;\n\t\t\t\tconst attribute2 = geometry.attributes[key];\n\t\t\t\tconst attributeArray2 = attribute2.array;\n\t\t\t\tconst attributeOffset = attribute2.itemSize * offset;\n\t\t\t\tconst length = Math.min(attributeArray2.length, attributeArray1.length - attributeOffset);\n\n\t\t\t\tfor (let i = 0, j = attributeOffset; i < length; i++, j++) {\n\t\t\t\t\tattributeArray1[j] = attributeArray2[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tnormalizeNormals() {\n\t\t\tconst normals = this.attributes.normal;\n\n\t\t\tfor (let i = 0, il = normals.count; i < il; i++) {\n\t\t\t\t_vector$8.fromBufferAttribute(normals, i);\n\n\t\t\t\t_vector$8.normalize();\n\n\t\t\t\tnormals.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);\n\t\t\t}\n\t\t}\n\n\t\ttoNonIndexed() {\n\t\t\tfunction convertBufferAttribute(attribute, indices) {\n\t\t\t\tconst array = attribute.array;\n\t\t\t\tconst itemSize = attribute.itemSize;\n\t\t\t\tconst normalized = attribute.normalized;\n\t\t\t\tconst array2 = new array.constructor(indices.length * itemSize);\n\t\t\t\tlet index = 0,\n\t\t\t\t\t\tindex2 = 0;\n\n\t\t\t\tfor (let i = 0, l = indices.length; i < l; i++) {\n\t\t\t\t\tif (attribute.isInterleavedBufferAttribute) {\n\t\t\t\t\t\tindex = indices[i] * attribute.data.stride + attribute.offset;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tindex = indices[i] * itemSize;\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (let j = 0; j < itemSize; j++) {\n\t\t\t\t\t\tarray2[index2++] = array[index++];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute(array2, itemSize, normalized);\n\t\t\t} //\n\n\n\t\t\tif (this.index === null) {\n\t\t\t\tconsole.warn('THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.');\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tconst geometry2 = new BufferGeometry();\n\t\t\tconst indices = this.index.array;\n\t\t\tconst attributes = this.attributes; // attributes\n\n\t\t\tfor (const name in attributes) {\n\t\t\t\tconst attribute = attributes[name];\n\t\t\t\tconst newAttribute = convertBufferAttribute(attribute, indices);\n\t\t\t\tgeometry2.setAttribute(name, newAttribute);\n\t\t\t} // morph attributes\n\n\n\t\t\tconst morphAttributes = this.morphAttributes;\n\n\t\t\tfor (const name in morphAttributes) {\n\t\t\t\tconst morphArray = [];\n\t\t\t\tconst morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor (let i = 0, il = morphAttribute.length; i < il; i++) {\n\t\t\t\t\tconst attribute = morphAttribute[i];\n\t\t\t\t\tconst newAttribute = convertBufferAttribute(attribute, indices);\n\t\t\t\t\tmorphArray.push(newAttribute);\n\t\t\t\t}\n\n\t\t\t\tgeometry2.morphAttributes[name] = morphArray;\n\t\t\t}\n\n\t\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative; // groups\n\n\t\t\tconst groups = this.groups;\n\n\t\t\tfor (let i = 0, l = groups.length; i < l; i++) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tgeometry2.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t}\n\n\t\t\treturn geometry2;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t}; // standard BufferGeometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (Object.keys(this.userData).length > 0) data.userData = this.userData;\n\n\t\t\tif (this.parameters !== undefined) {\n\t\t\t\tconst parameters = this.parameters;\n\n\t\t\t\tfor (const key in parameters) {\n\t\t\t\t\tif (parameters[key] !== undefined) data[key] = parameters[key];\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\t\t\t} // for simplicity the code assumes attributes are not shared across geometries, see #15811\n\n\n\t\t\tdata.data = {\n\t\t\t\tattributes: {}\n\t\t\t};\n\t\t\tconst index = this.index;\n\n\t\t\tif (index !== null) {\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: Array.prototype.slice.call(index.array)\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst attributes = this.attributes;\n\n\t\t\tfor (const key in attributes) {\n\t\t\t\tconst attribute = attributes[key];\n\t\t\t\tdata.data.attributes[key] = attribute.toJSON(data.data);\n\t\t\t}\n\n\t\t\tconst morphAttributes = {};\n\t\t\tlet hasMorphAttributes = false;\n\n\t\t\tfor (const key in this.morphAttributes) {\n\t\t\t\tconst attributeArray = this.morphAttributes[key];\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor (let i = 0, il = attributeArray.length; i < il; i++) {\n\t\t\t\t\tconst attribute = attributeArray[i];\n\t\t\t\t\tarray.push(attribute.toJSON(data.data));\n\t\t\t\t}\n\n\t\t\t\tif (array.length > 0) {\n\t\t\t\t\tmorphAttributes[key] = array;\n\t\t\t\t\thasMorphAttributes = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hasMorphAttributes) {\n\t\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\t\t\t}\n\n\t\t\tconst groups = this.groups;\n\n\t\t\tif (groups.length > 0) {\n\t\t\t\tdata.data.groups = JSON.parse(JSON.stringify(groups));\n\t\t\t}\n\n\t\t\tconst boundingSphere = this.boundingSphere;\n\n\t\t\tif (boundingSphere !== null) {\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\t// reset\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null; // used for storing cloned, shared data\n\n\t\t\tconst data = {}; // name\n\n\t\t\tthis.name = source.name; // index\n\n\t\t\tconst index = source.index;\n\n\t\t\tif (index !== null) {\n\t\t\t\tthis.setIndex(index.clone(data));\n\t\t\t} // attributes\n\n\n\t\t\tconst attributes = source.attributes;\n\n\t\t\tfor (const name in attributes) {\n\t\t\t\tconst attribute = attributes[name];\n\t\t\t\tthis.setAttribute(name, attribute.clone(data));\n\t\t\t} // morph attributes\n\n\n\t\t\tconst morphAttributes = source.morphAttributes;\n\n\t\t\tfor (const name in morphAttributes) {\n\t\t\t\tconst array = [];\n\t\t\t\tconst morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor (let i = 0, l = morphAttribute.length; i < l; i++) {\n\t\t\t\t\tarray.push(morphAttribute[i].clone(data));\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[name] = array;\n\t\t\t}\n\n\t\t\tthis.morphTargetsRelative = source.morphTargetsRelative; // groups\n\n\t\t\tconst groups = source.groups;\n\n\t\t\tfor (let i = 0, l = groups.length; i < l; i++) {\n\t\t\t\tconst group = groups[i];\n\t\t\t\tthis.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t} // bounding box\n\n\n\t\t\tconst boundingBox = source.boundingBox;\n\n\t\t\tif (boundingBox !== null) {\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\t\t\t} // bounding sphere\n\n\n\t\t\tconst boundingSphere = source.boundingSphere;\n\n\t\t\tif (boundingSphere !== null) {\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\t\t\t} // draw range\n\n\n\t\t\tthis.drawRange.start = source.drawRange.start;\n\t\t\tthis.drawRange.count = source.drawRange.count; // user data\n\n\t\t\tthis.userData = source.userData; // geometry generator parameters\n\n\t\t\tif (source.parameters !== undefined) this.parameters = Object.assign({}, source.parameters);\n\t\t\treturn this;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t}\n\n\tBufferGeometry.prototype.isBufferGeometry = true;\n\n\tconst _inverseMatrix$2 = /*@__PURE__*/new Matrix4();\n\n\tconst _ray$2 = /*@__PURE__*/new Ray();\n\n\tconst _sphere$3 = /*@__PURE__*/new Sphere();\n\n\tconst _vA$1 = /*@__PURE__*/new Vector3();\n\n\tconst _vB$1 = /*@__PURE__*/new Vector3();\n\n\tconst _vC$1 = /*@__PURE__*/new Vector3();\n\n\tconst _tempA = /*@__PURE__*/new Vector3();\n\n\tconst _tempB = /*@__PURE__*/new Vector3();\n\n\tconst _tempC = /*@__PURE__*/new Vector3();\n\n\tconst _morphA = /*@__PURE__*/new Vector3();\n\n\tconst _morphB = /*@__PURE__*/new Vector3();\n\n\tconst _morphC = /*@__PURE__*/new Vector3();\n\n\tconst _uvA$1 = /*@__PURE__*/new Vector2();\n\n\tconst _uvB$1 = /*@__PURE__*/new Vector2();\n\n\tconst _uvC$1 = /*@__PURE__*/new Vector2();\n\n\tconst _intersectionPoint = /*@__PURE__*/new Vector3();\n\n\tconst _intersectionPointWorld = /*@__PURE__*/new Vector3();\n\n\tclass Mesh extends Object3D {\n\t\tconstructor(geometry = new BufferGeometry(), material = new MeshBasicMaterial()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Mesh';\n\t\t\tthis.geometry = geometry;\n\t\t\tthis.material = material;\n\t\t\tthis.updateMorphTargets();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\n\t\t\tif (source.morphTargetInfluences !== undefined) {\n\t\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\t\t\t}\n\n\t\t\tif (source.morphTargetDictionary !== undefined) {\n\t\t\t\tthis.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);\n\t\t\t}\n\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t}\n\n\t\tupdateMorphTargets() {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\t\tconst keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tconst morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tconst name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst material = this.material;\n\t\t\tconst matrixWorld = this.matrixWorld;\n\t\t\tif (material === undefined) return; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$3.copy(geometry.boundingSphere);\n\n\t\t\t_sphere$3.applyMatrix4(matrixWorld);\n\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere$3) === false) return; //\n\n\t\t\t_inverseMatrix$2.copy(matrixWorld).invert();\n\n\t\t\t_ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2); // Check boundingBox before continuing\n\n\n\t\t\tif (geometry.boundingBox !== null) {\n\t\t\t\tif (_ray$2.intersectsBox(geometry.boundingBox) === false) return;\n\t\t\t}\n\n\t\t\tlet intersection;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst index = geometry.index;\n\t\t\t\tconst position = geometry.attributes.position;\n\t\t\t\tconst morphPosition = geometry.morphAttributes.position;\n\t\t\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\t\tconst uv = geometry.attributes.uv;\n\t\t\t\tconst uv2 = geometry.attributes.uv2;\n\t\t\t\tconst groups = geometry.groups;\n\t\t\t\tconst drawRange = geometry.drawRange;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\t// indexed buffer geometry\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (let i = 0, il = groups.length; i < il; i++) {\n\t\t\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\t\t\tconst groupMaterial = material[group.materialIndex];\n\t\t\t\t\t\t\tconst start = Math.max(group.start, drawRange.start);\n\t\t\t\t\t\t\tconst end = Math.min(index.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));\n\n\t\t\t\t\t\t\tfor (let j = start, jl = end; j < jl; j += 3) {\n\t\t\t\t\t\t\t\tconst a = index.getX(j);\n\t\t\t\t\t\t\t\tconst b = index.getX(j + 1);\n\t\t\t\t\t\t\t\tconst c = index.getX(j + 2);\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics\n\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\t\tconst end = Math.min(index.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\tfor (let i = start, il = end; i < il; i += 3) {\n\t\t\t\t\t\t\tconst a = index.getX(i);\n\t\t\t\t\t\t\tconst b = index.getX(i + 1);\n\t\t\t\t\t\t\tconst c = index.getX(i + 2);\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(i / 3); // triangle number in indexed buffer semantics\n\n\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (position !== undefined) {\n\t\t\t\t\t// non-indexed buffer geometry\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (let i = 0, il = groups.length; i < il; i++) {\n\t\t\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\t\t\tconst groupMaterial = material[group.materialIndex];\n\t\t\t\t\t\t\tconst start = Math.max(group.start, drawRange.start);\n\t\t\t\t\t\t\tconst end = Math.min(position.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));\n\n\t\t\t\t\t\t\tfor (let j = start, jl = end; j < jl; j += 3) {\n\t\t\t\t\t\t\t\tconst a = j;\n\t\t\t\t\t\t\t\tconst b = j + 1;\n\t\t\t\t\t\t\t\tconst c = j + 2;\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(j / 3); // triangle number in non-indexed buffer semantics\n\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\t\tconst end = Math.min(position.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\tfor (let i = start, il = end; i < il; i += 3) {\n\t\t\t\t\t\t\tconst a = i;\n\t\t\t\t\t\t\tconst b = i + 1;\n\t\t\t\t\t\t\tconst c = i + 2;\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(i / 3); // triangle number in non-indexed buffer semantics\n\n\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t}\n\n\t}\n\n\tMesh.prototype.isMesh = true;\n\n\tfunction checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {\n\t\tlet intersect;\n\n\t\tif (material.side === BackSide) {\n\t\t\tintersect = ray.intersectTriangle(pC, pB, pA, true, point);\n\t\t} else {\n\t\t\tintersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);\n\t\t}\n\n\t\tif (intersect === null) return null;\n\n\t\t_intersectionPointWorld.copy(point);\n\n\t\t_intersectionPointWorld.applyMatrix4(object.matrixWorld);\n\n\t\tconst distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);\n\t\tif (distance < raycaster.near || distance > raycaster.far) return null;\n\t\treturn {\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectionPointWorld.clone(),\n\t\t\tobject: object\n\t\t};\n\t}\n\n\tfunction checkBufferGeometryIntersection(object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c) {\n\t\t_vA$1.fromBufferAttribute(position, a);\n\n\t\t_vB$1.fromBufferAttribute(position, b);\n\n\t\t_vC$1.fromBufferAttribute(position, c);\n\n\t\tconst morphInfluences = object.morphTargetInfluences;\n\n\t\tif (morphPosition && morphInfluences) {\n\t\t\t_morphA.set(0, 0, 0);\n\n\t\t\t_morphB.set(0, 0, 0);\n\n\t\t\t_morphC.set(0, 0, 0);\n\n\t\t\tfor (let i = 0, il = morphPosition.length; i < il; i++) {\n\t\t\t\tconst influence = morphInfluences[i];\n\t\t\t\tconst morphAttribute = morphPosition[i];\n\t\t\t\tif (influence === 0) continue;\n\n\t\t\t\t_tempA.fromBufferAttribute(morphAttribute, a);\n\n\t\t\t\t_tempB.fromBufferAttribute(morphAttribute, b);\n\n\t\t\t\t_tempC.fromBufferAttribute(morphAttribute, c);\n\n\t\t\t\tif (morphTargetsRelative) {\n\t\t\t\t\t_morphA.addScaledVector(_tempA, influence);\n\n\t\t\t\t\t_morphB.addScaledVector(_tempB, influence);\n\n\t\t\t\t\t_morphC.addScaledVector(_tempC, influence);\n\t\t\t\t} else {\n\t\t\t\t\t_morphA.addScaledVector(_tempA.sub(_vA$1), influence);\n\n\t\t\t\t\t_morphB.addScaledVector(_tempB.sub(_vB$1), influence);\n\n\t\t\t\t\t_morphC.addScaledVector(_tempC.sub(_vC$1), influence);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_vA$1.add(_morphA);\n\n\t\t\t_vB$1.add(_morphB);\n\n\t\t\t_vC$1.add(_morphC);\n\t\t}\n\n\t\tif (object.isSkinnedMesh) {\n\t\t\tobject.boneTransform(a, _vA$1);\n\t\t\tobject.boneTransform(b, _vB$1);\n\t\t\tobject.boneTransform(c, _vC$1);\n\t\t}\n\n\t\tconst intersection = checkIntersection(object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);\n\n\t\tif (intersection) {\n\t\t\tif (uv) {\n\t\t\t\t_uvA$1.fromBufferAttribute(uv, a);\n\n\t\t\t\t_uvB$1.fromBufferAttribute(uv, b);\n\n\t\t\t\t_uvC$1.fromBufferAttribute(uv, c);\n\n\t\t\t\tintersection.uv = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());\n\t\t\t}\n\n\t\t\tif (uv2) {\n\t\t\t\t_uvA$1.fromBufferAttribute(uv2, a);\n\n\t\t\t\t_uvB$1.fromBufferAttribute(uv2, b);\n\n\t\t\t\t_uvC$1.fromBufferAttribute(uv2, c);\n\n\t\t\t\tintersection.uv2 = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());\n\t\t\t}\n\n\t\t\tconst face = {\n\t\t\t\ta: a,\n\t\t\t\tb: b,\n\t\t\t\tc: c,\n\t\t\t\tnormal: new Vector3(),\n\t\t\t\tmaterialIndex: 0\n\t\t\t};\n\t\t\tTriangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);\n\t\t\tintersection.face = face;\n\t\t}\n\n\t\treturn intersection;\n\t}\n\n\tclass BoxGeometry extends BufferGeometry {\n\t\tconstructor(width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1) {\n\t\t\tsuper();\n\t\t\tthis.type = 'BoxGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\t\t\tconst scope = this; // segments\n\n\t\t\twidthSegments = Math.floor(widthSegments);\n\t\t\theightSegments = Math.floor(heightSegments);\n\t\t\tdepthSegments = Math.floor(depthSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tlet numberOfVertices = 0;\n\t\t\tlet groupStart = 0; // build each side of the box geometry\n\n\t\t\tbuildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px\n\n\t\t\tbuildPlane('z', 'y', 'x', 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx\n\n\t\t\tbuildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py\n\n\t\t\tbuildPlane('x', 'z', 'y', 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny\n\n\t\t\tbuildPlane('x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz\n\n\t\t\tbuildPlane('x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz\n\t\t\t// build geometry\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\tfunction buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {\n\t\t\t\tconst segmentWidth = width / gridX;\n\t\t\t\tconst segmentHeight = height / gridY;\n\t\t\t\tconst widthHalf = width / 2;\n\t\t\t\tconst heightHalf = height / 2;\n\t\t\t\tconst depthHalf = depth / 2;\n\t\t\t\tconst gridX1 = gridX + 1;\n\t\t\t\tconst gridY1 = gridY + 1;\n\t\t\t\tlet vertexCounter = 0;\n\t\t\t\tlet groupCount = 0;\n\t\t\t\tconst vector = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\t\tfor (let iy = 0; iy < gridY1; iy++) {\n\t\t\t\t\tconst y = iy * segmentHeight - heightHalf;\n\n\t\t\t\t\tfor (let ix = 0; ix < gridX1; ix++) {\n\t\t\t\t\t\tconst x = ix * segmentWidth - widthHalf; // set values to correct vector component\n\n\t\t\t\t\t\tvector[u] = x * udir;\n\t\t\t\t\t\tvector[v] = y * vdir;\n\t\t\t\t\t\tvector[w] = depthHalf; // now apply vector to vertex buffer\n\n\t\t\t\t\t\tvertices.push(vector.x, vector.y, vector.z); // set values to correct vector component\n\n\t\t\t\t\t\tvector[u] = 0;\n\t\t\t\t\t\tvector[v] = 0;\n\t\t\t\t\t\tvector[w] = depth > 0 ? 1 : -1; // now apply vector to normal buffer\n\n\t\t\t\t\t\tnormals.push(vector.x, vector.y, vector.z); // uvs\n\n\t\t\t\t\t\tuvs.push(ix / gridX);\n\t\t\t\t\t\tuvs.push(1 - iy / gridY); // counters\n\n\t\t\t\t\t\tvertexCounter += 1;\n\t\t\t\t\t}\n\t\t\t\t} // indices\n\t\t\t\t// 1. you need three indices to draw a single face\n\t\t\t\t// 2. a single segment consists of two faces\n\t\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\n\t\t\t\tfor (let iy = 0; iy < gridY; iy++) {\n\t\t\t\t\tfor (let ix = 0; ix < gridX; ix++) {\n\t\t\t\t\t\tconst a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\t\tconst b = numberOfVertices + ix + gridX1 * (iy + 1);\n\t\t\t\t\t\tconst c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);\n\t\t\t\t\t\tconst d = numberOfVertices + (ix + 1) + gridX1 * iy; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d); // increase counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\t\t\t\t\t}\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, materialIndex); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount; // update total number of vertices\n\n\t\t\t\tnumberOfVertices += vertexCounter;\n\t\t\t}\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\treturn new BoxGeometry(data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);\n\t\t}\n\n\t}\n\n\t/**\n\t * Uniform Utilities\n\t */\n\tfunction cloneUniforms(src) {\n\t\tconst dst = {};\n\n\t\tfor (const u in src) {\n\t\t\tdst[u] = {};\n\n\t\t\tfor (const p in src[u]) {\n\t\t\t\tconst property = src[u][p];\n\n\t\t\t\tif (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {\n\t\t\t\t\tdst[u][p] = property.clone();\n\t\t\t\t} else if (Array.isArray(property)) {\n\t\t\t\t\tdst[u][p] = property.slice();\n\t\t\t\t} else {\n\t\t\t\t\tdst[u][p] = property;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn dst;\n\t}\n\tfunction mergeUniforms(uniforms) {\n\t\tconst merged = {};\n\n\t\tfor (let u = 0; u < uniforms.length; u++) {\n\t\t\tconst tmp = cloneUniforms(uniforms[u]);\n\n\t\t\tfor (const p in tmp) {\n\t\t\t\tmerged[p] = tmp[p];\n\t\t\t}\n\t\t}\n\n\t\treturn merged;\n\t} // Legacy\n\n\tconst UniformsUtils = {\n\t\tclone: cloneUniforms,\n\t\tmerge: mergeUniforms\n\t};\n\n\tvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\n\tvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n\t/**\n\t * parameters = {\n\t *\tdefines: { \"label\" : \"value\" },\n\t *\tuniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *\tfragmentShader: <string>,\n\t *\tvertexShader: <string>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tlights: <bool>\n\t * }\n\t */\n\n\tclass ShaderMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ShaderMaterial';\n\t\t\tthis.defines = {};\n\t\t\tthis.uniforms = {};\n\t\t\tthis.vertexShader = default_vertex;\n\t\t\tthis.fragmentShader = default_fragment;\n\t\t\tthis.linewidth = 1;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.fog = false; // set to use scene fog\n\n\t\t\tthis.lights = false; // set to use scene lights\n\n\t\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\t\tthis.extensions = {\n\t\t\t\tderivatives: false,\n\t\t\t\t// set to use derivatives\n\t\t\t\tfragDepth: false,\n\t\t\t\t// set to use fragment depth values\n\t\t\t\tdrawBuffers: false,\n\t\t\t\t// set to use draw buffers\n\t\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\n\t\t\t}; // When rendered geometry doesn't include these attributes but the material does,\n\t\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\n\t\t\tthis.defaultAttributeValues = {\n\t\t\t\t'color': [1, 1, 1],\n\t\t\t\t'uv': [0, 0],\n\t\t\t\t'uv2': [0, 0]\n\t\t\t};\n\t\t\tthis.index0AttributeName = undefined;\n\t\t\tthis.uniformsNeedUpdate = false;\n\t\t\tthis.glslVersion = null;\n\n\t\t\tif (parameters !== undefined) {\n\t\t\t\tif (parameters.attributes !== undefined) {\n\t\t\t\t\tconsole.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');\n\t\t\t\t}\n\n\t\t\t\tthis.setValues(parameters);\n\t\t\t}\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.fragmentShader = source.fragmentShader;\n\t\t\tthis.vertexShader = source.vertexShader;\n\t\t\tthis.uniforms = cloneUniforms(source.uniforms);\n\t\t\tthis.defines = Object.assign({}, source.defines);\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.lights = source.lights;\n\t\t\tthis.clipping = source.clipping;\n\t\t\tthis.extensions = Object.assign({}, source.extensions);\n\t\t\tthis.glslVersion = source.glslVersion;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.glslVersion = this.glslVersion;\n\t\t\tdata.uniforms = {};\n\n\t\t\tfor (const name in this.uniforms) {\n\t\t\t\tconst uniform = this.uniforms[name];\n\t\t\t\tconst value = uniform.value;\n\n\t\t\t\tif (value && value.isTexture) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 't',\n\t\t\t\t\t\tvalue: value.toJSON(meta).uuid\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isColor) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'c',\n\t\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isVector2) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'v2',\n\t\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isVector3) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'v3',\n\t\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isVector4) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'v4',\n\t\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isMatrix3) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'm3',\n\t\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t\t};\n\t\t\t\t} else if (value && value.isMatrix4) {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\ttype: 'm4',\n\t\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\t\tvalue: value\n\t\t\t\t\t}; // note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (Object.keys(this.defines).length > 0) data.defines = this.defines;\n\t\t\tdata.vertexShader = this.vertexShader;\n\t\t\tdata.fragmentShader = this.fragmentShader;\n\t\t\tconst extensions = {};\n\n\t\t\tfor (const key in this.extensions) {\n\t\t\t\tif (this.extensions[key] === true) extensions[key] = true;\n\t\t\t}\n\n\t\t\tif (Object.keys(extensions).length > 0) data.extensions = extensions;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tShaderMaterial.prototype.isShaderMaterial = true;\n\n\tclass Camera extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'Camera';\n\t\t\tthis.matrixWorldInverse = new Matrix4();\n\t\t\tthis.projectionMatrix = new Matrix4();\n\t\t\tthis.projectionMatrixInverse = new Matrix4();\n\t\t}\n\n\t\tcopy(source, recursive) {\n\t\t\tsuper.copy(source, recursive);\n\t\t\tthis.matrixWorldInverse.copy(source.matrixWorldInverse);\n\t\t\tthis.projectionMatrix.copy(source.projectionMatrix);\n\t\t\tthis.projectionMatrixInverse.copy(source.projectionMatrixInverse);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetWorldDirection(target) {\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tconst e = this.matrixWorld.elements;\n\t\t\treturn target.set(-e[8], -e[9], -e[10]).normalize();\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t\tthis.matrixWorldInverse.copy(this.matrixWorld).invert();\n\t\t}\n\n\t\tupdateWorldMatrix(updateParents, updateChildren) {\n\t\t\tsuper.updateWorldMatrix(updateParents, updateChildren);\n\t\t\tthis.matrixWorldInverse.copy(this.matrixWorld).invert();\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tCamera.prototype.isCamera = true;\n\n\tclass PerspectiveCamera extends Camera {\n\t\tconstructor(fov = 50, aspect = 1, near = 0.1, far = 2000) {\n\t\t\tsuper();\n\t\t\tthis.type = 'PerspectiveCamera';\n\t\t\tthis.fov = fov;\n\t\t\tthis.zoom = 1;\n\t\t\tthis.near = near;\n\t\t\tthis.far = far;\n\t\t\tthis.focus = 10;\n\t\t\tthis.aspect = aspect;\n\t\t\tthis.view = null;\n\t\t\tthis.filmGauge = 35; // width of the film (default in millimeters)\n\n\t\t\tthis.filmOffset = 0; // horizontal film offset (same unit as gauge)\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tcopy(source, recursive) {\n\t\t\tsuper.copy(source, recursive);\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign({}, source.view);\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\t\t\treturn this;\n\t\t}\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\n\n\t\tsetFocalLength(focalLength) {\n\t\t\t/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\n\t\t\tconst vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\t\t\tthis.fov = RAD2DEG * 2 * Math.atan(vExtentSlope);\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\n\n\t\tgetFocalLength() {\n\t\t\tconst vExtentSlope = Math.tan(DEG2RAD * 0.5 * this.fov);\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\t\t}\n\n\t\tgetEffectiveFOV() {\n\t\t\treturn RAD2DEG * 2 * Math.atan(Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom);\n\t\t}\n\n\t\tgetFilmWidth() {\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min(this.aspect, 1);\n\t\t}\n\n\t\tgetFilmHeight() {\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max(this.aspect, 1);\n\t\t}\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *\t +---+---+---+\n\t\t *\t | A | B | C |\n\t\t *\t +---+---+---+\n\t\t *\t | D | E | F |\n\t\t *\t +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *\t const w = 1920;\n\t\t *\t const h = 1080;\n\t\t *\t const fullWidth = w * 3;\n\t\t *\t const fullHeight = h * 2;\n\t\t *\n\t\t *\t --A--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *\t --B--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *\t --C--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *\t --D--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *\t --E--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *\t --F--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *\t Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\n\n\t\tsetViewOffset(fullWidth, fullHeight, x, y, width, height) {\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\t\tif (this.view === null) {\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tclearViewOffset() {\n\t\t\tif (this.view !== null) {\n\t\t\t\tthis.view.enabled = false;\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tupdateProjectionMatrix() {\n\t\t\tconst near = this.near;\n\t\t\tlet top = near * Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom;\n\t\t\tlet height = 2 * top;\n\t\t\tlet width = this.aspect * height;\n\t\t\tlet left = -0.5 * width;\n\t\t\tconst view = this.view;\n\n\t\t\tif (this.view !== null && this.view.enabled) {\n\t\t\t\tconst fullWidth = view.fullWidth,\n\t\t\t\t\t\t\tfullHeight = view.fullHeight;\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\t\t\t}\n\n\t\t\tconst skew = this.filmOffset;\n\t\t\tif (skew !== 0) left += near * skew / this.getFilmWidth();\n\t\t\tthis.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);\n\t\t\tthis.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\t\t\tdata.object.aspect = this.aspect;\n\t\t\tif (this.view !== null) data.object.view = Object.assign({}, this.view);\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tPerspectiveCamera.prototype.isPerspectiveCamera = true;\n\n\tconst fov = 90,\n\t\t\t\taspect = 1;\n\n\tclass CubeCamera extends Object3D {\n\t\tconstructor(near, far, renderTarget) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CubeCamera';\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget !== true) {\n\t\t\t\tconsole.error('THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.renderTarget = renderTarget;\n\t\t\tconst cameraPX = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraPX.layers = this.layers;\n\t\t\tcameraPX.up.set(0, -1, 0);\n\t\t\tcameraPX.lookAt(new Vector3(1, 0, 0));\n\t\t\tthis.add(cameraPX);\n\t\t\tconst cameraNX = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraNX.layers = this.layers;\n\t\t\tcameraNX.up.set(0, -1, 0);\n\t\t\tcameraNX.lookAt(new Vector3(-1, 0, 0));\n\t\t\tthis.add(cameraNX);\n\t\t\tconst cameraPY = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraPY.layers = this.layers;\n\t\t\tcameraPY.up.set(0, 0, 1);\n\t\t\tcameraPY.lookAt(new Vector3(0, 1, 0));\n\t\t\tthis.add(cameraPY);\n\t\t\tconst cameraNY = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraNY.layers = this.layers;\n\t\t\tcameraNY.up.set(0, 0, -1);\n\t\t\tcameraNY.lookAt(new Vector3(0, -1, 0));\n\t\t\tthis.add(cameraNY);\n\t\t\tconst cameraPZ = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraPZ.layers = this.layers;\n\t\t\tcameraPZ.up.set(0, -1, 0);\n\t\t\tcameraPZ.lookAt(new Vector3(0, 0, 1));\n\t\t\tthis.add(cameraPZ);\n\t\t\tconst cameraNZ = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraNZ.layers = this.layers;\n\t\t\tcameraNZ.up.set(0, -1, 0);\n\t\t\tcameraNZ.lookAt(new Vector3(0, 0, -1));\n\t\t\tthis.add(cameraNZ);\n\t\t}\n\n\t\tupdate(renderer, scene) {\n\t\t\tif (this.parent === null) this.updateMatrixWorld();\n\t\t\tconst renderTarget = this.renderTarget;\n\t\t\tconst [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = this.children;\n\t\t\tconst currentXrEnabled = renderer.xr.enabled;\n\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\t\trenderer.xr.enabled = false;\n\t\t\tconst generateMipmaps = renderTarget.texture.generateMipmaps;\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\t\t\trenderer.setRenderTarget(renderTarget, 0);\n\t\t\trenderer.render(scene, cameraPX);\n\t\t\trenderer.setRenderTarget(renderTarget, 1);\n\t\t\trenderer.render(scene, cameraNX);\n\t\t\trenderer.setRenderTarget(renderTarget, 2);\n\t\t\trenderer.render(scene, cameraPY);\n\t\t\trenderer.setRenderTarget(renderTarget, 3);\n\t\t\trenderer.render(scene, cameraNY);\n\t\t\trenderer.setRenderTarget(renderTarget, 4);\n\t\t\trenderer.render(scene, cameraPZ);\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\t\t\trenderer.setRenderTarget(renderTarget, 5);\n\t\t\trenderer.render(scene, cameraNZ);\n\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t\trenderer.xr.enabled = currentXrEnabled;\n\t\t}\n\n\t}\n\n\tclass CubeTexture extends Texture {\n\t\tconstructor(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {\n\t\t\timages = images !== undefined ? images : [];\n\t\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\t\t\tsuper(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n\t\t\tthis.flipY = false;\n\t\t}\n\n\t\tget images() {\n\t\t\treturn this.image;\n\t\t}\n\n\t\tset images(value) {\n\t\t\tthis.image = value;\n\t\t}\n\n\t}\n\n\tCubeTexture.prototype.isCubeTexture = true;\n\n\tclass WebGLCubeRenderTarget extends WebGLRenderTarget {\n\t\tconstructor(size, options, dummy) {\n\t\t\tif (Number.isInteger(options)) {\n\t\t\t\tconsole.warn('THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )');\n\t\t\t\toptions = dummy;\n\t\t\t}\n\n\t\t\tsuper(size, size, options);\n\t\t\toptions = options || {}; // By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\n\t\t\t// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\n\t\t\t// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\n\t\t\t// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\n\t\t\t// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture\n\t\t\t// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).\n\n\t\t\tthis.texture = new CubeTexture(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n\t\t\tthis.texture.isRenderTargetTexture = true;\n\t\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\t\t\tthis.texture._needsFlipEnvMap = false;\n\t\t}\n\n\t\tfromEquirectangularTexture(renderer, texture) {\n\t\t\tthis.texture.type = texture.type;\n\t\t\tthis.texture.format = RGBAFormat; // see #18859\n\n\t\t\tthis.texture.encoding = texture.encoding;\n\t\t\tthis.texture.generateMipmaps = texture.generateMipmaps;\n\t\t\tthis.texture.minFilter = texture.minFilter;\n\t\t\tthis.texture.magFilter = texture.magFilter;\n\t\t\tconst shader = {\n\t\t\t\tuniforms: {\n\t\t\t\t\ttEquirect: {\n\t\t\t\t\t\tvalue: null\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tvertexShader:\n\t\t\t\t/* glsl */\n\t\t\t\t`\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t`,\n\t\t\t\tfragmentShader:\n\t\t\t\t/* glsl */\n\t\t\t\t`\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t`\n\t\t\t};\n\t\t\tconst geometry = new BoxGeometry(5, 5, 5);\n\t\t\tconst material = new ShaderMaterial({\n\t\t\t\tname: 'CubemapFromEquirect',\n\t\t\t\tuniforms: cloneUniforms(shader.uniforms),\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\t\tside: BackSide,\n\t\t\t\tblending: NoBlending\n\t\t\t});\n\t\t\tmaterial.uniforms.tEquirect.value = texture;\n\t\t\tconst mesh = new Mesh(geometry, material);\n\t\t\tconst currentMinFilter = texture.minFilter; // Avoid blurred poles\n\n\t\t\tif (texture.minFilter === LinearMipmapLinearFilter) texture.minFilter = LinearFilter;\n\t\t\tconst camera = new CubeCamera(1, 10, this);\n\t\t\tcamera.update(renderer, mesh);\n\t\t\ttexture.minFilter = currentMinFilter;\n\t\t\tmesh.geometry.dispose();\n\t\t\tmesh.material.dispose();\n\t\t\treturn this;\n\t\t}\n\n\t\tclear(renderer, color, depth, stencil) {\n\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\trenderer.setRenderTarget(this, i);\n\t\t\t\trenderer.clear(color, depth, stencil);\n\t\t\t}\n\n\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t}\n\n\t}\n\n\tWebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;\n\n\tconst _vector1 = /*@__PURE__*/new Vector3();\n\n\tconst _vector2 = /*@__PURE__*/new Vector3();\n\n\tconst _normalMatrix = /*@__PURE__*/new Matrix3();\n\n\tclass Plane {\n\t\tconstructor(normal = new Vector3(1, 0, 0), constant = 0) {\n\t\t\t// normal is assumed to be normalized\n\t\t\tthis.normal = normal;\n\t\t\tthis.constant = constant;\n\t\t}\n\n\t\tset(normal, constant) {\n\t\t\tthis.normal.copy(normal);\n\t\t\tthis.constant = constant;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetComponents(x, y, z, w) {\n\t\t\tthis.normal.set(x, y, z);\n\t\t\tthis.constant = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromNormalAndCoplanarPoint(normal, point) {\n\t\t\tthis.normal.copy(normal);\n\t\t\tthis.constant = -point.dot(this.normal);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromCoplanarPoints(a, b, c) {\n\t\t\tconst normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize(); // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\n\t\t\tthis.setFromNormalAndCoplanarPoint(normal, a);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(plane) {\n\t\t\tthis.normal.copy(plane.normal);\n\t\t\tthis.constant = plane.constant;\n\t\t\treturn this;\n\t\t}\n\n\t\tnormalize() {\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\t\t\tconst inverseNormalLength = 1.0 / this.normal.length();\n\t\t\tthis.normal.multiplyScalar(inverseNormalLength);\n\t\t\tthis.constant *= inverseNormalLength;\n\t\t\treturn this;\n\t\t}\n\n\t\tnegate() {\n\t\t\tthis.constant *= -1;\n\t\t\tthis.normal.negate();\n\t\t\treturn this;\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\treturn this.normal.dot(point) + this.constant;\n\t\t}\n\n\t\tdistanceToSphere(sphere) {\n\t\t\treturn this.distanceToPoint(sphere.center) - sphere.radius;\n\t\t}\n\n\t\tprojectPoint(point, target) {\n\t\t\treturn target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);\n\t\t}\n\n\t\tintersectLine(line, target) {\n\t\t\tconst direction = line.delta(_vector1);\n\t\t\tconst denominator = this.normal.dot(direction);\n\n\t\t\tif (denominator === 0) {\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif (this.distanceToPoint(line.start) === 0) {\n\t\t\t\t\treturn target.copy(line.start);\n\t\t\t\t} // Unsure if this is the correct method to handle this case.\n\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst t = -(line.start.dot(this.normal) + this.constant) / denominator;\n\n\t\t\tif (t < 0 || t > 1) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn target.copy(direction).multiplyScalar(t).add(line.start);\n\t\t}\n\n\t\tintersectsLine(line) {\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\t\t\tconst startSign = this.distanceToPoint(line.start);\n\t\t\tconst endSign = this.distanceToPoint(line.end);\n\t\t\treturn startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\treturn box.intersectsPlane(this);\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\treturn sphere.intersectsPlane(this);\n\t\t}\n\n\t\tcoplanarPoint(target) {\n\t\t\treturn target.copy(this.normal).multiplyScalar(-this.constant);\n\t\t}\n\n\t\tapplyMatrix4(matrix, optionalNormalMatrix) {\n\t\t\tconst normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);\n\n\t\t\tconst referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);\n\t\t\tconst normal = this.normal.applyMatrix3(normalMatrix).normalize();\n\t\t\tthis.constant = -referencePoint.dot(normal);\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(offset) {\n\t\t\tthis.constant -= offset.dot(this.normal);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(plane) {\n\t\t\treturn plane.normal.equals(this.normal) && plane.constant === this.constant;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tPlane.prototype.isPlane = true;\n\n\tconst _sphere$2 = /*@__PURE__*/new Sphere();\n\n\tconst _vector$7 = /*@__PURE__*/new Vector3();\n\n\tclass Frustum {\n\t\tconstructor(p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane()) {\n\t\t\tthis.planes = [p0, p1, p2, p3, p4, p5];\n\t\t}\n\n\t\tset(p0, p1, p2, p3, p4, p5) {\n\t\t\tconst planes = this.planes;\n\t\t\tplanes[0].copy(p0);\n\t\t\tplanes[1].copy(p1);\n\t\t\tplanes[2].copy(p2);\n\t\t\tplanes[3].copy(p3);\n\t\t\tplanes[4].copy(p4);\n\t\t\tplanes[5].copy(p5);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(frustum) {\n\t\t\tconst planes = this.planes;\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tplanes[i].copy(frustum.planes[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromProjectionMatrix(m) {\n\t\t\tconst planes = this.planes;\n\t\t\tconst me = m.elements;\n\t\t\tconst me0 = me[0],\n\t\t\t\t\t\tme1 = me[1],\n\t\t\t\t\t\tme2 = me[2],\n\t\t\t\t\t\tme3 = me[3];\n\t\t\tconst me4 = me[4],\n\t\t\t\t\t\tme5 = me[5],\n\t\t\t\t\t\tme6 = me[6],\n\t\t\t\t\t\tme7 = me[7];\n\t\t\tconst me8 = me[8],\n\t\t\t\t\t\tme9 = me[9],\n\t\t\t\t\t\tme10 = me[10],\n\t\t\t\t\t\tme11 = me[11];\n\t\t\tconst me12 = me[12],\n\t\t\t\t\t\tme13 = me[13],\n\t\t\t\t\t\tme14 = me[14],\n\t\t\t\t\t\tme15 = me[15];\n\t\t\tplanes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();\n\t\t\tplanes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();\n\t\t\tplanes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();\n\t\t\tplanes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();\n\t\t\tplanes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();\n\t\t\tplanes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();\n\t\t\treturn this;\n\t\t}\n\n\t\tintersectsObject(object) {\n\t\t\tconst geometry = object.geometry;\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$2.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);\n\n\t\t\treturn this.intersectsSphere(_sphere$2);\n\t\t}\n\n\t\tintersectsSprite(sprite) {\n\t\t\t_sphere$2.center.set(0, 0, 0);\n\n\t\t\t_sphere$2.radius = 0.7071067811865476;\n\n\t\t\t_sphere$2.applyMatrix4(sprite.matrixWorld);\n\n\t\t\treturn this.intersectsSphere(_sphere$2);\n\t\t}\n\n\t\tintersectsSphere(sphere) {\n\t\t\tconst planes = this.planes;\n\t\t\tconst center = sphere.center;\n\t\t\tconst negRadius = -sphere.radius;\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tconst distance = planes[i].distanceToPoint(center);\n\n\t\t\t\tif (distance < negRadius) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\tconst planes = this.planes;\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tconst plane = planes[i]; // corner at max distance\n\n\t\t\t\t_vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t_vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t_vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tif (plane.distanceToPoint(_vector$7) < 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\tconst planes = this.planes;\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tif (planes[i].distanceToPoint(point) < 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tfunction WebGLAnimation() {\n\t\tlet context = null;\n\t\tlet isAnimating = false;\n\t\tlet animationLoop = null;\n\t\tlet requestId = null;\n\n\t\tfunction onAnimationFrame(time, frame) {\n\t\t\tanimationLoop(time, frame);\n\t\t\trequestId = context.requestAnimationFrame(onAnimationFrame);\n\t\t}\n\n\t\treturn {\n\t\t\tstart: function () {\n\t\t\t\tif (isAnimating === true) return;\n\t\t\t\tif (animationLoop === null) return;\n\t\t\t\trequestId = context.requestAnimationFrame(onAnimationFrame);\n\t\t\t\tisAnimating = true;\n\t\t\t},\n\t\t\tstop: function () {\n\t\t\t\tcontext.cancelAnimationFrame(requestId);\n\t\t\t\tisAnimating = false;\n\t\t\t},\n\t\t\tsetAnimationLoop: function (callback) {\n\t\t\t\tanimationLoop = callback;\n\t\t\t},\n\t\t\tsetContext: function (value) {\n\t\t\t\tcontext = value;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction WebGLAttributes(gl, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tconst buffers = new WeakMap();\n\n\t\tfunction createBuffer(attribute, bufferType) {\n\t\t\tconst array = attribute.array;\n\t\t\tconst usage = attribute.usage;\n\t\t\tconst buffer = gl.createBuffer();\n\t\t\tgl.bindBuffer(bufferType, buffer);\n\t\t\tgl.bufferData(bufferType, array, usage);\n\t\t\tattribute.onUploadCallback();\n\t\t\tlet type = gl.FLOAT;\n\n\t\t\tif (array instanceof Float32Array) {\n\t\t\t\ttype = gl.FLOAT;\n\t\t\t} else if (array instanceof Float64Array) {\n\t\t\t\tconsole.warn('THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.');\n\t\t\t} else if (array instanceof Uint16Array) {\n\t\t\t\tif (attribute.isFloat16BufferAttribute) {\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\ttype = gl.HALF_FLOAT;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttype = gl.UNSIGNED_SHORT;\n\t\t\t\t}\n\t\t\t} else if (array instanceof Int16Array) {\n\t\t\t\ttype = gl.SHORT;\n\t\t\t} else if (array instanceof Uint32Array) {\n\t\t\t\ttype = gl.UNSIGNED_INT;\n\t\t\t} else if (array instanceof Int32Array) {\n\t\t\t\ttype = gl.INT;\n\t\t\t} else if (array instanceof Int8Array) {\n\t\t\t\ttype = gl.BYTE;\n\t\t\t} else if (array instanceof Uint8Array) {\n\t\t\t\ttype = gl.UNSIGNED_BYTE;\n\t\t\t} else if (array instanceof Uint8ClampedArray) {\n\t\t\t\ttype = gl.UNSIGNED_BYTE;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbuffer: buffer,\n\t\t\t\ttype: type,\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\t\tversion: attribute.version\n\t\t\t};\n\t\t}\n\n\t\tfunction updateBuffer(buffer, attribute, bufferType) {\n\t\t\tconst array = attribute.array;\n\t\t\tconst updateRange = attribute.updateRange;\n\t\t\tgl.bindBuffer(bufferType, buffer);\n\n\t\t\tif (updateRange.count === -1) {\n\t\t\t\t// Not using update ranges\n\t\t\t\tgl.bufferSubData(bufferType, 0, array);\n\t\t\t} else {\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tgl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array, updateRange.offset, updateRange.count);\n\t\t\t\t} else {\n\t\t\t\t\tgl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));\n\t\t\t\t}\n\n\t\t\t\tupdateRange.count = -1; // reset range\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction get(attribute) {\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\treturn buffers.get(attribute);\n\t\t}\n\n\t\tfunction remove(attribute) {\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\tconst data = buffers.get(attribute);\n\n\t\t\tif (data) {\n\t\t\t\tgl.deleteBuffer(data.buffer);\n\t\t\t\tbuffers.delete(attribute);\n\t\t\t}\n\t\t}\n\n\t\tfunction update(attribute, bufferType) {\n\t\t\tif (attribute.isGLBufferAttribute) {\n\t\t\t\tconst cached = buffers.get(attribute);\n\n\t\t\t\tif (!cached || cached.version < attribute.version) {\n\t\t\t\t\tbuffers.set(attribute, {\n\t\t\t\t\t\tbuffer: attribute.buffer,\n\t\t\t\t\t\ttype: attribute.type,\n\t\t\t\t\t\tbytesPerElement: attribute.elementSize,\n\t\t\t\t\t\tversion: attribute.version\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\tconst data = buffers.get(attribute);\n\n\t\t\tif (data === undefined) {\n\t\t\t\tbuffers.set(attribute, createBuffer(attribute, bufferType));\n\t\t\t} else if (data.version < attribute.version) {\n\t\t\t\tupdateBuffer(data.buffer, attribute, bufferType);\n\t\t\t\tdata.version = attribute.version;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tclass PlaneGeometry extends BufferGeometry {\n\t\tconstructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {\n\t\t\tsuper();\n\t\t\tthis.type = 'PlaneGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments\n\t\t\t};\n\t\t\tconst width_half = width / 2;\n\t\t\tconst height_half = height / 2;\n\t\t\tconst gridX = Math.floor(widthSegments);\n\t\t\tconst gridY = Math.floor(heightSegments);\n\t\t\tconst gridX1 = gridX + 1;\n\t\t\tconst gridY1 = gridY + 1;\n\t\t\tconst segment_width = width / gridX;\n\t\t\tconst segment_height = height / gridY; //\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = [];\n\n\t\t\tfor (let iy = 0; iy < gridY1; iy++) {\n\t\t\t\tconst y = iy * segment_height - height_half;\n\n\t\t\t\tfor (let ix = 0; ix < gridX1; ix++) {\n\t\t\t\t\tconst x = ix * segment_width - width_half;\n\t\t\t\t\tvertices.push(x, -y, 0);\n\t\t\t\t\tnormals.push(0, 0, 1);\n\t\t\t\t\tuvs.push(ix / gridX);\n\t\t\t\t\tuvs.push(1 - iy / gridY);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let iy = 0; iy < gridY; iy++) {\n\t\t\t\tfor (let ix = 0; ix < gridX; ix++) {\n\t\t\t\t\tconst a = ix + gridX1 * iy;\n\t\t\t\t\tconst b = ix + gridX1 * (iy + 1);\n\t\t\t\t\tconst c = ix + 1 + gridX1 * (iy + 1);\n\t\t\t\t\tconst d = ix + 1 + gridX1 * iy;\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\treturn new PlaneGeometry(data.width, data.height, data.widthSegments, data.heightSegments);\n\t\t}\n\n\t}\n\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar alphatest_fragment = \"#ifdef USE_ALPHATEST\\n\\tif ( diffuseColor.a < alphaTest ) discard;\\n#endif\";\n\n\tvar alphatest_pars_fragment = \"#ifdef USE_ALPHATEST\\n\\tuniform float alphaTest;\\n#endif\";\n\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\\n\\t#endif\\n#endif\";\n\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n\tvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\n\tvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\n\tvar bsdfs = \"vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\\n\\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\\n\\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\\n}\\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\tvec3 F = F_Schlick( f0, f90, dotVH );\\n\\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( V * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie( float roughness, float dotNH ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tfloat invAlpha = 1.0 / alpha;\\n\\tfloat cos2h = dotNH * dotNH;\\n\\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\\n\\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\\n}\\nfloat V_Neubelt( float dotNV, float dotNL ) {\\n\\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\\n}\\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat D = D_Charlie( sheenRoughness, dotNH );\\n\\tfloat V = V_Neubelt( dotNV, dotNL );\\n\\treturn sheenColor * ( D * V );\\n}\\n#endif\";\n\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\n\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\n\n\tvar color_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tdiffuseColor *= vColor;\\n#elif defined( USE_COLOR )\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n\tvar color_pars_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_pars_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvColor = vec4( 1.0 );\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvColor = vec3( 1.0 );\\n#endif\\n#ifdef USE_COLOR\\n\\tvColor *= color;\\n#endif\\n#ifdef USE_INSTANCING_COLOR\\n\\tvColor.xyz *= instanceColor.xyz;\\n#endif\";\n\n\tvar common = \"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract( sin( sn ) * c );\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef USE_CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n\\treturn m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\";\n\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t#define cubeUV_maxMipLevel 8.0\\n\\t#define cubeUV_minMipLevel 4.0\\n\\t#define cubeUV_maxTileSize 256.0\\n\\t#define cubeUV_minTileSize 16.0\\n\\tfloat getFace( vec3 direction ) {\\n\\t\\tvec3 absDirection = abs( direction );\\n\\t\\tfloat face = - 1.0;\\n\\t\\tif ( absDirection.x > absDirection.z ) {\\n\\t\\t\\tif ( absDirection.x > absDirection.y )\\n\\t\\t\\t\\tface = direction.x > 0.0 ? 0.0 : 3.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t} else {\\n\\t\\t\\tif ( absDirection.z > absDirection.y )\\n\\t\\t\\t\\tface = direction.z > 0.0 ? 2.0 : 5.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t}\\n\\t\\treturn face;\\n\\t}\\n\\tvec2 getUV( vec3 direction, float face ) {\\n\\t\\tvec2 uv;\\n\\t\\tif ( face == 0.0 ) {\\n\\t\\t\\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 1.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\\n\\t\\t} else if ( face == 2.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\\n\\t\\t} else if ( face == 3.0 ) {\\n\\t\\t\\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 4.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\\n\\t\\t} else {\\n\\t\\t\\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\\n\\t\\t}\\n\\t\\treturn 0.5 * ( uv + 1.0 );\\n\\t}\\n\\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\\n\\t\\tfloat face = getFace( direction );\\n\\t\\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\\n\\t\\tmipInt = max( mipInt, cubeUV_minMipLevel );\\n\\t\\tfloat faceSize = exp2( mipInt );\\n\\t\\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\\n\\t\\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\\n\\t\\tvec2 f = fract( uv );\\n\\t\\tuv += 0.5 - f;\\n\\t\\tif ( face > 2.0 ) {\\n\\t\\t\\tuv.y += faceSize;\\n\\t\\t\\tface -= 3.0;\\n\\t\\t}\\n\\t\\tuv.x += face * faceSize;\\n\\t\\tif ( mipInt < cubeUV_maxMipLevel ) {\\n\\t\\t\\tuv.y += 2.0 * cubeUV_maxTileSize;\\n\\t\\t}\\n\\t\\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n\\t\\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\\n\\t\\tuv *= texelSize;\\n\\t\\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x += texelSize;\\n\\t\\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.y += texelSize;\\n\\t\\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x -= texelSize;\\n\\t\\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\treturn mix( tm, bm, f.y );\\n\\t}\\n\\t#define r0 1.0\\n\\t#define v0 0.339\\n\\t#define m0 - 2.0\\n\\t#define r1 0.8\\n\\t#define v1 0.276\\n\\t#define m1 - 1.0\\n\\t#define r4 0.4\\n\\t#define v4 0.046\\n\\t#define m4 2.0\\n\\t#define r5 0.305\\n\\t#define v5 0.016\\n\\t#define m5 3.0\\n\\t#define r6 0.21\\n\\t#define v6 0.0038\\n\\t#define m6 4.0\\n\\tfloat roughnessToMip( float roughness ) {\\n\\t\\tfloat mip = 0.0;\\n\\t\\tif ( roughness >= r1 ) {\\n\\t\\t\\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\\n\\t\\t} else if ( roughness >= r4 ) {\\n\\t\\t\\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\\n\\t\\t} else if ( roughness >= r5 ) {\\n\\t\\t\\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\\n\\t\\t} else if ( roughness >= r6 ) {\\n\\t\\t\\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\\n\\t\\t} else {\\n\\t\\t\\tmip = - 2.0 * log2( 1.16 * roughness );\\t\\t}\\n\\t\\treturn mip;\\n\\t}\\n\\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\\n\\t\\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\\n\\t\\tfloat mipF = fract( mip );\\n\\t\\tfloat mipInt = floor( mip );\\n\\t\\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\\n\\t\\tif ( mipF == 0.0 ) {\\n\\t\\t\\treturn vec4( color0, 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\\n\\t\\t\\treturn vec4( mix( color0, color1, mipF ), 1.0 );\\n\\t\\t}\\n\\t}\\n#endif\";\n\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\n\tvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value ) {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\";\n\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\n\tvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\n\tvar fog_vertex = \"#ifdef USE_FOG\\n\\tvFogDepth = - mvPosition.z;\\n#endif\";\n\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float vFogDepth;\\n#endif\";\n\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float vFogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\n\tvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}\";\n\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\\n\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tlightMapIrradiance *= PI;\\n\\t#endif\\n\\treflectedLight.indirectDiffuse += lightMapIrradiance;\\n#endif\";\n\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\\n#ifdef DOUBLE_SIDED\\n\\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\\n\\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\";\n\n\tvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\\n\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\treturn irradiance;\\n}\\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\tif ( cutoffDistance > 0.0 ) {\\n\\t\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\t}\\n\\t\\treturn distanceFalloff;\\n\\t#else\\n\\t\\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\t\\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t\\t}\\n\\t\\treturn 1.0;\\n\\t#endif\\n}\\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\\n\\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tlight.color = directionalLight.color;\\n\\t\\tlight.direction = directionalLight.direction;\\n\\t\\tlight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tlight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tlight.color = pointLight.color;\\n\\t\\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tlight.visible = ( light.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tlight.direction = normalize( lVector );\\n\\t\\tfloat angleCos = dot( light.direction, spotLight.direction );\\n\\t\\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\tif ( spotAttenuation > 0.0 ) {\\n\\t\\t\\tfloat lightDistance = length( lVector );\\n\\t\\t\\tlight.color = spotLight.color * spotAttenuation;\\n\\t\\t\\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tlight.visible = ( light.color != vec3( 0.0 ) );\\n\\t\\t} else {\\n\\t\\t\\tlight.color = vec3( 0.0 );\\n\\t\\t\\tlight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\\n\\t\\tfloat dotNL = dot( normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\n\tvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getIBLIrradiance( const in vec3 normal ) {\\n\\t\\t#if defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t\\t#else\\n\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t#endif\\n\\t}\\n\\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\\n\\t\\t#if defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 reflectVec;\\n\\t\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\t\\treflectVec = reflect( - viewDir, normal );\\n\\t\\t\\t\\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\treflectVec = refract( - viewDir, normal, refractionRatio );\\n\\t\\t\\t#endif\\n\\t\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t\\t#else\\n\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\";\n\n\tvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\nstruct ToonMaterial {\\n\\tvec3 diffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\nstruct BlinnPhongMaterial {\\n\\tvec3 diffuseColor;\\n\\tvec3 specularColor;\\n\\tfloat specularShininess;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\\nmaterial.roughness = min( material.roughness, 1.0 );\\n#ifdef IOR\\n\\t#ifdef SPECULAR\\n\\t\\tfloat specularIntensityFactor = specularIntensity;\\n\\t\\tvec3 specularColorFactor = specularColor;\\n\\t\\t#ifdef USE_SPECULARINTENSITYMAP\\n\\t\\t\\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\\n\\t\\t#endif\\n\\t\\t#ifdef USE_SPECULARCOLORMAP\\n\\t\\t\\tspecularColorFactor *= specularColorMapTexelToLinear( texture2D( specularColorMap, vUv ) ).rgb;\\n\\t\\t#endif\\n\\t\\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\\n\\t#else\\n\\t\\tfloat specularIntensityFactor = 1.0;\\n\\t\\tvec3 specularColorFactor = vec3( 1.0 );\\n\\t\\tmaterial.specularF90 = 1.0;\\n\\t#endif\\n\\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.specularF90 = 1.0;\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\tmaterial.clearcoatF0 = vec3( 0.04 );\\n\\tmaterial.clearcoatF90 = 1.0;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheenColor;\\n\\t#ifdef USE_SHEENCOLORMAP\\n\\t\\tmaterial.sheenColor *= sheenColorMapTexelToLinear( texture2D( sheenColorMap, vUv ) ).rgb;\\n\\t#endif\\n\\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\\n\\t#ifdef USE_SHEENROUGHNESSMAP\\n\\t\\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\\n\\t#endif\\n#endif\";\n\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat roughness;\\n\\tvec3 specularColor;\\n\\tfloat specularF90;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat clearcoat;\\n\\t\\tfloat clearcoatRoughness;\\n\\t\\tvec3 clearcoatF0;\\n\\t\\tfloat clearcoatF90;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\tvec3 sheenColor;\\n\\t\\tfloat sheenRoughness;\\n\\t#endif\\n};\\nvec3 clearcoatSpecular = vec3( 0.0 );\\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\\n\\treturn fab;\\n}\\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\\n\\tvec2 fab = DFGApprox( normal, viewDir, roughness );\\n\\treturn specularColor * fab.x + specularF90 * fab.y;\\n}\\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tvec2 fab = DFGApprox( normal, viewDir, roughness );\\n\\tvec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\\n\\tfloat Ess = fab.x + fab.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.roughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(\t\t0, 1,\t\t0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = dotNLcc * directLight.color;\\n\\t\\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\\n\\t#endif\\n\\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\\n\\t#endif\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\n\tvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef USE_CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointLightInfo( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotLightInfo( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\n\tvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getIBLIrradiance( geometry.normal );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\\n\\t#endif\\n#endif\";\n\n\tvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\n\tvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\n\tvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\n\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\n\tvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\n\tvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\t\\tif ( morphTargetInfluences[ i ] > 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1, 2 ) * morphTargetInfluences[ i ];\\n\\t\\t}\\n\\t#else\\n\\t\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\t\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\t\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\t\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n\\t#endif\\n#endif\";\n\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\\n\\t\\tuniform sampler2DArray morphTargetsTexture;\\n\\t\\tuniform vec2 morphTargetsTextureSize;\\n\\t\\tvec3 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset, const in int stride ) {\\n\\t\\t\\tfloat texelIndex = float( vertexIndex * stride + offset );\\n\\t\\t\\tfloat y = floor( texelIndex / morphTargetsTextureSize.x );\\n\\t\\t\\tfloat x = texelIndex - y * morphTargetsTextureSize.x;\\n\\t\\t\\tvec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );\\n\\t\\t\\treturn texture( morphTargetsTexture, morphUV ).xyz;\\n\\t\\t}\\n\\t#else\\n\\t\\t#ifndef USE_MORPHNORMALS\\n\\t\\t\\tuniform float morphTargetInfluences[ 8 ];\\n\\t\\t#else\\n\\t\\t\\tuniform float morphTargetInfluences[ 4 ];\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\t\\t#ifndef USE_MORPHNORMALS\\n\\t\\t\\t\\tif ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 1 ) * morphTargetInfluences[ i ];\\n\\t\\t\\t#else\\n\\t\\t\\t\\tif ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 2 ) * morphTargetInfluences[ i ];\\n\\t\\t\\t#endif\\n\\t\\t}\\n\\t#else\\n\\t\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\t\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\t\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\t\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t\\t#ifndef USE_MORPHNORMALS\\n\\t\\t\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\t\\t\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\t\\t\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\t\\t\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\n\tvar normal_fragment_begin = \"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\\n#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * faceDirection;\\n\\t\\t\\tbitangent = bitangent * faceDirection;\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\n\tvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\\n#endif\";\n\n\tvar normal_pars_fragment = \"#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\";\n\n\tvar normal_pars_vertex = \"#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\";\n\n\tvar normal_vertex = \"#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\";\n\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 N = surf_norm;\\n\\t\\tvec3 q1perp = cross( q1, N );\\n\\t\\tvec3 q0perp = cross( N, q0 );\\n\\t\\tvec3 T = q1perp * st0.x + q0perp * st1.x;\\n\\t\\tvec3 B = q1perp * st0.y + q0perp * st1.y;\\n\\t\\tfloat det = max( dot( T, T ), dot( B, B ) );\\n\\t\\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\\n\\t\\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\\n\\t}\\n#endif\";\n\n\tvar clearcoat_normal_fragment_begin = \"#ifdef USE_CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\n\tvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\\n\\t#endif\\n#endif\";\n\n\tvar clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n\n\tvar output_fragment = \"#ifdef OPAQUE\\ndiffuseColor.a = 1.0;\\n#endif\\n#ifdef USE_TRANSMISSION\\ndiffuseColor.a *= transmissionAlpha + 0.1;\\n#endif\\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\";\n\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\n\tvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\n\tvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\n\tvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t\tf.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t\tf.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\tvec4 shadowWorldPosition;\\n\\t#endif\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\";\n\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\n\tvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(\t1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,\t1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,\t1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\";\n\n\tvar transmission_fragment = \"#ifdef USE_TRANSMISSION\\n\\tfloat transmissionAlpha = 1.0;\\n\\tfloat transmissionFactor = transmission;\\n\\tfloat thicknessFactor = thickness;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\\n\\t#endif\\n\\tvec3 pos = vWorldPosition;\\n\\tvec3 v = normalize( cameraPosition - pos );\\n\\tvec3 n = inverseTransformDirection( normal, viewMatrix );\\n\\tvec4 transmission = getIBLVolumeRefraction(\\n\\t\\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\\n\\t\\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\\n\\t\\tattenuationColor, attenuationDistance );\\n\\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\\n\\ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\\n#endif\";\n\n\tvar transmission_pars_fragment = \"#ifdef USE_TRANSMISSION\\n\\tuniform float transmission;\\n\\tuniform float thickness;\\n\\tuniform float attenuationDistance;\\n\\tuniform vec3 attenuationColor;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\tuniform sampler2D transmissionMap;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tuniform sampler2D thicknessMap;\\n\\t#endif\\n\\tuniform vec2 transmissionSamplerSize;\\n\\tuniform sampler2D transmissionSamplerMap;\\n\\tuniform mat4 modelMatrix;\\n\\tuniform mat4 projectionMatrix;\\n\\tvarying vec3 vWorldPosition;\\n\\tvec3 getVolumeTransmissionRay( vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix ) {\\n\\t\\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\\n\\t\\tvec3 modelScale;\\n\\t\\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\\n\\t\\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\\n\\t\\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\\n\\t\\treturn normalize( refractionVector ) * thickness * modelScale;\\n\\t}\\n\\tfloat applyIorToRoughness( float roughness, float ior ) {\\n\\t\\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\\n\\t}\\n\\tvec4 getTransmissionSample( vec2 fragCoord, float roughness, float ior ) {\\n\\t\\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\\n\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\\n\\t\\t#else\\n\\t\\t\\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\\n\\t\\t#endif\\n\\t}\\n\\tvec3 applyVolumeAttenuation( vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance ) {\\n\\t\\tif ( attenuationDistance == 0.0 ) {\\n\\t\\t\\treturn radiance;\\n\\t\\t} else {\\n\\t\\t\\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\\n\\t\\t\\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\\t\\t\\treturn transmittance * radiance;\\n\\t\\t}\\n\\t}\\n\\tvec4 getIBLVolumeRefraction( vec3 n, vec3 v, float roughness, vec3 diffuseColor, vec3 specularColor, float specularF90,\\n\\t\\tvec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness,\\n\\t\\tvec3 attenuationColor, float attenuationDistance ) {\\n\\t\\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\\n\\t\\tvec3 refractedRayExit = position + transmissionRay;\\n\\t\\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\\n\\t\\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\\n\\t\\trefractionCoords += 1.0;\\n\\t\\trefractionCoords /= 2.0;\\n\\t\\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\\n\\t\\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\\n\\t\\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\\n\\t\\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\\n\\t}\\n#endif\";\n\n\tvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n\tvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n\n\tvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\";\n\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\";\n\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\n\tconst vertex$g = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\tconst fragment$g = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tconst vertex$f = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\tconst fragment$f = \"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tconst vertex$e = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\n\tconst fragment$e = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\";\n\n\tconst vertex$d = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\tconst fragment$d = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\n\tconst vertex$c = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\tconst fragment$c = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tconst vertex$b = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\tconst fragment$b = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tconst vertex$a = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinbase_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\tconst fragment$a = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tconst vertex$9 = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\tconst fragment$9 = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tconst vertex$8 = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\tconst fragment$8 = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <normal_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tconst vertex$7 = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\tconst fragment$7 = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <normal_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\n\n\tconst vertex$6 = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\tconst fragment$6 = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tconst vertex$5 = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifdef USE_TRANSMISSION\\n\\tvarying vec3 vWorldPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n#ifdef USE_TRANSMISSION\\n\\tvWorldPosition = worldPosition.xyz;\\n#endif\\n}\";\n\tconst fragment$5 = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define IOR\\n\\t#define SPECULAR\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef IOR\\n\\tuniform float ior;\\n#endif\\n#ifdef SPECULAR\\n\\tuniform float specularIntensity;\\n\\tuniform vec3 specularColor;\\n\\t#ifdef USE_SPECULARINTENSITYMAP\\n\\t\\tuniform sampler2D specularIntensityMap;\\n\\t#endif\\n\\t#ifdef USE_SPECULARCOLORMAP\\n\\t\\tuniform sampler2D specularColorMap;\\n\\t#endif\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheenColor;\\n\\tuniform float sheenRoughness;\\n\\t#ifdef USE_SHEENCOLORMAP\\n\\t\\tuniform sampler2D sheenColorMap;\\n\\t#endif\\n\\t#ifdef USE_SHEENROUGHNESSMAP\\n\\t\\tuniform sampler2D sheenRoughnessMap;\\n\\t#endif\\n#endif\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_physical_pars_fragment>\\n#include <transmission_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\\n\\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\\n\\t#include <transmission_fragment>\\n\\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\\n\\t\\toutgoingLight = outgoingLight * ( 1.0 - clearcoat * Fcc ) + clearcoatSpecular * clearcoat;\\n\\t#endif\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tconst vertex$4 = \"#define TOON\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\tconst fragment$4 = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tconst vertex$3 = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\tconst fragment$3 = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tconst vertex$2 = \"#include <common>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\tconst fragment$2 = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tconst vertex$1 = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\tconst fragment$1 = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tconst ShaderChunk = {\n\t\talphamap_fragment: alphamap_fragment,\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\n\t\talphatest_fragment: alphatest_fragment,\n\t\talphatest_pars_fragment: alphatest_pars_fragment,\n\t\taomap_fragment: aomap_fragment,\n\t\taomap_pars_fragment: aomap_pars_fragment,\n\t\tbegin_vertex: begin_vertex,\n\t\tbeginnormal_vertex: beginnormal_vertex,\n\t\tbsdfs: bsdfs,\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t\tclipping_planes_fragment: clipping_planes_fragment,\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t\tclipping_planes_vertex: clipping_planes_vertex,\n\t\tcolor_fragment: color_fragment,\n\t\tcolor_pars_fragment: color_pars_fragment,\n\t\tcolor_pars_vertex: color_pars_vertex,\n\t\tcolor_vertex: color_vertex,\n\t\tcommon: common,\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t\tdisplacementmap_vertex: displacementmap_vertex,\n\t\temissivemap_fragment: emissivemap_fragment,\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t\tencodings_fragment: encodings_fragment,\n\t\tencodings_pars_fragment: encodings_pars_fragment,\n\t\tenvmap_fragment: envmap_fragment,\n\t\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\n\t\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\t\tenvmap_vertex: envmap_vertex,\n\t\tfog_vertex: fog_vertex,\n\t\tfog_pars_vertex: fog_pars_vertex,\n\t\tfog_fragment: fog_fragment,\n\t\tfog_pars_fragment: fog_pars_fragment,\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\t\tlightmap_fragment: lightmap_fragment,\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\n\t\tlights_lambert_vertex: lights_lambert_vertex,\n\t\tlights_pars_begin: lights_pars_begin,\n\t\tlights_toon_fragment: lights_toon_fragment,\n\t\tlights_toon_pars_fragment: lights_toon_pars_fragment,\n\t\tlights_phong_fragment: lights_phong_fragment,\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t\tlights_physical_fragment: lights_physical_fragment,\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t\tlights_fragment_begin: lights_fragment_begin,\n\t\tlights_fragment_maps: lights_fragment_maps,\n\t\tlights_fragment_end: lights_fragment_end,\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t\tmap_fragment: map_fragment,\n\t\tmap_pars_fragment: map_pars_fragment,\n\t\tmap_particle_fragment: map_particle_fragment,\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t\tmorphnormal_vertex: morphnormal_vertex,\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t\tmorphtarget_vertex: morphtarget_vertex,\n\t\tnormal_fragment_begin: normal_fragment_begin,\n\t\tnormal_fragment_maps: normal_fragment_maps,\n\t\tnormal_pars_fragment: normal_pars_fragment,\n\t\tnormal_pars_vertex: normal_pars_vertex,\n\t\tnormal_vertex: normal_vertex,\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\t\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\t\tclearcoat_pars_fragment: clearcoat_pars_fragment,\n\t\toutput_fragment: output_fragment,\n\t\tpacking: packing,\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t\tproject_vertex: project_vertex,\n\t\tdithering_fragment: dithering_fragment,\n\t\tdithering_pars_fragment: dithering_pars_fragment,\n\t\troughnessmap_fragment: roughnessmap_fragment,\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t\tshadowmap_vertex: shadowmap_vertex,\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t\tskinbase_vertex: skinbase_vertex,\n\t\tskinning_pars_vertex: skinning_pars_vertex,\n\t\tskinning_vertex: skinning_vertex,\n\t\tskinnormal_vertex: skinnormal_vertex,\n\t\tspecularmap_fragment: specularmap_fragment,\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t\ttonemapping_fragment: tonemapping_fragment,\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t\ttransmission_fragment: transmission_fragment,\n\t\ttransmission_pars_fragment: transmission_pars_fragment,\n\t\tuv_pars_fragment: uv_pars_fragment,\n\t\tuv_pars_vertex: uv_pars_vertex,\n\t\tuv_vertex: uv_vertex,\n\t\tuv2_pars_fragment: uv2_pars_fragment,\n\t\tuv2_pars_vertex: uv2_pars_vertex,\n\t\tuv2_vertex: uv2_vertex,\n\t\tworldpos_vertex: worldpos_vertex,\n\t\tbackground_vert: vertex$g,\n\t\tbackground_frag: fragment$g,\n\t\tcube_vert: vertex$f,\n\t\tcube_frag: fragment$f,\n\t\tdepth_vert: vertex$e,\n\t\tdepth_frag: fragment$e,\n\t\tdistanceRGBA_vert: vertex$d,\n\t\tdistanceRGBA_frag: fragment$d,\n\t\tequirect_vert: vertex$c,\n\t\tequirect_frag: fragment$c,\n\t\tlinedashed_vert: vertex$b,\n\t\tlinedashed_frag: fragment$b,\n\t\tmeshbasic_vert: vertex$a,\n\t\tmeshbasic_frag: fragment$a,\n\t\tmeshlambert_vert: vertex$9,\n\t\tmeshlambert_frag: fragment$9,\n\t\tmeshmatcap_vert: vertex$8,\n\t\tmeshmatcap_frag: fragment$8,\n\t\tmeshnormal_vert: vertex$7,\n\t\tmeshnormal_frag: fragment$7,\n\t\tmeshphong_vert: vertex$6,\n\t\tmeshphong_frag: fragment$6,\n\t\tmeshphysical_vert: vertex$5,\n\t\tmeshphysical_frag: fragment$5,\n\t\tmeshtoon_vert: vertex$4,\n\t\tmeshtoon_frag: fragment$4,\n\t\tpoints_vert: vertex$3,\n\t\tpoints_frag: fragment$3,\n\t\tshadow_vert: vertex$2,\n\t\tshadow_frag: fragment$2,\n\t\tsprite_vert: vertex$1,\n\t\tsprite_frag: fragment$1\n\t};\n\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\n\tconst UniformsLib = {\n\t\tcommon: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t},\n\t\t\tuv2Transform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaTest: {\n\t\t\t\tvalue: 0\n\t\t\t}\n\t\t},\n\t\tspecularmap: {\n\t\t\tspecularMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tenvmap: {\n\t\t\tenvMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tflipEnvMap: {\n\t\t\t\tvalue: -1\n\t\t\t},\n\t\t\treflectivity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\t// basic, lambert, phong\n\t\t\tior: {\n\t\t\t\tvalue: 1.5\n\t\t\t},\n\t\t\t// standard, physical\n\t\t\trefractionRatio: {\n\t\t\t\tvalue: 0.98\n\t\t\t},\n\t\t\tmaxMipLevel: {\n\t\t\t\tvalue: 0\n\t\t\t}\n\t\t},\n\t\taomap: {\n\t\t\taoMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\taoMapIntensity: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\tlightmap: {\n\t\t\tlightMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tlightMapIntensity: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\temissivemap: {\n\t\t\temissiveMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tbumpmap: {\n\t\t\tbumpMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tbumpScale: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\tnormalmap: {\n\t\t\tnormalMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tnormalScale: {\n\t\t\t\tvalue: new Vector2(1, 1)\n\t\t\t}\n\t\t},\n\t\tdisplacementmap: {\n\t\t\tdisplacementMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tdisplacementScale: {\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\tdisplacementBias: {\n\t\t\t\tvalue: 0\n\t\t\t}\n\t\t},\n\t\troughnessmap: {\n\t\t\troughnessMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tmetalnessmap: {\n\t\t\tmetalnessMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tgradientmap: {\n\t\t\tgradientMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tfog: {\n\t\t\tfogDensity: {\n\t\t\t\tvalue: 0.00025\n\t\t\t},\n\t\t\tfogNear: {\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\tfogFar: {\n\t\t\t\tvalue: 2000\n\t\t\t},\n\t\t\tfogColor: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t}\n\t\t},\n\t\tlights: {\n\t\t\tambientLightColor: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tlightProbe: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tdirectionalLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tcolor: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdirectionalLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdirectionalShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tdirectionalShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tspotLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tdistance: {},\n\t\t\t\t\tconeCos: {},\n\t\t\t\t\tpenumbraCos: {},\n\t\t\t\t\tdecay: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tspotLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tspotShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tspotShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tpointLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\tdecay: {},\n\t\t\t\t\tdistance: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tpointLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {},\n\t\t\t\t\tshadowCameraNear: {},\n\t\t\t\t\tshadowCameraFar: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tpointShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tpointShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\themisphereLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tskyColor: {},\n\t\t\t\t\tgroundColor: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\t\trectAreaLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\twidth: {},\n\t\t\t\t\theight: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tltc_1: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tltc_2: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tpoints: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tsize: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaTest: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t},\n\t\tsprite: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tcenter: {\n\t\t\t\tvalue: new Vector2(0.5, 0.5)\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tvalue: 0.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaTest: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t}\n\t};\n\n\tconst ShaderLib = {\n\t\tbasic: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\t\t},\n\t\tlambert: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\t\t},\n\t\tphong: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t},\n\t\t\t\tspecular: {\n\t\t\t\t\tvalue: new Color(0x111111)\n\t\t\t\t},\n\t\t\t\tshininess: {\n\t\t\t\t\tvalue: 30\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\n\t\t},\n\t\tstandard: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.roughnessmap, UniformsLib.metalnessmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t},\n\t\t\t\troughness: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t},\n\t\t\t\tmetalness: {\n\t\t\t\t\tvalue: 0.0\n\t\t\t\t},\n\t\t\t\tenvMapIntensity: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t} // temporary\n\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t\t},\n\t\ttoon: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.gradientmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshtoon_vert,\n\t\t\tfragmentShader: ShaderChunk.meshtoon_frag\n\t\t},\n\t\tmatcap: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, {\n\t\t\t\tmatcap: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\t\t},\n\t\tpoints: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.points, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.points_vert,\n\t\t\tfragmentShader: ShaderChunk.points_frag\n\t\t},\n\t\tdashed: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.fog, {\n\t\t\t\tscale: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\tdashSize: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\ttotalSize: {\n\t\t\t\t\tvalue: 2\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\n\t\t},\n\t\tdepth: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap]),\n\t\t\tvertexShader: ShaderChunk.depth_vert,\n\t\t\tfragmentShader: ShaderChunk.depth_frag\n\t\t},\n\t\tnormal: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, {\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshnormal_vert,\n\t\t\tfragmentShader: ShaderChunk.meshnormal_frag\n\t\t},\n\t\tsprite: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.sprite, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\t\tfragmentShader: ShaderChunk.sprite_frag\n\t\t},\n\t\tbackground: {\n\t\t\tuniforms: {\n\t\t\t\tuvTransform: {\n\t\t\t\t\tvalue: new Matrix3()\n\t\t\t\t},\n\t\t\t\tt2D: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: ShaderChunk.background_vert,\n\t\t\tfragmentShader: ShaderChunk.background_frag\n\t\t},\n\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\t\tcube: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.envmap, {\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.cube_vert,\n\t\t\tfragmentShader: ShaderChunk.cube_frag\n\t\t},\n\t\tequirect: {\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\n\t\t},\n\t\tdistanceRGBA: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap, {\n\t\t\t\treferencePosition: {\n\t\t\t\t\tvalue: new Vector3()\n\t\t\t\t},\n\t\t\t\tnearDistance: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\tfarDistance: {\n\t\t\t\t\tvalue: 1000\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\t\t},\n\t\tshadow: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.lights, UniformsLib.fog, {\n\t\t\t\tcolor: {\n\t\t\t\t\tvalue: new Color(0x00000)\n\t\t\t\t},\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\t\tfragmentShader: ShaderChunk.shadow_frag\n\t\t}\n\t};\n\tShaderLib.physical = {\n\t\tuniforms: mergeUniforms([ShaderLib.standard.uniforms, {\n\t\t\tclearcoat: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tclearcoatMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tclearcoatRoughness: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tclearcoatRoughnessMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tclearcoatNormalScale: {\n\t\t\t\tvalue: new Vector2(1, 1)\n\t\t\t},\n\t\t\tclearcoatNormalMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tsheen: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tsheenColor: {\n\t\t\t\tvalue: new Color(0x000000)\n\t\t\t},\n\t\t\tsheenColorMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tsheenRoughness: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tsheenRoughnessMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\ttransmission: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\ttransmissionMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\ttransmissionSamplerSize: {\n\t\t\t\tvalue: new Vector2()\n\t\t\t},\n\t\t\ttransmissionSamplerMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tthickness: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tthicknessMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tattenuationDistance: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tattenuationColor: {\n\t\t\t\tvalue: new Color(0x000000)\n\t\t\t},\n\t\t\tspecularIntensity: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tspecularIntensityMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tspecularColor: {\n\t\t\t\tvalue: new Color(1, 1, 1)\n\t\t\t},\n\t\t\tspecularColorMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t}]),\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t};\n\n\tfunction WebGLBackground(renderer, cubemaps, state, objects, premultipliedAlpha) {\n\t\tconst clearColor = new Color(0x000000);\n\t\tlet clearAlpha = 0;\n\t\tlet planeMesh;\n\t\tlet boxMesh;\n\t\tlet currentBackground = null;\n\t\tlet currentBackgroundVersion = 0;\n\t\tlet currentTonemapping = null;\n\n\t\tfunction render(renderList, scene) {\n\t\t\tlet forceClear = false;\n\t\t\tlet background = scene.isScene === true ? scene.background : null;\n\n\t\t\tif (background && background.isTexture) {\n\t\t\t\tbackground = cubemaps.get(background);\n\t\t\t} // Ignore background in AR\n\t\t\t// TODO: Reconsider this.\n\n\n\t\t\tconst xr = renderer.xr;\n\t\t\tconst session = xr.getSession && xr.getSession();\n\n\t\t\tif (session && session.environmentBlendMode === 'additive') {\n\t\t\t\tbackground = null;\n\t\t\t}\n\n\t\t\tif (background === null) {\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t} else if (background && background.isColor) {\n\t\t\t\tsetClear(background, 1);\n\t\t\t\tforceClear = true;\n\t\t\t}\n\n\t\t\tif (renderer.autoClear || forceClear) {\n\t\t\t\trenderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n\t\t\t}\n\n\t\t\tif (background && (background.isCubeTexture || background.mapping === CubeUVReflectionMapping)) {\n\t\t\t\tif (boxMesh === undefined) {\n\t\t\t\t\tboxMesh = new Mesh(new BoxGeometry(1, 1, 1), new ShaderMaterial({\n\t\t\t\t\t\tname: 'BackgroundCubeMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms(ShaderLib.cube.uniforms),\n\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t}));\n\t\t\t\t\tboxMesh.geometry.deleteAttribute('normal');\n\t\t\t\t\tboxMesh.geometry.deleteAttribute('uv');\n\n\t\t\t\t\tboxMesh.onBeforeRender = function (renderer, scene, camera) {\n\t\t\t\t\t\tthis.matrixWorld.copyPosition(camera.matrixWorld);\n\t\t\t\t\t}; // enable code injection for non-built-in material\n\n\n\t\t\t\t\tObject.defineProperty(boxMesh.material, 'envMap', {\n\t\t\t\t\t\tget: function () {\n\t\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tobjects.update(boxMesh);\n\t\t\t\t}\n\n\t\t\t\tboxMesh.material.uniforms.envMap.value = background;\n\t\t\t\tboxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background.isRenderTargetTexture === false ? -1 : 1;\n\n\t\t\t\tif (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n\t\t\t\t\tboxMesh.material.needsUpdate = true;\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\t\t\t\t} // push to the pre-sorted opaque render list\n\n\n\t\t\t\trenderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);\n\t\t\t} else if (background && background.isTexture) {\n\t\t\t\tif (planeMesh === undefined) {\n\t\t\t\t\tplaneMesh = new Mesh(new PlaneGeometry(2, 2), new ShaderMaterial({\n\t\t\t\t\t\tname: 'BackgroundMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms(ShaderLib.background.uniforms),\n\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t}));\n\t\t\t\t\tplaneMesh.geometry.deleteAttribute('normal'); // enable code injection for non-built-in material\n\n\t\t\t\t\tObject.defineProperty(planeMesh.material, 'map', {\n\t\t\t\t\t\tget: function () {\n\t\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tobjects.update(planeMesh);\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\t\tif (background.matrixAutoUpdate === true) {\n\t\t\t\t\tbackground.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy(background.matrix);\n\n\t\t\t\tif (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n\t\t\t\t\tplaneMesh.material.needsUpdate = true;\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\t\t\t\t} // push to the pre-sorted opaque render list\n\n\n\t\t\t\trenderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);\n\t\t\t}\n\t\t}\n\n\t\tfunction setClear(color, alpha) {\n\t\t\tstate.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);\n\t\t}\n\n\t\treturn {\n\t\t\tgetClearColor: function () {\n\t\t\t\treturn clearColor;\n\t\t\t},\n\t\t\tsetClearColor: function (color, alpha = 1) {\n\t\t\t\tclearColor.set(color);\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t},\n\t\t\tgetClearAlpha: function () {\n\t\t\t\treturn clearAlpha;\n\t\t\t},\n\t\t\tsetClearAlpha: function (alpha) {\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t},\n\t\t\trender: render\n\t\t};\n\t}\n\n\tfunction WebGLBindingStates(gl, extensions, attributes, capabilities) {\n\t\tconst maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n\t\tconst extension = capabilities.isWebGL2 ? null : extensions.get('OES_vertex_array_object');\n\t\tconst vaoAvailable = capabilities.isWebGL2 || extension !== null;\n\t\tconst bindingStates = {};\n\t\tconst defaultState = createBindingState(null);\n\t\tlet currentState = defaultState;\n\n\t\tfunction setup(object, material, program, geometry, index) {\n\t\t\tlet updateBuffers = false;\n\n\t\t\tif (vaoAvailable) {\n\t\t\t\tconst state = getBindingState(geometry, program, material);\n\n\t\t\t\tif (currentState !== state) {\n\t\t\t\t\tcurrentState = state;\n\t\t\t\t\tbindVertexArrayObject(currentState.object);\n\t\t\t\t}\n\n\t\t\t\tupdateBuffers = needsUpdate(geometry, index);\n\t\t\t\tif (updateBuffers) saveCache(geometry, index);\n\t\t\t} else {\n\t\t\t\tconst wireframe = material.wireframe === true;\n\n\t\t\t\tif (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {\n\t\t\t\t\tcurrentState.geometry = geometry.id;\n\t\t\t\t\tcurrentState.program = program.id;\n\t\t\t\t\tcurrentState.wireframe = wireframe;\n\t\t\t\t\tupdateBuffers = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh === true) {\n\t\t\t\tupdateBuffers = true;\n\t\t\t}\n\n\t\t\tif (index !== null) {\n\t\t\t\tattributes.update(index, gl.ELEMENT_ARRAY_BUFFER);\n\t\t\t}\n\n\t\t\tif (updateBuffers) {\n\t\t\t\tsetupVertexAttributes(object, material, program, geometry);\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.get(index).buffer);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction createVertexArrayObject() {\n\t\t\tif (capabilities.isWebGL2) return gl.createVertexArray();\n\t\t\treturn extension.createVertexArrayOES();\n\t\t}\n\n\t\tfunction bindVertexArrayObject(vao) {\n\t\t\tif (capabilities.isWebGL2) return gl.bindVertexArray(vao);\n\t\t\treturn extension.bindVertexArrayOES(vao);\n\t\t}\n\n\t\tfunction deleteVertexArrayObject(vao) {\n\t\t\tif (capabilities.isWebGL2) return gl.deleteVertexArray(vao);\n\t\t\treturn extension.deleteVertexArrayOES(vao);\n\t\t}\n\n\t\tfunction getBindingState(geometry, program, material) {\n\t\t\tconst wireframe = material.wireframe === true;\n\t\t\tlet programMap = bindingStates[geometry.id];\n\n\t\t\tif (programMap === undefined) {\n\t\t\t\tprogramMap = {};\n\t\t\t\tbindingStates[geometry.id] = programMap;\n\t\t\t}\n\n\t\t\tlet stateMap = programMap[program.id];\n\n\t\t\tif (stateMap === undefined) {\n\t\t\t\tstateMap = {};\n\t\t\t\tprogramMap[program.id] = stateMap;\n\t\t\t}\n\n\t\t\tlet state = stateMap[wireframe];\n\n\t\t\tif (state === undefined) {\n\t\t\t\tstate = createBindingState(createVertexArrayObject());\n\t\t\t\tstateMap[wireframe] = state;\n\t\t\t}\n\n\t\t\treturn state;\n\t\t}\n\n\t\tfunction createBindingState(vao) {\n\t\t\tconst newAttributes = [];\n\t\t\tconst enabledAttributes = [];\n\t\t\tconst attributeDivisors = [];\n\n\t\t\tfor (let i = 0; i < maxVertexAttributes; i++) {\n\t\t\t\tnewAttributes[i] = 0;\n\t\t\t\tenabledAttributes[i] = 0;\n\t\t\t\tattributeDivisors[i] = 0;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t// for backward compatibility on non-VAO support browser\n\t\t\t\tgeometry: null,\n\t\t\t\tprogram: null,\n\t\t\t\twireframe: false,\n\t\t\t\tnewAttributes: newAttributes,\n\t\t\t\tenabledAttributes: enabledAttributes,\n\t\t\t\tattributeDivisors: attributeDivisors,\n\t\t\t\tobject: vao,\n\t\t\t\tattributes: {},\n\t\t\t\tindex: null\n\t\t\t};\n\t\t}\n\n\t\tfunction needsUpdate(geometry, index) {\n\t\t\tconst cachedAttributes = currentState.attributes;\n\t\t\tconst geometryAttributes = geometry.attributes;\n\t\t\tlet attributesNum = 0;\n\n\t\t\tfor (const key in geometryAttributes) {\n\t\t\t\tconst cachedAttribute = cachedAttributes[key];\n\t\t\t\tconst geometryAttribute = geometryAttributes[key];\n\t\t\t\tif (cachedAttribute === undefined) return true;\n\t\t\t\tif (cachedAttribute.attribute !== geometryAttribute) return true;\n\t\t\t\tif (cachedAttribute.data !== geometryAttribute.data) return true;\n\t\t\t\tattributesNum++;\n\t\t\t}\n\n\t\t\tif (currentState.attributesNum !== attributesNum) return true;\n\t\t\tif (currentState.index !== index) return true;\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction saveCache(geometry, index) {\n\t\t\tconst cache = {};\n\t\t\tconst attributes = geometry.attributes;\n\t\t\tlet attributesNum = 0;\n\n\t\t\tfor (const key in attributes) {\n\t\t\t\tconst attribute = attributes[key];\n\t\t\t\tconst data = {};\n\t\t\t\tdata.attribute = attribute;\n\n\t\t\t\tif (attribute.data) {\n\t\t\t\t\tdata.data = attribute.data;\n\t\t\t\t}\n\n\t\t\t\tcache[key] = data;\n\t\t\t\tattributesNum++;\n\t\t\t}\n\n\t\t\tcurrentState.attributes = cache;\n\t\t\tcurrentState.attributesNum = attributesNum;\n\t\t\tcurrentState.index = index;\n\t\t}\n\n\t\tfunction initAttributes() {\n\t\t\tconst newAttributes = currentState.newAttributes;\n\n\t\t\tfor (let i = 0, il = newAttributes.length; i < il; i++) {\n\t\t\t\tnewAttributes[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\tfunction enableAttribute(attribute) {\n\t\t\tenableAttributeAndDivisor(attribute, 0);\n\t\t}\n\n\t\tfunction enableAttributeAndDivisor(attribute, meshPerAttribute) {\n\t\t\tconst newAttributes = currentState.newAttributes;\n\t\t\tconst enabledAttributes = currentState.enabledAttributes;\n\t\t\tconst attributeDivisors = currentState.attributeDivisors;\n\t\t\tnewAttributes[attribute] = 1;\n\n\t\t\tif (enabledAttributes[attribute] === 0) {\n\t\t\t\tgl.enableVertexAttribArray(attribute);\n\t\t\t\tenabledAttributes[attribute] = 1;\n\t\t\t}\n\n\t\t\tif (attributeDivisors[attribute] !== meshPerAttribute) {\n\t\t\t\tconst extension = capabilities.isWebGL2 ? gl : extensions.get('ANGLE_instanced_arrays');\n\t\t\t\textension[capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE'](attribute, meshPerAttribute);\n\t\t\t\tattributeDivisors[attribute] = meshPerAttribute;\n\t\t\t}\n\t\t}\n\n\t\tfunction disableUnusedAttributes() {\n\t\t\tconst newAttributes = currentState.newAttributes;\n\t\t\tconst enabledAttributes = currentState.enabledAttributes;\n\n\t\t\tfor (let i = 0, il = enabledAttributes.length; i < il; i++) {\n\t\t\t\tif (enabledAttributes[i] !== newAttributes[i]) {\n\t\t\t\t\tgl.disableVertexAttribArray(i);\n\t\t\t\t\tenabledAttributes[i] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction vertexAttribPointer(index, size, type, normalized, stride, offset) {\n\t\t\tif (capabilities.isWebGL2 === true && (type === gl.INT || type === gl.UNSIGNED_INT)) {\n\t\t\t\tgl.vertexAttribIPointer(index, size, type, stride, offset);\n\t\t\t} else {\n\t\t\t\tgl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n\t\t\t}\n\t\t}\n\n\t\tfunction setupVertexAttributes(object, material, program, geometry) {\n\t\t\tif (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {\n\t\t\t\tif (extensions.get('ANGLE_instanced_arrays') === null) return;\n\t\t\t}\n\n\t\t\tinitAttributes();\n\t\t\tconst geometryAttributes = geometry.attributes;\n\t\t\tconst programAttributes = program.getAttributes();\n\t\t\tconst materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\t\tfor (const name in programAttributes) {\n\t\t\t\tconst programAttribute = programAttributes[name];\n\n\t\t\t\tif (programAttribute.location >= 0) {\n\t\t\t\t\tlet geometryAttribute = geometryAttributes[name];\n\n\t\t\t\t\tif (geometryAttribute === undefined) {\n\t\t\t\t\t\tif (name === 'instanceMatrix' && object.instanceMatrix) geometryAttribute = object.instanceMatrix;\n\t\t\t\t\t\tif (name === 'instanceColor' && object.instanceColor) geometryAttribute = object.instanceColor;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (geometryAttribute !== undefined) {\n\t\t\t\t\t\tconst normalized = geometryAttribute.normalized;\n\t\t\t\t\t\tconst size = geometryAttribute.itemSize;\n\t\t\t\t\t\tconst attribute = attributes.get(geometryAttribute); // TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif (attribute === undefined) continue;\n\t\t\t\t\t\tconst buffer = attribute.buffer;\n\t\t\t\t\t\tconst type = attribute.type;\n\t\t\t\t\t\tconst bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t\tif (geometryAttribute.isInterleavedBufferAttribute) {\n\t\t\t\t\t\t\tconst data = geometryAttribute.data;\n\t\t\t\t\t\t\tconst stride = data.stride;\n\t\t\t\t\t\t\tconst offset = geometryAttribute.offset;\n\n\t\t\t\t\t\t\tif (data && data.isInstancedInterleavedBuffer) {\n\t\t\t\t\t\t\t\tfor (let i = 0; i < programAttribute.locationSize; i++) {\n\t\t\t\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute.location + i, data.meshPerAttribute);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined) {\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = data.meshPerAttribute * data.count;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfor (let i = 0; i < programAttribute.locationSize; i++) {\n\t\t\t\t\t\t\t\t\tenableAttribute(programAttribute.location + i);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\n\t\t\t\t\t\t\tfor (let i = 0; i < programAttribute.locationSize; i++) {\n\t\t\t\t\t\t\t\tvertexAttribPointer(programAttribute.location + i, size / programAttribute.locationSize, type, normalized, stride * bytesPerElement, (offset + size / programAttribute.locationSize * i) * bytesPerElement);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (geometryAttribute.isInstancedBufferAttribute) {\n\t\t\t\t\t\t\t\tfor (let i = 0; i < programAttribute.locationSize; i++) {\n\t\t\t\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute.location + i, geometryAttribute.meshPerAttribute);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined) {\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfor (let i = 0; i < programAttribute.locationSize; i++) {\n\t\t\t\t\t\t\t\t\tenableAttribute(programAttribute.location + i);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\n\t\t\t\t\t\t\tfor (let i = 0; i < programAttribute.locationSize; i++) {\n\t\t\t\t\t\t\t\tvertexAttribPointer(programAttribute.location + i, size / programAttribute.locationSize, type, normalized, size * bytesPerElement, size / programAttribute.locationSize * i * bytesPerElement);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (materialDefaultAttributeValues !== undefined) {\n\t\t\t\t\t\tconst value = materialDefaultAttributeValues[name];\n\n\t\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\t\tswitch (value.length) {\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib2fv(programAttribute.location, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib3fv(programAttribute.location, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib4fv(programAttribute.location, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib1fv(programAttribute.location, value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdisableUnusedAttributes();\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\treset();\n\n\t\t\tfor (const geometryId in bindingStates) {\n\t\t\t\tconst programMap = bindingStates[geometryId];\n\n\t\t\t\tfor (const programId in programMap) {\n\t\t\t\t\tconst stateMap = programMap[programId];\n\n\t\t\t\t\tfor (const wireframe in stateMap) {\n\t\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete programMap[programId];\n\t\t\t\t}\n\n\t\t\t\tdelete bindingStates[geometryId];\n\t\t\t}\n\t\t}\n\n\t\tfunction releaseStatesOfGeometry(geometry) {\n\t\t\tif (bindingStates[geometry.id] === undefined) return;\n\t\t\tconst programMap = bindingStates[geometry.id];\n\n\t\t\tfor (const programId in programMap) {\n\t\t\t\tconst stateMap = programMap[programId];\n\n\t\t\t\tfor (const wireframe in stateMap) {\n\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[programId];\n\t\t\t}\n\n\t\t\tdelete bindingStates[geometry.id];\n\t\t}\n\n\t\tfunction releaseStatesOfProgram(program) {\n\t\t\tfor (const geometryId in bindingStates) {\n\t\t\t\tconst programMap = bindingStates[geometryId];\n\t\t\t\tif (programMap[program.id] === undefined) continue;\n\t\t\t\tconst stateMap = programMap[program.id];\n\n\t\t\t\tfor (const wireframe in stateMap) {\n\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[program.id];\n\t\t\t}\n\t\t}\n\n\t\tfunction reset() {\n\t\t\tresetDefaultState();\n\t\t\tif (currentState === defaultState) return;\n\t\t\tcurrentState = defaultState;\n\t\t\tbindVertexArrayObject(currentState.object);\n\t\t} // for backward-compatilibity\n\n\n\t\tfunction resetDefaultState() {\n\t\t\tdefaultState.geometry = null;\n\t\t\tdefaultState.program = null;\n\t\t\tdefaultState.wireframe = false;\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\treset: reset,\n\t\t\tresetDefaultState: resetDefaultState,\n\t\t\tdispose: dispose,\n\t\t\treleaseStatesOfGeometry: releaseStatesOfGeometry,\n\t\t\treleaseStatesOfProgram: releaseStatesOfProgram,\n\t\t\tinitAttributes: initAttributes,\n\t\t\tenableAttribute: enableAttribute,\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes\n\t\t};\n\t}\n\n\tfunction WebGLBufferRenderer(gl, extensions, info, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tlet mode;\n\n\t\tfunction setMode(value) {\n\t\t\tmode = value;\n\t\t}\n\n\t\tfunction render(start, count) {\n\t\t\tgl.drawArrays(mode, start, count);\n\t\t\tinfo.update(count, mode, 1);\n\t\t}\n\n\t\tfunction renderInstances(start, count, primcount) {\n\t\t\tif (primcount === 0) return;\n\t\t\tlet extension, methodName;\n\n\t\t\tif (isWebGL2) {\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawArraysInstanced';\n\t\t\t} else {\n\t\t\t\textension = extensions.get('ANGLE_instanced_arrays');\n\t\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\textension[methodName](mode, start, count, primcount);\n\t\t\tinfo.update(count, mode, primcount);\n\t\t} //\n\n\n\t\tthis.setMode = setMode;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\t}\n\n\tfunction WebGLCapabilities(gl, extensions, parameters) {\n\t\tlet maxAnisotropy;\n\n\t\tfunction getMaxAnisotropy() {\n\t\t\tif (maxAnisotropy !== undefined) return maxAnisotropy;\n\n\t\t\tif (extensions.has('EXT_texture_filter_anisotropic') === true) {\n\t\t\t\tconst extension = extensions.get('EXT_texture_filter_anisotropic');\n\t\t\t\tmaxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n\t\t\t} else {\n\t\t\t\tmaxAnisotropy = 0;\n\t\t\t}\n\n\t\t\treturn maxAnisotropy;\n\t\t}\n\n\t\tfunction getMaxPrecision(precision) {\n\t\t\tif (precision === 'highp') {\n\t\t\t\tif (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {\n\t\t\t\t\treturn 'highp';\n\t\t\t\t}\n\n\t\t\t\tprecision = 'mediump';\n\t\t\t}\n\n\t\t\tif (precision === 'mediump') {\n\t\t\t\tif (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {\n\t\t\t\t\treturn 'mediump';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn 'lowp';\n\t\t}\n\t\t/* eslint-disable no-undef */\n\n\n\t\tconst isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext;\n\t\t/* eslint-enable no-undef */\n\n\t\tlet precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tconst maxPrecision = getMaxPrecision(precision);\n\n\t\tif (maxPrecision !== precision) {\n\t\t\tconsole.warn('THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.');\n\t\t\tprecision = maxPrecision;\n\t\t}\n\n\t\tconst drawBuffers = isWebGL2 || extensions.has('WEBGL_draw_buffers');\n\t\tconst logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\t\tconst maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n\t\tconst maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\n\t\tconst maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n\t\tconst maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n\t\tconst maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n\t\tconst maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n\t\tconst maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);\n\t\tconst maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n\t\tconst vertexTextures = maxVertexTextures > 0;\n\t\tconst floatFragmentTextures = isWebGL2 || extensions.has('OES_texture_float');\n\t\tconst floatVertexTextures = vertexTextures && floatFragmentTextures;\n\t\tconst maxSamples = isWebGL2 ? gl.getParameter(gl.MAX_SAMPLES) : 0;\n\t\treturn {\n\t\t\tisWebGL2: isWebGL2,\n\t\t\tdrawBuffers: drawBuffers,\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\t\tgetMaxPrecision: getMaxPrecision,\n\t\t\tprecision: precision,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\t\tmaxTextures: maxTextures,\n\t\t\tmaxVertexTextures: maxVertexTextures,\n\t\t\tmaxTextureSize: maxTextureSize,\n\t\t\tmaxCubemapSize: maxCubemapSize,\n\t\t\tmaxAttributes: maxAttributes,\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\t\tmaxVaryings: maxVaryings,\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\t\t\tvertexTextures: vertexTextures,\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\t\tfloatVertexTextures: floatVertexTextures,\n\t\t\tmaxSamples: maxSamples\n\t\t};\n\t}\n\n\tfunction WebGLClipping(properties) {\n\t\tconst scope = this;\n\t\tlet globalState = null,\n\t\t\t\tnumGlobalPlanes = 0,\n\t\t\t\tlocalClippingEnabled = false,\n\t\t\t\trenderingShadows = false;\n\t\tconst plane = new Plane(),\n\t\t\t\t\tviewNormalMatrix = new Matrix3(),\n\t\t\t\t\tuniform = {\n\t\t\tvalue: null,\n\t\t\tneedsUpdate: false\n\t\t};\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\t\tthis.numIntersection = 0;\n\n\t\tthis.init = function (planes, enableLocalClipping, camera) {\n\t\t\tconst enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to\n\t\t\t// run another frame in order to reset the state:\n\t\t\tnumGlobalPlanes !== 0 || localClippingEnabled;\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\t\t\tglobalState = projectPlanes(planes, camera, 0);\n\t\t\tnumGlobalPlanes = planes.length;\n\t\t\treturn enabled;\n\t\t};\n\n\t\tthis.beginShadows = function () {\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes(null);\n\t\t};\n\n\t\tthis.endShadows = function () {\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\t\t};\n\n\t\tthis.setState = function (material, camera, useCache) {\n\t\t\tconst planes = material.clippingPlanes,\n\t\t\t\t\t\tclipIntersection = material.clipIntersection,\n\t\t\t\t\t\tclipShadows = material.clipShadows;\n\t\t\tconst materialProperties = properties.get(material);\n\n\t\t\tif (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {\n\t\t\t\t// there's no local clipping\n\t\t\t\tif (renderingShadows) {\n\t\t\t\t\t// there's no global clipping\n\t\t\t\t\tprojectPlanes(null);\n\t\t\t\t} else {\n\t\t\t\t\tresetGlobalState();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\t\t\tlGlobal = nGlobal * 4;\n\t\t\t\tlet dstArray = materialProperties.clippingState || null;\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\t\tdstArray = projectPlanes(planes, camera, lGlobal, useCache);\n\n\t\t\t\tfor (let i = 0; i !== lGlobal; ++i) {\n\t\t\t\t\tdstArray[i] = globalState[i];\n\t\t\t\t}\n\n\t\t\t\tmaterialProperties.clippingState = dstArray;\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\t\tthis.numPlanes += nGlobal;\n\t\t\t}\n\t\t};\n\n\t\tfunction resetGlobalState() {\n\t\t\tif (uniform.value !== globalState) {\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\t\t\t}\n\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\t\tscope.numIntersection = 0;\n\t\t}\n\n\t\tfunction projectPlanes(planes, camera, dstOffset, skipTransform) {\n\t\t\tconst nPlanes = planes !== null ? planes.length : 0;\n\t\t\tlet dstArray = null;\n\n\t\t\tif (nPlanes !== 0) {\n\t\t\t\tdstArray = uniform.value;\n\n\t\t\t\tif (skipTransform !== true || dstArray === null) {\n\t\t\t\t\tconst flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix(viewMatrix);\n\n\t\t\t\t\tif (dstArray === null || dstArray.length < flatSize) {\n\t\t\t\t\t\tdstArray = new Float32Array(flatSize);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (let i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {\n\t\t\t\t\t\tplane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);\n\t\t\t\t\t\tplane.normal.toArray(dstArray, i4);\n\t\t\t\t\t\tdstArray[i4 + 3] = plane.constant;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\t\t\t}\n\n\t\t\tscope.numPlanes = nPlanes;\n\t\t\tscope.numIntersection = 0;\n\t\t\treturn dstArray;\n\t\t}\n\t}\n\n\tfunction WebGLCubeMaps(renderer) {\n\t\tlet cubemaps = new WeakMap();\n\n\t\tfunction mapTextureMapping(texture, mapping) {\n\t\t\tif (mapping === EquirectangularReflectionMapping) {\n\t\t\t\ttexture.mapping = CubeReflectionMapping;\n\t\t\t} else if (mapping === EquirectangularRefractionMapping) {\n\t\t\t\ttexture.mapping = CubeRefractionMapping;\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tfunction get(texture) {\n\t\t\tif (texture && texture.isTexture && texture.isRenderTargetTexture === false) {\n\t\t\t\tconst mapping = texture.mapping;\n\n\t\t\t\tif (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {\n\t\t\t\t\tif (cubemaps.has(texture)) {\n\t\t\t\t\t\tconst cubemap = cubemaps.get(texture).texture;\n\t\t\t\t\t\treturn mapTextureMapping(cubemap, texture.mapping);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst image = texture.image;\n\n\t\t\t\t\t\tif (image && image.height > 0) {\n\t\t\t\t\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\t\t\t\t\t\tconst renderTarget = new WebGLCubeRenderTarget(image.height / 2);\n\t\t\t\t\t\t\trenderTarget.fromEquirectangularTexture(renderer, texture);\n\t\t\t\t\t\t\tcubemaps.set(texture, renderTarget);\n\t\t\t\t\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t\t\t\t\t\ttexture.addEventListener('dispose', onTextureDispose);\n\t\t\t\t\t\t\treturn mapTextureMapping(renderTarget.texture, texture.mapping);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tfunction onTextureDispose(event) {\n\t\t\tconst texture = event.target;\n\t\t\ttexture.removeEventListener('dispose', onTextureDispose);\n\t\t\tconst cubemap = cubemaps.get(texture);\n\n\t\t\tif (cubemap !== undefined) {\n\t\t\t\tcubemaps.delete(texture);\n\t\t\t\tcubemap.dispose();\n\t\t\t}\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tcubemaps = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tclass OrthographicCamera extends Camera {\n\t\tconstructor(left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2000) {\n\t\t\tsuper();\n\t\t\tthis.type = 'OrthographicCamera';\n\t\t\tthis.zoom = 1;\n\t\t\tthis.view = null;\n\t\t\tthis.left = left;\n\t\t\tthis.right = right;\n\t\t\tthis.top = top;\n\t\t\tthis.bottom = bottom;\n\t\t\tthis.near = near;\n\t\t\tthis.far = far;\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tcopy(source, recursive) {\n\t\t\tsuper.copy(source, recursive);\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign({}, source.view);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetViewOffset(fullWidth, fullHeight, x, y, width, height) {\n\t\t\tif (this.view === null) {\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tclearViewOffset() {\n\t\t\tif (this.view !== null) {\n\t\t\t\tthis.view.enabled = false;\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t}\n\n\t\tupdateProjectionMatrix() {\n\t\t\tconst dx = (this.right - this.left) / (2 * this.zoom);\n\t\t\tconst dy = (this.top - this.bottom) / (2 * this.zoom);\n\t\t\tconst cx = (this.right + this.left) / 2;\n\t\t\tconst cy = (this.top + this.bottom) / 2;\n\t\t\tlet left = cx - dx;\n\t\t\tlet right = cx + dx;\n\t\t\tlet top = cy + dy;\n\t\t\tlet bottom = cy - dy;\n\n\t\t\tif (this.view !== null && this.view.enabled) {\n\t\t\t\tconst scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;\n\t\t\t\tconst scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;\n\t\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\t\tright = left + scaleW * this.view.width;\n\t\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\t\tbottom = top - scaleH * this.view.height;\n\t\t\t}\n\n\t\t\tthis.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);\n\t\t\tthis.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tif (this.view !== null) data.object.view = Object.assign({}, this.view);\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tOrthographicCamera.prototype.isOrthographicCamera = true;\n\n\tclass RawShaderMaterial extends ShaderMaterial {\n\t\tconstructor(parameters) {\n\t\t\tsuper(parameters);\n\t\t\tthis.type = 'RawShaderMaterial';\n\t\t}\n\n\t}\n\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n\tconst LOD_MIN = 4;\n\tconst LOD_MAX = 8;\n\tconst SIZE_MAX = Math.pow(2, LOD_MAX); // The standard deviations (radians) associated with the extra mips. These are\n\t// chosen to approximate a Trowbridge-Reitz distribution function times the\n\t// geometric shadowing function. These sigma values squared must match the\n\t// variance #defines in cube_uv_reflection_fragment.glsl.js.\n\n\tconst EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];\n\tconst TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length; // The maximum length of the blur for loop. Smaller sigmas will use fewer\n\t// samples and exit early, but not recompile the shader.\n\n\tconst MAX_SAMPLES = 20;\n\tconst ENCODINGS = {\n\t\t[LinearEncoding]: 0,\n\t\t[sRGBEncoding]: 1,\n\t\t[RGBEEncoding]: 2,\n\t\t[RGBM7Encoding]: 3,\n\t\t[RGBM16Encoding]: 4,\n\t\t[RGBDEncoding]: 5,\n\t\t[GammaEncoding]: 6\n\t};\n\n\tconst _flatCamera = /*@__PURE__*/new OrthographicCamera();\n\n\tconst {\n\t\t_lodPlanes,\n\t\t_sizeLods,\n\t\t_sigmas\n\t} = /*@__PURE__*/_createPlanes();\n\n\tconst _clearColor = /*@__PURE__*/new Color();\n\n\tlet _oldTarget = null; // Golden Ratio\n\n\tconst PHI = (1 + Math.sqrt(5)) / 2;\n\tconst INV_PHI = 1 / PHI; // Vertices of a dodecahedron (except the opposites, which represent the\n\t// same axis), used as axis directions evenly spread on a sphere.\n\n\tconst _axisDirections = [/*@__PURE__*/new Vector3(1, 1, 1), /*@__PURE__*/new Vector3(-1, 1, 1), /*@__PURE__*/new Vector3(1, 1, -1), /*@__PURE__*/new Vector3(-1, 1, -1), /*@__PURE__*/new Vector3(0, PHI, INV_PHI), /*@__PURE__*/new Vector3(0, PHI, -INV_PHI), /*@__PURE__*/new Vector3(INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(-INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(PHI, INV_PHI, 0), /*@__PURE__*/new Vector3(-PHI, INV_PHI, 0)];\n\t/**\n\t * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n\t * (PMREM) from a cubeMap environment texture. This allows different levels of\n\t * blur to be quickly accessed based on material roughness. It is packed into a\n\t * special CubeUV format that allows us to perform custom interpolation so that\n\t * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n\t * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n\t * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n\t * higher roughness levels. In this way we maintain resolution to smoothly\n\t * interpolate diffuse lighting while limiting sampling computation.\n\t *\n\t * Paper: Fast, Accurate Image-Based Lighting\n\t * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view\n\t*/\n\n\tclass PMREMGenerator {\n\t\tconstructor(renderer) {\n\t\t\tthis._renderer = renderer;\n\t\t\tthis._pingPongRenderTarget = null;\n\t\t\tthis._blurMaterial = _getBlurShader(MAX_SAMPLES);\n\t\t\tthis._equirectShader = null;\n\t\t\tthis._cubemapShader = null;\n\n\t\t\tthis._compileMaterial(this._blurMaterial);\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t\t * is placed at the origin).\n\t\t */\n\n\n\t\tfromScene(scene, sigma = 0, near = 0.1, far = 100) {\n\t\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\t\tconst cubeUVRenderTarget = this._allocateTargets();\n\n\t\t\tthis._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);\n\n\t\t\tif (sigma > 0) {\n\t\t\t\tthis._blur(cubeUVRenderTarget, 0, 0, sigma);\n\t\t\t}\n\n\t\t\tthis._applyPMREM(cubeUVRenderTarget);\n\n\t\t\tthis._cleanup(cubeUVRenderTarget);\n\n\t\t\treturn cubeUVRenderTarget;\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\n\n\t\tfromEquirectangular(equirectangular) {\n\t\t\treturn this._fromTexture(equirectangular);\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\n\n\t\tfromCubemap(cubemap) {\n\t\t\treturn this._fromTexture(cubemap);\n\t\t}\n\t\t/**\n\t\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\n\n\t\tcompileCubemapShader() {\n\t\t\tif (this._cubemapShader === null) {\n\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\n\t\t\t\tthis._compileMaterial(this._cubemapShader);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\n\n\t\tcompileEquirectangularShader() {\n\t\t\tif (this._equirectShader === null) {\n\t\t\t\tthis._equirectShader = _getEquirectShader();\n\n\t\t\t\tthis._compileMaterial(this._equirectShader);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t\t * one of them will cause any others to also become unusable.\n\t\t */\n\n\n\t\tdispose() {\n\t\t\tthis._blurMaterial.dispose();\n\n\t\t\tif (this._cubemapShader !== null) this._cubemapShader.dispose();\n\t\t\tif (this._equirectShader !== null) this._equirectShader.dispose();\n\n\t\t\tfor (let i = 0; i < _lodPlanes.length; i++) {\n\t\t\t\t_lodPlanes[i].dispose();\n\t\t\t}\n\t\t} // private interface\n\n\n\t\t_cleanup(outputTarget) {\n\t\t\tthis._pingPongRenderTarget.dispose();\n\n\t\t\tthis._renderer.setRenderTarget(_oldTarget);\n\n\t\t\toutputTarget.scissorTest = false;\n\n\t\t\t_setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);\n\t\t}\n\n\t\t_fromTexture(texture) {\n\t\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\t\tconst cubeUVRenderTarget = this._allocateTargets(texture);\n\n\t\t\tthis._textureToCubeUV(texture, cubeUVRenderTarget);\n\n\t\t\tthis._applyPMREM(cubeUVRenderTarget);\n\n\t\t\tthis._cleanup(cubeUVRenderTarget);\n\n\t\t\treturn cubeUVRenderTarget;\n\t\t}\n\n\t\t_allocateTargets(texture) {\n\t\t\t// warning: null texture is valid\n\t\t\tconst params = {\n\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\tminFilter: NearestFilter,\n\t\t\t\tgenerateMipmaps: false,\n\t\t\t\ttype: UnsignedByteType,\n\t\t\t\tformat: RGBEFormat,\n\t\t\t\tencoding: _isLDR(texture) ? texture.encoding : RGBEEncoding,\n\t\t\t\tdepthBuffer: false\n\t\t\t};\n\n\t\t\tconst cubeUVRenderTarget = _createRenderTarget(params);\n\n\t\t\tcubeUVRenderTarget.depthBuffer = texture ? false : true;\n\t\t\tthis._pingPongRenderTarget = _createRenderTarget(params);\n\t\t\treturn cubeUVRenderTarget;\n\t\t}\n\n\t\t_compileMaterial(material) {\n\t\t\tconst tmpMesh = new Mesh(_lodPlanes[0], material);\n\n\t\t\tthis._renderer.compile(tmpMesh, _flatCamera);\n\t\t}\n\n\t\t_sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {\n\t\t\tconst fov = 90;\n\t\t\tconst aspect = 1;\n\t\t\tconst cubeCamera = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tconst upSign = [1, -1, 1, 1, 1, 1];\n\t\t\tconst forwardSign = [1, 1, 1, -1, -1, -1];\n\t\t\tconst renderer = this._renderer;\n\t\t\tconst originalAutoClear = renderer.autoClear;\n\t\t\tconst outputEncoding = renderer.outputEncoding;\n\t\t\tconst toneMapping = renderer.toneMapping;\n\t\t\trenderer.getClearColor(_clearColor);\n\t\t\trenderer.toneMapping = NoToneMapping;\n\t\t\trenderer.outputEncoding = LinearEncoding;\n\t\t\trenderer.autoClear = false;\n\t\t\tconst backgroundMaterial = new MeshBasicMaterial({\n\t\t\t\tname: 'PMREM.Background',\n\t\t\t\tside: BackSide,\n\t\t\t\tdepthWrite: false,\n\t\t\t\tdepthTest: false\n\t\t\t});\n\t\t\tconst backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);\n\t\t\tlet useSolidColor = false;\n\t\t\tconst background = scene.background;\n\n\t\t\tif (background) {\n\t\t\t\tif (background.isColor) {\n\t\t\t\t\tbackgroundMaterial.color.copy(background);\n\t\t\t\t\tscene.background = null;\n\t\t\t\t\tuseSolidColor = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbackgroundMaterial.color.copy(_clearColor);\n\t\t\t\tuseSolidColor = true;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tconst col = i % 3;\n\n\t\t\t\tif (col == 0) {\n\t\t\t\t\tcubeCamera.up.set(0, upSign[i], 0);\n\t\t\t\t\tcubeCamera.lookAt(forwardSign[i], 0, 0);\n\t\t\t\t} else if (col == 1) {\n\t\t\t\t\tcubeCamera.up.set(0, 0, upSign[i]);\n\t\t\t\t\tcubeCamera.lookAt(0, forwardSign[i], 0);\n\t\t\t\t} else {\n\t\t\t\t\tcubeCamera.up.set(0, upSign[i], 0);\n\t\t\t\t\tcubeCamera.lookAt(0, 0, forwardSign[i]);\n\t\t\t\t}\n\n\t\t\t\t_setViewport(cubeUVRenderTarget, col * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX);\n\n\t\t\t\trenderer.setRenderTarget(cubeUVRenderTarget);\n\n\t\t\t\tif (useSolidColor) {\n\t\t\t\t\trenderer.render(backgroundBox, cubeCamera);\n\t\t\t\t}\n\n\t\t\t\trenderer.render(scene, cubeCamera);\n\t\t\t}\n\n\t\t\tbackgroundBox.geometry.dispose();\n\t\t\tbackgroundBox.material.dispose();\n\t\t\trenderer.toneMapping = toneMapping;\n\t\t\trenderer.outputEncoding = outputEncoding;\n\t\t\trenderer.autoClear = originalAutoClear;\n\t\t\tscene.background = background;\n\t\t}\n\n\t\t_setEncoding(uniform, texture) {\n\t\t\tif (this._renderer.capabilities.isWebGL2 === true && texture.format === RGBAFormat && texture.type === UnsignedByteType && texture.encoding === sRGBEncoding) {\n\t\t\t\tuniform.value = ENCODINGS[LinearEncoding];\n\t\t\t} else {\n\t\t\t\tuniform.value = ENCODINGS[texture.encoding];\n\t\t\t}\n\t\t}\n\n\t\t_textureToCubeUV(texture, cubeUVRenderTarget) {\n\t\t\tconst renderer = this._renderer;\n\t\t\tconst isCubeTexture = texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping;\n\n\t\t\tif (isCubeTexture) {\n\t\t\t\tif (this._cubemapShader == null) {\n\t\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._equirectShader == null) {\n\t\t\t\t\tthis._equirectShader = _getEquirectShader();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst material = isCubeTexture ? this._cubemapShader : this._equirectShader;\n\t\t\tconst mesh = new Mesh(_lodPlanes[0], material);\n\t\t\tconst uniforms = material.uniforms;\n\t\t\tuniforms['envMap'].value = texture;\n\n\t\t\tif (!isCubeTexture) {\n\t\t\t\tuniforms['texelSize'].value.set(1.0 / texture.image.width, 1.0 / texture.image.height);\n\t\t\t}\n\n\t\t\tthis._setEncoding(uniforms['inputEncoding'], texture);\n\n\t\t\tthis._setEncoding(uniforms['outputEncoding'], cubeUVRenderTarget.texture);\n\n\t\t\t_setViewport(cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX);\n\n\t\t\trenderer.setRenderTarget(cubeUVRenderTarget);\n\t\t\trenderer.render(mesh, _flatCamera);\n\t\t}\n\n\t\t_applyPMREM(cubeUVRenderTarget) {\n\t\t\tconst renderer = this._renderer;\n\t\t\tconst autoClear = renderer.autoClear;\n\t\t\trenderer.autoClear = false;\n\n\t\t\tfor (let i = 1; i < TOTAL_LODS; i++) {\n\t\t\t\tconst sigma = Math.sqrt(_sigmas[i] * _sigmas[i] - _sigmas[i - 1] * _sigmas[i - 1]);\n\t\t\t\tconst poleAxis = _axisDirections[(i - 1) % _axisDirections.length];\n\n\t\t\t\tthis._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);\n\t\t\t}\n\n\t\t\trenderer.autoClear = autoClear;\n\t\t}\n\t\t/**\n\t\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t\t * accurate at the poles, but still does a decent job.\n\t\t */\n\n\n\t\t_blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {\n\t\t\tconst pingPongRenderTarget = this._pingPongRenderTarget;\n\n\t\t\tthis._halfBlur(cubeUVRenderTarget, pingPongRenderTarget, lodIn, lodOut, sigma, 'latitudinal', poleAxis);\n\n\t\t\tthis._halfBlur(pingPongRenderTarget, cubeUVRenderTarget, lodOut, lodOut, sigma, 'longitudinal', poleAxis);\n\t\t}\n\n\t\t_halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {\n\t\t\tconst renderer = this._renderer;\n\t\t\tconst blurMaterial = this._blurMaterial;\n\n\t\t\tif (direction !== 'latitudinal' && direction !== 'longitudinal') {\n\t\t\t\tconsole.error('blur direction must be either latitudinal or longitudinal!');\n\t\t\t} // Number of standard deviations at which to cut off the discrete approximation.\n\n\n\t\t\tconst STANDARD_DEVIATIONS = 3;\n\t\t\tconst blurMesh = new Mesh(_lodPlanes[lodOut], blurMaterial);\n\t\t\tconst blurUniforms = blurMaterial.uniforms;\n\t\t\tconst pixels = _sizeLods[lodIn] - 1;\n\t\t\tconst radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);\n\t\t\tconst sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\t\tconst samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;\n\n\t\t\tif (samples > MAX_SAMPLES) {\n\t\t\t\tconsole.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);\n\t\t\t}\n\n\t\t\tconst weights = [];\n\t\t\tlet sum = 0;\n\n\t\t\tfor (let i = 0; i < MAX_SAMPLES; ++i) {\n\t\t\t\tconst x = i / sigmaPixels;\n\t\t\t\tconst weight = Math.exp(-x * x / 2);\n\t\t\t\tweights.push(weight);\n\n\t\t\t\tif (i == 0) {\n\t\t\t\t\tsum += weight;\n\t\t\t\t} else if (i < samples) {\n\t\t\t\t\tsum += 2 * weight;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < weights.length; i++) {\n\t\t\t\tweights[i] = weights[i] / sum;\n\t\t\t}\n\n\t\t\tblurUniforms['envMap'].value = targetIn.texture;\n\t\t\tblurUniforms['samples'].value = samples;\n\t\t\tblurUniforms['weights'].value = weights;\n\t\t\tblurUniforms['latitudinal'].value = direction === 'latitudinal';\n\n\t\t\tif (poleAxis) {\n\t\t\t\tblurUniforms['poleAxis'].value = poleAxis;\n\t\t\t}\n\n\t\t\tblurUniforms['dTheta'].value = radiansPerPixel;\n\t\t\tblurUniforms['mipInt'].value = LOD_MAX - lodIn;\n\n\t\t\tthis._setEncoding(blurUniforms['inputEncoding'], targetIn.texture);\n\n\t\t\tthis._setEncoding(blurUniforms['outputEncoding'], targetIn.texture);\n\n\t\t\tconst outputSize = _sizeLods[lodOut];\n\t\t\tconst x = 3 * Math.max(0, SIZE_MAX - 2 * outputSize);\n\t\t\tconst y = (lodOut === 0 ? 0 : 2 * SIZE_MAX) + 2 * outputSize * (lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0);\n\n\t\t\t_setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);\n\n\t\t\trenderer.setRenderTarget(targetOut);\n\t\t\trenderer.render(blurMesh, _flatCamera);\n\t\t}\n\n\t}\n\n\tfunction _isLDR(texture) {\n\t\tif (texture === undefined || texture.type !== UnsignedByteType) return false;\n\t\treturn texture.encoding === LinearEncoding || texture.encoding === sRGBEncoding || texture.encoding === GammaEncoding;\n\t}\n\n\tfunction _createPlanes() {\n\t\tconst _lodPlanes = [];\n\t\tconst _sizeLods = [];\n\t\tconst _sigmas = [];\n\t\tlet lod = LOD_MAX;\n\n\t\tfor (let i = 0; i < TOTAL_LODS; i++) {\n\t\t\tconst sizeLod = Math.pow(2, lod);\n\n\t\t\t_sizeLods.push(sizeLod);\n\n\t\t\tlet sigma = 1.0 / sizeLod;\n\n\t\t\tif (i > LOD_MAX - LOD_MIN) {\n\t\t\t\tsigma = EXTRA_LOD_SIGMA[i - LOD_MAX + LOD_MIN - 1];\n\t\t\t} else if (i == 0) {\n\t\t\t\tsigma = 0;\n\t\t\t}\n\n\t\t\t_sigmas.push(sigma);\n\n\t\t\tconst texelSize = 1.0 / (sizeLod - 1);\n\t\t\tconst min = -texelSize / 2;\n\t\t\tconst max = 1 + texelSize / 2;\n\t\t\tconst uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];\n\t\t\tconst cubeFaces = 6;\n\t\t\tconst vertices = 6;\n\t\t\tconst positionSize = 3;\n\t\t\tconst uvSize = 2;\n\t\t\tconst faceIndexSize = 1;\n\t\t\tconst position = new Float32Array(positionSize * vertices * cubeFaces);\n\t\t\tconst uv = new Float32Array(uvSize * vertices * cubeFaces);\n\t\t\tconst faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);\n\n\t\t\tfor (let face = 0; face < cubeFaces; face++) {\n\t\t\t\tconst x = face % 3 * 2 / 3 - 1;\n\t\t\t\tconst y = face > 2 ? 0 : -1;\n\t\t\t\tconst coordinates = [x, y, 0, x + 2 / 3, y, 0, x + 2 / 3, y + 1, 0, x, y, 0, x + 2 / 3, y + 1, 0, x, y + 1, 0];\n\t\t\t\tposition.set(coordinates, positionSize * vertices * face);\n\t\t\t\tuv.set(uv1, uvSize * vertices * face);\n\t\t\t\tconst fill = [face, face, face, face, face, face];\n\t\t\t\tfaceIndex.set(fill, faceIndexSize * vertices * face);\n\t\t\t}\n\n\t\t\tconst planes = new BufferGeometry();\n\t\t\tplanes.setAttribute('position', new BufferAttribute(position, positionSize));\n\t\t\tplanes.setAttribute('uv', new BufferAttribute(uv, uvSize));\n\t\t\tplanes.setAttribute('faceIndex', new BufferAttribute(faceIndex, faceIndexSize));\n\n\t\t\t_lodPlanes.push(planes);\n\n\t\t\tif (lod > LOD_MIN) {\n\t\t\t\tlod--;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\t_lodPlanes,\n\t\t\t_sizeLods,\n\t\t\t_sigmas\n\t\t};\n\t}\n\n\tfunction _createRenderTarget(params) {\n\t\tconst cubeUVRenderTarget = new WebGLRenderTarget(3 * SIZE_MAX, 3 * SIZE_MAX, params);\n\t\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\t\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\t\tcubeUVRenderTarget.scissorTest = true;\n\t\treturn cubeUVRenderTarget;\n\t}\n\n\tfunction _setViewport(target, x, y, width, height) {\n\t\ttarget.viewport.set(x, y, width, height);\n\t\ttarget.scissor.set(x, y, width, height);\n\t}\n\n\tfunction _getBlurShader(maxSamples) {\n\t\tconst weights = new Float32Array(maxSamples);\n\t\tconst poleAxis = new Vector3(0, 1, 0);\n\t\tconst shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'SphericalGaussianBlur',\n\t\t\tdefines: {\n\t\t\t\t'n': maxSamples\n\t\t\t},\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'samples': {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\t'weights': {\n\t\t\t\t\tvalue: weights\n\t\t\t\t},\n\t\t\t\t'latitudinal': {\n\t\t\t\t\tvalue: false\n\t\t\t\t},\n\t\t\t\t'dTheta': {\n\t\t\t\t\tvalue: 0\n\t\t\t\t},\n\t\t\t\t'mipInt': {\n\t\t\t\t\tvalue: 0\n\t\t\t\t},\n\t\t\t\t'poleAxis': {\n\t\t\t\t\tvalue: poleAxis\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t${_getEncodings()}\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getEquirectShader() {\n\t\tconst texelSize = new Vector2(1, 1);\n\t\tconst shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'EquirectangularToCubeUV',\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'texelSize': {\n\t\t\t\t\tvalue: texelSize\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t${_getEncodings()}\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tvec2 f = fract( uv / texelSize - 0.5 );\n\t\t\t\tuv -= f * texelSize;\n\t\t\t\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x += texelSize.x;\n\t\t\t\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.y += texelSize.y;\n\t\t\t\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x -= texelSize.x;\n\t\t\t\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\n\t\t\t\tvec3 tm = mix( tl, tr, f.x );\n\t\t\t\tvec3 bm = mix( bl, br, f.x );\n\t\t\t\tgl_FragColor.rgb = mix( tm, bm, f.y );\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getCubemapShader() {\n\t\tconst shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'CubemapToCubeUV',\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\t${_getEncodings()}\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getCommonVertexShader() {\n\t\treturn (\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t`\n\t\t);\n\t}\n\n\tfunction _getEncodings() {\n\t\treturn (\n\t\t\t/* glsl */\n\t\t\t`\n\n\t\tuniform int inputEncoding;\n\t\tuniform int outputEncoding;\n\n\t\t#include <encodings_pars_fragment>\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( inputEncoding == 1 ) {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 2 ) {\n\n\t\t\t\treturn RGBEToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 3 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\n\n\t\t\t} else if ( inputEncoding == 4 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\n\n\t\t\t} else if ( inputEncoding == 5 ) {\n\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn GammaToLinear( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 linearToOutputTexel( vec4 value ) {\n\n\t\t\tif ( outputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( outputEncoding == 1 ) {\n\n\t\t\t\treturn LinearTosRGB( value );\n\n\t\t\t} else if ( outputEncoding == 2 ) {\n\n\t\t\t\treturn LinearToRGBE( value );\n\n\t\t\t} else if ( outputEncoding == 3 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\n\n\t\t\t} else if ( outputEncoding == 4 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\n\n\t\t\t} else if ( outputEncoding == 5 ) {\n\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn LinearToGamma( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t`\n\t\t);\n\t}\n\n\tfunction WebGLCubeUVMaps(renderer) {\n\t\tlet cubeUVmaps = new WeakMap();\n\t\tlet pmremGenerator = null;\n\n\t\tfunction get(texture) {\n\t\t\tif (texture && texture.isTexture && texture.isRenderTargetTexture === false) {\n\t\t\t\tconst mapping = texture.mapping;\n\t\t\t\tconst isEquirectMap = mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping;\n\t\t\t\tconst isCubeMap = mapping === CubeReflectionMapping || mapping === CubeRefractionMapping;\n\n\t\t\t\tif (isEquirectMap || isCubeMap) {\n\t\t\t\t\t// equirect/cube map to cubeUV conversion\n\t\t\t\t\tif (cubeUVmaps.has(texture)) {\n\t\t\t\t\t\treturn cubeUVmaps.get(texture).texture;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst image = texture.image;\n\n\t\t\t\t\t\tif (isEquirectMap && image && image.height > 0 || isCubeMap && image && isCubeTextureComplete(image)) {\n\t\t\t\t\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\t\t\t\t\t\tif (pmremGenerator === null) pmremGenerator = new PMREMGenerator(renderer);\n\t\t\t\t\t\t\tconst renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture) : pmremGenerator.fromCubemap(texture);\n\t\t\t\t\t\t\tcubeUVmaps.set(texture, renderTarget);\n\t\t\t\t\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t\t\t\t\t\ttexture.addEventListener('dispose', onTextureDispose);\n\t\t\t\t\t\t\treturn renderTarget.texture;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tfunction isCubeTextureComplete(image) {\n\t\t\tlet count = 0;\n\t\t\tconst length = 6;\n\n\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\tif (image[i] !== undefined) count++;\n\t\t\t}\n\n\t\t\treturn count === length;\n\t\t}\n\n\t\tfunction onTextureDispose(event) {\n\t\t\tconst texture = event.target;\n\t\t\ttexture.removeEventListener('dispose', onTextureDispose);\n\t\t\tconst cubemapUV = cubeUVmaps.get(texture);\n\n\t\t\tif (cubemapUV !== undefined) {\n\t\t\t\tcubeUVmaps.delete(texture);\n\t\t\t\tcubemapUV.dispose();\n\t\t\t}\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tcubeUVmaps = new WeakMap();\n\n\t\t\tif (pmremGenerator !== null) {\n\t\t\t\tpmremGenerator.dispose();\n\t\t\t\tpmremGenerator = null;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction WebGLExtensions(gl) {\n\t\tconst extensions = {};\n\n\t\tfunction getExtension(name) {\n\t\t\tif (extensions[name] !== undefined) {\n\t\t\t\treturn extensions[name];\n\t\t\t}\n\n\t\t\tlet extension;\n\n\t\t\tswitch (name) {\n\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\textension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\textension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\textension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\textension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\textension = gl.getExtension(name);\n\t\t\t}\n\n\t\t\textensions[name] = extension;\n\t\t\treturn extension;\n\t\t}\n\n\t\treturn {\n\t\t\thas: function (name) {\n\t\t\t\treturn getExtension(name) !== null;\n\t\t\t},\n\t\t\tinit: function (capabilities) {\n\t\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t\tgetExtension('EXT_color_buffer_float');\n\t\t\t\t} else {\n\t\t\t\t\tgetExtension('WEBGL_depth_texture');\n\t\t\t\t\tgetExtension('OES_texture_float');\n\t\t\t\t\tgetExtension('OES_texture_half_float');\n\t\t\t\t\tgetExtension('OES_texture_half_float_linear');\n\t\t\t\t\tgetExtension('OES_standard_derivatives');\n\t\t\t\t\tgetExtension('OES_element_index_uint');\n\t\t\t\t\tgetExtension('OES_vertex_array_object');\n\t\t\t\t\tgetExtension('ANGLE_instanced_arrays');\n\t\t\t\t}\n\n\t\t\t\tgetExtension('OES_texture_float_linear');\n\t\t\t\tgetExtension('EXT_color_buffer_half_float');\n\t\t\t},\n\t\t\tget: function (name) {\n\t\t\t\tconst extension = getExtension(name);\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: ' + name + ' extension not supported.');\n\t\t\t\t}\n\n\t\t\t\treturn extension;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction WebGLGeometries(gl, attributes, info, bindingStates) {\n\t\tconst geometries = {};\n\t\tconst wireframeAttributes = new WeakMap();\n\n\t\tfunction onGeometryDispose(event) {\n\t\t\tconst geometry = event.target;\n\n\t\t\tif (geometry.index !== null) {\n\t\t\t\tattributes.remove(geometry.index);\n\t\t\t}\n\n\t\t\tfor (const name in geometry.attributes) {\n\t\t\t\tattributes.remove(geometry.attributes[name]);\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener('dispose', onGeometryDispose);\n\t\t\tdelete geometries[geometry.id];\n\t\t\tconst attribute = wireframeAttributes.get(geometry);\n\n\t\t\tif (attribute) {\n\t\t\t\tattributes.remove(attribute);\n\t\t\t\twireframeAttributes.delete(geometry);\n\t\t\t}\n\n\t\t\tbindingStates.releaseStatesOfGeometry(geometry);\n\n\t\t\tif (geometry.isInstancedBufferGeometry === true) {\n\t\t\t\tdelete geometry._maxInstanceCount;\n\t\t\t} //\n\n\n\t\t\tinfo.memory.geometries--;\n\t\t}\n\n\t\tfunction get(object, geometry) {\n\t\t\tif (geometries[geometry.id] === true) return geometry;\n\t\t\tgeometry.addEventListener('dispose', onGeometryDispose);\n\t\t\tgeometries[geometry.id] = true;\n\t\t\tinfo.memory.geometries++;\n\t\t\treturn geometry;\n\t\t}\n\n\t\tfunction update(geometry) {\n\t\t\tconst geometryAttributes = geometry.attributes; // Updating index buffer in VAO now. See WebGLBindingStates.\n\n\t\t\tfor (const name in geometryAttributes) {\n\t\t\t\tattributes.update(geometryAttributes[name], gl.ARRAY_BUFFER);\n\t\t\t} // morph targets\n\n\n\t\t\tconst morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor (const name in morphAttributes) {\n\t\t\t\tconst array = morphAttributes[name];\n\n\t\t\t\tfor (let i = 0, l = array.length; i < l; i++) {\n\t\t\t\t\tattributes.update(array[i], gl.ARRAY_BUFFER);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction updateWireframeAttribute(geometry) {\n\t\t\tconst indices = [];\n\t\t\tconst geometryIndex = geometry.index;\n\t\t\tconst geometryPosition = geometry.attributes.position;\n\t\t\tlet version = 0;\n\n\t\t\tif (geometryIndex !== null) {\n\t\t\t\tconst array = geometryIndex.array;\n\t\t\t\tversion = geometryIndex.version;\n\n\t\t\t\tfor (let i = 0, l = array.length; i < l; i += 3) {\n\t\t\t\t\tconst a = array[i + 0];\n\t\t\t\t\tconst b = array[i + 1];\n\t\t\t\t\tconst c = array[i + 2];\n\t\t\t\t\tindices.push(a, b, b, c, c, a);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst array = geometryPosition.array;\n\t\t\t\tversion = geometryPosition.version;\n\n\t\t\t\tfor (let i = 0, l = array.length / 3 - 1; i < l; i += 3) {\n\t\t\t\t\tconst a = i + 0;\n\t\t\t\t\tconst b = i + 1;\n\t\t\t\t\tconst c = i + 2;\n\t\t\t\t\tindices.push(a, b, b, c, c, a);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst attribute = new (arrayMax(indices) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);\n\t\t\tattribute.version = version; // Updating index buffer in VAO now. See WebGLBindingStates\n\t\t\t//\n\n\t\t\tconst previousAttribute = wireframeAttributes.get(geometry);\n\t\t\tif (previousAttribute) attributes.remove(previousAttribute); //\n\n\t\t\twireframeAttributes.set(geometry, attribute);\n\t\t}\n\n\t\tfunction getWireframeAttribute(geometry) {\n\t\t\tconst currentAttribute = wireframeAttributes.get(geometry);\n\n\t\t\tif (currentAttribute) {\n\t\t\t\tconst geometryIndex = geometry.index;\n\n\t\t\t\tif (geometryIndex !== null) {\n\t\t\t\t\t// if the attribute is obsolete, create a new one\n\t\t\t\t\tif (currentAttribute.version < geometryIndex.version) {\n\t\t\t\t\t\tupdateWireframeAttribute(geometry);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tupdateWireframeAttribute(geometry);\n\t\t\t}\n\n\t\t\treturn wireframeAttributes.get(geometry);\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tupdate: update,\n\t\t\tgetWireframeAttribute: getWireframeAttribute\n\t\t};\n\t}\n\n\tfunction WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tlet mode;\n\n\t\tfunction setMode(value) {\n\t\t\tmode = value;\n\t\t}\n\n\t\tlet type, bytesPerElement;\n\n\t\tfunction setIndex(value) {\n\t\t\ttype = value.type;\n\t\t\tbytesPerElement = value.bytesPerElement;\n\t\t}\n\n\t\tfunction render(start, count) {\n\t\t\tgl.drawElements(mode, count, type, start * bytesPerElement);\n\t\t\tinfo.update(count, mode, 1);\n\t\t}\n\n\t\tfunction renderInstances(start, count, primcount) {\n\t\t\tif (primcount === 0) return;\n\t\t\tlet extension, methodName;\n\n\t\t\tif (isWebGL2) {\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawElementsInstanced';\n\t\t\t} else {\n\t\t\t\textension = extensions.get('ANGLE_instanced_arrays');\n\t\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\textension[methodName](mode, count, type, start * bytesPerElement, primcount);\n\t\t\tinfo.update(count, mode, primcount);\n\t\t} //\n\n\n\t\tthis.setMode = setMode;\n\t\tthis.setIndex = setIndex;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\t}\n\n\tfunction WebGLInfo(gl) {\n\t\tconst memory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t};\n\t\tconst render = {\n\t\t\tframe: 0,\n\t\t\tcalls: 0,\n\t\t\ttriangles: 0,\n\t\t\tpoints: 0,\n\t\t\tlines: 0\n\t\t};\n\n\t\tfunction update(count, mode, instanceCount) {\n\t\t\trender.calls++;\n\n\t\t\tswitch (mode) {\n\t\t\t\tcase gl.TRIANGLES:\n\t\t\t\t\trender.triangles += instanceCount * (count / 3);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.LINES:\n\t\t\t\t\trender.lines += instanceCount * (count / 2);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.LINE_STRIP:\n\t\t\t\t\trender.lines += instanceCount * (count - 1);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.LINE_LOOP:\n\t\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.POINTS:\n\t\t\t\t\trender.points += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error('THREE.WebGLInfo: Unknown draw mode:', mode);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfunction reset() {\n\t\t\trender.frame++;\n\t\t\trender.calls = 0;\n\t\t\trender.triangles = 0;\n\t\t\trender.points = 0;\n\t\t\trender.lines = 0;\n\t\t}\n\n\t\treturn {\n\t\t\tmemory: memory,\n\t\t\trender: render,\n\t\t\tprograms: null,\n\t\t\tautoReset: true,\n\t\t\treset: reset,\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tclass DataTexture2DArray extends Texture {\n\t\tconstructor(data = null, width = 1, height = 1, depth = 1) {\n\t\t\tsuper(null);\n\t\t\tthis.image = {\n\t\t\t\tdata,\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t\tdepth\n\t\t\t};\n\t\t\tthis.magFilter = NearestFilter;\n\t\t\tthis.minFilter = NearestFilter;\n\t\t\tthis.wrapR = ClampToEdgeWrapping;\n\t\t\tthis.generateMipmaps = false;\n\t\t\tthis.flipY = false;\n\t\t\tthis.unpackAlignment = 1;\n\t\t\tthis.needsUpdate = true;\n\t\t}\n\n\t}\n\n\tDataTexture2DArray.prototype.isDataTexture2DArray = true;\n\n\tfunction numericalSort(a, b) {\n\t\treturn a[0] - b[0];\n\t}\n\n\tfunction absNumericalSort(a, b) {\n\t\treturn Math.abs(b[1]) - Math.abs(a[1]);\n\t}\n\n\tfunction denormalize(morph, attribute) {\n\t\tlet denominator = 1;\n\t\tconst array = attribute.isInterleavedBufferAttribute ? attribute.data.array : attribute.array;\n\t\tif (array instanceof Int8Array) denominator = 127;else if (array instanceof Int16Array) denominator = 32767;else if (array instanceof Int32Array) denominator = 2147483647;else console.error('THREE.WebGLMorphtargets: Unsupported morph attribute data type: ', array);\n\t\tmorph.divideScalar(denominator);\n\t}\n\n\tfunction WebGLMorphtargets(gl, capabilities, textures) {\n\t\tconst influencesList = {};\n\t\tconst morphInfluences = new Float32Array(8);\n\t\tconst morphTextures = new WeakMap();\n\t\tconst morph = new Vector3();\n\t\tconst workInfluences = [];\n\n\t\tfor (let i = 0; i < 8; i++) {\n\t\t\tworkInfluences[i] = [i, 0];\n\t\t}\n\n\t\tfunction update(object, geometry, material, program) {\n\t\t\tconst objectInfluences = object.morphTargetInfluences;\n\n\t\t\tif (capabilities.isWebGL2 === true) {\n\t\t\t\t// instead of using attributes, the WebGL 2 code path encodes morph targets\n\t\t\t\t// into an array of data textures. Each layer represents a single morph target.\n\t\t\t\tconst numberOfMorphTargets = geometry.morphAttributes.position.length;\n\t\t\t\tlet entry = morphTextures.get(geometry);\n\n\t\t\t\tif (entry === undefined || entry.count !== numberOfMorphTargets) {\n\t\t\t\t\tif (entry !== undefined) entry.texture.dispose();\n\t\t\t\t\tconst hasMorphNormals = geometry.morphAttributes.normal !== undefined;\n\t\t\t\t\tconst morphTargets = geometry.morphAttributes.position;\n\t\t\t\t\tconst morphNormals = geometry.morphAttributes.normal || [];\n\t\t\t\t\tconst numberOfVertices = geometry.attributes.position.count;\n\t\t\t\t\tconst numberOfVertexData = hasMorphNormals === true ? 2 : 1; // (v,n) vs. (v)\n\n\t\t\t\t\tlet width = numberOfVertices * numberOfVertexData;\n\t\t\t\t\tlet height = 1;\n\n\t\t\t\t\tif (width > capabilities.maxTextureSize) {\n\t\t\t\t\t\theight = Math.ceil(width / capabilities.maxTextureSize);\n\t\t\t\t\t\twidth = capabilities.maxTextureSize;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst buffer = new Float32Array(width * height * 4 * numberOfMorphTargets);\n\t\t\t\t\tconst texture = new DataTexture2DArray(buffer, width, height, numberOfMorphTargets);\n\t\t\t\t\ttexture.format = RGBAFormat; // using RGBA since RGB might be emulated (and is thus slower)\n\n\t\t\t\t\ttexture.type = FloatType; // fill buffer\n\n\t\t\t\t\tconst vertexDataStride = numberOfVertexData * 4;\n\n\t\t\t\t\tfor (let i = 0; i < numberOfMorphTargets; i++) {\n\t\t\t\t\t\tconst morphTarget = morphTargets[i];\n\t\t\t\t\t\tconst morphNormal = morphNormals[i];\n\t\t\t\t\t\tconst offset = width * height * 4 * i;\n\n\t\t\t\t\t\tfor (let j = 0; j < morphTarget.count; j++) {\n\t\t\t\t\t\t\tmorph.fromBufferAttribute(morphTarget, j);\n\t\t\t\t\t\t\tif (morphTarget.normalized === true) denormalize(morph, morphTarget);\n\t\t\t\t\t\t\tconst stride = j * vertexDataStride;\n\t\t\t\t\t\t\tbuffer[offset + stride + 0] = morph.x;\n\t\t\t\t\t\t\tbuffer[offset + stride + 1] = morph.y;\n\t\t\t\t\t\t\tbuffer[offset + stride + 2] = morph.z;\n\t\t\t\t\t\t\tbuffer[offset + stride + 3] = 0;\n\n\t\t\t\t\t\t\tif (hasMorphNormals === true) {\n\t\t\t\t\t\t\t\tmorph.fromBufferAttribute(morphNormal, j);\n\t\t\t\t\t\t\t\tif (morphNormal.normalized === true) denormalize(morph, morphNormal);\n\t\t\t\t\t\t\t\tbuffer[offset + stride + 4] = morph.x;\n\t\t\t\t\t\t\t\tbuffer[offset + stride + 5] = morph.y;\n\t\t\t\t\t\t\t\tbuffer[offset + stride + 6] = morph.z;\n\t\t\t\t\t\t\t\tbuffer[offset + stride + 7] = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tentry = {\n\t\t\t\t\t\tcount: numberOfMorphTargets,\n\t\t\t\t\t\ttexture: texture,\n\t\t\t\t\t\tsize: new Vector2(width, height)\n\t\t\t\t\t};\n\t\t\t\t\tmorphTextures.set(geometry, entry);\n\t\t\t\t} //\n\n\n\t\t\t\tlet morphInfluencesSum = 0;\n\n\t\t\t\tfor (let i = 0; i < objectInfluences.length; i++) {\n\t\t\t\t\tmorphInfluencesSum += objectInfluences[i];\n\t\t\t\t}\n\n\t\t\t\tconst morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\t\t\t\tprogram.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);\n\t\t\t\tprogram.getUniforms().setValue(gl, 'morphTargetInfluences', objectInfluences);\n\t\t\t\tprogram.getUniforms().setValue(gl, 'morphTargetsTexture', entry.texture, textures);\n\t\t\t\tprogram.getUniforms().setValue(gl, 'morphTargetsTextureSize', entry.size);\n\t\t\t} else {\n\t\t\t\t// When object doesn't have morph target influences defined, we treat it as a 0-length array\n\t\t\t\t// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n\t\t\t\tconst length = objectInfluences === undefined ? 0 : objectInfluences.length;\n\t\t\t\tlet influences = influencesList[geometry.id];\n\n\t\t\t\tif (influences === undefined || influences.length !== length) {\n\t\t\t\t\t// initialise list\n\t\t\t\t\tinfluences = [];\n\n\t\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\t\tinfluences[i] = [i, 0];\n\t\t\t\t\t}\n\n\t\t\t\t\tinfluencesList[geometry.id] = influences;\n\t\t\t\t} // Collect influences\n\n\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tconst influence = influences[i];\n\t\t\t\t\tinfluence[0] = i;\n\t\t\t\t\tinfluence[1] = objectInfluences[i];\n\t\t\t\t}\n\n\t\t\t\tinfluences.sort(absNumericalSort);\n\n\t\t\t\tfor (let i = 0; i < 8; i++) {\n\t\t\t\t\tif (i < length && influences[i][1]) {\n\t\t\t\t\t\tworkInfluences[i][0] = influences[i][0];\n\t\t\t\t\t\tworkInfluences[i][1] = influences[i][1];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tworkInfluences[i][0] = Number.MAX_SAFE_INTEGER;\n\t\t\t\t\t\tworkInfluences[i][1] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tworkInfluences.sort(numericalSort);\n\t\t\t\tconst morphTargets = geometry.morphAttributes.position;\n\t\t\t\tconst morphNormals = geometry.morphAttributes.normal;\n\t\t\t\tlet morphInfluencesSum = 0;\n\n\t\t\t\tfor (let i = 0; i < 8; i++) {\n\t\t\t\t\tconst influence = workInfluences[i];\n\t\t\t\t\tconst index = influence[0];\n\t\t\t\t\tconst value = influence[1];\n\n\t\t\t\t\tif (index !== Number.MAX_SAFE_INTEGER && value) {\n\t\t\t\t\t\tif (morphTargets && geometry.getAttribute('morphTarget' + i) !== morphTargets[index]) {\n\t\t\t\t\t\t\tgeometry.setAttribute('morphTarget' + i, morphTargets[index]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (morphNormals && geometry.getAttribute('morphNormal' + i) !== morphNormals[index]) {\n\t\t\t\t\t\t\tgeometry.setAttribute('morphNormal' + i, morphNormals[index]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmorphInfluences[i] = value;\n\t\t\t\t\t\tmorphInfluencesSum += value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (morphTargets && geometry.hasAttribute('morphTarget' + i) === true) {\n\t\t\t\t\t\t\tgeometry.deleteAttribute('morphTarget' + i);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (morphNormals && geometry.hasAttribute('morphNormal' + i) === true) {\n\t\t\t\t\t\t\tgeometry.deleteAttribute('morphNormal' + i);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmorphInfluences[i] = 0;\n\t\t\t\t\t}\n\t\t\t\t} // GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\n\n\t\t\t\tconst morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\t\t\t\tprogram.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);\n\t\t\t\tprogram.getUniforms().setValue(gl, 'morphTargetInfluences', morphInfluences);\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tfunction WebGLObjects(gl, geometries, attributes, info) {\n\t\tlet updateMap = new WeakMap();\n\n\t\tfunction update(object) {\n\t\t\tconst frame = info.render.frame;\n\t\t\tconst geometry = object.geometry;\n\t\t\tconst buffergeometry = geometries.get(object, geometry); // Update once per frame\n\n\t\t\tif (updateMap.get(buffergeometry) !== frame) {\n\t\t\t\tgeometries.update(buffergeometry);\n\t\t\t\tupdateMap.set(buffergeometry, frame);\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh) {\n\t\t\t\tif (object.hasEventListener('dispose', onInstancedMeshDispose) === false) {\n\t\t\t\t\tobject.addEventListener('dispose', onInstancedMeshDispose);\n\t\t\t\t}\n\n\t\t\t\tattributes.update(object.instanceMatrix, gl.ARRAY_BUFFER);\n\n\t\t\t\tif (object.instanceColor !== null) {\n\t\t\t\t\tattributes.update(object.instanceColor, gl.ARRAY_BUFFER);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn buffergeometry;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tupdateMap = new WeakMap();\n\t\t}\n\n\t\tfunction onInstancedMeshDispose(event) {\n\t\t\tconst instancedMesh = event.target;\n\t\t\tinstancedMesh.removeEventListener('dispose', onInstancedMeshDispose);\n\t\t\tattributes.remove(instancedMesh.instanceMatrix);\n\t\t\tif (instancedMesh.instanceColor !== null) attributes.remove(instancedMesh.instanceColor);\n\t\t}\n\n\t\treturn {\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tclass DataTexture3D extends Texture {\n\t\tconstructor(data = null, width = 1, height = 1, depth = 1) {\n\t\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t\t// Users can still set in DataTexture3D directly.\n\t\t\t//\n\t\t\t//\tconst texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t\t// \ttexture.anisotropy = 16;\n\t\t\t//\n\t\t\t// See #14839\n\t\t\tsuper(null);\n\t\t\tthis.image = {\n\t\t\t\tdata,\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t\tdepth\n\t\t\t};\n\t\t\tthis.magFilter = NearestFilter;\n\t\t\tthis.minFilter = NearestFilter;\n\t\t\tthis.wrapR = ClampToEdgeWrapping;\n\t\t\tthis.generateMipmaps = false;\n\t\t\tthis.flipY = false;\n\t\t\tthis.unpackAlignment = 1;\n\t\t\tthis.needsUpdate = true;\n\t\t}\n\n\t}\n\n\tDataTexture3D.prototype.isDataTexture3D = true;\n\n\t/**\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [textures] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *\t\tthe 'textures' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (textures factorizations):\n\t *\n\t * .upload( gl, seq, values, textures )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t *\n\t * Methods of the top-level container (textures factorizations):\n\t *\n\t * .setValue( gl, name, value, textures )\n\t *\n\t * \t\tsets uniform with\tname 'name' to 'value'\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t */\n\tconst emptyTexture = new Texture();\n\tconst emptyTexture2dArray = new DataTexture2DArray();\n\tconst emptyTexture3d = new DataTexture3D();\n\tconst emptyCubeTexture = new CubeTexture(); // --- Utilities ---\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\tconst arrayCacheF32 = [];\n\tconst arrayCacheI32 = []; // Float32Array caches used for uploading Matrix uniforms\n\n\tconst mat4array = new Float32Array(16);\n\tconst mat3array = new Float32Array(9);\n\tconst mat2array = new Float32Array(4); // Flattening for arrays of vectors and matrices\n\n\tfunction flatten(array, nBlocks, blockSize) {\n\t\tconst firstElem = array[0];\n\t\tif (firstElem <= 0 || firstElem > 0) return array; // unoptimized: ! isNaN( firstElem )\n\t\t// see http://jacksondunstan.com/articles/983\n\n\t\tconst n = nBlocks * blockSize;\n\t\tlet r = arrayCacheF32[n];\n\n\t\tif (r === undefined) {\n\t\t\tr = new Float32Array(n);\n\t\t\tarrayCacheF32[n] = r;\n\t\t}\n\n\t\tif (nBlocks !== 0) {\n\t\t\tfirstElem.toArray(r, 0);\n\n\t\t\tfor (let i = 1, offset = 0; i !== nBlocks; ++i) {\n\t\t\t\toffset += blockSize;\n\t\t\t\tarray[i].toArray(r, offset);\n\t\t\t}\n\t\t}\n\n\t\treturn r;\n\t}\n\n\tfunction arraysEqual(a, b) {\n\t\tif (a.length !== b.length) return false;\n\n\t\tfor (let i = 0, l = a.length; i < l; i++) {\n\t\t\tif (a[i] !== b[i]) return false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction copyArray(a, b) {\n\t\tfor (let i = 0, l = b.length; i < l; i++) {\n\t\t\ta[i] = b[i];\n\t\t}\n\t} // Texture unit allocation\n\n\n\tfunction allocTexUnits(textures, n) {\n\t\tlet r = arrayCacheI32[n];\n\n\t\tif (r === undefined) {\n\t\t\tr = new Int32Array(n);\n\t\t\tarrayCacheI32[n] = r;\n\t\t}\n\n\t\tfor (let i = 0; i !== n; ++i) {\n\t\t\tr[i] = textures.allocateTextureUnit();\n\t\t}\n\n\t\treturn r;\n\t} // --- Setters ---\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\t// Single scalar\n\n\n\tfunction setValueV1f(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1f(this.addr, v);\n\t\tcache[0] = v;\n\t} // Single float vector (from flat array or THREE.VectorN)\n\n\n\tfunction setValueV2f(gl, v) {\n\t\tconst cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y) {\n\t\t\t\tgl.uniform2f(this.addr, v.x, v.y);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform2fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t}\n\n\tfunction setValueV3f(gl, v) {\n\t\tconst cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {\n\t\t\t\tgl.uniform3f(this.addr, v.x, v.y, v.z);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t\tcache[2] = v.z;\n\t\t\t}\n\t\t} else if (v.r !== undefined) {\n\t\t\tif (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {\n\t\t\t\tgl.uniform3f(this.addr, v.r, v.g, v.b);\n\t\t\t\tcache[0] = v.r;\n\t\t\t\tcache[1] = v.g;\n\t\t\t\tcache[2] = v.b;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform3fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t}\n\n\tfunction setValueV4f(gl, v) {\n\t\tconst cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {\n\t\t\t\tgl.uniform4f(this.addr, v.x, v.y, v.z, v.w);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t\tcache[2] = v.z;\n\t\t\t\tcache[3] = v.w;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform4fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t} // Single matrix (from flat array or THREE.MatrixN)\n\n\n\tfunction setValueM2(gl, v) {\n\t\tconst cache = this.cache;\n\t\tconst elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix2fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat2array.set(elements);\n\t\t\tgl.uniformMatrix2fv(this.addr, false, mat2array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t}\n\n\tfunction setValueM3(gl, v) {\n\t\tconst cache = this.cache;\n\t\tconst elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix3fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat3array.set(elements);\n\t\t\tgl.uniformMatrix3fv(this.addr, false, mat3array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t}\n\n\tfunction setValueM4(gl, v) {\n\t\tconst cache = this.cache;\n\t\tconst elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix4fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat4array.set(elements);\n\t\t\tgl.uniformMatrix4fv(this.addr, false, mat4array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t} // Single integer / boolean\n\n\n\tfunction setValueV1i(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1i(this.addr, v);\n\t\tcache[0] = v;\n\t} // Single integer / boolean vector (from flat array)\n\n\n\tfunction setValueV2i(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform2iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV3i(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform3iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV4i(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform4iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t} // Single unsigned integer\n\n\n\tfunction setValueV1ui(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1ui(this.addr, v);\n\t\tcache[0] = v;\n\t} // Single unsigned integer vector (from flat array)\n\n\n\tfunction setValueV2ui(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform2uiv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV3ui(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform3uiv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV4ui(gl, v) {\n\t\tconst cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform4uiv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t} // Single texture (2D / Cube)\n\n\n\tfunction setValueT1(gl, v, textures) {\n\t\tconst cache = this.cache;\n\t\tconst unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.safeSetTexture2D(v || emptyTexture, unit);\n\t}\n\n\tfunction setValueT3D1(gl, v, textures) {\n\t\tconst cache = this.cache;\n\t\tconst unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.setTexture3D(v || emptyTexture3d, unit);\n\t}\n\n\tfunction setValueT6(gl, v, textures) {\n\t\tconst cache = this.cache;\n\t\tconst unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.safeSetTextureCube(v || emptyCubeTexture, unit);\n\t}\n\n\tfunction setValueT2DArray1(gl, v, textures) {\n\t\tconst cache = this.cache;\n\t\tconst unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.setTexture2DArray(v || emptyTexture2dArray, unit);\n\t} // Helper to pick the right setter for the singular case\n\n\n\tfunction getSingularSetter(type) {\n\t\tswitch (type) {\n\t\t\tcase 0x1406:\n\t\t\t\treturn setValueV1f;\n\t\t\t// FLOAT\n\n\t\t\tcase 0x8b50:\n\t\t\t\treturn setValueV2f;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b51:\n\t\t\t\treturn setValueV3f;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b52:\n\t\t\t\treturn setValueV4f;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5a:\n\t\t\t\treturn setValueM2;\n\t\t\t// _MAT2\n\n\t\t\tcase 0x8b5b:\n\t\t\t\treturn setValueM3;\n\t\t\t// _MAT3\n\n\t\t\tcase 0x8b5c:\n\t\t\t\treturn setValueM4;\n\t\t\t// _MAT4\n\n\t\t\tcase 0x1404:\n\t\t\tcase 0x8b56:\n\t\t\t\treturn setValueV1i;\n\t\t\t// INT, BOOL\n\n\t\t\tcase 0x8b53:\n\t\t\tcase 0x8b57:\n\t\t\t\treturn setValueV2i;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b54:\n\t\t\tcase 0x8b58:\n\t\t\t\treturn setValueV3i;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b55:\n\t\t\tcase 0x8b59:\n\t\t\t\treturn setValueV4i;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x1405:\n\t\t\t\treturn setValueV1ui;\n\t\t\t// UINT\n\n\t\t\tcase 0x8dc6:\n\t\t\t\treturn setValueV2ui;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8dc7:\n\t\t\t\treturn setValueV3ui;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8dc8:\n\t\t\t\treturn setValueV4ui;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\n\t\t\tcase 0x8b62:\n\t\t\t\t// SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1;\n\n\t\t\tcase 0x8b5f: // SAMPLER_3D\n\n\t\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\n\t\t\tcase 0x8dd3:\n\t\t\t\t// UNSIGNED_INT_SAMPLER_3D\n\t\t\t\treturn setValueT3D1;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dc5:\n\t\t\t\t// SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6;\n\n\t\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dc4:\n\t\t\t\t// SAMPLER_2D_ARRAY_SHADOW\n\t\t\t\treturn setValueT2DArray1;\n\t\t}\n\t} // Array of scalars\n\n\n\tfunction setValueV1fArray(gl, v) {\n\t\tgl.uniform1fv(this.addr, v);\n\t} // Array of vectors (from flat array or array of THREE.VectorN)\n\n\n\tfunction setValueV2fArray(gl, v) {\n\t\tconst data = flatten(v, this.size, 2);\n\t\tgl.uniform2fv(this.addr, data);\n\t}\n\n\tfunction setValueV3fArray(gl, v) {\n\t\tconst data = flatten(v, this.size, 3);\n\t\tgl.uniform3fv(this.addr, data);\n\t}\n\n\tfunction setValueV4fArray(gl, v) {\n\t\tconst data = flatten(v, this.size, 4);\n\t\tgl.uniform4fv(this.addr, data);\n\t} // Array of matrices (from flat array or array of THREE.MatrixN)\n\n\n\tfunction setValueM2Array(gl, v) {\n\t\tconst data = flatten(v, this.size, 4);\n\t\tgl.uniformMatrix2fv(this.addr, false, data);\n\t}\n\n\tfunction setValueM3Array(gl, v) {\n\t\tconst data = flatten(v, this.size, 9);\n\t\tgl.uniformMatrix3fv(this.addr, false, data);\n\t}\n\n\tfunction setValueM4Array(gl, v) {\n\t\tconst data = flatten(v, this.size, 16);\n\t\tgl.uniformMatrix4fv(this.addr, false, data);\n\t} // Array of integer / boolean\n\n\n\tfunction setValueV1iArray(gl, v) {\n\t\tgl.uniform1iv(this.addr, v);\n\t} // Array of integer / boolean vectors (from flat array)\n\n\n\tfunction setValueV2iArray(gl, v) {\n\t\tgl.uniform2iv(this.addr, v);\n\t}\n\n\tfunction setValueV3iArray(gl, v) {\n\t\tgl.uniform3iv(this.addr, v);\n\t}\n\n\tfunction setValueV4iArray(gl, v) {\n\t\tgl.uniform4iv(this.addr, v);\n\t} // Array of unsigned integer\n\n\n\tfunction setValueV1uiArray(gl, v) {\n\t\tgl.uniform1uiv(this.addr, v);\n\t} // Array of unsigned integer vectors (from flat array)\n\n\n\tfunction setValueV2uiArray(gl, v) {\n\t\tgl.uniform2uiv(this.addr, v);\n\t}\n\n\tfunction setValueV3uiArray(gl, v) {\n\t\tgl.uniform3uiv(this.addr, v);\n\t}\n\n\tfunction setValueV4uiArray(gl, v) {\n\t\tgl.uniform4uiv(this.addr, v);\n\t} // Array of textures (2D / Cube)\n\n\n\tfunction setValueT1Array(gl, v, textures) {\n\t\tconst n = v.length;\n\t\tconst units = allocTexUnits(textures, n);\n\t\tgl.uniform1iv(this.addr, units);\n\n\t\tfor (let i = 0; i !== n; ++i) {\n\t\t\ttextures.safeSetTexture2D(v[i] || emptyTexture, units[i]);\n\t\t}\n\t}\n\n\tfunction setValueT6Array(gl, v, textures) {\n\t\tconst n = v.length;\n\t\tconst units = allocTexUnits(textures, n);\n\t\tgl.uniform1iv(this.addr, units);\n\n\t\tfor (let i = 0; i !== n; ++i) {\n\t\t\ttextures.safeSetTextureCube(v[i] || emptyCubeTexture, units[i]);\n\t\t}\n\t} // Helper to pick the right setter for a pure (bottom-level) array\n\n\n\tfunction getPureArraySetter(type) {\n\t\tswitch (type) {\n\t\t\tcase 0x1406:\n\t\t\t\treturn setValueV1fArray;\n\t\t\t// FLOAT\n\n\t\t\tcase 0x8b50:\n\t\t\t\treturn setValueV2fArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b51:\n\t\t\t\treturn setValueV3fArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b52:\n\t\t\t\treturn setValueV4fArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5a:\n\t\t\t\treturn setValueM2Array;\n\t\t\t// _MAT2\n\n\t\t\tcase 0x8b5b:\n\t\t\t\treturn setValueM3Array;\n\t\t\t// _MAT3\n\n\t\t\tcase 0x8b5c:\n\t\t\t\treturn setValueM4Array;\n\t\t\t// _MAT4\n\n\t\t\tcase 0x1404:\n\t\t\tcase 0x8b56:\n\t\t\t\treturn setValueV1iArray;\n\t\t\t// INT, BOOL\n\n\t\t\tcase 0x8b53:\n\t\t\tcase 0x8b57:\n\t\t\t\treturn setValueV2iArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b54:\n\t\t\tcase 0x8b58:\n\t\t\t\treturn setValueV3iArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b55:\n\t\t\tcase 0x8b59:\n\t\t\t\treturn setValueV4iArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x1405:\n\t\t\t\treturn setValueV1uiArray;\n\t\t\t// UINT\n\n\t\t\tcase 0x8dc6:\n\t\t\t\treturn setValueV2uiArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8dc7:\n\t\t\t\treturn setValueV3uiArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8dc8:\n\t\t\t\treturn setValueV4uiArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\n\t\t\tcase 0x8b62:\n\t\t\t\t// SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1Array;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dc5:\n\t\t\t\t// SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6Array;\n\t\t}\n\t} // --- Uniform Classes ---\n\n\n\tfunction SingleUniform(id, activeInfo, addr) {\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.setValue = getSingularSetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n\t}\n\n\tfunction PureArrayUniform(id, activeInfo, addr) {\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n\t}\n\n\tPureArrayUniform.prototype.updateCache = function (data) {\n\t\tconst cache = this.cache;\n\n\t\tif (data instanceof Float32Array && cache.length !== data.length) {\n\t\t\tthis.cache = new Float32Array(data.length);\n\t\t}\n\n\t\tcopyArray(cache, data);\n\t};\n\n\tfunction StructuredUniform(id) {\n\t\tthis.id = id;\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\t}\n\n\tStructuredUniform.prototype.setValue = function (gl, value, textures) {\n\t\tconst seq = this.seq;\n\n\t\tfor (let i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tconst u = seq[i];\n\t\t\tu.setValue(gl, value[u.id], textures);\n\t\t}\n\t}; // --- Top-level ---\n\t// Parser - builds up the property tree from the path strings\n\n\n\tconst RePathPart = /(\\w+)(\\])?(\\[|\\.)?/g; // extracts\n\t// \t- the identifier (member name or array index)\n\t//\t- followed by an optional right bracket (found when array index)\n\t//\t- followed by an optional left bracket or dot (type of subscript)\n\t//\n\t// Note: These portions can be read in a non-overlapping fashion and\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t// in the uniform names.\n\n\tfunction addUniform(container, uniformObject) {\n\t\tcontainer.seq.push(uniformObject);\n\t\tcontainer.map[uniformObject.id] = uniformObject;\n\t}\n\n\tfunction parseUniform(activeInfo, addr, container) {\n\t\tconst path = activeInfo.name,\n\t\t\t\t\tpathLength = path.length; // reset RegExp object, because of the early exit of a previous run\n\n\t\tRePathPart.lastIndex = 0;\n\n\t\twhile (true) {\n\t\t\tconst match = RePathPart.exec(path),\n\t\t\t\t\t\tmatchEnd = RePathPart.lastIndex;\n\t\t\tlet id = match[1];\n\t\t\tconst idIsIndex = match[2] === ']',\n\t\t\t\t\t\tsubscript = match[3];\n\t\t\tif (idIsIndex) id = id | 0; // convert to integer\n\n\t\t\tif (subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength) {\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\t\t\t\taddUniform(container, subscript === undefined ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t// step into inner node / create it in case it doesn't exist\n\t\t\t\tconst map = container.map;\n\t\t\t\tlet next = map[id];\n\n\t\t\t\tif (next === undefined) {\n\t\t\t\t\tnext = new StructuredUniform(id);\n\t\t\t\t\taddUniform(container, next);\n\t\t\t\t}\n\n\t\t\t\tcontainer = next;\n\t\t\t}\n\t\t}\n\t} // Root Container\n\n\n\tfunction WebGLUniforms(gl, program) {\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\t\tconst n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n\t\tfor (let i = 0; i < n; ++i) {\n\t\t\tconst info = gl.getActiveUniform(program, i),\n\t\t\t\t\t\taddr = gl.getUniformLocation(program, info.name);\n\t\t\tparseUniform(info, addr, this);\n\t\t}\n\t}\n\n\tWebGLUniforms.prototype.setValue = function (gl, name, value, textures) {\n\t\tconst u = this.map[name];\n\t\tif (u !== undefined) u.setValue(gl, value, textures);\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function (gl, object, name) {\n\t\tconst v = object[name];\n\t\tif (v !== undefined) this.setValue(gl, name, v);\n\t}; // Static interface\n\n\n\tWebGLUniforms.upload = function (gl, seq, values, textures) {\n\t\tfor (let i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tconst u = seq[i],\n\t\t\t\t\t\tv = values[u.id];\n\n\t\t\tif (v.needsUpdate !== false) {\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue(gl, v.value, textures);\n\t\t\t}\n\t\t}\n\t};\n\n\tWebGLUniforms.seqWithValue = function (seq, values) {\n\t\tconst r = [];\n\n\t\tfor (let i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tconst u = seq[i];\n\t\t\tif (u.id in values) r.push(u);\n\t\t}\n\n\t\treturn r;\n\t};\n\n\tfunction WebGLShader(gl, type, string) {\n\t\tconst shader = gl.createShader(type);\n\t\tgl.shaderSource(shader, string);\n\t\tgl.compileShader(shader);\n\t\treturn shader;\n\t}\n\n\tlet programIdCount = 0;\n\n\tfunction addLineNumbers(string) {\n\t\tconst lines = string.split('\\n');\n\n\t\tfor (let i = 0; i < lines.length; i++) {\n\t\t\tlines[i] = i + 1 + ': ' + lines[i];\n\t\t}\n\n\t\treturn lines.join('\\n');\n\t}\n\n\tfunction getEncodingComponents(encoding) {\n\t\tswitch (encoding) {\n\t\t\tcase LinearEncoding:\n\t\t\t\treturn ['Linear', '( value )'];\n\n\t\t\tcase sRGBEncoding:\n\t\t\t\treturn ['sRGB', '( value )'];\n\n\t\t\tcase RGBEEncoding:\n\t\t\t\treturn ['RGBE', '( value )'];\n\n\t\t\tcase RGBM7Encoding:\n\t\t\t\treturn ['RGBM', '( value, 7.0 )'];\n\n\t\t\tcase RGBM16Encoding:\n\t\t\t\treturn ['RGBM', '( value, 16.0 )'];\n\n\t\t\tcase RGBDEncoding:\n\t\t\t\treturn ['RGBD', '( value, 256.0 )'];\n\n\t\t\tcase GammaEncoding:\n\t\t\t\treturn ['Gamma', '( value, float( GAMMA_FACTOR ) )'];\n\n\t\t\tcase LogLuvEncoding:\n\t\t\t\treturn ['LogLuv', '( value )'];\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.WebGLProgram: Unsupported encoding:', encoding);\n\t\t\t\treturn ['Linear', '( value )'];\n\t\t}\n\t}\n\n\tfunction getShaderErrors(gl, shader, type) {\n\t\tconst status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\t\tconst errors = gl.getShaderInfoLog(shader).trim();\n\t\tif (status && errors === '') return ''; // --enable-privileged-webgl-extension\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\treturn type.toUpperCase() + '\\n\\n' + errors + '\\n\\n' + addLineNumbers(gl.getShaderSource(shader));\n\t}\n\n\tfunction getTexelDecodingFunction(functionName, encoding) {\n\t\tconst components = getEncodingComponents(encoding);\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[0] + 'ToLinear' + components[1] + '; }';\n\t}\n\n\tfunction getTexelEncodingFunction(functionName, encoding) {\n\t\tconst components = getEncodingComponents(encoding);\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[0] + components[1] + '; }';\n\t}\n\n\tfunction getToneMappingFunction(functionName, toneMapping) {\n\t\tlet toneMappingName;\n\n\t\tswitch (toneMapping) {\n\t\t\tcase LinearToneMapping:\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t\t\tbreak;\n\n\t\t\tcase ReinhardToneMapping:\n\t\t\t\ttoneMappingName = 'Reinhard';\n\t\t\t\tbreak;\n\n\t\t\tcase CineonToneMapping:\n\t\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\t\tbreak;\n\n\t\t\tcase ACESFilmicToneMapping:\n\t\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\t\tbreak;\n\n\t\t\tcase CustomToneMapping:\n\t\t\t\ttoneMappingName = 'Custom';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.WebGLProgram: Unsupported toneMapping:', toneMapping);\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t}\n\n\t\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\t}\n\n\tfunction generateExtensions(parameters) {\n\t\tconst chunks = [parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ? '#extension GL_OES_standard_derivatives : enable' : '', (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '', parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? '#extension GL_EXT_draw_buffers : require' : '', (parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''];\n\t\treturn chunks.filter(filterEmptyLine).join('\\n');\n\t}\n\n\tfunction generateDefines(defines) {\n\t\tconst chunks = [];\n\n\t\tfor (const name in defines) {\n\t\t\tconst value = defines[name];\n\t\t\tif (value === false) continue;\n\t\t\tchunks.push('#define ' + name + ' ' + value);\n\t\t}\n\n\t\treturn chunks.join('\\n');\n\t}\n\n\tfunction fetchAttributeLocations(gl, program) {\n\t\tconst attributes = {};\n\t\tconst n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tconst info = gl.getActiveAttrib(program, i);\n\t\t\tconst name = info.name;\n\t\t\tlet locationSize = 1;\n\t\t\tif (info.type === gl.FLOAT_MAT2) locationSize = 2;\n\t\t\tif (info.type === gl.FLOAT_MAT3) locationSize = 3;\n\t\t\tif (info.type === gl.FLOAT_MAT4) locationSize = 4; // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\t\tattributes[name] = {\n\t\t\t\ttype: info.type,\n\t\t\t\tlocation: gl.getAttribLocation(program, name),\n\t\t\t\tlocationSize: locationSize\n\t\t\t};\n\t\t}\n\n\t\treturn attributes;\n\t}\n\n\tfunction filterEmptyLine(string) {\n\t\treturn string !== '';\n\t}\n\n\tfunction replaceLightNums(string, parameters) {\n\t\treturn string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);\n\t}\n\n\tfunction replaceClippingPlaneNums(string, parameters) {\n\t\treturn string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);\n\t} // Resolve Includes\n\n\n\tconst includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\n\tfunction resolveIncludes(string) {\n\t\treturn string.replace(includePattern, includeReplacer);\n\t}\n\n\tfunction includeReplacer(match, include) {\n\t\tconst string = ShaderChunk[include];\n\n\t\tif (string === undefined) {\n\t\t\tthrow new Error('Can not resolve #include <' + include + '>');\n\t\t}\n\n\t\treturn resolveIncludes(string);\n\t} // Unroll Loops\n\n\n\tconst deprecatedUnrollLoopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\tconst unrollLoopPattern = /#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;\n\n\tfunction unrollLoops(string) {\n\t\treturn string.replace(unrollLoopPattern, loopReplacer).replace(deprecatedUnrollLoopPattern, deprecatedLoopReplacer);\n\t}\n\n\tfunction deprecatedLoopReplacer(match, start, end, snippet) {\n\t\tconsole.warn('WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.');\n\t\treturn loopReplacer(match, start, end, snippet);\n\t}\n\n\tfunction loopReplacer(match, start, end, snippet) {\n\t\tlet string = '';\n\n\t\tfor (let i = parseInt(start); i < parseInt(end); i++) {\n\t\t\tstring += snippet.replace(/\\[\\s*i\\s*\\]/g, '[ ' + i + ' ]').replace(/UNROLLED_LOOP_INDEX/g, i);\n\t\t}\n\n\t\treturn string;\n\t} //\n\n\n\tfunction generatePrecision(parameters) {\n\t\tlet precisionstring = 'precision ' + parameters.precision + ' float;\\nprecision ' + parameters.precision + ' int;';\n\n\t\tif (parameters.precision === 'highp') {\n\t\t\tprecisionstring += '\\n#define HIGH_PRECISION';\n\t\t} else if (parameters.precision === 'mediump') {\n\t\t\tprecisionstring += '\\n#define MEDIUM_PRECISION';\n\t\t} else if (parameters.precision === 'lowp') {\n\t\t\tprecisionstring += '\\n#define LOW_PRECISION';\n\t\t}\n\n\t\treturn precisionstring;\n\t}\n\n\tfunction generateShadowMapTypeDefine(parameters) {\n\t\tlet shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif (parameters.shadowMapType === PCFShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\t\t} else if (parameters.shadowMapType === PCFSoftShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\t\t} else if (parameters.shadowMapType === VSMShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\t\t}\n\n\t\treturn shadowMapTypeDefine;\n\t}\n\n\tfunction generateEnvMapTypeDefine(parameters) {\n\t\tlet envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.envMapMode) {\n\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapTypeDefine;\n\t}\n\n\tfunction generateEnvMapModeDefine(parameters) {\n\t\tlet envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.envMapMode) {\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapModeDefine;\n\t}\n\n\tfunction generateEnvMapBlendingDefine(parameters) {\n\t\tlet envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.combine) {\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapBlendingDefine;\n\t}\n\n\tfunction WebGLProgram(renderer, cacheKey, parameters, bindingStates) {\n\t\t// TODO Send this event to Three.js DevTools\n\t\t// console.log( 'WebGLProgram', cacheKey );\n\t\tconst gl = renderer.getContext();\n\t\tconst defines = parameters.defines;\n\t\tlet vertexShader = parameters.vertexShader;\n\t\tlet fragmentShader = parameters.fragmentShader;\n\t\tconst shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);\n\t\tconst envMapTypeDefine = generateEnvMapTypeDefine(parameters);\n\t\tconst envMapModeDefine = generateEnvMapModeDefine(parameters);\n\t\tconst envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);\n\t\tconst gammaFactorDefine = renderer.gammaFactor > 0 ? renderer.gammaFactor : 1.0;\n\t\tconst customExtensions = parameters.isWebGL2 ? '' : generateExtensions(parameters);\n\t\tconst customDefines = generateDefines(defines);\n\t\tconst program = gl.createProgram();\n\t\tlet prefixVertex, prefixFragment;\n\t\tlet versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\\n' : '';\n\n\t\tif (parameters.isRawShaderMaterial) {\n\t\t\tprefixVertex = [customDefines].filter(filterEmptyLine).join('\\n');\n\n\t\t\tif (prefixVertex.length > 0) {\n\t\t\t\tprefixVertex += '\\n';\n\t\t\t}\n\n\t\t\tprefixFragment = [customExtensions, customDefines].filter(filterEmptyLine).join('\\n');\n\n\t\t\tif (prefixFragment.length > 0) {\n\t\t\t\tprefixFragment += '\\n';\n\t\t\t}\n\t\t} else {\n\t\t\tprefixVertex = [generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.instancing ? '#define USE_INSTANCING' : '', parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '', parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '', '#define GAMMA_FACTOR ' + gammaFactorDefine, '#define MAX_BONES ' + parameters.maxBones, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '', parameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.transmission ? '#define USE_TRANSMISSION' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '', parameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '', parameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors ? '#define USE_COLOR' : '', parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.skinning ? '#define USE_SKINNING' : '', parameters.useVertexTexture ? '#define BONE_TEXTURE' : '', parameters.morphTargets ? '#define USE_MORPHTARGETS' : '', parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '', parameters.morphTargets && parameters.isWebGL2 ? '#define MORPHTARGETS_TEXTURE' : '', parameters.morphTargets && parameters.isWebGL2 ? '#define MORPHTARGETS_COUNT ' + parameters.morphTargetsCount : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', 'uniform mat4 modelMatrix;', 'uniform mat4 modelViewMatrix;', 'uniform mat4 projectionMatrix;', 'uniform mat4 viewMatrix;', 'uniform mat3 normalMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', '#ifdef USE_INSTANCING', '\tattribute mat4 instanceMatrix;', '#endif', '#ifdef USE_INSTANCING_COLOR', '\tattribute vec3 instanceColor;', '#endif', 'attribute vec3 position;', 'attribute vec3 normal;', 'attribute vec2 uv;', '#ifdef USE_TANGENT', '\tattribute vec4 tangent;', '#endif', '#if defined( USE_COLOR_ALPHA )', '\tattribute vec4 color;', '#elif defined( USE_COLOR )', '\tattribute vec3 color;', '#endif', '#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )', '\tattribute vec3 morphTarget0;', '\tattribute vec3 morphTarget1;', '\tattribute vec3 morphTarget2;', '\tattribute vec3 morphTarget3;', '\t#ifdef USE_MORPHNORMALS', '\t\tattribute vec3 morphNormal0;', '\t\tattribute vec3 morphNormal1;', '\t\tattribute vec3 morphNormal2;', '\t\tattribute vec3 morphNormal3;', '\t#else', '\t\tattribute vec3 morphTarget4;', '\t\tattribute vec3 morphTarget5;', '\t\tattribute vec3 morphTarget6;', '\t\tattribute vec3 morphTarget7;', '\t#endif', '#endif', '#ifdef USE_SKINNING', '\tattribute vec4 skinIndex;', '\tattribute vec4 skinWeight;', '#endif', '\\n'].filter(filterEmptyLine).join('\\n');\n\t\t\tprefixFragment = [customExtensions, generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, '#define GAMMA_FACTOR ' + gammaFactorDefine, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.matcap ? '#define USE_MATCAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapTypeDefine : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.envMap ? '#define ' + envMapBlendingDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoat ? '#define USE_CLEARCOAT' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '', parameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.alphaTest ? '#define USE_ALPHATEST' : '', parameters.sheen ? '#define USE_SHEEN' : '', parameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '', parameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '', parameters.transmission ? '#define USE_TRANSMISSION' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '', parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.gradientMap ? '#define USE_GRADIENTMAP' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '', parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? '#define TEXTURE_LOD_EXT' : '', 'uniform mat4 viewMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', parameters.toneMapping !== NoToneMapping ? '#define TONE_MAPPING' : '', parameters.toneMapping !== NoToneMapping ? ShaderChunk['tonemapping_pars_fragment'] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\tparameters.toneMapping !== NoToneMapping ? getToneMappingFunction('toneMapping', parameters.toneMapping) : '', parameters.dithering ? '#define DITHERING' : '', parameters.format === RGBFormat ? '#define OPAQUE' : '', ShaderChunk['encodings_pars_fragment'], // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\tparameters.map ? getTexelDecodingFunction('mapTexelToLinear', parameters.mapEncoding) : '', parameters.matcap ? getTexelDecodingFunction('matcapTexelToLinear', parameters.matcapEncoding) : '', parameters.envMap ? getTexelDecodingFunction('envMapTexelToLinear', parameters.envMapEncoding) : '', parameters.emissiveMap ? getTexelDecodingFunction('emissiveMapTexelToLinear', parameters.emissiveMapEncoding) : '', parameters.specularColorMap ? getTexelDecodingFunction('specularColorMapTexelToLinear', parameters.specularColorMapEncoding) : '', parameters.sheenColorMap ? getTexelDecodingFunction('sheenColorMapTexelToLinear', parameters.sheenColorMapEncoding) : '', parameters.lightMap ? getTexelDecodingFunction('lightMapTexelToLinear', parameters.lightMapEncoding) : '', getTexelEncodingFunction('linearToOutputTexel', parameters.outputEncoding), parameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '', '\\n'].filter(filterEmptyLine).join('\\n');\n\t\t}\n\n\t\tvertexShader = resolveIncludes(vertexShader);\n\t\tvertexShader = replaceLightNums(vertexShader, parameters);\n\t\tvertexShader = replaceClippingPlaneNums(vertexShader, parameters);\n\t\tfragmentShader = resolveIncludes(fragmentShader);\n\t\tfragmentShader = replaceLightNums(fragmentShader, parameters);\n\t\tfragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);\n\t\tvertexShader = unrollLoops(vertexShader);\n\t\tfragmentShader = unrollLoops(fragmentShader);\n\n\t\tif (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {\n\t\t\t// GLSL 3.0 conversion for built-in materials and ShaderMaterial\n\t\t\tversionString = '#version 300 es\\n';\n\t\t\tprefixVertex = ['precision mediump sampler2DArray;', '#define attribute in', '#define varying out', '#define texture2D texture'].join('\\n') + '\\n' + prefixVertex;\n\t\t\tprefixFragment = ['#define varying in', parameters.glslVersion === GLSL3 ? '' : 'out highp vec4 pc_fragColor;', parameters.glslVersion === GLSL3 ? '' : '#define gl_FragColor pc_fragColor', '#define gl_FragDepthEXT gl_FragDepth', '#define texture2D texture', '#define textureCube texture', '#define texture2DProj textureProj', '#define texture2DLodEXT textureLod', '#define texture2DProjLodEXT textureProjLod', '#define textureCubeLodEXT textureLod', '#define texture2DGradEXT textureGrad', '#define texture2DProjGradEXT textureProjGrad', '#define textureCubeGradEXT textureGrad'].join('\\n') + '\\n' + prefixFragment;\n\t\t}\n\n\t\tconst vertexGlsl = versionString + prefixVertex + vertexShader;\n\t\tconst fragmentGlsl = versionString + prefixFragment + fragmentShader; // console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tconst glVertexShader = WebGLShader(gl, gl.VERTEX_SHADER, vertexGlsl);\n\t\tconst glFragmentShader = WebGLShader(gl, gl.FRAGMENT_SHADER, fragmentGlsl);\n\t\tgl.attachShader(program, glVertexShader);\n\t\tgl.attachShader(program, glFragmentShader); // Force a particular attribute to index 0.\n\n\t\tif (parameters.index0AttributeName !== undefined) {\n\t\t\tgl.bindAttribLocation(program, 0, parameters.index0AttributeName);\n\t\t} else if (parameters.morphTargets === true) {\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation(program, 0, 'position');\n\t\t}\n\n\t\tgl.linkProgram(program); // check for link errors\n\n\t\tif (renderer.debug.checkShaderErrors) {\n\t\t\tconst programLog = gl.getProgramInfoLog(program).trim();\n\t\t\tconst vertexLog = gl.getShaderInfoLog(glVertexShader).trim();\n\t\t\tconst fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();\n\t\t\tlet runnable = true;\n\t\t\tlet haveDiagnostics = true;\n\n\t\t\tif (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n\t\t\t\trunnable = false;\n\t\t\t\tconst vertexErrors = getShaderErrors(gl, glVertexShader, 'vertex');\n\t\t\t\tconst fragmentErrors = getShaderErrors(gl, glFragmentShader, 'fragment');\n\t\t\t\tconsole.error('THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' + 'VALIDATE_STATUS ' + gl.getProgramParameter(program, gl.VALIDATE_STATUS) + '\\n\\n' + 'Program Info Log: ' + programLog + '\\n' + vertexErrors + '\\n' + fragmentErrors);\n\t\t\t} else if (programLog !== '') {\n\t\t\t\tconsole.warn('THREE.WebGLProgram: Program Info Log:', programLog);\n\t\t\t} else if (vertexLog === '' || fragmentLog === '') {\n\t\t\t\thaveDiagnostics = false;\n\t\t\t}\n\n\t\t\tif (haveDiagnostics) {\n\t\t\t\tthis.diagnostics = {\n\t\t\t\t\trunnable: runnable,\n\t\t\t\t\tprogramLog: programLog,\n\t\t\t\t\tvertexShader: {\n\t\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\t\tprefix: prefixVertex\n\t\t\t\t\t},\n\t\t\t\t\tfragmentShader: {\n\t\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\t\tprefix: prefixFragment\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t} // Clean up\n\t\t// Crashes in iOS9 and iOS10. #18402\n\t\t// gl.detachShader( program, glVertexShader );\n\t\t// gl.detachShader( program, glFragmentShader );\n\n\n\t\tgl.deleteShader(glVertexShader);\n\t\tgl.deleteShader(glFragmentShader); // set up caching for uniform locations\n\n\t\tlet cachedUniforms;\n\n\t\tthis.getUniforms = function () {\n\t\t\tif (cachedUniforms === undefined) {\n\t\t\t\tcachedUniforms = new WebGLUniforms(gl, program);\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\t\t}; // set up caching for attribute locations\n\n\n\t\tlet cachedAttributes;\n\n\t\tthis.getAttributes = function () {\n\t\t\tif (cachedAttributes === undefined) {\n\t\t\t\tcachedAttributes = fetchAttributeLocations(gl, program);\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\t\t}; // free resource\n\n\n\t\tthis.destroy = function () {\n\t\t\tbindingStates.releaseStatesOfProgram(this);\n\t\t\tgl.deleteProgram(program);\n\t\t\tthis.program = undefined;\n\t\t}; //\n\n\n\t\tthis.name = parameters.shaderName;\n\t\tthis.id = programIdCount++;\n\t\tthis.cacheKey = cacheKey;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\t\treturn this;\n\t}\n\n\tfunction WebGLPrograms(renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping) {\n\t\tconst programs = [];\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tconst logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\t\tconst floatVertexTextures = capabilities.floatVertexTextures;\n\t\tconst maxVertexUniforms = capabilities.maxVertexUniforms;\n\t\tconst vertexTextures = capabilities.vertexTextures;\n\t\tlet precision = capabilities.precision;\n\t\tconst shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshToonMaterial: 'toon',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tMeshMatcapMaterial: 'matcap',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points',\n\t\t\tShadowMaterial: 'shadow',\n\t\t\tSpriteMaterial: 'sprite'\n\t\t};\n\t\tconst parameterNames = ['precision', 'isWebGL2', 'supportsVertexTextures', 'outputEncoding', 'instancing', 'instancingColor', 'map', 'mapEncoding', 'matcap', 'matcapEncoding', 'envMap', 'envMapMode', 'envMapEncoding', 'envMapCubeUV', 'lightMap', 'lightMapEncoding', 'aoMap', 'emissiveMap', 'emissiveMapEncoding', 'bumpMap', 'normalMap', 'objectSpaceNormalMap', 'tangentSpaceNormalMap', 'clearcoat', 'clearcoatMap', 'clearcoatRoughnessMap', 'clearcoatNormalMap', 'displacementMap', 'specularMap',, 'roughnessMap', 'metalnessMap', 'gradientMap', 'alphaMap', 'alphaTest', 'combine', 'vertexColors', 'vertexAlphas', 'vertexTangents', 'vertexUvs', 'uvsVertexOnly', 'fog', 'useFog', 'fogExp2', 'flatShading', 'sizeAttenuation', 'logarithmicDepthBuffer', 'skinning', 'maxBones', 'useVertexTexture', 'morphTargets', 'morphNormals', 'morphTargetsCount', 'premultipliedAlpha', 'numDirLights', 'numPointLights', 'numSpotLights', 'numHemiLights', 'numRectAreaLights', 'numDirLightShadows', 'numPointLightShadows', 'numSpotLightShadows', 'shadowMapEnabled', 'shadowMapType', 'toneMapping', 'physicallyCorrectLights', 'doubleSided', 'flipSided', 'numClippingPlanes', 'numClipIntersection', 'depthPacking', 'dithering', 'format', 'specularIntensityMap', 'specularColorMap', 'specularColorMapEncoding', 'transmission', 'transmissionMap', 'thicknessMap', 'sheen', 'sheenColorMap', 'sheenColorMapEncoding', 'sheenRoughnessMap'];\n\n\t\tfunction getMaxBones(object) {\n\t\t\tconst skeleton = object.skeleton;\n\t\t\tconst bones = skeleton.bones;\n\n\t\t\tif (floatVertexTextures) {\n\t\t\t\treturn 1024;\n\t\t\t} else {\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//\t- leave some extra space for other uniforms\n\t\t\t\t//\t- limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//\t\t(up to 54 should be safe)\n\t\t\t\tconst nVertexUniforms = maxVertexUniforms;\n\t\t\t\tconst nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);\n\t\t\t\tconst maxBones = Math.min(nVertexMatrices, bones.length);\n\n\t\t\t\tif (maxBones < bones.length) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.');\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn maxBones;\n\t\t\t}\n\t\t}\n\n\t\tfunction getTextureEncodingFromMap(map) {\n\t\t\tlet encoding;\n\n\t\t\tif (map && map.isTexture) {\n\t\t\t\tencoding = map.encoding;\n\t\t\t} else if (map && map.isWebGLRenderTarget) {\n\t\t\t\tconsole.warn('THREE.WebGLPrograms.getTextureEncodingFromMap: don\\'t use render targets as textures. Use their .texture property instead.');\n\t\t\t\tencoding = map.texture.encoding;\n\t\t\t} else {\n\t\t\t\tencoding = LinearEncoding;\n\t\t\t}\n\n\t\t\tif (isWebGL2 && map && map.isTexture && map.format === RGBAFormat && map.type === UnsignedByteType && map.encoding === sRGBEncoding) {\n\t\t\t\tencoding = LinearEncoding; // disable inline decode for sRGB textures in WebGL 2\n\t\t\t}\n\n\t\t\treturn encoding;\n\t\t}\n\n\t\tfunction getParameters(material, lights, shadows, scene, object) {\n\t\t\tconst fog = scene.fog;\n\t\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tconst envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);\n\t\t\tconst shaderID = shaderIDs[material.type]; // heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\n\t\t\tconst maxBones = object.isSkinnedMesh ? getMaxBones(object) : 0;\n\n\t\t\tif (material.precision !== null) {\n\t\t\t\tprecision = capabilities.getMaxPrecision(material.precision);\n\n\t\t\t\tif (precision !== material.precision) {\n\t\t\t\t\tconsole.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet vertexShader, fragmentShader;\n\n\t\t\tif (shaderID) {\n\t\t\t\tconst shader = ShaderLib[shaderID];\n\t\t\t\tvertexShader = shader.vertexShader;\n\t\t\t\tfragmentShader = shader.fragmentShader;\n\t\t\t} else {\n\t\t\t\tvertexShader = material.vertexShader;\n\t\t\t\tfragmentShader = material.fragmentShader;\n\t\t\t}\n\n\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\t\tconst useAlphaTest = material.alphaTest > 0;\n\t\t\tconst useClearcoat = material.clearcoat > 0;\n\t\t\tconst parameters = {\n\t\t\t\tisWebGL2: isWebGL2,\n\t\t\t\tshaderID: shaderID,\n\t\t\t\tshaderName: material.type,\n\t\t\t\tvertexShader: vertexShader,\n\t\t\t\tfragmentShader: fragmentShader,\n\t\t\t\tdefines: material.defines,\n\t\t\t\tisRawShaderMaterial: material.isRawShaderMaterial === true,\n\t\t\t\tglslVersion: material.glslVersion,\n\t\t\t\tprecision: precision,\n\t\t\t\tinstancing: object.isInstancedMesh === true,\n\t\t\t\tinstancingColor: object.isInstancedMesh === true && object.instanceColor !== null,\n\t\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\t\toutputEncoding: currentRenderTarget !== null ? getTextureEncodingFromMap(currentRenderTarget.texture) : renderer.outputEncoding,\n\t\t\t\tmap: !!material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap(material.map),\n\t\t\t\tmatcap: !!material.matcap,\n\t\t\t\tmatcapEncoding: getTextureEncodingFromMap(material.matcap),\n\t\t\t\tenvMap: !!envMap,\n\t\t\t\tenvMapMode: envMap && envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap(envMap),\n\t\t\t\tenvMapCubeUV: !!envMap && (envMap.mapping === CubeUVReflectionMapping || envMap.mapping === CubeUVRefractionMapping),\n\t\t\t\tlightMap: !!material.lightMap,\n\t\t\t\tlightMapEncoding: getTextureEncodingFromMap(material.lightMap),\n\t\t\t\taoMap: !!material.aoMap,\n\t\t\t\temissiveMap: !!material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap),\n\t\t\t\tbumpMap: !!material.bumpMap,\n\t\t\t\tnormalMap: !!material.normalMap,\n\t\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\t\t\t\tclearcoat: useClearcoat,\n\t\t\t\tclearcoatMap: useClearcoat && !!material.clearcoatMap,\n\t\t\t\tclearcoatRoughnessMap: useClearcoat && !!material.clearcoatRoughnessMap,\n\t\t\t\tclearcoatNormalMap: useClearcoat && !!material.clearcoatNormalMap,\n\t\t\t\tdisplacementMap: !!material.displacementMap,\n\t\t\t\troughnessMap: !!material.roughnessMap,\n\t\t\t\tmetalnessMap: !!material.metalnessMap,\n\t\t\t\tspecularMap: !!material.specularMap,\n\t\t\t\tspecularIntensityMap: !!material.specularIntensityMap,\n\t\t\t\tspecularColorMap: !!material.specularColorMap,\n\t\t\t\tspecularColorMapEncoding: getTextureEncodingFromMap(material.specularColorMap),\n\t\t\t\talphaMap: !!material.alphaMap,\n\t\t\t\talphaTest: useAlphaTest,\n\t\t\t\tgradientMap: !!material.gradientMap,\n\t\t\t\tsheen: material.sheen > 0,\n\t\t\t\tsheenColorMap: !!material.sheenColorMap,\n\t\t\t\tsheenColorMapEncoding: getTextureEncodingFromMap(material.sheenColorMap),\n\t\t\t\tsheenRoughnessMap: !!material.sheenRoughnessMap,\n\t\t\t\ttransmission: material.transmission > 0,\n\t\t\t\ttransmissionMap: !!material.transmissionMap,\n\t\t\t\tthicknessMap: !!material.thicknessMap,\n\t\t\t\tcombine: material.combine,\n\t\t\t\tvertexTangents: !!material.normalMap && !!object.geometry && !!object.geometry.attributes.tangent,\n\t\t\t\tvertexColors: material.vertexColors,\n\t\t\t\tvertexAlphas: material.vertexColors === true && !!object.geometry && !!object.geometry.attributes.color && object.geometry.attributes.color.itemSize === 4,\n\t\t\t\tvertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatMap || !!material.clearcoatRoughnessMap || !!material.clearcoatNormalMap || !!material.displacementMap || !!material.transmissionMap || !!material.thicknessMap || !!material.specularIntensityMap || !!material.specularColorMap || !!material.sheenColorMap || material.sheenRoughnessMap,\n\t\t\t\tuvsVertexOnly: !(!!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap || material.transmission > 0 || !!material.transmissionMap || !!material.thicknessMap || !!material.specularIntensityMap || !!material.specularColorMap || !!material.sheen > 0 || !!material.sheenColorMap || !!material.sheenRoughnessMap) && !!material.displacementMap,\n\t\t\t\tfog: !!fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp2: fog && fog.isFogExp2,\n\t\t\t\tflatShading: !!material.flatShading,\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\t\t\tskinning: object.isSkinnedMesh === true && maxBones > 0,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: floatVertexTextures,\n\t\t\t\tmorphTargets: !!object.geometry && !!object.geometry.morphAttributes.position,\n\t\t\t\tmorphNormals: !!object.geometry && !!object.geometry.morphAttributes.normal,\n\t\t\t\tmorphTargetsCount: !!object.geometry && !!object.geometry.morphAttributes.position ? object.geometry.morphAttributes.position.length : 0,\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\t\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\t\t\t\tnumClippingPlanes: clipping.numPlanes,\n\t\t\t\tnumClipIntersection: clipping.numIntersection,\n\t\t\t\tformat: material.format,\n\t\t\t\tdithering: material.dithering,\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\t\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\t\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\t\tflipSided: material.side === BackSide,\n\t\t\t\tdepthPacking: material.depthPacking !== undefined ? material.depthPacking : false,\n\t\t\t\tindex0AttributeName: material.index0AttributeName,\n\t\t\t\textensionDerivatives: material.extensions && material.extensions.derivatives,\n\t\t\t\textensionFragDepth: material.extensions && material.extensions.fragDepth,\n\t\t\t\textensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n\t\t\t\textensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n\t\t\t\trendererExtensionFragDepth: isWebGL2 || extensions.has('EXT_frag_depth'),\n\t\t\t\trendererExtensionDrawBuffers: isWebGL2 || extensions.has('WEBGL_draw_buffers'),\n\t\t\t\trendererExtensionShaderTextureLod: isWebGL2 || extensions.has('EXT_shader_texture_lod'),\n\t\t\t\tcustomProgramCacheKey: material.customProgramCacheKey()\n\t\t\t};\n\t\t\treturn parameters;\n\t\t}\n\n\t\tfunction getProgramCacheKey(parameters) {\n\t\t\tconst array = [];\n\n\t\t\tif (parameters.shaderID) {\n\t\t\t\tarray.push(parameters.shaderID);\n\t\t\t} else {\n\t\t\t\tarray.push(hashString(parameters.fragmentShader));\n\t\t\t\tarray.push(hashString(parameters.vertexShader));\n\t\t\t}\n\n\t\t\tif (parameters.defines !== undefined) {\n\t\t\t\tfor (const name in parameters.defines) {\n\t\t\t\t\tarray.push(name);\n\t\t\t\t\tarray.push(parameters.defines[name]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (parameters.isRawShaderMaterial === false) {\n\t\t\t\tfor (let i = 0; i < parameterNames.length; i++) {\n\t\t\t\t\tarray.push(parameters[parameterNames[i]]);\n\t\t\t\t}\n\n\t\t\t\tarray.push(renderer.outputEncoding);\n\t\t\t\tarray.push(renderer.gammaFactor);\n\t\t\t}\n\n\t\t\tarray.push(parameters.customProgramCacheKey);\n\t\t\treturn array.join();\n\t\t}\n\n\t\tfunction getUniforms(material) {\n\t\t\tconst shaderID = shaderIDs[material.type];\n\t\t\tlet uniforms;\n\n\t\t\tif (shaderID) {\n\t\t\t\tconst shader = ShaderLib[shaderID];\n\t\t\t\tuniforms = UniformsUtils.clone(shader.uniforms);\n\t\t\t} else {\n\t\t\t\tuniforms = material.uniforms;\n\t\t\t}\n\n\t\t\treturn uniforms;\n\t\t}\n\n\t\tfunction acquireProgram(parameters, cacheKey) {\n\t\t\tlet program; // Check if code has been already compiled\n\n\t\t\tfor (let p = 0, pl = programs.length; p < pl; p++) {\n\t\t\t\tconst preexistingProgram = programs[p];\n\n\t\t\t\tif (preexistingProgram.cacheKey === cacheKey) {\n\t\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t\t++program.usedTimes;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (program === undefined) {\n\t\t\t\tprogram = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);\n\t\t\t\tprograms.push(program);\n\t\t\t}\n\n\t\t\treturn program;\n\t\t}\n\n\t\tfunction releaseProgram(program) {\n\t\t\tif (--program.usedTimes === 0) {\n\t\t\t\t// Remove from unordered set\n\t\t\t\tconst i = programs.indexOf(program);\n\t\t\t\tprograms[i] = programs[programs.length - 1];\n\t\t\t\tprograms.pop(); // Free WebGL resources\n\n\t\t\t\tprogram.destroy();\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tgetParameters: getParameters,\n\t\t\tgetProgramCacheKey: getProgramCacheKey,\n\t\t\tgetUniforms: getUniforms,\n\t\t\tacquireProgram: acquireProgram,\n\t\t\treleaseProgram: releaseProgram,\n\t\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\t\tprograms: programs\n\t\t};\n\t}\n\n\tfunction WebGLProperties() {\n\t\tlet properties = new WeakMap();\n\n\t\tfunction get(object) {\n\t\t\tlet map = properties.get(object);\n\n\t\t\tif (map === undefined) {\n\t\t\t\tmap = {};\n\t\t\t\tproperties.set(object, map);\n\t\t\t}\n\n\t\t\treturn map;\n\t\t}\n\n\t\tfunction remove(object) {\n\t\t\tproperties.delete(object);\n\t\t}\n\n\t\tfunction update(object, key, value) {\n\t\t\tproperties.get(object)[key] = value;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tproperties = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction painterSortStable(a, b) {\n\t\tif (a.groupOrder !== b.groupOrder) {\n\t\t\treturn a.groupOrder - b.groupOrder;\n\t\t} else if (a.renderOrder !== b.renderOrder) {\n\t\t\treturn a.renderOrder - b.renderOrder;\n\t\t} else if (a.program !== b.program) {\n\t\t\treturn a.program.id - b.program.id;\n\t\t} else if (a.material.id !== b.material.id) {\n\t\t\treturn a.material.id - b.material.id;\n\t\t} else if (a.z !== b.z) {\n\t\t\treturn a.z - b.z;\n\t\t} else {\n\t\t\treturn a.id - b.id;\n\t\t}\n\t}\n\n\tfunction reversePainterSortStable(a, b) {\n\t\tif (a.groupOrder !== b.groupOrder) {\n\t\t\treturn a.groupOrder - b.groupOrder;\n\t\t} else if (a.renderOrder !== b.renderOrder) {\n\t\t\treturn a.renderOrder - b.renderOrder;\n\t\t} else if (a.z !== b.z) {\n\t\t\treturn b.z - a.z;\n\t\t} else {\n\t\t\treturn a.id - b.id;\n\t\t}\n\t}\n\n\tfunction WebGLRenderList(properties) {\n\t\tconst renderItems = [];\n\t\tlet renderItemsIndex = 0;\n\t\tconst opaque = [];\n\t\tconst transmissive = [];\n\t\tconst transparent = [];\n\t\tconst defaultProgram = {\n\t\t\tid: -1\n\t\t};\n\n\t\tfunction init() {\n\t\t\trenderItemsIndex = 0;\n\t\t\topaque.length = 0;\n\t\t\ttransmissive.length = 0;\n\t\t\ttransparent.length = 0;\n\t\t}\n\n\t\tfunction getNextRenderItem(object, geometry, material, groupOrder, z, group) {\n\t\t\tlet renderItem = renderItems[renderItemsIndex];\n\t\t\tconst materialProperties = properties.get(material);\n\n\t\t\tif (renderItem === undefined) {\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tprogram: materialProperties.program || defaultProgram,\n\t\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\t\tz: z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\t\t\t\trenderItems[renderItemsIndex] = renderItem;\n\t\t\t} else {\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.program = materialProperties.program || defaultProgram;\n\t\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\t\trenderItem.z = z;\n\t\t\t\trenderItem.group = group;\n\t\t\t}\n\n\t\t\trenderItemsIndex++;\n\t\t\treturn renderItem;\n\t\t}\n\n\t\tfunction push(object, geometry, material, groupOrder, z, group) {\n\t\t\tconst renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\n\n\t\t\tif (material.transmission > 0.0) {\n\t\t\t\ttransmissive.push(renderItem);\n\t\t\t} else if (material.transparent === true) {\n\t\t\t\ttransparent.push(renderItem);\n\t\t\t} else {\n\t\t\t\topaque.push(renderItem);\n\t\t\t}\n\t\t}\n\n\t\tfunction unshift(object, geometry, material, groupOrder, z, group) {\n\t\t\tconst renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\n\n\t\t\tif (material.transmission > 0.0) {\n\t\t\t\ttransmissive.unshift(renderItem);\n\t\t\t} else if (material.transparent === true) {\n\t\t\t\ttransparent.unshift(renderItem);\n\t\t\t} else {\n\t\t\t\topaque.unshift(renderItem);\n\t\t\t}\n\t\t}\n\n\t\tfunction sort(customOpaqueSort, customTransparentSort) {\n\t\t\tif (opaque.length > 1) opaque.sort(customOpaqueSort || painterSortStable);\n\t\t\tif (transmissive.length > 1) transmissive.sort(customTransparentSort || reversePainterSortStable);\n\t\t\tif (transparent.length > 1) transparent.sort(customTransparentSort || reversePainterSortStable);\n\t\t}\n\n\t\tfunction finish() {\n\t\t\t// Clear references from inactive renderItems in the list\n\t\t\tfor (let i = renderItemsIndex, il = renderItems.length; i < il; i++) {\n\t\t\t\tconst renderItem = renderItems[i];\n\t\t\t\tif (renderItem.id === null) break;\n\t\t\t\trenderItem.id = null;\n\t\t\t\trenderItem.object = null;\n\t\t\t\trenderItem.geometry = null;\n\t\t\t\trenderItem.material = null;\n\t\t\t\trenderItem.program = null;\n\t\t\t\trenderItem.group = null;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\topaque: opaque,\n\t\t\ttransmissive: transmissive,\n\t\t\ttransparent: transparent,\n\t\t\tinit: init,\n\t\t\tpush: push,\n\t\t\tunshift: unshift,\n\t\t\tfinish: finish,\n\t\t\tsort: sort\n\t\t};\n\t}\n\n\tfunction WebGLRenderLists(properties) {\n\t\tlet lists = new WeakMap();\n\n\t\tfunction get(scene, renderCallDepth) {\n\t\t\tlet list;\n\n\t\t\tif (lists.has(scene) === false) {\n\t\t\t\tlist = new WebGLRenderList(properties);\n\t\t\t\tlists.set(scene, [list]);\n\t\t\t} else {\n\t\t\t\tif (renderCallDepth >= lists.get(scene).length) {\n\t\t\t\t\tlist = new WebGLRenderList(properties);\n\t\t\t\t\tlists.get(scene).push(list);\n\t\t\t\t} else {\n\t\t\t\t\tlist = lists.get(scene)[renderCallDepth];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn list;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tlists = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction UniformsCache() {\n\t\tconst lights = {};\n\t\treturn {\n\t\t\tget: function (light) {\n\t\t\t\tif (lights[light.id] !== undefined) {\n\t\t\t\t\treturn lights[light.id];\n\t\t\t\t}\n\n\t\t\t\tlet uniforms;\n\n\t\t\t\tswitch (light.type) {\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlights[light.id] = uniforms;\n\t\t\t\treturn uniforms;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction ShadowUniformsCache() {\n\t\tconst lights = {};\n\t\treturn {\n\t\t\tget: function (light) {\n\t\t\t\tif (lights[light.id] !== undefined) {\n\t\t\t\t\treturn lights[light.id];\n\t\t\t\t}\n\n\t\t\t\tlet uniforms;\n\n\t\t\t\tswitch (light.type) {\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\t\t\t\t}\n\n\t\t\t\tlights[light.id] = uniforms;\n\t\t\t\treturn uniforms;\n\t\t\t}\n\t\t};\n\t}\n\n\tlet nextVersion = 0;\n\n\tfunction shadowCastingLightsFirst(lightA, lightB) {\n\t\treturn (lightB.castShadow ? 1 : 0) - (lightA.castShadow ? 1 : 0);\n\t}\n\n\tfunction WebGLLights(extensions, capabilities) {\n\t\tconst cache = new UniformsCache();\n\t\tconst shadowCache = ShadowUniformsCache();\n\t\tconst state = {\n\t\t\tversion: 0,\n\t\t\thash: {\n\t\t\t\tdirectionalLength: -1,\n\t\t\t\tpointLength: -1,\n\t\t\t\tspotLength: -1,\n\t\t\t\trectAreaLength: -1,\n\t\t\t\themiLength: -1,\n\t\t\t\tnumDirectionalShadows: -1,\n\t\t\t\tnumPointShadows: -1,\n\t\t\t\tnumSpotShadows: -1\n\t\t\t},\n\t\t\tambient: [0, 0, 0],\n\t\t\tprobe: [],\n\t\t\tdirectional: [],\n\t\t\tdirectionalShadow: [],\n\t\t\tdirectionalShadowMap: [],\n\t\t\tdirectionalShadowMatrix: [],\n\t\t\tspot: [],\n\t\t\tspotShadow: [],\n\t\t\tspotShadowMap: [],\n\t\t\tspotShadowMatrix: [],\n\t\t\trectArea: [],\n\t\t\trectAreaLTC1: null,\n\t\t\trectAreaLTC2: null,\n\t\t\tpoint: [],\n\t\t\tpointShadow: [],\n\t\t\tpointShadowMap: [],\n\t\t\tpointShadowMatrix: [],\n\t\t\themi: []\n\t\t};\n\n\t\tfor (let i = 0; i < 9; i++) state.probe.push(new Vector3());\n\n\t\tconst vector3 = new Vector3();\n\t\tconst matrix4 = new Matrix4();\n\t\tconst matrix42 = new Matrix4();\n\n\t\tfunction setup(lights, physicallyCorrectLights) {\n\t\t\tlet r = 0,\n\t\t\t\t\tg = 0,\n\t\t\t\t\tb = 0;\n\n\t\t\tfor (let i = 0; i < 9; i++) state.probe[i].set(0, 0, 0);\n\n\t\t\tlet directionalLength = 0;\n\t\t\tlet pointLength = 0;\n\t\t\tlet spotLength = 0;\n\t\t\tlet rectAreaLength = 0;\n\t\t\tlet hemiLength = 0;\n\t\t\tlet numDirectionalShadows = 0;\n\t\t\tlet numPointShadows = 0;\n\t\t\tlet numSpotShadows = 0;\n\t\t\tlights.sort(shadowCastingLightsFirst); // artist-friendly light intensity scaling factor\n\n\t\t\tconst scaleFactor = physicallyCorrectLights !== true ? Math.PI : 1;\n\n\t\t\tfor (let i = 0, l = lights.length; i < l; i++) {\n\t\t\t\tconst light = lights[i];\n\t\t\t\tconst color = light.color;\n\t\t\t\tconst intensity = light.intensity;\n\t\t\t\tconst distance = light.distance;\n\t\t\t\tconst shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;\n\n\t\t\t\tif (light.isAmbientLight) {\n\t\t\t\t\tr += color.r * intensity * scaleFactor;\n\t\t\t\t\tg += color.g * intensity * scaleFactor;\n\t\t\t\t\tb += color.b * intensity * scaleFactor;\n\t\t\t\t} else if (light.isLightProbe) {\n\t\t\t\t\tfor (let j = 0; j < 9; j++) {\n\t\t\t\t\t\tstate.probe[j].addScaledVector(light.sh.coefficients[j], intensity);\n\t\t\t\t\t}\n\t\t\t\t} else if (light.isDirectionalLight) {\n\t\t\t\t\tconst uniforms = cache.get(light);\n\t\t\t\t\tuniforms.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tconst shadow = light.shadow;\n\t\t\t\t\t\tconst shadowUniforms = shadowCache.get(light);\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tstate.directionalShadow[directionalLength] = shadowUniforms;\n\t\t\t\t\t\tstate.directionalShadowMap[directionalLength] = shadowMap;\n\t\t\t\t\t\tstate.directionalShadowMatrix[directionalLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumDirectionalShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.directional[directionalLength] = uniforms;\n\t\t\t\t\tdirectionalLength++;\n\t\t\t\t} else if (light.isSpotLight) {\n\t\t\t\t\tconst uniforms = cache.get(light);\n\t\t\t\t\tuniforms.position.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.color.copy(color).multiplyScalar(intensity * scaleFactor);\n\t\t\t\t\tuniforms.distance = distance;\n\t\t\t\t\tuniforms.coneCos = Math.cos(light.angle);\n\t\t\t\t\tuniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));\n\t\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tconst shadow = light.shadow;\n\t\t\t\t\t\tconst shadowUniforms = shadowCache.get(light);\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tstate.spotShadow[spotLength] = shadowUniforms;\n\t\t\t\t\t\tstate.spotShadowMap[spotLength] = shadowMap;\n\t\t\t\t\t\tstate.spotShadowMatrix[spotLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumSpotShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.spot[spotLength] = uniforms;\n\t\t\t\t\tspotLength++;\n\t\t\t\t} else if (light.isRectAreaLight) {\n\t\t\t\t\tconst uniforms = cache.get(light); // (a) intensity is the total visible light emitted\n\t\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\t\t\t\t\t// (b) intensity is the brightness of the light\n\n\t\t\t\t\tuniforms.color.copy(color).multiplyScalar(intensity);\n\t\t\t\t\tuniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n\t\t\t\t\tuniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);\n\t\t\t\t\tstate.rectArea[rectAreaLength] = uniforms;\n\t\t\t\t\trectAreaLength++;\n\t\t\t\t} else if (light.isPointLight) {\n\t\t\t\t\tconst uniforms = cache.get(light);\n\t\t\t\t\tuniforms.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);\n\t\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tconst shadow = light.shadow;\n\t\t\t\t\t\tconst shadowUniforms = shadowCache.get(light);\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tshadowUniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\t\tshadowUniforms.shadowCameraFar = shadow.camera.far;\n\t\t\t\t\t\tstate.pointShadow[pointLength] = shadowUniforms;\n\t\t\t\t\t\tstate.pointShadowMap[pointLength] = shadowMap;\n\t\t\t\t\t\tstate.pointShadowMatrix[pointLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumPointShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.point[pointLength] = uniforms;\n\t\t\t\t\tpointLength++;\n\t\t\t\t} else if (light.isHemisphereLight) {\n\t\t\t\t\tconst uniforms = cache.get(light);\n\t\t\t\t\tuniforms.skyColor.copy(light.color).multiplyScalar(intensity * scaleFactor);\n\t\t\t\t\tuniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity * scaleFactor);\n\t\t\t\t\tstate.hemi[hemiLength] = uniforms;\n\t\t\t\t\themiLength++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (rectAreaLength > 0) {\n\t\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t\t// WebGL 2\n\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\t\t\t\t} else {\n\t\t\t\t\t// WebGL 1\n\t\t\t\t\tif (extensions.has('OES_texture_float_linear') === true) {\n\t\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\t\t\t\t\t} else if (extensions.has('OES_texture_half_float_linear') === true) {\n\t\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_HALF_1;\n\t\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_HALF_2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.ambient[0] = r;\n\t\t\tstate.ambient[1] = g;\n\t\t\tstate.ambient[2] = b;\n\t\t\tconst hash = state.hash;\n\n\t\t\tif (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows) {\n\t\t\t\tstate.directional.length = directionalLength;\n\t\t\t\tstate.spot.length = spotLength;\n\t\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\t\tstate.point.length = pointLength;\n\t\t\t\tstate.hemi.length = hemiLength;\n\t\t\t\tstate.directionalShadow.length = numDirectionalShadows;\n\t\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadow.length = numPointShadows;\n\t\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\t\tstate.spotShadow.length = numSpotShadows;\n\t\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\n\t\t\t\thash.directionalLength = directionalLength;\n\t\t\t\thash.pointLength = pointLength;\n\t\t\t\thash.spotLength = spotLength;\n\t\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\t\thash.hemiLength = hemiLength;\n\t\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\t\thash.numPointShadows = numPointShadows;\n\t\t\t\thash.numSpotShadows = numSpotShadows;\n\t\t\t\tstate.version = nextVersion++;\n\t\t\t}\n\t\t}\n\n\t\tfunction setupView(lights, camera) {\n\t\t\tlet directionalLength = 0;\n\t\t\tlet pointLength = 0;\n\t\t\tlet spotLength = 0;\n\t\t\tlet rectAreaLength = 0;\n\t\t\tlet hemiLength = 0;\n\t\t\tconst viewMatrix = camera.matrixWorldInverse;\n\n\t\t\tfor (let i = 0, l = lights.length; i < l; i++) {\n\t\t\t\tconst light = lights[i];\n\n\t\t\t\tif (light.isDirectionalLight) {\n\t\t\t\t\tconst uniforms = state.directional[directionalLength];\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tvector3.setFromMatrixPosition(light.target.matrixWorld);\n\t\t\t\t\tuniforms.direction.sub(vector3);\n\t\t\t\t\tuniforms.direction.transformDirection(viewMatrix);\n\t\t\t\t\tdirectionalLength++;\n\t\t\t\t} else if (light.isSpotLight) {\n\t\t\t\t\tconst uniforms = state.spot[spotLength];\n\t\t\t\t\tuniforms.position.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.position.applyMatrix4(viewMatrix);\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tvector3.setFromMatrixPosition(light.target.matrixWorld);\n\t\t\t\t\tuniforms.direction.sub(vector3);\n\t\t\t\t\tuniforms.direction.transformDirection(viewMatrix);\n\t\t\t\t\tspotLength++;\n\t\t\t\t} else if (light.isRectAreaLight) {\n\t\t\t\t\tconst uniforms = state.rectArea[rectAreaLength];\n\t\t\t\t\tuniforms.position.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.position.applyMatrix4(viewMatrix); // extract local rotation of light to derive width/height half vectors\n\n\t\t\t\t\tmatrix42.identity();\n\t\t\t\t\tmatrix4.copy(light.matrixWorld);\n\t\t\t\t\tmatrix4.premultiply(viewMatrix);\n\t\t\t\t\tmatrix42.extractRotation(matrix4);\n\t\t\t\t\tuniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n\t\t\t\t\tuniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);\n\t\t\t\t\tuniforms.halfWidth.applyMatrix4(matrix42);\n\t\t\t\t\tuniforms.halfHeight.applyMatrix4(matrix42);\n\t\t\t\t\trectAreaLength++;\n\t\t\t\t} else if (light.isPointLight) {\n\t\t\t\t\tconst uniforms = state.point[pointLength];\n\t\t\t\t\tuniforms.position.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.position.applyMatrix4(viewMatrix);\n\t\t\t\t\tpointLength++;\n\t\t\t\t} else if (light.isHemisphereLight) {\n\t\t\t\t\tconst uniforms = state.hemi[hemiLength];\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tuniforms.direction.transformDirection(viewMatrix);\n\t\t\t\t\tuniforms.direction.normalize();\n\t\t\t\t\themiLength++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\tsetupView: setupView,\n\t\t\tstate: state\n\t\t};\n\t}\n\n\tfunction WebGLRenderState(extensions, capabilities) {\n\t\tconst lights = new WebGLLights(extensions, capabilities);\n\t\tconst lightsArray = [];\n\t\tconst shadowsArray = [];\n\n\t\tfunction init() {\n\t\t\tlightsArray.length = 0;\n\t\t\tshadowsArray.length = 0;\n\t\t}\n\n\t\tfunction pushLight(light) {\n\t\t\tlightsArray.push(light);\n\t\t}\n\n\t\tfunction pushShadow(shadowLight) {\n\t\t\tshadowsArray.push(shadowLight);\n\t\t}\n\n\t\tfunction setupLights(physicallyCorrectLights) {\n\t\t\tlights.setup(lightsArray, physicallyCorrectLights);\n\t\t}\n\n\t\tfunction setupLightsView(camera) {\n\t\t\tlights.setupView(lightsArray, camera);\n\t\t}\n\n\t\tconst state = {\n\t\t\tlightsArray: lightsArray,\n\t\t\tshadowsArray: shadowsArray,\n\t\t\tlights: lights\n\t\t};\n\t\treturn {\n\t\t\tinit: init,\n\t\t\tstate: state,\n\t\t\tsetupLights: setupLights,\n\t\t\tsetupLightsView: setupLightsView,\n\t\t\tpushLight: pushLight,\n\t\t\tpushShadow: pushShadow\n\t\t};\n\t}\n\n\tfunction WebGLRenderStates(extensions, capabilities) {\n\t\tlet renderStates = new WeakMap();\n\n\t\tfunction get(scene, renderCallDepth = 0) {\n\t\t\tlet renderState;\n\n\t\t\tif (renderStates.has(scene) === false) {\n\t\t\t\trenderState = new WebGLRenderState(extensions, capabilities);\n\t\t\t\trenderStates.set(scene, [renderState]);\n\t\t\t} else {\n\t\t\t\tif (renderCallDepth >= renderStates.get(scene).length) {\n\t\t\t\t\trenderState = new WebGLRenderState(extensions, capabilities);\n\t\t\t\t\trenderStates.get(scene).push(renderState);\n\t\t\t\t} else {\n\t\t\t\t\trenderState = renderStates.get(scene)[renderCallDepth];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn renderState;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\trenderStates = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\t/**\n\t * parameters = {\n\t *\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>\n\t * }\n\t */\n\n\tclass MeshDepthMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshDepthMaterial';\n\t\t\tthis.depthPacking = BasicDepthPacking;\n\t\t\tthis.map = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.fog = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.depthPacking = source.depthPacking;\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\n\t *\treferencePosition: <float>,\n\t *\tnearDistance: <float>,\n\t *\tfarDistance: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>\n\t *\n\t * }\n\t */\n\n\tclass MeshDistanceMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshDistanceMaterial';\n\t\t\tthis.referencePosition = new Vector3();\n\t\t\tthis.nearDistance = 1;\n\t\t\tthis.farDistance = 1000;\n\t\t\tthis.map = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.fog = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.referencePosition.copy(source.referencePosition);\n\t\t\tthis.nearDistance = source.nearDistance;\n\t\t\tthis.farDistance = source.farDistance;\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\n\tconst vertex = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\tconst fragment = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n\\tconst float samples = float( VSM_SAMPLES );\\n\\tfloat mean = 0.0;\\n\\tfloat squared_mean = 0.0;\\n\\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\\n\\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\\n\\tfor ( float i = 0.0; i < samples; i ++ ) {\\n\\t\\tfloat uvOffset = uvStart + i * uvStride;\\n\\t\\t#ifdef HORIZONTAL_PASS\\n\\t\\t\\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\\n\\t\\t\\tmean += distribution.x;\\n\\t\\t\\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\\n\\t\\t\\tmean += depth;\\n\\t\\t\\tsquared_mean += depth * depth;\\n\\t\\t#endif\\n\\t}\\n\\tmean = mean / samples;\\n\\tsquared_mean = squared_mean / samples;\\n\\tfloat std_dev = sqrt( squared_mean - mean * mean );\\n\\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\n\tfunction WebGLShadowMap(_renderer, _objects, _capabilities) {\n\t\tlet _frustum = new Frustum();\n\n\t\tconst _shadowMapSize = new Vector2(),\n\t\t\t\t\t_viewportSize = new Vector2(),\n\t\t\t\t\t_viewport = new Vector4(),\n\t\t\t\t\t_depthMaterial = new MeshDepthMaterial({\n\t\t\tdepthPacking: RGBADepthPacking\n\t\t}),\n\t\t\t\t\t_distanceMaterial = new MeshDistanceMaterial(),\n\t\t\t\t\t_materialCache = {},\n\t\t\t\t\t_maxTextureSize = _capabilities.maxTextureSize;\n\n\t\tconst shadowSide = {\n\t\t\t0: BackSide,\n\t\t\t1: FrontSide,\n\t\t\t2: DoubleSide\n\t\t};\n\t\tconst shadowMaterialVertical = new ShaderMaterial({\n\t\t\tdefines: {\n\t\t\t\tVSM_SAMPLES: 8\n\t\t\t},\n\t\t\tuniforms: {\n\t\t\t\tshadow_pass: {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\tresolution: {\n\t\t\t\t\tvalue: new Vector2()\n\t\t\t\t},\n\t\t\t\tradius: {\n\t\t\t\t\tvalue: 4.0\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: vertex,\n\t\t\tfragmentShader: fragment\n\t\t});\n\t\tconst shadowMaterialHorizontal = shadowMaterialVertical.clone();\n\t\tshadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;\n\t\tconst fullScreenTri = new BufferGeometry();\n\t\tfullScreenTri.setAttribute('position', new BufferAttribute(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3));\n\t\tconst fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);\n\t\tconst scope = this;\n\t\tthis.enabled = false;\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\t\tthis.type = PCFShadowMap;\n\n\t\tthis.render = function (lights, scene, camera) {\n\t\t\tif (scope.enabled === false) return;\n\t\t\tif (scope.autoUpdate === false && scope.needsUpdate === false) return;\n\t\t\tif (lights.length === 0) return;\n\n\t\t\tconst currentRenderTarget = _renderer.getRenderTarget();\n\n\t\t\tconst activeCubeFace = _renderer.getActiveCubeFace();\n\n\t\t\tconst activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\t\tconst _state = _renderer.state; // Set GL state for depth map.\n\n\t\t\t_state.setBlending(NoBlending);\n\n\t\t\t_state.buffers.color.setClear(1, 1, 1, 1);\n\n\t\t\t_state.buffers.depth.setTest(true);\n\n\t\t\t_state.setScissorTest(false); // render depth map\n\n\n\t\t\tfor (let i = 0, il = lights.length; i < il; i++) {\n\t\t\t\tconst light = lights[i];\n\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\tif (shadow === undefined) {\n\t\t\t\t\tconsole.warn('THREE.WebGLShadowMap:', light, 'has no shadow.');\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;\n\n\t\t\t\t_shadowMapSize.copy(shadow.mapSize);\n\n\t\t\t\tconst shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t\t_shadowMapSize.multiply(shadowFrameExtents);\n\n\t\t\t\t_viewportSize.copy(shadow.mapSize);\n\n\t\t\t\tif (_shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize) {\n\t\t\t\t\tif (_shadowMapSize.x > _maxTextureSize) {\n\t\t\t\t\t\t_viewportSize.x = Math.floor(_maxTextureSize / shadowFrameExtents.x);\n\t\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_shadowMapSize.y > _maxTextureSize) {\n\t\t\t\t\t\t_viewportSize.y = Math.floor(_maxTextureSize / shadowFrameExtents.y);\n\t\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (shadow.map === null && !shadow.isPointLightShadow && this.type === VSMShadowMap) {\n\t\t\t\t\tconst pars = {\n\t\t\t\t\t\tminFilter: LinearFilter,\n\t\t\t\t\t\tmagFilter: LinearFilter,\n\t\t\t\t\t\tformat: RGBAFormat\n\t\t\t\t\t};\n\t\t\t\t\tshadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\t\t\t\t\tshadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\t\t\t\t}\n\n\t\t\t\tif (shadow.map === null) {\n\t\t\t\t\tconst pars = {\n\t\t\t\t\t\tminFilter: NearestFilter,\n\t\t\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\t\t\tformat: RGBAFormat\n\t\t\t\t\t};\n\t\t\t\t\tshadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\t\t\t\t}\n\n\t\t\t\t_renderer.setRenderTarget(shadow.map);\n\n\t\t\t\t_renderer.clear();\n\n\t\t\t\tconst viewportCount = shadow.getViewportCount();\n\n\t\t\t\tfor (let vp = 0; vp < viewportCount; vp++) {\n\t\t\t\t\tconst viewport = shadow.getViewport(vp);\n\n\t\t\t\t\t_viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w);\n\n\t\t\t\t\t_state.viewport(_viewport);\n\n\t\t\t\t\tshadow.updateMatrices(light, vp);\n\t\t\t\t\t_frustum = shadow.getFrustum();\n\t\t\t\t\trenderObject(scene, camera, shadow.camera, light, this.type);\n\t\t\t\t} // do blur pass for VSM\n\n\n\t\t\t\tif (!shadow.isPointLightShadow && this.type === VSMShadowMap) {\n\t\t\t\t\tVSMPass(shadow, camera);\n\t\t\t\t}\n\n\t\t\t\tshadow.needsUpdate = false;\n\t\t\t}\n\n\t\t\tscope.needsUpdate = false;\n\n\t\t\t_renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);\n\t\t};\n\n\t\tfunction VSMPass(shadow, camera) {\n\t\t\tconst geometry = _objects.update(fullScreenMesh);\n\n\t\t\tif (shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples) {\n\t\t\t\tshadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;\n\t\t\t\tshadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;\n\t\t\t\tshadowMaterialVertical.needsUpdate = true;\n\t\t\t\tshadowMaterialHorizontal.needsUpdate = true;\n\t\t\t} // vertical pass\n\n\n\t\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\n\t\t\t_renderer.setRenderTarget(shadow.mapPass);\n\n\t\t\t_renderer.clear();\n\n\t\t\t_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null); // horizontal pass\n\n\n\t\t\tshadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\t\tshadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialHorizontal.uniforms.radius.value = shadow.radius;\n\n\t\t\t_renderer.setRenderTarget(shadow.map);\n\n\t\t\t_renderer.clear();\n\n\t\t\t_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);\n\t\t}\n\n\t\tfunction getDepthMaterial(object, geometry, material, light, shadowCameraNear, shadowCameraFar, type) {\n\t\t\tlet result = null;\n\t\t\tconst customMaterial = light.isPointLight === true ? object.customDistanceMaterial : object.customDepthMaterial;\n\n\t\t\tif (customMaterial !== undefined) {\n\t\t\t\tresult = customMaterial;\n\t\t\t} else {\n\t\t\t\tresult = light.isPointLight === true ? _distanceMaterial : _depthMaterial;\n\t\t\t}\n\n\t\t\tif (_renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0 || material.displacementMap && material.displacementScale !== 0 || material.alphaMap && material.alphaTest > 0) {\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\t\t\t\tconst keyA = result.uuid,\n\t\t\t\t\t\t\tkeyB = material.uuid;\n\t\t\t\tlet materialsForVariant = _materialCache[keyA];\n\n\t\t\t\tif (materialsForVariant === undefined) {\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[keyA] = materialsForVariant;\n\t\t\t\t}\n\n\t\t\t\tlet cachedMaterial = materialsForVariant[keyB];\n\n\t\t\t\tif (cachedMaterial === undefined) {\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[keyB] = cachedMaterial;\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\t\t\t}\n\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\n\t\t\tif (type === VSMShadowMap) {\n\t\t\t\tresult.side = material.shadowSide !== null ? material.shadowSide : material.side;\n\t\t\t} else {\n\t\t\t\tresult.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];\n\t\t\t}\n\n\t\t\tresult.alphaMap = material.alphaMap;\n\t\t\tresult.alphaTest = material.alphaTest;\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\t\tresult.clipIntersection = material.clipIntersection;\n\t\t\tresult.displacementMap = material.displacementMap;\n\t\t\tresult.displacementScale = material.displacementScale;\n\t\t\tresult.displacementBias = material.displacementBias;\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\n\t\t\tif (light.isPointLight === true && result.isMeshDistanceMaterial === true) {\n\t\t\t\tresult.referencePosition.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\t\tresult.farDistance = shadowCameraFar;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\tfunction renderObject(object, camera, shadowCamera, light, type) {\n\t\t\tif (object.visible === false) return;\n\t\t\tconst visible = object.layers.test(camera.layers);\n\n\t\t\tif (visible && (object.isMesh || object.isLine || object.isPoints)) {\n\t\t\t\tif ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);\n\n\t\t\t\t\tconst geometry = _objects.update(object);\n\n\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\t\tfor (let k = 0, kl = groups.length; k < kl; k++) {\n\t\t\t\t\t\t\tconst group = groups[k];\n\t\t\t\t\t\t\tconst groupMaterial = material[group.materialIndex];\n\n\t\t\t\t\t\t\tif (groupMaterial && groupMaterial.visible) {\n\t\t\t\t\t\t\t\tconst depthMaterial = getDepthMaterial(object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type);\n\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (material.visible) {\n\t\t\t\t\t\tconst depthMaterial = getDepthMaterial(object, geometry, material, light, shadowCamera.near, shadowCamera.far, type);\n\n\t\t\t\t\t\t_renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst children = object.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\trenderObject(children[i], camera, shadowCamera, light, type);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction WebGLState(gl, extensions, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction ColorBuffer() {\n\t\t\tlet locked = false;\n\t\t\tconst color = new Vector4();\n\t\t\tlet currentColorMask = null;\n\t\t\tconst currentColorClear = new Vector4(0, 0, 0, 0);\n\t\t\treturn {\n\t\t\t\tsetMask: function (colorMask) {\n\t\t\t\t\tif (currentColorMask !== colorMask && !locked) {\n\t\t\t\t\t\tgl.colorMask(colorMask, colorMask, colorMask, colorMask);\n\t\t\t\t\t\tcurrentColorMask = colorMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function (lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function (r, g, b, a, premultipliedAlpha) {\n\t\t\t\t\tif (premultipliedAlpha === true) {\n\t\t\t\t\t\tr *= a;\n\t\t\t\t\t\tg *= a;\n\t\t\t\t\t\tb *= a;\n\t\t\t\t\t}\n\n\t\t\t\t\tcolor.set(r, g, b, a);\n\n\t\t\t\t\tif (currentColorClear.equals(color) === false) {\n\t\t\t\t\t\tgl.clearColor(r, g, b, a);\n\t\t\t\t\t\tcurrentColorClear.copy(color);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function () {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentColorMask = null;\n\t\t\t\t\tcurrentColorClear.set(-1, 0, 0, 0); // set to invalid state\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction DepthBuffer() {\n\t\t\tlet locked = false;\n\t\t\tlet currentDepthMask = null;\n\t\t\tlet currentDepthFunc = null;\n\t\t\tlet currentDepthClear = null;\n\t\t\treturn {\n\t\t\t\tsetTest: function (depthTest) {\n\t\t\t\t\tif (depthTest) {\n\t\t\t\t\t\tenable(gl.DEPTH_TEST);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdisable(gl.DEPTH_TEST);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetMask: function (depthMask) {\n\t\t\t\t\tif (currentDepthMask !== depthMask && !locked) {\n\t\t\t\t\t\tgl.depthMask(depthMask);\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetFunc: function (depthFunc) {\n\t\t\t\t\tif (currentDepthFunc !== depthFunc) {\n\t\t\t\t\t\tif (depthFunc) {\n\t\t\t\t\t\t\tswitch (depthFunc) {\n\t\t\t\t\t\t\t\tcase NeverDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.NEVER);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.ALWAYS);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.LESS);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.LEQUAL);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase EqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.EQUAL);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.GEQUAL);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.GREATER);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.NOTEQUAL);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(gl.LEQUAL);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tgl.depthFunc(gl.LEQUAL);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function (lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function (depth) {\n\t\t\t\t\tif (currentDepthClear !== depth) {\n\t\t\t\t\t\tgl.clearDepth(depth);\n\t\t\t\t\t\tcurrentDepthClear = depth;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function () {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentDepthMask = null;\n\t\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\t\tcurrentDepthClear = null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction StencilBuffer() {\n\t\t\tlet locked = false;\n\t\t\tlet currentStencilMask = null;\n\t\t\tlet currentStencilFunc = null;\n\t\t\tlet currentStencilRef = null;\n\t\t\tlet currentStencilFuncMask = null;\n\t\t\tlet currentStencilFail = null;\n\t\t\tlet currentStencilZFail = null;\n\t\t\tlet currentStencilZPass = null;\n\t\t\tlet currentStencilClear = null;\n\t\t\treturn {\n\t\t\t\tsetTest: function (stencilTest) {\n\t\t\t\t\tif (!locked) {\n\t\t\t\t\t\tif (stencilTest) {\n\t\t\t\t\t\t\tenable(gl.STENCIL_TEST);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdisable(gl.STENCIL_TEST);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetMask: function (stencilMask) {\n\t\t\t\t\tif (currentStencilMask !== stencilMask && !locked) {\n\t\t\t\t\t\tgl.stencilMask(stencilMask);\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetFunc: function (stencilFunc, stencilRef, stencilMask) {\n\t\t\t\t\tif (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {\n\t\t\t\t\t\tgl.stencilFunc(stencilFunc, stencilRef, stencilMask);\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetOp: function (stencilFail, stencilZFail, stencilZPass) {\n\t\t\t\t\tif (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {\n\t\t\t\t\t\tgl.stencilOp(stencilFail, stencilZFail, stencilZPass);\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function (lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function (stencil) {\n\t\t\t\t\tif (currentStencilClear !== stencil) {\n\t\t\t\t\t\tgl.clearStencil(stencil);\n\t\t\t\t\t\tcurrentStencilClear = stencil;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function () {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentStencilMask = null;\n\t\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\t\tcurrentStencilRef = null;\n\t\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\t\tcurrentStencilFail = null;\n\t\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\t\tcurrentStencilClear = null;\n\t\t\t\t}\n\t\t\t};\n\t\t} //\n\n\n\t\tconst colorBuffer = new ColorBuffer();\n\t\tconst depthBuffer = new DepthBuffer();\n\t\tconst stencilBuffer = new StencilBuffer();\n\t\tlet enabledCapabilities = {};\n\t\tlet xrFramebuffer = null;\n\t\tlet currentBoundFramebuffers = {};\n\t\tlet currentProgram = null;\n\t\tlet currentBlendingEnabled = false;\n\t\tlet currentBlending = null;\n\t\tlet currentBlendEquation = null;\n\t\tlet currentBlendSrc = null;\n\t\tlet currentBlendDst = null;\n\t\tlet currentBlendEquationAlpha = null;\n\t\tlet currentBlendSrcAlpha = null;\n\t\tlet currentBlendDstAlpha = null;\n\t\tlet currentPremultipledAlpha = false;\n\t\tlet currentFlipSided = null;\n\t\tlet currentCullFace = null;\n\t\tlet currentLineWidth = null;\n\t\tlet currentPolygonOffsetFactor = null;\n\t\tlet currentPolygonOffsetUnits = null;\n\t\tconst maxTextures = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n\t\tlet lineWidthAvailable = false;\n\t\tlet version = 0;\n\t\tconst glVersion = gl.getParameter(gl.VERSION);\n\n\t\tif (glVersion.indexOf('WebGL') !== -1) {\n\t\t\tversion = parseFloat(/^WebGL (\\d)/.exec(glVersion)[1]);\n\t\t\tlineWidthAvailable = version >= 1.0;\n\t\t} else if (glVersion.indexOf('OpenGL ES') !== -1) {\n\t\t\tversion = parseFloat(/^OpenGL ES (\\d)/.exec(glVersion)[1]);\n\t\t\tlineWidthAvailable = version >= 2.0;\n\t\t}\n\n\t\tlet currentTextureSlot = null;\n\t\tlet currentBoundTextures = {};\n\t\tconst scissorParam = gl.getParameter(gl.SCISSOR_BOX);\n\t\tconst viewportParam = gl.getParameter(gl.VIEWPORT);\n\t\tconst currentScissor = new Vector4().fromArray(scissorParam);\n\t\tconst currentViewport = new Vector4().fromArray(viewportParam);\n\n\t\tfunction createTexture(type, target, count) {\n\t\t\tconst data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.\n\n\t\t\tconst texture = gl.createTexture();\n\t\t\tgl.bindTexture(type, texture);\n\t\t\tgl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\tgl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tgl.texImage2D(target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tconst emptyTextures = {};\n\t\temptyTextures[gl.TEXTURE_2D] = createTexture(gl.TEXTURE_2D, gl.TEXTURE_2D, 1);\n\t\temptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6); // init\n\n\t\tcolorBuffer.setClear(0, 0, 0, 1);\n\t\tdepthBuffer.setClear(1);\n\t\tstencilBuffer.setClear(0);\n\t\tenable(gl.DEPTH_TEST);\n\t\tdepthBuffer.setFunc(LessEqualDepth);\n\t\tsetFlipSided(false);\n\t\tsetCullFace(CullFaceBack);\n\t\tenable(gl.CULL_FACE);\n\t\tsetBlending(NoBlending); //\n\n\t\tfunction enable(id) {\n\t\t\tif (enabledCapabilities[id] !== true) {\n\t\t\t\tgl.enable(id);\n\t\t\t\tenabledCapabilities[id] = true;\n\t\t\t}\n\t\t}\n\n\t\tfunction disable(id) {\n\t\t\tif (enabledCapabilities[id] !== false) {\n\t\t\t\tgl.disable(id);\n\t\t\t\tenabledCapabilities[id] = false;\n\t\t\t}\n\t\t}\n\n\t\tfunction bindXRFramebuffer(framebuffer) {\n\t\t\tif (framebuffer !== xrFramebuffer) {\n\t\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\t\t\t\txrFramebuffer = framebuffer;\n\t\t\t}\n\t\t}\n\n\t\tfunction bindFramebuffer(target, framebuffer) {\n\t\t\tif (framebuffer === null && xrFramebuffer !== null) framebuffer = xrFramebuffer; // use active XR framebuffer if available\n\n\t\t\tif (currentBoundFramebuffers[target] !== framebuffer) {\n\t\t\t\tgl.bindFramebuffer(target, framebuffer);\n\t\t\t\tcurrentBoundFramebuffers[target] = framebuffer;\n\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t// gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER\n\t\t\t\t\tif (target === gl.DRAW_FRAMEBUFFER) {\n\t\t\t\t\t\tcurrentBoundFramebuffers[gl.FRAMEBUFFER] = framebuffer;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (target === gl.FRAMEBUFFER) {\n\t\t\t\t\t\tcurrentBoundFramebuffers[gl.DRAW_FRAMEBUFFER] = framebuffer;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction useProgram(program) {\n\t\t\tif (currentProgram !== program) {\n\t\t\t\tgl.useProgram(program);\n\t\t\t\tcurrentProgram = program;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tconst equationToGL = {\n\t\t\t[AddEquation]: gl.FUNC_ADD,\n\t\t\t[SubtractEquation]: gl.FUNC_SUBTRACT,\n\t\t\t[ReverseSubtractEquation]: gl.FUNC_REVERSE_SUBTRACT\n\t\t};\n\n\t\tif (isWebGL2) {\n\t\t\tequationToGL[MinEquation] = gl.MIN;\n\t\t\tequationToGL[MaxEquation] = gl.MAX;\n\t\t} else {\n\t\t\tconst extension = extensions.get('EXT_blend_minmax');\n\n\t\t\tif (extension !== null) {\n\t\t\t\tequationToGL[MinEquation] = extension.MIN_EXT;\n\t\t\t\tequationToGL[MaxEquation] = extension.MAX_EXT;\n\t\t\t}\n\t\t}\n\n\t\tconst factorToGL = {\n\t\t\t[ZeroFactor]: gl.ZERO,\n\t\t\t[OneFactor]: gl.ONE,\n\t\t\t[SrcColorFactor]: gl.SRC_COLOR,\n\t\t\t[SrcAlphaFactor]: gl.SRC_ALPHA,\n\t\t\t[SrcAlphaSaturateFactor]: gl.SRC_ALPHA_SATURATE,\n\t\t\t[DstColorFactor]: gl.DST_COLOR,\n\t\t\t[DstAlphaFactor]: gl.DST_ALPHA,\n\t\t\t[OneMinusSrcColorFactor]: gl.ONE_MINUS_SRC_COLOR,\n\t\t\t[OneMinusSrcAlphaFactor]: gl.ONE_MINUS_SRC_ALPHA,\n\t\t\t[OneMinusDstColorFactor]: gl.ONE_MINUS_DST_COLOR,\n\t\t\t[OneMinusDstAlphaFactor]: gl.ONE_MINUS_DST_ALPHA\n\t\t};\n\n\t\tfunction setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {\n\t\t\tif (blending === NoBlending) {\n\t\t\t\tif (currentBlendingEnabled === true) {\n\t\t\t\t\tdisable(gl.BLEND);\n\t\t\t\t\tcurrentBlendingEnabled = false;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (currentBlendingEnabled === false) {\n\t\t\t\tenable(gl.BLEND);\n\t\t\t\tcurrentBlendingEnabled = true;\n\t\t\t}\n\n\t\t\tif (blending !== CustomBlending) {\n\t\t\t\tif (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {\n\t\t\t\t\tif (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {\n\t\t\t\t\t\tgl.blendEquation(gl.FUNC_ADD);\n\t\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (premultipliedAlpha) {\n\t\t\t\t\t\tswitch (blending) {\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(gl.ONE, gl.ONE);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error('THREE.WebGLState: Invalid blending: ', blending);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tswitch (blending) {\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(gl.ZERO, gl.ONE_MINUS_SRC_COLOR);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(gl.ZERO, gl.SRC_COLOR);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error('THREE.WebGLState: Invalid blending: ', blending);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\t\tcurrentBlendDst = null;\n\t\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\t\tcurrentBlendDstAlpha = null;\n\t\t\t\t\tcurrentBlending = blending;\n\t\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t} // custom blending\n\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {\n\t\t\t\tgl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\t\t\t}\n\n\t\t\tif (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {\n\t\t\t\tgl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\t\t\tcurrentPremultipledAlpha = null;\n\t\t}\n\n\t\tfunction setMaterial(material, frontFaceCW) {\n\t\t\tmaterial.side === DoubleSide ? disable(gl.CULL_FACE) : enable(gl.CULL_FACE);\n\t\t\tlet flipSided = material.side === BackSide;\n\t\t\tif (frontFaceCW) flipSided = !flipSided;\n\t\t\tsetFlipSided(flipSided);\n\t\t\tmaterial.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);\n\t\t\tdepthBuffer.setFunc(material.depthFunc);\n\t\t\tdepthBuffer.setTest(material.depthTest);\n\t\t\tdepthBuffer.setMask(material.depthWrite);\n\t\t\tcolorBuffer.setMask(material.colorWrite);\n\t\t\tconst stencilWrite = material.stencilWrite;\n\t\t\tstencilBuffer.setTest(stencilWrite);\n\n\t\t\tif (stencilWrite) {\n\t\t\t\tstencilBuffer.setMask(material.stencilWriteMask);\n\t\t\t\tstencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);\n\t\t\t\tstencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);\n\t\t\t}\n\n\t\t\tsetPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);\n\t\t\tmaterial.alphaToCoverage === true ? enable(gl.SAMPLE_ALPHA_TO_COVERAGE) : disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n\t\t} //\n\n\n\t\tfunction setFlipSided(flipSided) {\n\t\t\tif (currentFlipSided !== flipSided) {\n\t\t\t\tif (flipSided) {\n\t\t\t\t\tgl.frontFace(gl.CW);\n\t\t\t\t} else {\n\t\t\t\t\tgl.frontFace(gl.CCW);\n\t\t\t\t}\n\n\t\t\t\tcurrentFlipSided = flipSided;\n\t\t\t}\n\t\t}\n\n\t\tfunction setCullFace(cullFace) {\n\t\t\tif (cullFace !== CullFaceNone) {\n\t\t\t\tenable(gl.CULL_FACE);\n\n\t\t\t\tif (cullFace !== currentCullFace) {\n\t\t\t\t\tif (cullFace === CullFaceBack) {\n\t\t\t\t\t\tgl.cullFace(gl.BACK);\n\t\t\t\t\t} else if (cullFace === CullFaceFront) {\n\t\t\t\t\t\tgl.cullFace(gl.FRONT);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgl.cullFace(gl.FRONT_AND_BACK);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdisable(gl.CULL_FACE);\n\t\t\t}\n\n\t\t\tcurrentCullFace = cullFace;\n\t\t}\n\n\t\tfunction setLineWidth(width) {\n\t\t\tif (width !== currentLineWidth) {\n\t\t\t\tif (lineWidthAvailable) gl.lineWidth(width);\n\t\t\t\tcurrentLineWidth = width;\n\t\t\t}\n\t\t}\n\n\t\tfunction setPolygonOffset(polygonOffset, factor, units) {\n\t\t\tif (polygonOffset) {\n\t\t\t\tenable(gl.POLYGON_OFFSET_FILL);\n\n\t\t\t\tif (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {\n\t\t\t\t\tgl.polygonOffset(factor, units);\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdisable(gl.POLYGON_OFFSET_FILL);\n\t\t\t}\n\t\t}\n\n\t\tfunction setScissorTest(scissorTest) {\n\t\t\tif (scissorTest) {\n\t\t\t\tenable(gl.SCISSOR_TEST);\n\t\t\t} else {\n\t\t\t\tdisable(gl.SCISSOR_TEST);\n\t\t\t}\n\t\t} // texture\n\n\n\t\tfunction activeTexture(webglSlot) {\n\t\t\tif (webglSlot === undefined) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\t\tif (currentTextureSlot !== webglSlot) {\n\t\t\t\tgl.activeTexture(webglSlot);\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\t\t\t}\n\t\t}\n\n\t\tfunction bindTexture(webglType, webglTexture) {\n\t\t\tif (currentTextureSlot === null) {\n\t\t\t\tactiveTexture();\n\t\t\t}\n\n\t\t\tlet boundTexture = currentBoundTextures[currentTextureSlot];\n\n\t\t\tif (boundTexture === undefined) {\n\t\t\t\tboundTexture = {\n\t\t\t\t\ttype: undefined,\n\t\t\t\t\ttexture: undefined\n\t\t\t\t};\n\t\t\t\tcurrentBoundTextures[currentTextureSlot] = boundTexture;\n\t\t\t}\n\n\t\t\tif (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {\n\t\t\t\tgl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\t\t\t}\n\t\t}\n\n\t\tfunction unbindTexture() {\n\t\t\tconst boundTexture = currentBoundTextures[currentTextureSlot];\n\n\t\t\tif (boundTexture !== undefined && boundTexture.type !== undefined) {\n\t\t\t\tgl.bindTexture(boundTexture.type, null);\n\t\t\t\tboundTexture.type = undefined;\n\t\t\t\tboundTexture.texture = undefined;\n\t\t\t}\n\t\t}\n\n\t\tfunction compressedTexImage2D() {\n\t\t\ttry {\n\t\t\t\tgl.compressedTexImage2D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t}\n\n\t\tfunction texImage2D() {\n\t\t\ttry {\n\t\t\t\tgl.texImage2D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t}\n\n\t\tfunction texImage3D() {\n\t\t\ttry {\n\t\t\t\tgl.texImage3D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction scissor(scissor) {\n\t\t\tif (currentScissor.equals(scissor) === false) {\n\t\t\t\tgl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);\n\t\t\t\tcurrentScissor.copy(scissor);\n\t\t\t}\n\t\t}\n\n\t\tfunction viewport(viewport) {\n\t\t\tif (currentViewport.equals(viewport) === false) {\n\t\t\t\tgl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);\n\t\t\t\tcurrentViewport.copy(viewport);\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction reset() {\n\t\t\t// reset state\n\t\t\tgl.disable(gl.BLEND);\n\t\t\tgl.disable(gl.CULL_FACE);\n\t\t\tgl.disable(gl.DEPTH_TEST);\n\t\t\tgl.disable(gl.POLYGON_OFFSET_FILL);\n\t\t\tgl.disable(gl.SCISSOR_TEST);\n\t\t\tgl.disable(gl.STENCIL_TEST);\n\t\t\tgl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n\t\t\tgl.blendEquation(gl.FUNC_ADD);\n\t\t\tgl.blendFunc(gl.ONE, gl.ZERO);\n\t\t\tgl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);\n\t\t\tgl.colorMask(true, true, true, true);\n\t\t\tgl.clearColor(0, 0, 0, 0);\n\t\t\tgl.depthMask(true);\n\t\t\tgl.depthFunc(gl.LESS);\n\t\t\tgl.clearDepth(1);\n\t\t\tgl.stencilMask(0xffffffff);\n\t\t\tgl.stencilFunc(gl.ALWAYS, 0, 0xffffffff);\n\t\t\tgl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n\t\t\tgl.clearStencil(0);\n\t\t\tgl.cullFace(gl.BACK);\n\t\t\tgl.frontFace(gl.CCW);\n\t\t\tgl.polygonOffset(0, 0);\n\t\t\tgl.activeTexture(gl.TEXTURE0);\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n\t\t\tif (isWebGL2 === true) {\n\t\t\t\tgl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\n\t\t\t\tgl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);\n\t\t\t}\n\n\t\t\tgl.useProgram(null);\n\t\t\tgl.lineWidth(1);\n\t\t\tgl.scissor(0, 0, gl.canvas.width, gl.canvas.height);\n\t\t\tgl.viewport(0, 0, gl.canvas.width, gl.canvas.height); // reset internals\n\n\t\t\tenabledCapabilities = {};\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\t\t\txrFramebuffer = null;\n\t\t\tcurrentBoundFramebuffers = {};\n\t\t\tcurrentProgram = null;\n\t\t\tcurrentBlendingEnabled = false;\n\t\t\tcurrentBlending = null;\n\t\t\tcurrentBlendEquation = null;\n\t\t\tcurrentBlendSrc = null;\n\t\t\tcurrentBlendDst = null;\n\t\t\tcurrentBlendEquationAlpha = null;\n\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\tcurrentBlendDstAlpha = null;\n\t\t\tcurrentPremultipledAlpha = false;\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\t\t\tcurrentLineWidth = null;\n\t\t\tcurrentPolygonOffsetFactor = null;\n\t\t\tcurrentPolygonOffsetUnits = null;\n\t\t\tcurrentScissor.set(0, 0, gl.canvas.width, gl.canvas.height);\n\t\t\tcurrentViewport.set(0, 0, gl.canvas.width, gl.canvas.height);\n\t\t\tcolorBuffer.reset();\n\t\t\tdepthBuffer.reset();\n\t\t\tstencilBuffer.reset();\n\t\t}\n\n\t\treturn {\n\t\t\tbuffers: {\n\t\t\t\tcolor: colorBuffer,\n\t\t\t\tdepth: depthBuffer,\n\t\t\t\tstencil: stencilBuffer\n\t\t\t},\n\t\t\tenable: enable,\n\t\t\tdisable: disable,\n\t\t\tbindFramebuffer: bindFramebuffer,\n\t\t\tbindXRFramebuffer: bindXRFramebuffer,\n\t\t\tuseProgram: useProgram,\n\t\t\tsetBlending: setBlending,\n\t\t\tsetMaterial: setMaterial,\n\t\t\tsetFlipSided: setFlipSided,\n\t\t\tsetCullFace: setCullFace,\n\t\t\tsetLineWidth: setLineWidth,\n\t\t\tsetPolygonOffset: setPolygonOffset,\n\t\t\tsetScissorTest: setScissorTest,\n\t\t\tactiveTexture: activeTexture,\n\t\t\tbindTexture: bindTexture,\n\t\t\tunbindTexture: unbindTexture,\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\t\ttexImage2D: texImage2D,\n\t\t\ttexImage3D: texImage3D,\n\t\t\tscissor: scissor,\n\t\t\tviewport: viewport,\n\t\t\treset: reset\n\t\t};\n\t}\n\n\tfunction WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\t\tconst maxTextures = capabilities.maxTextures;\n\t\tconst maxCubemapSize = capabilities.maxCubemapSize;\n\t\tconst maxTextureSize = capabilities.maxTextureSize;\n\t\tconst maxSamples = capabilities.maxSamples;\n\n\t\tconst _videoTextures = new WeakMap();\n\n\t\tlet _canvas; // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\n\t\tlet useOffscreenCanvas = false;\n\n\t\ttry {\n\t\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined' && new OffscreenCanvas(1, 1).getContext('2d') !== null;\n\t\t} catch (err) {// Ignore any errors\n\t\t}\n\n\t\tfunction createCanvas(width, height) {\n\t\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\t\t\treturn useOffscreenCanvas ? new OffscreenCanvas(width, height) : createElementNS('canvas');\n\t\t}\n\n\t\tfunction resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {\n\t\t\tlet scale = 1; // handle case if texture exceeds max size\n\n\t\t\tif (image.width > maxSize || image.height > maxSize) {\n\t\t\t\tscale = maxSize / Math.max(image.width, image.height);\n\t\t\t} // only perform resize if necessary\n\n\n\t\t\tif (scale < 1 || needsPowerOfTwo === true) {\n\t\t\t\t// only perform resize for certain image types\n\t\t\t\tif (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n\t\t\t\t\tconst floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;\n\t\t\t\t\tconst width = floor(scale * image.width);\n\t\t\t\t\tconst height = floor(scale * image.height);\n\t\t\t\t\tif (_canvas === undefined) _canvas = createCanvas(width, height); // cube textures can't reuse the same canvas\n\n\t\t\t\t\tconst canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;\n\t\t\t\t\tcanvas.width = width;\n\t\t\t\t\tcanvas.height = height;\n\t\t\t\t\tconst context = canvas.getContext('2d');\n\t\t\t\t\tcontext.drawImage(image, 0, 0, width, height);\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').');\n\t\t\t\t\treturn canvas;\n\t\t\t\t} else {\n\t\t\t\t\tif ('data' in image) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn image;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn image;\n\t\t}\n\n\t\tfunction isPowerOfTwo$1(image) {\n\t\t\treturn isPowerOfTwo(image.width) && isPowerOfTwo(image.height);\n\t\t}\n\n\t\tfunction textureNeedsPowerOfTwo(texture) {\n\t\t\tif (isWebGL2) return false;\n\t\t\treturn texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\t\t}\n\n\t\tfunction textureNeedsGenerateMipmaps(texture, supportsMips) {\n\t\t\treturn texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\t\t}\n\n\t\tfunction generateMipmap(target, texture, width, height, depth = 1) {\n\t\t\t_gl.generateMipmap(target);\n\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\ttextureProperties.__maxMipLevel = Math.log2(Math.max(width, height, depth));\n\t\t}\n\n\t\tfunction getInternalFormat(internalFormatName, glFormat, glType, encoding) {\n\t\t\tif (isWebGL2 === false) return glFormat;\n\n\t\t\tif (internalFormatName !== null) {\n\t\t\t\tif (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'');\n\t\t\t}\n\n\t\t\tlet internalFormat = glFormat;\n\n\t\t\tif (glFormat === _gl.RED) {\n\t\t\t\tif (glType === _gl.FLOAT) internalFormat = _gl.R32F;\n\t\t\t\tif (glType === _gl.HALF_FLOAT) internalFormat = _gl.R16F;\n\t\t\t\tif (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8;\n\t\t\t}\n\n\t\t\tif (glFormat === _gl.RGB) {\n\t\t\t\tif (glType === _gl.FLOAT) internalFormat = _gl.RGB32F;\n\t\t\t\tif (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGB16F;\n\t\t\t\tif (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RGB8;\n\t\t\t}\n\n\t\t\tif (glFormat === _gl.RGBA) {\n\t\t\t\tif (glType === _gl.FLOAT) internalFormat = _gl.RGBA32F;\n\t\t\t\tif (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGBA16F;\n\t\t\t\tif (glType === _gl.UNSIGNED_BYTE) internalFormat = encoding === sRGBEncoding ? _gl.SRGB8_ALPHA8 : _gl.RGBA8;\n\t\t\t}\n\n\t\t\tif (internalFormat === _gl.R16F || internalFormat === _gl.R32F || internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F) {\n\t\t\t\textensions.get('EXT_color_buffer_float');\n\t\t\t}\n\n\t\t\treturn internalFormat;\n\t\t} // Fallback filters for non-power-of-2 textures\n\n\n\t\tfunction filterFallback(f) {\n\t\t\tif (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {\n\t\t\t\treturn _gl.NEAREST;\n\t\t\t}\n\n\t\t\treturn _gl.LINEAR;\n\t\t} //\n\n\n\t\tfunction onTextureDispose(event) {\n\t\t\tconst texture = event.target;\n\t\t\ttexture.removeEventListener('dispose', onTextureDispose);\n\t\t\tdeallocateTexture(texture);\n\n\t\t\tif (texture.isVideoTexture) {\n\t\t\t\t_videoTextures.delete(texture);\n\t\t\t}\n\n\t\t\tinfo.memory.textures--;\n\t\t}\n\n\t\tfunction onRenderTargetDispose(event) {\n\t\t\tconst renderTarget = event.target;\n\t\t\trenderTarget.removeEventListener('dispose', onRenderTargetDispose);\n\t\t\tdeallocateRenderTarget(renderTarget);\n\t\t} //\n\n\n\t\tfunction deallocateTexture(texture) {\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\tif (textureProperties.__webglInit === undefined) return;\n\n\t\t\t_gl.deleteTexture(textureProperties.__webglTexture);\n\n\t\t\tproperties.remove(texture);\n\t\t}\n\n\t\tfunction deallocateRenderTarget(renderTarget) {\n\t\t\tconst texture = renderTarget.texture;\n\t\t\tconst renderTargetProperties = properties.get(renderTarget);\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\tif (!renderTarget) return;\n\n\t\t\tif (textureProperties.__webglTexture !== undefined) {\n\t\t\t\t_gl.deleteTexture(textureProperties.__webglTexture);\n\n\t\t\t\tinfo.memory.textures--;\n\t\t\t}\n\n\t\t\tif (renderTarget.depthTexture) {\n\t\t\t\trenderTarget.depthTexture.dispose();\n\t\t\t}\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget) {\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\t_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);\n\n\t\t\t\t\tif (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\tif (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);\n\t\t\t\tif (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);\n\t\t\t\tif (renderTargetProperties.__webglColorRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);\n\t\t\t\tif (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);\n\t\t\t}\n\n\t\t\tif (renderTarget.isWebGLMultipleRenderTargets) {\n\t\t\t\tfor (let i = 0, il = texture.length; i < il; i++) {\n\t\t\t\t\tconst attachmentProperties = properties.get(texture[i]);\n\n\t\t\t\t\tif (attachmentProperties.__webglTexture) {\n\t\t\t\t\t\t_gl.deleteTexture(attachmentProperties.__webglTexture);\n\n\t\t\t\t\t\tinfo.memory.textures--;\n\t\t\t\t\t}\n\n\t\t\t\t\tproperties.remove(texture[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tproperties.remove(texture);\n\t\t\tproperties.remove(renderTarget);\n\t\t} //\n\n\n\t\tlet textureUnits = 0;\n\n\t\tfunction resetTextureUnits() {\n\t\t\ttextureUnits = 0;\n\t\t}\n\n\t\tfunction allocateTextureUnit() {\n\t\t\tconst textureUnit = textureUnits;\n\n\t\t\tif (textureUnit >= maxTextures) {\n\t\t\t\tconsole.warn('THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures);\n\t\t\t}\n\n\t\t\ttextureUnits += 1;\n\t\t\treturn textureUnit;\n\t\t} //\n\n\n\t\tfunction setTexture2D(texture, slot) {\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\tif (texture.isVideoTexture) updateVideoTexture(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tconst image = texture.image;\n\n\t\t\t\tif (image === undefined) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined');\n\t\t\t\t} else if (image.complete === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');\n\t\t\t\t} else {\n\t\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTexture2DArray(texture, slot) {\n\t\t\tconst textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTexture3D(texture, slot) {\n\t\t\tconst textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_3D, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTextureCube(texture, slot) {\n\t\t\tconst textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadCubeTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n\t\t}\n\n\t\tconst wrappingToGL = {\n\t\t\t[RepeatWrapping]: _gl.REPEAT,\n\t\t\t[ClampToEdgeWrapping]: _gl.CLAMP_TO_EDGE,\n\t\t\t[MirroredRepeatWrapping]: _gl.MIRRORED_REPEAT\n\t\t};\n\t\tconst filterToGL = {\n\t\t\t[NearestFilter]: _gl.NEAREST,\n\t\t\t[NearestMipmapNearestFilter]: _gl.NEAREST_MIPMAP_NEAREST,\n\t\t\t[NearestMipmapLinearFilter]: _gl.NEAREST_MIPMAP_LINEAR,\n\t\t\t[LinearFilter]: _gl.LINEAR,\n\t\t\t[LinearMipmapNearestFilter]: _gl.LINEAR_MIPMAP_NEAREST,\n\t\t\t[LinearMipmapLinearFilter]: _gl.LINEAR_MIPMAP_LINEAR\n\t\t};\n\n\t\tfunction setTextureParameters(textureType, texture, supportsMips) {\n\t\t\tif (supportsMips) {\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);\n\n\t\t\t\tif (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\n\t\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[texture.minFilter]);\n\t\t\t} else {\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);\n\n\t\t\t\tif (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\n\t\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE);\n\t\t\t\t}\n\n\t\t\t\tif (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterFallback(texture.magFilter));\n\n\t\t\t\t_gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterFallback(texture.minFilter));\n\n\t\t\t\tif (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (extensions.has('EXT_texture_filter_anisotropic') === true) {\n\t\t\t\tconst extension = extensions.get('EXT_texture_filter_anisotropic');\n\t\t\t\tif (texture.type === FloatType && extensions.has('OES_texture_float_linear') === false) return; // verify extension for WebGL 1 and WebGL 2\n\n\t\t\t\tif (isWebGL2 === false && texture.type === HalfFloatType && extensions.has('OES_texture_half_float_linear') === false) return; // verify extension for WebGL 1 only\n\n\t\t\t\tif (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {\n\t\t\t\t\t_gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));\n\n\t\t\t\t\tproperties.get(texture).__currentAnisotropy = texture.anisotropy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction initTexture(textureProperties, texture) {\n\t\t\tif (textureProperties.__webglInit === undefined) {\n\t\t\t\ttextureProperties.__webglInit = true;\n\t\t\t\ttexture.addEventListener('dispose', onTextureDispose);\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\t\t\tinfo.memory.textures++;\n\t\t\t}\n\t\t}\n\n\t\tfunction uploadTexture(textureProperties, texture, slot) {\n\t\t\tlet textureType = _gl.TEXTURE_2D;\n\t\t\tif (texture.isDataTexture2DArray) textureType = _gl.TEXTURE_2D_ARRAY;\n\t\t\tif (texture.isDataTexture3D) textureType = _gl.TEXTURE_3D;\n\t\t\tinitTexture(textureProperties, texture);\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(textureType, textureProperties.__webglTexture);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);\n\n\t\t\tconst needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo$1(texture.image) === false;\n\t\t\tconst image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);\n\t\t\tconst supportsMips = isPowerOfTwo$1(image) || isWebGL2,\n\t\t\t\t\t\tglFormat = utils.convert(texture.format);\n\t\t\tlet glType = utils.convert(texture.type),\n\t\t\t\t\tglInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);\n\t\t\tsetTextureParameters(textureType, texture, supportsMips);\n\t\t\tlet mipmap;\n\t\t\tconst mipmaps = texture.mipmaps;\n\n\t\t\tif (texture.isDepthTexture) {\n\t\t\t\t// populate depth texture with dummy data\n\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT;\n\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tif (texture.type === FloatType) {\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\n\t\t\t\t\t} else if (texture.type === UnsignedIntType) {\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT24;\n\t\t\t\t\t} else if (texture.type === UnsignedInt248Type) {\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH24_STENCIL8;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT16; // WebGL2 requires sized internalformat for glTexImage2D\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (texture.type === FloatType) {\n\t\t\t\t\t\tconsole.error('WebGLRenderer: Floating point depth texture requires WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t} // validation checks for WebGL 1\n\n\n\t\t\t\tif (texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\t\tglType = utils.convert(texture.type);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (texture.format === DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {\n\t\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tglInternalFormat = _gl.DEPTH_STENCIL; // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\n\t\t\t\t\tif (texture.type !== UnsignedInt248Type) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert(texture.type);\n\t\t\t\t\t}\n\t\t\t\t} //\n\n\n\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);\n\t\t\t} else if (texture.isDataTexture) {\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\t\t\tif (mipmaps.length > 0 && supportsMips) {\n\t\t\t\t\tfor (let i = 0, il = mipmaps.length; i < il; i++) {\n\t\t\t\t\t\tmipmap = mipmaps[i];\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t\t} else {\n\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t\t}\n\t\t\t} else if (texture.isCompressedTexture) {\n\t\t\t\tfor (let i = 0, il = mipmaps.length; i < il; i++) {\n\t\t\t\t\tmipmap = mipmaps[i];\n\n\t\t\t\t\tif (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n\t\t\t\t\t\tif (glFormat !== null) {\n\t\t\t\t\t\t\tstate.compressedTexImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t} else if (texture.isDataTexture2DArray) {\n\t\t\t\tstate.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t} else if (texture.isDataTexture3D) {\n\t\t\t\tstate.texImage3D(_gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t} else {\n\t\t\t\t// regular Texture (image, video, canvas)\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\t\t\tif (mipmaps.length > 0 && supportsMips) {\n\t\t\t\t\tfor (let i = 0, il = mipmaps.length; i < il; i++) {\n\t\t\t\t\t\tmipmap = mipmaps[i];\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap);\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t\t} else {\n\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\tgenerateMipmap(textureType, texture, image.width, image.height);\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tif (texture.onUpdate) texture.onUpdate(texture);\n\t\t}\n\n\t\tfunction uploadCubeTexture(textureProperties, texture, slot) {\n\t\t\tif (texture.image.length !== 6) return;\n\t\t\tinitTexture(textureProperties, texture);\n\t\t\tstate.activeTexture(_gl.TEXTURE0 + slot);\n\t\t\tstate.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);\n\n\t\t\tconst isCompressed = texture && (texture.isCompressedTexture || texture.image[0].isCompressedTexture);\n\t\t\tconst isDataTexture = texture.image[0] && texture.image[0].isDataTexture;\n\t\t\tconst cubeImage = [];\n\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tif (!isCompressed && !isDataTexture) {\n\t\t\t\t\tcubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);\n\t\t\t\t} else {\n\t\t\t\t\tcubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst image = cubeImage[0],\n\t\t\t\t\t\tsupportsMips = isPowerOfTwo$1(image) || isWebGL2,\n\t\t\t\t\t\tglFormat = utils.convert(texture.format),\n\t\t\t\t\t\tglType = utils.convert(texture.type),\n\t\t\t\t\t\tglInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);\n\t\t\tsetTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);\n\t\t\tlet mipmaps;\n\n\t\t\tif (isCompressed) {\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\tmipmaps = cubeImage[i].mipmaps;\n\n\t\t\t\t\tfor (let j = 0; j < mipmaps.length; j++) {\n\t\t\t\t\t\tconst mipmap = mipmaps[j];\n\n\t\t\t\t\t\tif (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n\t\t\t\t\t\t\tif (glFormat !== null) {\n\t\t\t\t\t\t\t\tstate.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t} else {\n\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\tif (isDataTexture) {\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);\n\n\t\t\t\t\t\tfor (let j = 0; j < mipmaps.length; j++) {\n\t\t\t\t\t\t\tconst mipmap = mipmaps[j];\n\t\t\t\t\t\t\tconst mipmapImage = mipmap.image[i].image;\n\t\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);\n\n\t\t\t\t\t\tfor (let j = 0; j < mipmaps.length; j++) {\n\t\t\t\t\t\t\tconst mipmap = mipmaps[j];\n\t\t\t\t\t\t\tstate.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\n\t\t\t}\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\tgenerateMipmap(_gl.TEXTURE_CUBE_MAP, texture, image.width, image.height);\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tif (texture.onUpdate) texture.onUpdate(texture);\n\t\t} // Render targets\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\n\n\t\tfunction setupFrameBufferTexture(framebuffer, renderTarget, texture, attachment, textureTarget) {\n\t\t\tconst glFormat = utils.convert(texture.format);\n\t\t\tconst glType = utils.convert(texture.type);\n\t\t\tconst glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);\n\n\t\t\tif (textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY) {\n\t\t\t\tstate.texImage3D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null);\n\t\t\t} else {\n\t\t\t\tstate.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n\t\t\t_gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0);\n\n\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, null);\n\t\t} // Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\n\n\t\tfunction setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {\n\t\t\t_gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);\n\n\t\t\tif (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {\n\t\t\t\tlet glInternalFormat = _gl.DEPTH_COMPONENT16;\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tconst depthTexture = renderTarget.depthTexture;\n\n\t\t\t\t\tif (depthTexture && depthTexture.isDepthTexture) {\n\t\t\t\t\t\tif (depthTexture.type === FloatType) {\n\t\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\n\t\t\t\t\t\t} else if (depthTexture.type === UnsignedIntType) {\n\t\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT24;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n\t\t\t} else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tconst samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n\t\t\t} else {\n\t\t\t\t// Use the first texture for MRT so far\n\t\t\t\tconst texture = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture[0] : renderTarget.texture;\n\t\t\t\tconst glFormat = utils.convert(texture.format);\n\t\t\t\tconst glType = utils.convert(texture.type);\n\t\t\t\tconst glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tconst samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n\t\t} // Setup resources for a Depth Texture for a FBO (needs an extension)\n\n\n\t\tfunction setupDepthTexture(framebuffer, renderTarget) {\n\t\t\tconst isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;\n\t\t\tif (isCube) throw new Error('Depth Texture with cube render targets is not supported');\n\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n\t\t\tif (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {\n\t\t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\t\t\t} // upload an empty depth texture with framebuffer size\n\n\n\t\t\tif (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\t\t\t}\n\n\t\t\tsetTexture2D(renderTarget.depthTexture, 0);\n\n\t\t\tconst webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;\n\n\t\t\tif (renderTarget.depthTexture.format === DepthFormat) {\n\t\t\t\t_gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n\t\t\t} else if (renderTarget.depthTexture.format === DepthStencilFormat) {\n\t\t\t\t_gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Unknown depthTexture format');\n\t\t\t}\n\t\t} // Setup GL resources for a non-texture depth buffer\n\n\n\t\tfunction setupDepthRenderbuffer(renderTarget) {\n\t\t\tconst renderTargetProperties = properties.get(renderTarget);\n\t\t\tconst isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\n\t\t\tif (renderTarget.depthTexture) {\n\t\t\t\tif (isCube) throw new Error('target.depthTexture not supported in Cube render targets');\n\t\t\t\tsetupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);\n\t\t\t} else {\n\t\t\t\tif (isCube) {\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, null);\n\t\t} // Set up GL resources for the render target\n\n\n\t\tfunction setupRenderTarget(renderTarget) {\n\t\t\tconst texture = renderTarget.texture;\n\t\t\tconst renderTargetProperties = properties.get(renderTarget);\n\t\t\tconst textureProperties = properties.get(texture);\n\t\t\trenderTarget.addEventListener('dispose', onRenderTargetDispose);\n\n\t\t\tif (renderTarget.isWebGLMultipleRenderTargets !== true) {\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\t\t\ttextureProperties.__version = texture.version;\n\t\t\t\tinfo.memory.textures++;\n\t\t\t}\n\n\t\t\tconst isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\t\t\tconst isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;\n\t\t\tconst isMultisample = renderTarget.isWebGLMultisampleRenderTarget === true;\n\t\t\tconst isRenderTarget3D = texture.isDataTexture3D || texture.isDataTexture2DArray;\n\t\t\tconst supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2; // Handles WebGL2 RGBFormat fallback - #18858\n\n\t\t\tif (isWebGL2 && texture.format === RGBFormat && (texture.type === FloatType || texture.type === HalfFloatType)) {\n\t\t\t\ttexture.format = RGBAFormat;\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.');\n\t\t\t} // Setup framebuffer\n\n\n\t\t\tif (isCube) {\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t\tif (isMultipleRenderTargets) {\n\t\t\t\t\tif (capabilities.drawBuffers) {\n\t\t\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\t\t\tfor (let i = 0, il = textures.length; i < il; i++) {\n\t\t\t\t\t\t\tconst attachmentProperties = properties.get(textures[i]);\n\n\t\t\t\t\t\t\tif (attachmentProperties.__webglTexture === undefined) {\n\t\t\t\t\t\t\t\tattachmentProperties.__webglTexture = _gl.createTexture();\n\t\t\t\t\t\t\t\tinfo.memory.textures++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.');\n\t\t\t\t\t}\n\t\t\t\t} else if (isMultisample) {\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t\t\t_gl.bindRenderbuffer(_gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer);\n\n\t\t\t\t\t\tconst glFormat = utils.convert(texture.format);\n\t\t\t\t\t\tconst glType = utils.convert(texture.type);\n\t\t\t\t\t\tconst glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);\n\t\t\t\t\t\tconst samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t\t_gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\n\t\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n\n\t\t\t\t\t\t_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer);\n\n\t\t\t\t\t\t_gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n\n\t\t\t\t\t\tif (renderTarget.depthBuffer) {\n\t\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, null);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // Setup color buffer\n\n\n\t\t\tif (isCube) {\n\t\t\t\tstate.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n\t\t\t\tsetTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);\n\n\t\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);\n\t\t\t\t}\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t\tgenerateMipmap(_gl.TEXTURE_CUBE_MAP, texture, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\tstate.unbindTexture();\n\t\t\t} else if (isMultipleRenderTargets) {\n\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\tfor (let i = 0, il = textures.length; i < il; i++) {\n\t\t\t\t\tconst attachment = textures[i];\n\t\t\t\t\tconst attachmentProperties = properties.get(attachment);\n\t\t\t\t\tstate.bindTexture(_gl.TEXTURE_2D, attachmentProperties.__webglTexture);\n\t\t\t\t\tsetTextureParameters(_gl.TEXTURE_2D, attachment, supportsMips);\n\t\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D);\n\n\t\t\t\t\tif (textureNeedsGenerateMipmaps(attachment, supportsMips)) {\n\t\t\t\t\t\tgenerateMipmap(_gl.TEXTURE_2D, attachment, renderTarget.width, renderTarget.height);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tstate.unbindTexture();\n\t\t\t} else {\n\t\t\t\tlet glTextureType = _gl.TEXTURE_2D;\n\n\t\t\t\tif (isRenderTarget3D) {\n\t\t\t\t\t// Render targets containing layers, i.e: Texture 3D and 2d arrays\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\tconst isTexture3D = texture.isDataTexture3D;\n\t\t\t\t\t\tglTextureType = isTexture3D ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(glTextureType, textureProperties.__webglTexture);\n\t\t\t\tsetTextureParameters(glTextureType, texture, supportsMips);\n\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType);\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t\tgenerateMipmap(glTextureType, texture, renderTarget.width, renderTarget.height, renderTarget.depth);\n\t\t\t\t}\n\n\t\t\t\tstate.unbindTexture();\n\t\t\t} // Setup depth and stencil buffers\n\n\n\t\t\tif (renderTarget.depthBuffer) {\n\t\t\t\tsetupDepthRenderbuffer(renderTarget);\n\t\t\t}\n\t\t}\n\n\t\tfunction updateRenderTargetMipmap(renderTarget) {\n\t\t\tconst supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;\n\t\t\tconst textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [renderTarget.texture];\n\n\t\t\tfor (let i = 0, il = textures.length; i < il; i++) {\n\t\t\t\tconst texture = textures[i];\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t\tconst target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\n\t\t\t\t\tconst webglTexture = properties.get(texture).__webglTexture;\n\n\t\t\t\t\tstate.bindTexture(target, webglTexture);\n\t\t\t\t\tgenerateMipmap(target, texture, renderTarget.width, renderTarget.height);\n\t\t\t\t\tstate.unbindTexture();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction updateMultisampleRenderTarget(renderTarget) {\n\t\t\tif (renderTarget.isWebGLMultisampleRenderTarget) {\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tconst width = renderTarget.width;\n\t\t\t\t\tconst height = renderTarget.height;\n\t\t\t\t\tlet mask = _gl.COLOR_BUFFER_BIT;\n\t\t\t\t\tif (renderTarget.depthBuffer) mask |= _gl.DEPTH_BUFFER_BIT;\n\t\t\t\t\tif (renderTarget.stencilBuffer) mask |= _gl.STENCIL_BUFFER_BIT;\n\t\t\t\t\tconst renderTargetProperties = properties.get(renderTarget);\n\t\t\t\t\tstate.bindFramebuffer(_gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n\t\t\t\t\tstate.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\t\t_gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST);\n\n\t\t\t\t\tstate.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);\n\t\t\t\t\tstate.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction getRenderTargetSamples(renderTarget) {\n\t\t\treturn isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ? Math.min(maxSamples, renderTarget.samples) : 0;\n\t\t}\n\n\t\tfunction updateVideoTexture(texture) {\n\t\t\tconst frame = info.render.frame; // Check the last frame we updated the VideoTexture\n\n\t\t\tif (_videoTextures.get(texture) !== frame) {\n\t\t\t\t_videoTextures.set(texture, frame);\n\n\t\t\t\ttexture.update();\n\t\t\t}\n\t\t} // backwards compatibility\n\n\n\t\tlet warnedTexture2D = false;\n\t\tlet warnedTextureCube = false;\n\n\t\tfunction safeSetTexture2D(texture, slot) {\n\t\t\tif (texture && texture.isWebGLRenderTarget) {\n\t\t\t\tif (warnedTexture2D === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLTextures.safeSetTexture2D: don\\'t use render targets as textures. Use their .texture property instead.');\n\t\t\t\t\twarnedTexture2D = true;\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\t\t\t}\n\n\t\t\tsetTexture2D(texture, slot);\n\t\t}\n\n\t\tfunction safeSetTextureCube(texture, slot) {\n\t\t\tif (texture && texture.isWebGLCubeRenderTarget) {\n\t\t\t\tif (warnedTextureCube === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLTextures.safeSetTextureCube: don\\'t use cube render targets as textures. Use their .texture property instead.');\n\t\t\t\t\twarnedTextureCube = true;\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\t\t\t}\n\n\t\t\tsetTextureCube(texture, slot);\n\t\t} //\n\n\n\t\tthis.allocateTextureUnit = allocateTextureUnit;\n\t\tthis.resetTextureUnits = resetTextureUnits;\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTexture2DArray = setTexture2DArray;\n\t\tthis.setTexture3D = setTexture3D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\t\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\t\tthis.safeSetTexture2D = safeSetTexture2D;\n\t\tthis.safeSetTextureCube = safeSetTextureCube;\n\t}\n\n\tfunction WebGLUtils(gl, extensions, capabilities) {\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction convert(p) {\n\t\t\tlet extension;\n\t\t\tif (p === UnsignedByteType) return gl.UNSIGNED_BYTE;\n\t\t\tif (p === UnsignedShort4444Type) return gl.UNSIGNED_SHORT_4_4_4_4;\n\t\t\tif (p === UnsignedShort5551Type) return gl.UNSIGNED_SHORT_5_5_5_1;\n\t\t\tif (p === UnsignedShort565Type) return gl.UNSIGNED_SHORT_5_6_5;\n\t\t\tif (p === ByteType) return gl.BYTE;\n\t\t\tif (p === ShortType) return gl.SHORT;\n\t\t\tif (p === UnsignedShortType) return gl.UNSIGNED_SHORT;\n\t\t\tif (p === IntType) return gl.INT;\n\t\t\tif (p === UnsignedIntType) return gl.UNSIGNED_INT;\n\t\t\tif (p === FloatType) return gl.FLOAT;\n\n\t\t\tif (p === HalfFloatType) {\n\t\t\t\tif (isWebGL2) return gl.HALF_FLOAT;\n\t\t\t\textension = extensions.get('OES_texture_half_float');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.HALF_FLOAT_OES;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === AlphaFormat) return gl.ALPHA;\n\t\t\tif (p === RGBFormat) return gl.RGB;\n\t\t\tif (p === RGBAFormat) return gl.RGBA;\n\t\t\tif (p === LuminanceFormat) return gl.LUMINANCE;\n\t\t\tif (p === LuminanceAlphaFormat) return gl.LUMINANCE_ALPHA;\n\t\t\tif (p === DepthFormat) return gl.DEPTH_COMPONENT;\n\t\t\tif (p === DepthStencilFormat) return gl.DEPTH_STENCIL;\n\t\t\tif (p === RedFormat) return gl.RED; // WebGL2 formats.\n\n\t\t\tif (p === RedIntegerFormat) return gl.RED_INTEGER;\n\t\t\tif (p === RGFormat) return gl.RG;\n\t\t\tif (p === RGIntegerFormat) return gl.RG_INTEGER;\n\t\t\tif (p === RGBIntegerFormat) return gl.RGB_INTEGER;\n\t\t\tif (p === RGBAIntegerFormat) return gl.RGBA_INTEGER;\n\n\t\t\tif (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_s3tc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_pvrtc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif (p === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\t\tif (p === RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif (p === RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_ETC1_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_etc1');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_etc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_ETC2_Format) return extension.COMPRESSED_RGB8_ETC2;\n\t\t\t\t\tif (p === RGBA_ETC2_EAC_Format) return extension.COMPRESSED_RGBA8_ETC2_EAC;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format || p === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format || p === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format || p === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format || p === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format || p === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_astc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\t// TODO Complete?\n\t\t\t\t\treturn p;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGBA_BPTC_Format) {\n\t\t\t\textension = extensions.get('EXT_texture_compression_bptc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\t// TODO Complete?\n\t\t\t\t\treturn p;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === UnsignedInt248Type) {\n\t\t\t\tif (isWebGL2) return gl.UNSIGNED_INT_24_8;\n\t\t\t\textension = extensions.get('WEBGL_depth_texture');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tconvert: convert\n\t\t};\n\t}\n\n\tclass ArrayCamera extends PerspectiveCamera {\n\t\tconstructor(array = []) {\n\t\t\tsuper();\n\t\t\tthis.cameras = array;\n\t\t}\n\n\t}\n\n\tArrayCamera.prototype.isArrayCamera = true;\n\n\tclass Group extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'Group';\n\t\t}\n\n\t}\n\n\tGroup.prototype.isGroup = true;\n\n\tconst _moveEvent = {\n\t\ttype: 'move'\n\t};\n\n\tclass WebXRController {\n\t\tconstructor() {\n\t\t\tthis._targetRay = null;\n\t\t\tthis._grip = null;\n\t\t\tthis._hand = null;\n\t\t}\n\n\t\tgetHandSpace() {\n\t\t\tif (this._hand === null) {\n\t\t\t\tthis._hand = new Group();\n\t\t\t\tthis._hand.matrixAutoUpdate = false;\n\t\t\t\tthis._hand.visible = false;\n\t\t\t\tthis._hand.joints = {};\n\t\t\t\tthis._hand.inputState = {\n\t\t\t\t\tpinching: false\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn this._hand;\n\t\t}\n\n\t\tgetTargetRaySpace() {\n\t\t\tif (this._targetRay === null) {\n\t\t\t\tthis._targetRay = new Group();\n\t\t\t\tthis._targetRay.matrixAutoUpdate = false;\n\t\t\t\tthis._targetRay.visible = false;\n\t\t\t\tthis._targetRay.hasLinearVelocity = false;\n\t\t\t\tthis._targetRay.linearVelocity = new Vector3();\n\t\t\t\tthis._targetRay.hasAngularVelocity = false;\n\t\t\t\tthis._targetRay.angularVelocity = new Vector3();\n\t\t\t}\n\n\t\t\treturn this._targetRay;\n\t\t}\n\n\t\tgetGripSpace() {\n\t\t\tif (this._grip === null) {\n\t\t\t\tthis._grip = new Group();\n\t\t\t\tthis._grip.matrixAutoUpdate = false;\n\t\t\t\tthis._grip.visible = false;\n\t\t\t\tthis._grip.hasLinearVelocity = false;\n\t\t\t\tthis._grip.linearVelocity = new Vector3();\n\t\t\t\tthis._grip.hasAngularVelocity = false;\n\t\t\t\tthis._grip.angularVelocity = new Vector3();\n\t\t\t}\n\n\t\t\treturn this._grip;\n\t\t}\n\n\t\tdispatchEvent(event) {\n\t\t\tif (this._targetRay !== null) {\n\t\t\t\tthis._targetRay.dispatchEvent(event);\n\t\t\t}\n\n\t\t\tif (this._grip !== null) {\n\t\t\t\tthis._grip.dispatchEvent(event);\n\t\t\t}\n\n\t\t\tif (this._hand !== null) {\n\t\t\t\tthis._hand.dispatchEvent(event);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tdisconnect(inputSource) {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'disconnected',\n\t\t\t\tdata: inputSource\n\t\t\t});\n\n\t\t\tif (this._targetRay !== null) {\n\t\t\t\tthis._targetRay.visible = false;\n\t\t\t}\n\n\t\t\tif (this._grip !== null) {\n\t\t\t\tthis._grip.visible = false;\n\t\t\t}\n\n\t\t\tif (this._hand !== null) {\n\t\t\t\tthis._hand.visible = false;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tupdate(inputSource, frame, referenceSpace) {\n\t\t\tlet inputPose = null;\n\t\t\tlet gripPose = null;\n\t\t\tlet handPose = null;\n\t\t\tconst targetRay = this._targetRay;\n\t\t\tconst grip = this._grip;\n\t\t\tconst hand = this._hand;\n\n\t\t\tif (inputSource && frame.session.visibilityState !== 'visible-blurred') {\n\t\t\t\tif (targetRay !== null) {\n\t\t\t\t\tinputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);\n\n\t\t\t\t\tif (inputPose !== null) {\n\t\t\t\t\t\ttargetRay.matrix.fromArray(inputPose.transform.matrix);\n\t\t\t\t\t\ttargetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);\n\n\t\t\t\t\t\tif (inputPose.linearVelocity) {\n\t\t\t\t\t\t\ttargetRay.hasLinearVelocity = true;\n\t\t\t\t\t\t\ttargetRay.linearVelocity.copy(inputPose.linearVelocity);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttargetRay.hasLinearVelocity = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (inputPose.angularVelocity) {\n\t\t\t\t\t\t\ttargetRay.hasAngularVelocity = true;\n\t\t\t\t\t\t\ttargetRay.angularVelocity.copy(inputPose.angularVelocity);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttargetRay.hasAngularVelocity = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.dispatchEvent(_moveEvent);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (hand && inputSource.hand) {\n\t\t\t\t\thandPose = true;\n\n\t\t\t\t\tfor (const inputjoint of inputSource.hand.values()) {\n\t\t\t\t\t\t// Update the joints groups with the XRJoint poses\n\t\t\t\t\t\tconst jointPose = frame.getJointPose(inputjoint, referenceSpace);\n\n\t\t\t\t\t\tif (hand.joints[inputjoint.jointName] === undefined) {\n\t\t\t\t\t\t\t// The transform of this joint will be updated with the joint pose on each frame\n\t\t\t\t\t\t\tconst joint = new Group();\n\t\t\t\t\t\t\tjoint.matrixAutoUpdate = false;\n\t\t\t\t\t\t\tjoint.visible = false;\n\t\t\t\t\t\t\thand.joints[inputjoint.jointName] = joint; // ??\n\n\t\t\t\t\t\t\thand.add(joint);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst joint = hand.joints[inputjoint.jointName];\n\n\t\t\t\t\t\tif (jointPose !== null) {\n\t\t\t\t\t\t\tjoint.matrix.fromArray(jointPose.transform.matrix);\n\t\t\t\t\t\t\tjoint.matrix.decompose(joint.position, joint.rotation, joint.scale);\n\t\t\t\t\t\t\tjoint.jointRadius = jointPose.radius;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tjoint.visible = jointPose !== null;\n\t\t\t\t\t} // Custom events\n\t\t\t\t\t// Check pinchz\n\n\n\t\t\t\t\tconst indexTip = hand.joints['index-finger-tip'];\n\t\t\t\t\tconst thumbTip = hand.joints['thumb-tip'];\n\t\t\t\t\tconst distance = indexTip.position.distanceTo(thumbTip.position);\n\t\t\t\t\tconst distanceToPinch = 0.02;\n\t\t\t\t\tconst threshold = 0.005;\n\n\t\t\t\t\tif (hand.inputState.pinching && distance > distanceToPinch + threshold) {\n\t\t\t\t\t\thand.inputState.pinching = false;\n\t\t\t\t\t\tthis.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'pinchend',\n\t\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\t\ttarget: this\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {\n\t\t\t\t\t\thand.inputState.pinching = true;\n\t\t\t\t\t\tthis.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'pinchstart',\n\t\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\t\ttarget: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (grip !== null && inputSource.gripSpace) {\n\t\t\t\t\t\tgripPose = frame.getPose(inputSource.gripSpace, referenceSpace);\n\n\t\t\t\t\t\tif (gripPose !== null) {\n\t\t\t\t\t\t\tgrip.matrix.fromArray(gripPose.transform.matrix);\n\t\t\t\t\t\t\tgrip.matrix.decompose(grip.position, grip.rotation, grip.scale);\n\n\t\t\t\t\t\t\tif (gripPose.linearVelocity) {\n\t\t\t\t\t\t\t\tgrip.hasLinearVelocity = true;\n\t\t\t\t\t\t\t\tgrip.linearVelocity.copy(gripPose.linearVelocity);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tgrip.hasLinearVelocity = false;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (gripPose.angularVelocity) {\n\t\t\t\t\t\t\t\tgrip.hasAngularVelocity = true;\n\t\t\t\t\t\t\t\tgrip.angularVelocity.copy(gripPose.angularVelocity);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tgrip.hasAngularVelocity = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (targetRay !== null) {\n\t\t\t\ttargetRay.visible = inputPose !== null;\n\t\t\t}\n\n\t\t\tif (grip !== null) {\n\t\t\t\tgrip.visible = gripPose !== null;\n\t\t\t}\n\n\t\t\tif (hand !== null) {\n\t\t\t\thand.visible = handPose !== null;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass WebXRManager extends EventDispatcher {\n\t\tconstructor(renderer, gl) {\n\t\t\tsuper();\n\t\t\tconst scope = this;\n\t\t\tconst state = renderer.state;\n\t\t\tlet session = null;\n\t\t\tlet framebufferScaleFactor = 1.0;\n\t\t\tlet referenceSpace = null;\n\t\t\tlet referenceSpaceType = 'local-floor';\n\t\t\tlet pose = null;\n\t\t\tlet glBinding = null;\n\t\t\tlet glFramebuffer = null;\n\t\t\tlet glProjLayer = null;\n\t\t\tlet glBaseLayer = null;\n\t\t\tlet isMultisample = false;\n\t\t\tlet glMultisampledFramebuffer = null;\n\t\t\tlet glColorRenderbuffer = null;\n\t\t\tlet glDepthRenderbuffer = null;\n\t\t\tlet xrFrame = null;\n\t\t\tlet depthStyle = null;\n\t\t\tlet clearStyle = null;\n\t\t\tconst controllers = [];\n\t\t\tconst inputSourcesMap = new Map(); //\n\n\t\t\tconst cameraL = new PerspectiveCamera();\n\t\t\tcameraL.layers.enable(1);\n\t\t\tcameraL.viewport = new Vector4();\n\t\t\tconst cameraR = new PerspectiveCamera();\n\t\t\tcameraR.layers.enable(2);\n\t\t\tcameraR.viewport = new Vector4();\n\t\t\tconst cameras = [cameraL, cameraR];\n\t\t\tconst cameraVR = new ArrayCamera();\n\t\t\tcameraVR.layers.enable(1);\n\t\t\tcameraVR.layers.enable(2);\n\t\t\tlet _currentDepthNear = null;\n\t\t\tlet _currentDepthFar = null; //\n\n\t\t\tthis.cameraAutoUpdate = true;\n\t\t\tthis.enabled = false;\n\t\t\tthis.isPresenting = false;\n\n\t\t\tthis.getController = function (index) {\n\t\t\t\tlet controller = controllers[index];\n\n\t\t\t\tif (controller === undefined) {\n\t\t\t\t\tcontroller = new WebXRController();\n\t\t\t\t\tcontrollers[index] = controller;\n\t\t\t\t}\n\n\t\t\t\treturn controller.getTargetRaySpace();\n\t\t\t};\n\n\t\t\tthis.getControllerGrip = function (index) {\n\t\t\t\tlet controller = controllers[index];\n\n\t\t\t\tif (controller === undefined) {\n\t\t\t\t\tcontroller = new WebXRController();\n\t\t\t\t\tcontrollers[index] = controller;\n\t\t\t\t}\n\n\t\t\t\treturn controller.getGripSpace();\n\t\t\t};\n\n\t\t\tthis.getHand = function (index) {\n\t\t\t\tlet controller = controllers[index];\n\n\t\t\t\tif (controller === undefined) {\n\t\t\t\t\tcontroller = new WebXRController();\n\t\t\t\t\tcontrollers[index] = controller;\n\t\t\t\t}\n\n\t\t\t\treturn controller.getHandSpace();\n\t\t\t}; //\n\n\n\t\t\tfunction onSessionEvent(event) {\n\t\t\t\tconst controller = inputSourcesMap.get(event.inputSource);\n\n\t\t\t\tif (controller) {\n\t\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\t\ttype: event.type,\n\t\t\t\t\t\tdata: event.inputSource\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction onSessionEnd() {\n\t\t\t\tinputSourcesMap.forEach(function (controller, inputSource) {\n\t\t\t\t\tcontroller.disconnect(inputSource);\n\t\t\t\t});\n\t\t\t\tinputSourcesMap.clear();\n\t\t\t\t_currentDepthNear = null;\n\t\t\t\t_currentDepthFar = null; // restore framebuffer/rendering state\n\n\t\t\t\tstate.bindXRFramebuffer(null);\n\t\t\t\trenderer.setRenderTarget(renderer.getRenderTarget());\n\t\t\t\tif (glFramebuffer) gl.deleteFramebuffer(glFramebuffer);\n\t\t\t\tif (glMultisampledFramebuffer) gl.deleteFramebuffer(glMultisampledFramebuffer);\n\t\t\t\tif (glColorRenderbuffer) gl.deleteRenderbuffer(glColorRenderbuffer);\n\t\t\t\tif (glDepthRenderbuffer) gl.deleteRenderbuffer(glDepthRenderbuffer);\n\t\t\t\tglFramebuffer = null;\n\t\t\t\tglMultisampledFramebuffer = null;\n\t\t\t\tglColorRenderbuffer = null;\n\t\t\t\tglDepthRenderbuffer = null;\n\t\t\t\tglBaseLayer = null;\n\t\t\t\tglProjLayer = null;\n\t\t\t\tglBinding = null;\n\t\t\t\tsession = null; //\n\n\t\t\t\tanimation.stop();\n\t\t\t\tscope.isPresenting = false;\n\t\t\t\tscope.dispatchEvent({\n\t\t\t\t\ttype: 'sessionend'\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis.setFramebufferScaleFactor = function (value) {\n\t\t\t\tframebufferScaleFactor = value;\n\n\t\t\t\tif (scope.isPresenting === true) {\n\t\t\t\t\tconsole.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.');\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.setReferenceSpaceType = function (value) {\n\t\t\t\treferenceSpaceType = value;\n\n\t\t\t\tif (scope.isPresenting === true) {\n\t\t\t\t\tconsole.warn('THREE.WebXRManager: Cannot change reference space type while presenting.');\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.getReferenceSpace = function () {\n\t\t\t\treturn referenceSpace;\n\t\t\t};\n\n\t\t\tthis.getBaseLayer = function () {\n\t\t\t\treturn glProjLayer !== null ? glProjLayer : glBaseLayer;\n\t\t\t};\n\n\t\t\tthis.getBinding = function () {\n\t\t\t\treturn glBinding;\n\t\t\t};\n\n\t\t\tthis.getFrame = function () {\n\t\t\t\treturn xrFrame;\n\t\t\t};\n\n\t\t\tthis.getSession = function () {\n\t\t\t\treturn session;\n\t\t\t};\n\n\t\t\tthis.setSession = async function (value) {\n\t\t\t\tsession = value;\n\n\t\t\t\tif (session !== null) {\n\t\t\t\t\tsession.addEventListener('select', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('selectstart', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('selectend', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('squeeze', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('squeezestart', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('squeezeend', onSessionEvent);\n\t\t\t\t\tsession.addEventListener('end', onSessionEnd);\n\t\t\t\t\tsession.addEventListener('inputsourceschange', onInputSourcesChange);\n\t\t\t\t\tconst attributes = gl.getContextAttributes();\n\n\t\t\t\t\tif (attributes.xrCompatible !== true) {\n\t\t\t\t\t\tawait gl.makeXRCompatible();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (session.renderState.layers === undefined) {\n\t\t\t\t\t\tconst layerInit = {\n\t\t\t\t\t\t\tantialias: attributes.antialias,\n\t\t\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t\t\t};\n\t\t\t\t\t\tglBaseLayer = new XRWebGLLayer(session, gl, layerInit);\n\t\t\t\t\t\tsession.updateRenderState({\n\t\t\t\t\t\t\tbaseLayer: glBaseLayer\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (gl instanceof WebGLRenderingContext) {\n\t\t\t\t\t\t// Use old style webgl layer because we can't use MSAA\n\t\t\t\t\t\t// WebGL2 support.\n\t\t\t\t\t\tconst layerInit = {\n\t\t\t\t\t\t\tantialias: true,\n\t\t\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t\t\t};\n\t\t\t\t\t\tglBaseLayer = new XRWebGLLayer(session, gl, layerInit);\n\t\t\t\t\t\tsession.updateRenderState({\n\t\t\t\t\t\t\tlayers: [glBaseLayer]\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tisMultisample = attributes.antialias;\n\t\t\t\t\t\tlet depthFormat = null;\n\n\t\t\t\t\t\tif (attributes.depth) {\n\t\t\t\t\t\t\tclearStyle = gl.DEPTH_BUFFER_BIT;\n\t\t\t\t\t\t\tif (attributes.stencil) clearStyle |= gl.STENCIL_BUFFER_BIT;\n\t\t\t\t\t\t\tdepthStyle = attributes.stencil ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;\n\t\t\t\t\t\t\tdepthFormat = attributes.stencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst projectionlayerInit = {\n\t\t\t\t\t\t\tcolorFormat: attributes.alpha ? gl.RGBA8 : gl.RGB8,\n\t\t\t\t\t\t\tdepthFormat: depthFormat,\n\t\t\t\t\t\t\tscaleFactor: framebufferScaleFactor\n\t\t\t\t\t\t};\n\t\t\t\t\t\tglBinding = new XRWebGLBinding(session, gl);\n\t\t\t\t\t\tglProjLayer = glBinding.createProjectionLayer(projectionlayerInit);\n\t\t\t\t\t\tglFramebuffer = gl.createFramebuffer();\n\t\t\t\t\t\tsession.updateRenderState({\n\t\t\t\t\t\t\tlayers: [glProjLayer]\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (isMultisample) {\n\t\t\t\t\t\t\tglMultisampledFramebuffer = gl.createFramebuffer();\n\t\t\t\t\t\t\tglColorRenderbuffer = gl.createRenderbuffer();\n\t\t\t\t\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, glColorRenderbuffer);\n\t\t\t\t\t\t\tgl.renderbufferStorageMultisample(gl.RENDERBUFFER, 4, gl.RGBA8, glProjLayer.textureWidth, glProjLayer.textureHeight);\n\t\t\t\t\t\t\tstate.bindFramebuffer(gl.FRAMEBUFFER, glMultisampledFramebuffer);\n\t\t\t\t\t\t\tgl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, glColorRenderbuffer);\n\t\t\t\t\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\n\t\t\t\t\t\t\tif (depthFormat !== null) {\n\t\t\t\t\t\t\t\tglDepthRenderbuffer = gl.createRenderbuffer();\n\t\t\t\t\t\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, glDepthRenderbuffer);\n\t\t\t\t\t\t\t\tgl.renderbufferStorageMultisample(gl.RENDERBUFFER, 4, depthFormat, glProjLayer.textureWidth, glProjLayer.textureHeight);\n\t\t\t\t\t\t\t\tgl.framebufferRenderbuffer(gl.FRAMEBUFFER, depthStyle, gl.RENDERBUFFER, glDepthRenderbuffer);\n\t\t\t\t\t\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tstate.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treferenceSpace = await session.requestReferenceSpace(referenceSpaceType);\n\t\t\t\t\tanimation.setContext(session);\n\t\t\t\t\tanimation.start();\n\t\t\t\t\tscope.isPresenting = true;\n\t\t\t\t\tscope.dispatchEvent({\n\t\t\t\t\t\ttype: 'sessionstart'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tfunction onInputSourcesChange(event) {\n\t\t\t\tconst inputSources = session.inputSources; // Assign inputSources to available controllers\n\n\t\t\t\tfor (let i = 0; i < controllers.length; i++) {\n\t\t\t\t\tinputSourcesMap.set(inputSources[i], controllers[i]);\n\t\t\t\t} // Notify disconnected\n\n\n\t\t\t\tfor (let i = 0; i < event.removed.length; i++) {\n\t\t\t\t\tconst inputSource = event.removed[i];\n\t\t\t\t\tconst controller = inputSourcesMap.get(inputSource);\n\n\t\t\t\t\tif (controller) {\n\t\t\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'disconnected',\n\t\t\t\t\t\t\tdata: inputSource\n\t\t\t\t\t\t});\n\t\t\t\t\t\tinputSourcesMap.delete(inputSource);\n\t\t\t\t\t}\n\t\t\t\t} // Notify connected\n\n\n\t\t\t\tfor (let i = 0; i < event.added.length; i++) {\n\t\t\t\t\tconst inputSource = event.added[i];\n\t\t\t\t\tconst controller = inputSourcesMap.get(inputSource);\n\n\t\t\t\t\tif (controller) {\n\t\t\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'connected',\n\t\t\t\t\t\t\tdata: inputSource\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tconst cameraLPos = new Vector3();\n\t\t\tconst cameraRPos = new Vector3();\n\t\t\t/**\n\t\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t\t * the cameras' projection and world matrices have already been set.\n\t\t\t * And that near and far planes are identical for both cameras.\n\t\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t\t */\n\n\t\t\tfunction setProjectionFromUnion(camera, cameraL, cameraR) {\n\t\t\t\tcameraLPos.setFromMatrixPosition(cameraL.matrixWorld);\n\t\t\t\tcameraRPos.setFromMatrixPosition(cameraR.matrixWorld);\n\t\t\t\tconst ipd = cameraLPos.distanceTo(cameraRPos);\n\t\t\t\tconst projL = cameraL.projectionMatrix.elements;\n\t\t\t\tconst projR = cameraR.projectionMatrix.elements; // VR systems will have identical far and near planes, and\n\t\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t\t// Use the left camera for these values.\n\n\t\t\t\tconst near = projL[14] / (projL[10] - 1);\n\t\t\t\tconst far = projL[14] / (projL[10] + 1);\n\t\t\t\tconst topFov = (projL[9] + 1) / projL[5];\n\t\t\t\tconst bottomFov = (projL[9] - 1) / projL[5];\n\t\t\t\tconst leftFov = (projL[8] - 1) / projL[0];\n\t\t\t\tconst rightFov = (projR[8] + 1) / projR[0];\n\t\t\t\tconst left = near * leftFov;\n\t\t\t\tconst right = near * rightFov; // Calculate the new camera's position offset from the\n\t\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\n\t\t\t\tconst zOffset = ipd / (-leftFov + rightFov);\n\t\t\t\tconst xOffset = zOffset * -leftFov; // TODO: Better way to apply this offset?\n\n\t\t\t\tcameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);\n\t\t\t\tcamera.translateX(xOffset);\n\t\t\t\tcamera.translateZ(zOffset);\n\t\t\t\tcamera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);\n\t\t\t\tcamera.matrixWorldInverse.copy(camera.matrixWorld).invert(); // Find the union of the frustum values of the cameras and scale\n\t\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t\t// although must now be relative to the new union camera.\n\n\t\t\t\tconst near2 = near + zOffset;\n\t\t\t\tconst far2 = far + zOffset;\n\t\t\t\tconst left2 = left - xOffset;\n\t\t\t\tconst right2 = right + (ipd - xOffset);\n\t\t\t\tconst top2 = topFov * far / far2 * near2;\n\t\t\t\tconst bottom2 = bottomFov * far / far2 * near2;\n\t\t\t\tcamera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);\n\t\t\t}\n\n\t\t\tfunction updateCamera(camera, parent) {\n\t\t\t\tif (parent === null) {\n\t\t\t\t\tcamera.matrixWorld.copy(camera.matrix);\n\t\t\t\t} else {\n\t\t\t\t\tcamera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);\n\t\t\t\t}\n\n\t\t\t\tcamera.matrixWorldInverse.copy(camera.matrixWorld).invert();\n\t\t\t}\n\n\t\t\tthis.updateCamera = function (camera) {\n\t\t\t\tif (session === null) return;\n\t\t\t\tcameraVR.near = cameraR.near = cameraL.near = camera.near;\n\t\t\t\tcameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\t\t\tif (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {\n\t\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\t\t\t\t\tsession.updateRenderState({\n\t\t\t\t\t\tdepthNear: cameraVR.near,\n\t\t\t\t\t\tdepthFar: cameraVR.far\n\t\t\t\t\t});\n\t\t\t\t\t_currentDepthNear = cameraVR.near;\n\t\t\t\t\t_currentDepthFar = cameraVR.far;\n\t\t\t\t}\n\n\t\t\t\tconst parent = camera.parent;\n\t\t\t\tconst cameras = cameraVR.cameras;\n\t\t\t\tupdateCamera(cameraVR, parent);\n\n\t\t\t\tfor (let i = 0; i < cameras.length; i++) {\n\t\t\t\t\tupdateCamera(cameras[i], parent);\n\t\t\t\t}\n\n\t\t\t\tcameraVR.matrixWorld.decompose(cameraVR.position, cameraVR.quaternion, cameraVR.scale); // update user camera and its children\n\n\t\t\t\tcamera.position.copy(cameraVR.position);\n\t\t\t\tcamera.quaternion.copy(cameraVR.quaternion);\n\t\t\t\tcamera.scale.copy(cameraVR.scale);\n\t\t\t\tcamera.matrix.copy(cameraVR.matrix);\n\t\t\t\tcamera.matrixWorld.copy(cameraVR.matrixWorld);\n\t\t\t\tconst children = camera.children;\n\n\t\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\t\tchildren[i].updateMatrixWorld(true);\n\t\t\t\t} // update projection matrix for proper view frustum culling\n\n\n\t\t\t\tif (cameras.length === 2) {\n\t\t\t\t\tsetProjectionFromUnion(cameraVR, cameraL, cameraR);\n\t\t\t\t} else {\n\t\t\t\t\t// assume single camera setup (AR)\n\t\t\t\t\tcameraVR.projectionMatrix.copy(cameraL.projectionMatrix);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.getCamera = function () {\n\t\t\t\treturn cameraVR;\n\t\t\t};\n\n\t\t\tthis.getFoveation = function () {\n\t\t\t\tif (glProjLayer !== null) {\n\t\t\t\t\treturn glProjLayer.fixedFoveation;\n\t\t\t\t}\n\n\t\t\t\tif (glBaseLayer !== null) {\n\t\t\t\t\treturn glBaseLayer.fixedFoveation;\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t};\n\n\t\t\tthis.setFoveation = function (foveation) {\n\t\t\t\t// 0 = no foveation = full resolution\n\t\t\t\t// 1 = maximum foveation = the edges render at lower resolution\n\t\t\t\tif (glProjLayer !== null) {\n\t\t\t\t\tglProjLayer.fixedFoveation = foveation;\n\t\t\t\t}\n\n\t\t\t\tif (glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined) {\n\t\t\t\t\tglBaseLayer.fixedFoveation = foveation;\n\t\t\t\t}\n\t\t\t}; // Animation Loop\n\n\n\t\t\tlet onAnimationFrameCallback = null;\n\n\t\t\tfunction onAnimationFrame(time, frame) {\n\t\t\t\tpose = frame.getViewerPose(referenceSpace);\n\t\t\t\txrFrame = frame;\n\n\t\t\t\tif (pose !== null) {\n\t\t\t\t\tconst views = pose.views;\n\n\t\t\t\t\tif (glBaseLayer !== null) {\n\t\t\t\t\t\tstate.bindXRFramebuffer(glBaseLayer.framebuffer);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet cameraVRNeedsUpdate = false; // check if it's necessary to rebuild cameraVR's camera list\n\n\t\t\t\t\tif (views.length !== cameraVR.cameras.length) {\n\t\t\t\t\t\tcameraVR.cameras.length = 0;\n\t\t\t\t\t\tcameraVRNeedsUpdate = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (let i = 0; i < views.length; i++) {\n\t\t\t\t\t\tconst view = views[i];\n\t\t\t\t\t\tlet viewport = null;\n\n\t\t\t\t\t\tif (glBaseLayer !== null) {\n\t\t\t\t\t\t\tviewport = glBaseLayer.getViewport(view);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst glSubImage = glBinding.getViewSubImage(glProjLayer, view);\n\t\t\t\t\t\t\tstate.bindXRFramebuffer(glFramebuffer);\n\n\t\t\t\t\t\t\tif (glSubImage.depthStencilTexture !== undefined) {\n\t\t\t\t\t\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, depthStyle, gl.TEXTURE_2D, glSubImage.depthStencilTexture, 0);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, glSubImage.colorTexture, 0);\n\t\t\t\t\t\t\tviewport = glSubImage.viewport;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst camera = cameras[i];\n\t\t\t\t\t\tcamera.matrix.fromArray(view.transform.matrix);\n\t\t\t\t\t\tcamera.projectionMatrix.fromArray(view.projectionMatrix);\n\t\t\t\t\t\tcamera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);\n\n\t\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\t\tcameraVR.matrix.copy(camera.matrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (cameraVRNeedsUpdate === true) {\n\t\t\t\t\t\t\tcameraVR.cameras.push(camera);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isMultisample) {\n\t\t\t\t\t\tstate.bindXRFramebuffer(glMultisampledFramebuffer);\n\t\t\t\t\t\tif (clearStyle !== null) gl.clear(clearStyle);\n\t\t\t\t\t}\n\t\t\t\t} //\n\n\n\t\t\t\tconst inputSources = session.inputSources;\n\n\t\t\t\tfor (let i = 0; i < controllers.length; i++) {\n\t\t\t\t\tconst controller = controllers[i];\n\t\t\t\t\tconst inputSource = inputSources[i];\n\t\t\t\t\tcontroller.update(inputSource, frame, referenceSpace);\n\t\t\t\t}\n\n\t\t\t\tif (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tconst width = glProjLayer.textureWidth;\n\t\t\t\t\tconst height = glProjLayer.textureHeight;\n\t\t\t\t\tstate.bindFramebuffer(gl.READ_FRAMEBUFFER, glMultisampledFramebuffer);\n\t\t\t\t\tstate.bindFramebuffer(gl.DRAW_FRAMEBUFFER, glFramebuffer); // Invalidate the depth here to avoid flush of the depth data to main memory.\n\n\t\t\t\t\tgl.invalidateFramebuffer(gl.READ_FRAMEBUFFER, [depthStyle]);\n\t\t\t\t\tgl.invalidateFramebuffer(gl.DRAW_FRAMEBUFFER, [depthStyle]);\n\t\t\t\t\tgl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, gl.COLOR_BUFFER_BIT, gl.NEAREST); // Invalidate the MSAA buffer because it's not needed anymore.\n\n\t\t\t\t\tgl.invalidateFramebuffer(gl.READ_FRAMEBUFFER, [gl.COLOR_ATTACHMENT0]);\n\t\t\t\t\tstate.bindFramebuffer(gl.READ_FRAMEBUFFER, null);\n\t\t\t\t\tstate.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\n\t\t\t\t\tstate.bindFramebuffer(gl.FRAMEBUFFER, glMultisampledFramebuffer);\n\t\t\t\t}\n\n\t\t\t\txrFrame = null;\n\t\t\t}\n\n\t\t\tconst animation = new WebGLAnimation();\n\t\t\tanimation.setAnimationLoop(onAnimationFrame);\n\n\t\t\tthis.setAnimationLoop = function (callback) {\n\t\t\t\tonAnimationFrameCallback = callback;\n\t\t\t};\n\n\t\t\tthis.dispose = function () {};\n\t\t}\n\n\t}\n\n\tfunction WebGLMaterials(properties) {\n\t\tfunction refreshFogUniforms(uniforms, fog) {\n\t\t\tuniforms.fogColor.value.copy(fog.color);\n\n\t\t\tif (fog.isFog) {\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\t\t\t} else if (fog.isFogExp2) {\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshMaterialUniforms(uniforms, material, pixelRatio, height, transmissionRenderTarget) {\n\t\t\tif (material.isMeshBasicMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t} else if (material.isMeshLambertMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsLambert(uniforms, material);\n\t\t\t} else if (material.isMeshToonMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsToon(uniforms, material);\n\t\t\t} else if (material.isMeshPhongMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsPhong(uniforms, material);\n\t\t\t} else if (material.isMeshStandardMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\n\t\t\t\tif (material.isMeshPhysicalMaterial) {\n\t\t\t\t\trefreshUniformsPhysical(uniforms, material, transmissionRenderTarget);\n\t\t\t\t} else {\n\t\t\t\t\trefreshUniformsStandard(uniforms, material);\n\t\t\t\t}\n\t\t\t} else if (material.isMeshMatcapMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsMatcap(uniforms, material);\n\t\t\t} else if (material.isMeshDepthMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsDepth(uniforms, material);\n\t\t\t} else if (material.isMeshDistanceMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsDistance(uniforms, material);\n\t\t\t} else if (material.isMeshNormalMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsNormal(uniforms, material);\n\t\t\t} else if (material.isLineBasicMaterial) {\n\t\t\t\trefreshUniformsLine(uniforms, material);\n\n\t\t\t\tif (material.isLineDashedMaterial) {\n\t\t\t\t\trefreshUniformsDash(uniforms, material);\n\t\t\t\t}\n\t\t\t} else if (material.isPointsMaterial) {\n\t\t\t\trefreshUniformsPoints(uniforms, material, pixelRatio, height);\n\t\t\t} else if (material.isSpriteMaterial) {\n\t\t\t\trefreshUniformsSprites(uniforms, material);\n\t\t\t} else if (material.isShadowMaterial) {\n\t\t\t\tuniforms.color.value.copy(material.color);\n\t\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\t} else if (material.isShaderMaterial) {\n\t\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsCommon(uniforms, material) {\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\tif (material.color) {\n\t\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\t}\n\n\t\t\tif (material.emissive) {\n\t\t\t\tuniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);\n\t\t\t}\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (material.specularMap) {\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\t\t\t}\n\n\t\t\tif (material.alphaTest > 0) {\n\t\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\t\t\t}\n\n\t\t\tconst envMap = properties.get(material).envMap;\n\n\t\t\tif (envMap) {\n\t\t\t\tuniforms.envMap.value = envMap;\n\t\t\t\tuniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\t\tuniforms.ior.value = material.ior;\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\t\tconst maxMipLevel = properties.get(envMap).__maxMipLevel;\n\n\t\t\t\tif (maxMipLevel !== undefined) {\n\t\t\t\t\tuniforms.maxMipLevel.value = maxMipLevel;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (material.lightMap) {\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\t\t}\n\n\t\t\tif (material.aoMap) {\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. displacementMap map\n\t\t\t// 4. normal map\n\t\t\t// 5. bump map\n\t\t\t// 6. roughnessMap map\n\t\t\t// 7. metalnessMap map\n\t\t\t// 8. alphaMap map\n\t\t\t// 9. emissiveMap map\n\t\t\t// 10. clearcoat map\n\t\t\t// 11. clearcoat normal map\n\t\t\t// 12. clearcoat roughnessMap map\n\t\t\t// 13. specular intensity map\n\t\t\t// 14. specular tint map\n\t\t\t// 15. transmission map\n\t\t\t// 16. thickness map\n\n\n\t\t\tlet uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.specularMap) {\n\t\t\t\tuvScaleMap = material.specularMap;\n\t\t\t} else if (material.displacementMap) {\n\t\t\t\tuvScaleMap = material.displacementMap;\n\t\t\t} else if (material.normalMap) {\n\t\t\t\tuvScaleMap = material.normalMap;\n\t\t\t} else if (material.bumpMap) {\n\t\t\t\tuvScaleMap = material.bumpMap;\n\t\t\t} else if (material.roughnessMap) {\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\t\t\t} else if (material.metalnessMap) {\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t} else if (material.emissiveMap) {\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\t\t\t} else if (material.clearcoatMap) {\n\t\t\t\tuvScaleMap = material.clearcoatMap;\n\t\t\t} else if (material.clearcoatNormalMap) {\n\t\t\t\tuvScaleMap = material.clearcoatNormalMap;\n\t\t\t} else if (material.clearcoatRoughnessMap) {\n\t\t\t\tuvScaleMap = material.clearcoatRoughnessMap;\n\t\t\t} else if (material.specularIntensityMap) {\n\t\t\t\tuvScaleMap = material.specularIntensityMap;\n\t\t\t} else if (material.specularColorMap) {\n\t\t\t\tuvScaleMap = material.specularColorMap;\n\t\t\t} else if (material.transmissionMap) {\n\t\t\t\tuvScaleMap = material.transmissionMap;\n\t\t\t} else if (material.thicknessMap) {\n\t\t\t\tuvScaleMap = material.thicknessMap;\n\t\t\t} else if (material.sheenColorMap) {\n\t\t\t\tuvScaleMap = material.sheenColorMap;\n\t\t\t} else if (material.sheenRoughnessMap) {\n\t\t\t\tuvScaleMap = material.sheenRoughnessMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\t// backwards compatibility\n\t\t\t\tif (uvScaleMap.isWebGLRenderTarget) {\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\t\t\t\t}\n\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t} // uv repeat and offset setting priorities for uv2\n\t\t\t// 1. ao map\n\t\t\t// 2. light map\n\n\n\t\t\tlet uv2ScaleMap;\n\n\t\t\tif (material.aoMap) {\n\t\t\t\tuv2ScaleMap = material.aoMap;\n\t\t\t} else if (material.lightMap) {\n\t\t\t\tuv2ScaleMap = material.lightMap;\n\t\t\t}\n\n\t\t\tif (uv2ScaleMap !== undefined) {\n\t\t\t\t// backwards compatibility\n\t\t\t\tif (uv2ScaleMap.isWebGLRenderTarget) {\n\t\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\n\t\t\t\t}\n\n\t\t\t\tif (uv2ScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuv2ScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsLine(uniforms, material) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t}\n\n\t\tfunction refreshUniformsDash(uniforms, material) {\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\t\t}\n\n\t\tfunction refreshUniformsPoints(uniforms, material, pixelRatio, height) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * pixelRatio;\n\t\t\tuniforms.scale.value = height * 0.5;\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (material.alphaTest > 0) {\n\t\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\n\t\t\tlet uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsSprites(uniforms, material) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.rotation.value = material.rotation;\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (material.alphaTest > 0) {\n\t\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\n\t\t\tlet uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsLambert(uniforms, material) {\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsPhong(uniforms, material) {\n\t\t\tuniforms.specular.value.copy(material.specular);\n\t\t\tuniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsToon(uniforms, material) {\n\t\t\tif (material.gradientMap) {\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\t\t\t}\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsStandard(uniforms, material) {\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\n\t\t\tif (material.roughnessMap) {\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\t\t\t}\n\n\t\t\tif (material.metalnessMap) {\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\t\t\t}\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\n\t\t\tconst envMap = properties.get(material).envMap;\n\n\t\t\tif (envMap) {\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {\n\t\t\trefreshUniformsStandard(uniforms, material);\n\t\t\tuniforms.ior.value = material.ior; // also part of uniforms common\n\n\t\t\tif (material.sheen > 0) {\n\t\t\t\tuniforms.sheenColor.value.copy(material.sheenColor).multiplyScalar(material.sheen);\n\t\t\t\tuniforms.sheenRoughness.value = material.sheenRoughness;\n\n\t\t\t\tif (material.sheenColorMap) {\n\t\t\t\t\tuniforms.sheenColorMap.value = material.sheenColorMap;\n\t\t\t\t}\n\n\t\t\t\tif (material.sheenRoughnessMap) {\n\t\t\t\t\tuniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (material.clearcoat > 0) {\n\t\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\n\t\t\t\tif (material.clearcoatMap) {\n\t\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\t\t\t\t}\n\n\t\t\t\tif (material.clearcoatRoughnessMap) {\n\t\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\t\t\t\t}\n\n\t\t\t\tif (material.clearcoatNormalMap) {\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);\n\t\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\t\tif (material.side === BackSide) {\n\t\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (material.transmission > 0) {\n\t\t\t\tuniforms.transmission.value = material.transmission;\n\t\t\t\tuniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;\n\t\t\t\tuniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);\n\n\t\t\t\tif (material.transmissionMap) {\n\t\t\t\t\tuniforms.transmissionMap.value = material.transmissionMap;\n\t\t\t\t}\n\n\t\t\t\tuniforms.thickness.value = material.thickness;\n\n\t\t\t\tif (material.thicknessMap) {\n\t\t\t\t\tuniforms.thicknessMap.value = material.thicknessMap;\n\t\t\t\t}\n\n\t\t\t\tuniforms.attenuationDistance.value = material.attenuationDistance;\n\t\t\t\tuniforms.attenuationColor.value.copy(material.attenuationColor);\n\t\t\t}\n\n\t\t\tuniforms.specularIntensity.value = material.specularIntensity;\n\t\t\tuniforms.specularColor.value.copy(material.specularColor);\n\n\t\t\tif (material.specularIntensityMap) {\n\t\t\t\tuniforms.specularIntensityMap.value = material.specularIntensityMap;\n\t\t\t}\n\n\t\t\tif (material.specularColorMap) {\n\t\t\t\tuniforms.specularColorMap.value = material.specularColorMap;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsMatcap(uniforms, material) {\n\t\t\tif (material.matcap) {\n\t\t\t\tuniforms.matcap.value = material.matcap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsDepth(uniforms, material) {\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsDistance(uniforms, material) {\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\n\t\t\tuniforms.referencePosition.value.copy(material.referencePosition);\n\t\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\t\tuniforms.farDistance.value = material.farDistance;\n\t\t}\n\n\t\tfunction refreshUniformsNormal(uniforms, material) {\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\trefreshFogUniforms: refreshFogUniforms,\n\t\t\trefreshMaterialUniforms: refreshMaterialUniforms\n\t\t};\n\t}\n\n\tfunction createCanvasElement() {\n\t\tconst canvas = createElementNS('canvas');\n\t\tcanvas.style.display = 'block';\n\t\treturn canvas;\n\t}\n\n\tfunction WebGLRenderer(parameters = {}) {\n\t\tconst _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement(),\n\t\t\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\t\t\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t\t\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t\t\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\t\tlet currentRenderList = null;\n\t\tlet currentRenderState = null; // render() can be called from within a callback triggered by another render.\n\t\t// We track this so that the nested render call gets its list and state isolated from the parent render call.\n\n\t\tconst renderListStack = [];\n\t\tconst renderStateStack = []; // public properties\n\n\t\tthis.domElement = _canvas; // Debug configuration container\n\n\t\tthis.debug = {\n\t\t\t/**\n\t\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t\t * @type {boolean}\n\t\t\t */\n\t\t\tcheckShaderErrors: true\n\t\t}; // clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true; // scene graph\n\n\t\tthis.sortObjects = true; // user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false; // physically based shading\n\n\t\tthis.gammaFactor = 2.0; // for backwards compatibility\n\n\t\tthis.outputEncoding = LinearEncoding; // physical lights\n\n\t\tthis.physicallyCorrectLights = false; // tone mapping\n\n\t\tthis.toneMapping = NoToneMapping;\n\t\tthis.toneMappingExposure = 1.0; // internal properties\n\n\t\tconst _this = this;\n\n\t\tlet _isContextLost = false; // internal state cache\n\n\t\tlet _currentActiveCubeFace = 0;\n\t\tlet _currentActiveMipmapLevel = 0;\n\t\tlet _currentRenderTarget = null;\n\n\t\tlet _currentMaterialId = -1;\n\n\t\tlet _currentCamera = null;\n\n\t\tconst _currentViewport = new Vector4();\n\n\t\tconst _currentScissor = new Vector4();\n\n\t\tlet _currentScissorTest = null; //\n\n\t\tlet _width = _canvas.width;\n\t\tlet _height = _canvas.height;\n\t\tlet _pixelRatio = 1;\n\t\tlet _opaqueSort = null;\n\t\tlet _transparentSort = null;\n\n\t\tconst _viewport = new Vector4(0, 0, _width, _height);\n\n\t\tconst _scissor = new Vector4(0, 0, _width, _height);\n\n\t\tlet _scissorTest = false; //\n\n\t\tconst _currentDrawBuffers = []; // frustum\n\n\t\tconst _frustum = new Frustum(); // clipping\n\n\n\t\tlet _clippingEnabled = false;\n\t\tlet _localClippingEnabled = false; // transmission\n\n\t\tlet _transmissionRenderTarget = null; // camera matrices cache\n\n\t\tconst _projScreenMatrix = new Matrix4();\n\n\t\tconst _vector3 = new Vector3();\n\n\t\tconst _emptyScene = {\n\t\t\tbackground: null,\n\t\t\tfog: null,\n\t\t\tenvironment: null,\n\t\t\toverrideMaterial: null,\n\t\t\tisScene: true\n\t\t};\n\n\t\tfunction getTargetPixelRatio() {\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\t\t} // initialize\n\n\n\t\tlet _gl = _context;\n\n\t\tfunction getContext(contextNames, contextAttributes) {\n\t\t\tfor (let i = 0; i < contextNames.length; i++) {\n\t\t\t\tconst contextName = contextNames[i];\n\n\t\t\t\tconst context = _canvas.getContext(contextName, contextAttributes);\n\n\t\t\t\tif (context !== null) return context;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\tconst contextAttributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\t\tpowerPreference: _powerPreference,\n\t\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat\n\t\t\t}; // event listeners must be registered before WebGL context is created, see #12753\n\n\t\t\t_canvas.addEventListener('webglcontextlost', onContextLost, false);\n\n\t\t\t_canvas.addEventListener('webglcontextrestored', onContextRestore, false);\n\n\t\t\tif (_gl === null) {\n\t\t\t\tconst contextNames = ['webgl2', 'webgl', 'experimental-webgl'];\n\n\t\t\t\tif (_this.isWebGL1Renderer === true) {\n\t\t\t\t\tcontextNames.shift();\n\t\t\t\t}\n\n\t\t\t\t_gl = getContext(contextNames, contextAttributes);\n\n\t\t\t\tif (_gl === null) {\n\t\t\t\t\tif (getContext(contextNames)) {\n\t\t\t\t\t\tthrow new Error('Error creating WebGL context with your selected attributes.');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error('Error creating WebGL context.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\n\t\t\tif (_gl.getShaderPrecisionFormat === undefined) {\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'rangeMin': 1,\n\t\t\t\t\t\t'rangeMax': 1,\n\t\t\t\t\t\t'precision': 1\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('THREE.WebGLRenderer: ' + error.message);\n\t\t\tthrow error;\n\t\t}\n\n\t\tlet extensions, capabilities, state, info;\n\t\tlet properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;\n\t\tlet programCache, materials, renderLists, renderStates, clipping, shadowMap;\n\t\tlet background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\t\tlet utils, bindingStates;\n\n\t\tfunction initGLContext() {\n\t\t\textensions = new WebGLExtensions(_gl);\n\t\t\tcapabilities = new WebGLCapabilities(_gl, extensions, parameters);\n\t\t\textensions.init(capabilities);\n\t\t\tutils = new WebGLUtils(_gl, extensions, capabilities);\n\t\t\tstate = new WebGLState(_gl, extensions, capabilities);\n\t\t\t_currentDrawBuffers[0] = _gl.BACK;\n\t\t\tinfo = new WebGLInfo(_gl);\n\t\t\tproperties = new WebGLProperties();\n\t\t\ttextures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);\n\t\t\tcubemaps = new WebGLCubeMaps(_this);\n\t\t\tcubeuvmaps = new WebGLCubeUVMaps(_this);\n\t\t\tattributes = new WebGLAttributes(_gl, capabilities);\n\t\t\tbindingStates = new WebGLBindingStates(_gl, extensions, attributes, capabilities);\n\t\t\tgeometries = new WebGLGeometries(_gl, attributes, info, bindingStates);\n\t\t\tobjects = new WebGLObjects(_gl, geometries, attributes, info);\n\t\t\tmorphtargets = new WebGLMorphtargets(_gl, capabilities, textures);\n\t\t\tclipping = new WebGLClipping(properties);\n\t\t\tprogramCache = new WebGLPrograms(_this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping);\n\t\t\tmaterials = new WebGLMaterials(properties);\n\t\t\trenderLists = new WebGLRenderLists(properties);\n\t\t\trenderStates = new WebGLRenderStates(extensions, capabilities);\n\t\t\tbackground = new WebGLBackground(_this, cubemaps, state, objects, _premultipliedAlpha);\n\t\t\tshadowMap = new WebGLShadowMap(_this, objects, capabilities);\n\t\t\tbufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);\n\t\t\tinfo.programs = programCache.programs;\n\t\t\t_this.capabilities = capabilities;\n\t\t\t_this.extensions = extensions;\n\t\t\t_this.properties = properties;\n\t\t\t_this.renderLists = renderLists;\n\t\t\t_this.shadowMap = shadowMap;\n\t\t\t_this.state = state;\n\t\t\t_this.info = info;\n\t\t}\n\n\t\tinitGLContext(); // xr\n\n\t\tconst xr = new WebXRManager(_this, _gl);\n\t\tthis.xr = xr; // API\n\n\t\tthis.getContext = function () {\n\t\t\treturn _gl;\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\t\t\treturn _gl.getContextAttributes();\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\t\t\tconst extension = extensions.get('WEBGL_lose_context');\n\t\t\tif (extension) extension.loseContext();\n\t\t};\n\n\t\tthis.forceContextRestore = function () {\n\t\t\tconst extension = extensions.get('WEBGL_lose_context');\n\t\t\tif (extension) extension.restoreContext();\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\t\t\treturn _pixelRatio;\n\t\t};\n\n\t\tthis.setPixelRatio = function (value) {\n\t\t\tif (value === undefined) return;\n\t\t\t_pixelRatio = value;\n\t\t\tthis.setSize(_width, _height, false);\n\t\t};\n\n\t\tthis.getSize = function (target) {\n\t\t\treturn target.set(_width, _height);\n\t\t};\n\n\t\tthis.setSize = function (width, height, updateStyle) {\n\t\t\tif (xr.isPresenting) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\t\t_canvas.width = Math.floor(width * _pixelRatio);\n\t\t\t_canvas.height = Math.floor(height * _pixelRatio);\n\n\t\t\tif (updateStyle !== false) {\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\t\t\t}\n\n\t\t\tthis.setViewport(0, 0, width, height);\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function (target) {\n\t\t\treturn target.set(_width * _pixelRatio, _height * _pixelRatio).floor();\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function (width, height, pixelRatio) {\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\t\t_pixelRatio = pixelRatio;\n\t\t\t_canvas.width = Math.floor(width * pixelRatio);\n\t\t\t_canvas.height = Math.floor(height * pixelRatio);\n\t\t\tthis.setViewport(0, 0, width, height);\n\t\t};\n\n\t\tthis.getCurrentViewport = function (target) {\n\t\t\treturn target.copy(_currentViewport);\n\t\t};\n\n\t\tthis.getViewport = function (target) {\n\t\t\treturn target.copy(_viewport);\n\t\t};\n\n\t\tthis.setViewport = function (x, y, width, height) {\n\t\t\tif (x.isVector4) {\n\t\t\t\t_viewport.set(x.x, x.y, x.z, x.w);\n\t\t\t} else {\n\t\t\t\t_viewport.set(x, y, width, height);\n\t\t\t}\n\n\t\t\tstate.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());\n\t\t};\n\n\t\tthis.getScissor = function (target) {\n\t\t\treturn target.copy(_scissor);\n\t\t};\n\n\t\tthis.setScissor = function (x, y, width, height) {\n\t\t\tif (x.isVector4) {\n\t\t\t\t_scissor.set(x.x, x.y, x.z, x.w);\n\t\t\t} else {\n\t\t\t\t_scissor.set(x, y, width, height);\n\t\t\t}\n\n\t\t\tstate.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());\n\t\t};\n\n\t\tthis.getScissorTest = function () {\n\t\t\treturn _scissorTest;\n\t\t};\n\n\t\tthis.setScissorTest = function (boolean) {\n\t\t\tstate.setScissorTest(_scissorTest = boolean);\n\t\t};\n\n\t\tthis.setOpaqueSort = function (method) {\n\t\t\t_opaqueSort = method;\n\t\t};\n\n\t\tthis.setTransparentSort = function (method) {\n\t\t\t_transparentSort = method;\n\t\t}; // Clearing\n\n\n\t\tthis.getClearColor = function (target) {\n\t\t\treturn target.copy(background.getClearColor());\n\t\t};\n\n\t\tthis.setClearColor = function () {\n\t\t\tbackground.setClearColor.apply(background, arguments);\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\t\t\treturn background.getClearAlpha();\n\t\t};\n\n\t\tthis.setClearAlpha = function () {\n\t\t\tbackground.setClearAlpha.apply(background, arguments);\n\t\t};\n\n\t\tthis.clear = function (color, depth, stencil) {\n\t\t\tlet bits = 0;\n\t\t\tif (color === undefined || color) bits |= _gl.COLOR_BUFFER_BIT;\n\t\t\tif (depth === undefined || depth) bits |= _gl.DEPTH_BUFFER_BIT;\n\t\t\tif (stencil === undefined || stencil) bits |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t\t_gl.clear(bits);\n\t\t};\n\n\t\tthis.clearColor = function () {\n\t\t\tthis.clear(true, false, false);\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\t\t\tthis.clear(false, true, false);\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\t\t\tthis.clear(false, false, true);\n\t\t}; //\n\n\n\t\tthis.dispose = function () {\n\t\t\t_canvas.removeEventListener('webglcontextlost', onContextLost, false);\n\n\t\t\t_canvas.removeEventListener('webglcontextrestored', onContextRestore, false);\n\n\t\t\trenderLists.dispose();\n\t\t\trenderStates.dispose();\n\t\t\tproperties.dispose();\n\t\t\tcubemaps.dispose();\n\t\t\tcubeuvmaps.dispose();\n\t\t\tobjects.dispose();\n\t\t\tbindingStates.dispose();\n\t\t\txr.dispose();\n\t\t\txr.removeEventListener('sessionstart', onXRSessionStart);\n\t\t\txr.removeEventListener('sessionend', onXRSessionEnd);\n\n\t\t\tif (_transmissionRenderTarget) {\n\t\t\t\t_transmissionRenderTarget.dispose();\n\n\t\t\t\t_transmissionRenderTarget = null;\n\t\t\t}\n\n\t\t\tanimation.stop();\n\t\t}; // Events\n\n\n\t\tfunction onContextLost(event) {\n\t\t\tevent.preventDefault();\n\t\t\tconsole.log('THREE.WebGLRenderer: Context Lost.');\n\t\t\t_isContextLost = true;\n\t\t}\n\n\t\tfunction onContextRestore() {\n\t\t\tconsole.log('THREE.WebGLRenderer: Context Restored.');\n\t\t\t_isContextLost = false;\n\t\t\tconst infoAutoReset = info.autoReset;\n\t\t\tconst shadowMapEnabled = shadowMap.enabled;\n\t\t\tconst shadowMapAutoUpdate = shadowMap.autoUpdate;\n\t\t\tconst shadowMapNeedsUpdate = shadowMap.needsUpdate;\n\t\t\tconst shadowMapType = shadowMap.type;\n\t\t\tinitGLContext();\n\t\t\tinfo.autoReset = infoAutoReset;\n\t\t\tshadowMap.enabled = shadowMapEnabled;\n\t\t\tshadowMap.autoUpdate = shadowMapAutoUpdate;\n\t\t\tshadowMap.needsUpdate = shadowMapNeedsUpdate;\n\t\t\tshadowMap.type = shadowMapType;\n\t\t}\n\n\t\tfunction onMaterialDispose(event) {\n\t\t\tconst material = event.target;\n\t\t\tmaterial.removeEventListener('dispose', onMaterialDispose);\n\t\t\tdeallocateMaterial(material);\n\t\t} // Buffer deallocation\n\n\n\t\tfunction deallocateMaterial(material) {\n\t\t\treleaseMaterialProgramReferences(material);\n\t\t\tproperties.remove(material);\n\t\t}\n\n\t\tfunction releaseMaterialProgramReferences(material) {\n\t\t\tconst programs = properties.get(material).programs;\n\n\t\t\tif (programs !== undefined) {\n\t\t\t\tprograms.forEach(function (program) {\n\t\t\t\t\tprogramCache.releaseProgram(program);\n\t\t\t\t});\n\t\t\t}\n\t\t} // Buffer rendering\n\n\n\t\tthis.renderBufferDirect = function (camera, scene, geometry, material, object, group) {\n\t\t\tif (scene === null) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\t\tconst frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;\n\t\t\tconst program = setProgram(camera, scene, geometry, material, object);\n\t\t\tstate.setMaterial(material, frontFaceCW); //\n\n\t\t\tlet index = geometry.index;\n\t\t\tconst position = geometry.attributes.position; //\n\n\t\t\tif (index === null) {\n\t\t\t\tif (position === undefined || position.count === 0) return;\n\t\t\t} else if (index.count === 0) {\n\t\t\t\treturn;\n\t\t\t} //\n\n\n\t\t\tlet rangeFactor = 1;\n\n\t\t\tif (material.wireframe === true) {\n\t\t\t\tindex = geometries.getWireframeAttribute(geometry);\n\t\t\t\trangeFactor = 2;\n\t\t\t}\n\n\t\t\tbindingStates.setup(object, material, program, geometry, index);\n\t\t\tlet attribute;\n\t\t\tlet renderer = bufferRenderer;\n\n\t\t\tif (index !== null) {\n\t\t\t\tattribute = attributes.get(index);\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex(attribute);\n\t\t\t} //\n\n\n\t\t\tconst dataCount = index !== null ? index.count : position.count;\n\t\t\tconst rangeStart = geometry.drawRange.start * rangeFactor;\n\t\t\tconst rangeCount = geometry.drawRange.count * rangeFactor;\n\t\t\tconst groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\t\tconst groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\t\t\tconst drawStart = Math.max(rangeStart, groupStart);\n\t\t\tconst drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;\n\t\t\tconst drawCount = Math.max(0, drawEnd - drawStart + 1);\n\t\t\tif (drawCount === 0) return; //\n\n\t\t\tif (object.isMesh) {\n\t\t\t\tif (material.wireframe === true) {\n\t\t\t\t\tstate.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());\n\t\t\t\t\trenderer.setMode(_gl.LINES);\n\t\t\t\t} else {\n\t\t\t\t\trenderer.setMode(_gl.TRIANGLES);\n\t\t\t\t}\n\t\t\t} else if (object.isLine) {\n\t\t\t\tlet lineWidth = material.linewidth;\n\t\t\t\tif (lineWidth === undefined) lineWidth = 1; // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth(lineWidth * getTargetPixelRatio());\n\n\t\t\t\tif (object.isLineSegments) {\n\t\t\t\t\trenderer.setMode(_gl.LINES);\n\t\t\t\t} else if (object.isLineLoop) {\n\t\t\t\t\trenderer.setMode(_gl.LINE_LOOP);\n\t\t\t\t} else {\n\t\t\t\t\trenderer.setMode(_gl.LINE_STRIP);\n\t\t\t\t}\n\t\t\t} else if (object.isPoints) {\n\t\t\t\trenderer.setMode(_gl.POINTS);\n\t\t\t} else if (object.isSprite) {\n\t\t\t\trenderer.setMode(_gl.TRIANGLES);\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh) {\n\t\t\t\trenderer.renderInstances(drawStart, drawCount, object.count);\n\t\t\t} else if (geometry.isInstancedBufferGeometry) {\n\t\t\t\tconst instanceCount = Math.min(geometry.instanceCount, geometry._maxInstanceCount);\n\t\t\t\trenderer.renderInstances(drawStart, drawCount, instanceCount);\n\t\t\t} else {\n\t\t\t\trenderer.render(drawStart, drawCount);\n\t\t\t}\n\t\t}; // Compile\n\n\n\t\tthis.compile = function (scene, camera) {\n\t\t\tcurrentRenderState = renderStates.get(scene);\n\t\t\tcurrentRenderState.init();\n\t\t\trenderStateStack.push(currentRenderState);\n\t\t\tscene.traverseVisible(function (object) {\n\t\t\t\tif (object.isLight && object.layers.test(camera.layers)) {\n\t\t\t\t\tcurrentRenderState.pushLight(object);\n\n\t\t\t\t\tif (object.castShadow) {\n\t\t\t\t\t\tcurrentRenderState.pushShadow(object);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tcurrentRenderState.setupLights(_this.physicallyCorrectLights);\n\t\t\tscene.traverse(function (object) {\n\t\t\t\tconst material = object.material;\n\n\t\t\t\tif (material) {\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (let i = 0; i < material.length; i++) {\n\t\t\t\t\t\t\tconst material2 = material[i];\n\t\t\t\t\t\t\tgetProgram(material2, scene, object);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgetProgram(material, scene, object);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\trenderStateStack.pop();\n\t\t\tcurrentRenderState = null;\n\t\t}; // Animation Loop\n\n\n\t\tlet onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame(time) {\n\t\t\tif (onAnimationFrameCallback) onAnimationFrameCallback(time);\n\t\t}\n\n\t\tfunction onXRSessionStart() {\n\t\t\tanimation.stop();\n\t\t}\n\n\t\tfunction onXRSessionEnd() {\n\t\t\tanimation.start();\n\t\t}\n\n\t\tconst animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop(onAnimationFrame);\n\t\tif (typeof window !== 'undefined') animation.setContext(window);\n\n\t\tthis.setAnimationLoop = function (callback) {\n\t\t\tonAnimationFrameCallback = callback;\n\t\t\txr.setAnimationLoop(callback);\n\t\t\tcallback === null ? animation.stop() : animation.start();\n\t\t};\n\n\t\txr.addEventListener('sessionstart', onXRSessionStart);\n\t\txr.addEventListener('sessionend', onXRSessionEnd); // Rendering\n\n\t\tthis.render = function (scene, camera) {\n\t\t\tif (camera !== undefined && camera.isCamera !== true) {\n\t\t\t\tconsole.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (_isContextLost === true) return; // update scene graph\n\n\t\t\tif (scene.autoUpdate === true) scene.updateMatrixWorld(); // update camera matrices and frustum\n\n\t\t\tif (camera.parent === null) camera.updateMatrixWorld();\n\n\t\t\tif (xr.enabled === true && xr.isPresenting === true) {\n\t\t\t\tif (xr.cameraAutoUpdate === true) xr.updateCamera(camera);\n\t\t\t\tcamera = xr.getCamera(); // use XR camera for rendering\n\t\t\t} //\n\n\n\t\t\tif (scene.isScene === true) scene.onBeforeRender(_this, scene, camera, _currentRenderTarget);\n\t\t\tcurrentRenderState = renderStates.get(scene, renderStateStack.length);\n\t\t\tcurrentRenderState.init();\n\t\t\trenderStateStack.push(currentRenderState);\n\n\t\t\t_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n\t\t\t_frustum.setFromProjectionMatrix(_projScreenMatrix);\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera);\n\t\t\tcurrentRenderList = renderLists.get(scene, renderListStack.length);\n\t\t\tcurrentRenderList.init();\n\t\t\trenderListStack.push(currentRenderList);\n\t\t\tprojectObject(scene, camera, 0, _this.sortObjects);\n\t\t\tcurrentRenderList.finish();\n\n\t\t\tif (_this.sortObjects === true) {\n\t\t\t\tcurrentRenderList.sort(_opaqueSort, _transparentSort);\n\t\t\t} //\n\n\n\t\t\tif (_clippingEnabled === true) clipping.beginShadows();\n\t\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\t\t\tshadowMap.render(shadowsArray, scene, camera);\n\t\t\tif (_clippingEnabled === true) clipping.endShadows(); //\n\n\t\t\tif (this.info.autoReset === true) this.info.reset(); //\n\n\t\t\tbackground.render(currentRenderList, scene); // render scene\n\n\t\t\tcurrentRenderState.setupLights(_this.physicallyCorrectLights);\n\n\t\t\tif (camera.isArrayCamera) {\n\t\t\t\tconst cameras = camera.cameras;\n\n\t\t\t\tfor (let i = 0, l = cameras.length; i < l; i++) {\n\t\t\t\t\tconst camera2 = cameras[i];\n\t\t\t\t\trenderScene(currentRenderList, scene, camera2, camera2.viewport);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trenderScene(currentRenderList, scene, camera);\n\t\t\t} //\n\n\n\t\t\tif (_currentRenderTarget !== null) {\n\t\t\t\t// resolve multisample renderbuffers to a single-sample texture if necessary\n\t\t\t\ttextures.updateMultisampleRenderTarget(_currentRenderTarget); // Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\t\ttextures.updateRenderTargetMipmap(_currentRenderTarget);\n\t\t\t} //\n\n\n\t\t\tif (scene.isScene === true) scene.onAfterRender(_this, scene, camera); // Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\t\tstate.buffers.depth.setTest(true);\n\t\t\tstate.buffers.depth.setMask(true);\n\t\t\tstate.buffers.color.setMask(true);\n\t\t\tstate.setPolygonOffset(false); // _gl.finish();\n\n\t\t\tbindingStates.resetDefaultState();\n\t\t\t_currentMaterialId = -1;\n\t\t\t_currentCamera = null;\n\t\t\trenderStateStack.pop();\n\n\t\t\tif (renderStateStack.length > 0) {\n\t\t\t\tcurrentRenderState = renderStateStack[renderStateStack.length - 1];\n\t\t\t} else {\n\t\t\t\tcurrentRenderState = null;\n\t\t\t}\n\n\t\t\trenderListStack.pop();\n\n\t\t\tif (renderListStack.length > 0) {\n\t\t\t\tcurrentRenderList = renderListStack[renderListStack.length - 1];\n\t\t\t} else {\n\t\t\t\tcurrentRenderList = null;\n\t\t\t}\n\t\t};\n\n\t\tfunction projectObject(object, camera, groupOrder, sortObjects) {\n\t\t\tif (object.visible === false) return;\n\t\t\tconst visible = object.layers.test(camera.layers);\n\n\t\t\tif (visible) {\n\t\t\t\tif (object.isGroup) {\n\t\t\t\t\tgroupOrder = object.renderOrder;\n\t\t\t\t} else if (object.isLOD) {\n\t\t\t\t\tif (object.autoUpdate === true) object.update(camera);\n\t\t\t\t} else if (object.isLight) {\n\t\t\t\t\tcurrentRenderState.pushLight(object);\n\n\t\t\t\t\tif (object.castShadow) {\n\t\t\t\t\t\tcurrentRenderState.pushShadow(object);\n\t\t\t\t\t}\n\t\t\t\t} else if (object.isSprite) {\n\t\t\t\t\tif (!object.frustumCulled || _frustum.intersectsSprite(object)) {\n\t\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst geometry = objects.update(object);\n\t\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\t\tif (material.visible) {\n\t\t\t\t\t\t\tcurrentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (object.isMesh || object.isLine || object.isPoints) {\n\t\t\t\t\tif (object.isSkinnedMesh) {\n\t\t\t\t\t\t// update skeleton only once in a frame\n\t\t\t\t\t\tif (object.skeleton.frame !== info.render.frame) {\n\t\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!object.frustumCulled || _frustum.intersectsObject(object)) {\n\t\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst geometry = objects.update(object);\n\t\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\t\t\tfor (let i = 0, l = groups.length; i < l; i++) {\n\t\t\t\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\t\t\t\tconst groupMaterial = material[group.materialIndex];\n\n\t\t\t\t\t\t\t\tif (groupMaterial && groupMaterial.visible) {\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push(object, geometry, groupMaterial, groupOrder, _vector3.z, group);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (material.visible) {\n\t\t\t\t\t\t\tcurrentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst children = object.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tprojectObject(children[i], camera, groupOrder, sortObjects);\n\t\t\t}\n\t\t}\n\n\t\tfunction renderScene(currentRenderList, scene, camera, viewport) {\n\t\t\tconst opaqueObjects = currentRenderList.opaque;\n\t\t\tconst transmissiveObjects = currentRenderList.transmissive;\n\t\t\tconst transparentObjects = currentRenderList.transparent;\n\t\t\tcurrentRenderState.setupLightsView(camera);\n\t\t\tif (transmissiveObjects.length > 0) renderTransmissionPass(opaqueObjects, scene, camera);\n\t\t\tif (viewport) state.viewport(_currentViewport.copy(viewport));\n\t\t\tif (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene, camera);\n\t\t\tif (transmissiveObjects.length > 0) renderObjects(transmissiveObjects, scene, camera);\n\t\t\tif (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera);\n\t\t}\n\n\t\tfunction renderTransmissionPass(opaqueObjects, scene, camera) {\n\t\t\tif (_transmissionRenderTarget === null) {\n\t\t\t\tconst needsAntialias = _antialias === true && capabilities.isWebGL2 === true;\n\t\t\t\tconst renderTargetType = needsAntialias ? WebGLMultisampleRenderTarget : WebGLRenderTarget;\n\t\t\t\t_transmissionRenderTarget = new renderTargetType(1024, 1024, {\n\t\t\t\t\tgenerateMipmaps: true,\n\t\t\t\t\ttype: utils.convert(HalfFloatType) !== null ? HalfFloatType : UnsignedByteType,\n\t\t\t\t\tminFilter: LinearMipmapLinearFilter,\n\t\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\t\twrapS: ClampToEdgeWrapping,\n\t\t\t\t\twrapT: ClampToEdgeWrapping\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst currentRenderTarget = _this.getRenderTarget();\n\n\t\t\t_this.setRenderTarget(_transmissionRenderTarget);\n\n\t\t\t_this.clear(); // Turn off the features which can affect the frag color for opaque objects pass.\n\t\t\t// Otherwise they are applied twice in opaque objects pass and transmission objects pass.\n\n\n\t\t\tconst currentToneMapping = _this.toneMapping;\n\t\t\t_this.toneMapping = NoToneMapping;\n\t\t\trenderObjects(opaqueObjects, scene, camera);\n\t\t\t_this.toneMapping = currentToneMapping;\n\t\t\ttextures.updateMultisampleRenderTarget(_transmissionRenderTarget);\n\t\t\ttextures.updateRenderTargetMipmap(_transmissionRenderTarget);\n\n\t\t\t_this.setRenderTarget(currentRenderTarget);\n\t\t}\n\n\t\tfunction renderObjects(renderList, scene, camera) {\n\t\t\tconst overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n\n\t\t\tfor (let i = 0, l = renderList.length; i < l; i++) {\n\t\t\t\tconst renderItem = renderList[i];\n\t\t\t\tconst object = renderItem.object;\n\t\t\t\tconst geometry = renderItem.geometry;\n\t\t\t\tconst material = overrideMaterial === null ? renderItem.material : overrideMaterial;\n\t\t\t\tconst group = renderItem.group;\n\n\t\t\t\tif (object.layers.test(camera.layers)) {\n\t\t\t\t\trenderObject(object, scene, camera, geometry, material, group);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction renderObject(object, scene, camera, geometry, material, group) {\n\t\t\tobject.onBeforeRender(_this, scene, camera, geometry, material, group);\n\t\t\tobject.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n\t\t\tobject.normalMatrix.getNormalMatrix(object.modelViewMatrix);\n\t\t\tmaterial.onBeforeRender(_this, scene, camera, geometry, object, group);\n\n\t\t\tif (material.transparent === true && material.side === DoubleSide) {\n\t\t\t\tmaterial.side = BackSide;\n\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t_this.renderBufferDirect(camera, scene, geometry, material, object, group);\n\n\t\t\t\tmaterial.side = FrontSide;\n\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t_this.renderBufferDirect(camera, scene, geometry, material, object, group);\n\n\t\t\t\tmaterial.side = DoubleSide;\n\t\t\t} else {\n\t\t\t\t_this.renderBufferDirect(camera, scene, geometry, material, object, group);\n\t\t\t}\n\n\t\t\tobject.onAfterRender(_this, scene, camera, geometry, material, group);\n\t\t}\n\n\t\tfunction getProgram(material, scene, object) {\n\t\t\tif (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\tconst materialProperties = properties.get(material);\n\t\t\tconst lights = currentRenderState.state.lights;\n\t\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\t\t\tconst lightsStateVersion = lights.state.version;\n\t\t\tconst parameters = programCache.getParameters(material, lights.state, shadowsArray, scene, object);\n\t\t\tconst programCacheKey = programCache.getProgramCacheKey(parameters);\n\t\t\tlet programs = materialProperties.programs; // always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change\n\n\t\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tmaterialProperties.fog = scene.fog;\n\t\t\tmaterialProperties.envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || materialProperties.environment);\n\n\t\t\tif (programs === undefined) {\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener('dispose', onMaterialDispose);\n\t\t\t\tprograms = new Map();\n\t\t\t\tmaterialProperties.programs = programs;\n\t\t\t}\n\n\t\t\tlet program = programs.get(programCacheKey);\n\n\t\t\tif (program !== undefined) {\n\t\t\t\t// early out if program and light state is identical\n\t\t\t\tif (materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion) {\n\t\t\t\t\tupdateCommonMaterialProperties(material, parameters);\n\t\t\t\t\treturn program;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tparameters.uniforms = programCache.getUniforms(material);\n\t\t\t\tmaterial.onBuild(object, parameters, _this);\n\t\t\t\tmaterial.onBeforeCompile(parameters, _this);\n\t\t\t\tprogram = programCache.acquireProgram(parameters, programCacheKey);\n\t\t\t\tprograms.set(programCacheKey, program);\n\t\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\t\t\t}\n\n\t\t\tconst uniforms = materialProperties.uniforms;\n\n\t\t\tif (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {\n\t\t\t\tuniforms.clippingPlanes = clipping.uniform;\n\t\t\t}\n\n\t\t\tupdateCommonMaterialProperties(material, parameters); // store the light setup it was created for\n\n\t\t\tmaterialProperties.needsLights = materialNeedsLights(material);\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\tif (materialProperties.needsLights) {\n\t\t\t\t// wire up the material to this renderer's lighting state\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\t\tuniforms.ltc_1.value = lights.state.rectAreaLTC1;\n\t\t\t\tuniforms.ltc_2.value = lights.state.rectAreaLTC2;\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix; // TODO (abelnation): add area lights shadow info to uniforms\n\t\t\t}\n\n\t\t\tconst progUniforms = program.getUniforms();\n\t\t\tconst uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);\n\t\t\tmaterialProperties.currentProgram = program;\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\t\t\treturn program;\n\t\t}\n\n\t\tfunction updateCommonMaterialProperties(material, parameters) {\n\t\t\tconst materialProperties = properties.get(material);\n\t\t\tmaterialProperties.outputEncoding = parameters.outputEncoding;\n\t\t\tmaterialProperties.instancing = parameters.instancing;\n\t\t\tmaterialProperties.skinning = parameters.skinning;\n\t\t\tmaterialProperties.morphTargets = parameters.morphTargets;\n\t\t\tmaterialProperties.morphNormals = parameters.morphNormals;\n\t\t\tmaterialProperties.morphTargetsCount = parameters.morphTargetsCount;\n\t\t\tmaterialProperties.numClippingPlanes = parameters.numClippingPlanes;\n\t\t\tmaterialProperties.numIntersection = parameters.numClipIntersection;\n\t\t\tmaterialProperties.vertexAlphas = parameters.vertexAlphas;\n\t\t\tmaterialProperties.vertexTangents = parameters.vertexTangents;\n\t\t}\n\n\t\tfunction setProgram(camera, scene, geometry, material, object) {\n\t\t\tif (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\ttextures.resetTextureUnits();\n\t\t\tconst fog = scene.fog;\n\t\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tconst encoding = _currentRenderTarget === null ? _this.outputEncoding : _currentRenderTarget.texture.encoding;\n\t\t\tconst envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);\n\t\t\tconst vertexAlphas = material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4;\n\t\t\tconst vertexTangents = !!material.normalMap && !!geometry.attributes.tangent;\n\t\t\tconst morphTargets = !!geometry.morphAttributes.position;\n\t\t\tconst morphNormals = !!geometry.morphAttributes.normal;\n\t\t\tconst morphTargetsCount = !!geometry.morphAttributes.position ? geometry.morphAttributes.position.length : 0;\n\t\t\tconst materialProperties = properties.get(material);\n\t\t\tconst lights = currentRenderState.state.lights;\n\n\t\t\tif (_clippingEnabled === true) {\n\t\t\t\tif (_localClippingEnabled === true || camera !== _currentCamera) {\n\t\t\t\t\tconst useCache = camera === _currentCamera && material.id === _currentMaterialId; // we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\n\t\t\t\t\tclipping.setState(material, camera, useCache);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tlet needsProgramChange = false;\n\n\t\t\tif (material.version === materialProperties.__version) {\n\t\t\t\tif (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.outputEncoding !== encoding) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (object.isInstancedMesh && materialProperties.instancing === false) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (!object.isInstancedMesh && materialProperties.instancing === true) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (object.isSkinnedMesh && materialProperties.skinning === false) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (!object.isSkinnedMesh && materialProperties.skinning === true) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.envMap !== envMap) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (material.fog && materialProperties.fog !== fog) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.numClippingPlanes !== undefined && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.vertexAlphas !== vertexAlphas) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.vertexTangents !== vertexTangents) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.morphTargets !== morphTargets) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (materialProperties.morphNormals !== morphNormals) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t} else if (capabilities.isWebGL2 === true && materialProperties.morphTargetsCount !== morphTargetsCount) {\n\t\t\t\t\tneedsProgramChange = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tneedsProgramChange = true;\n\t\t\t\tmaterialProperties.__version = material.version;\n\t\t\t} //\n\n\n\t\t\tlet program = materialProperties.currentProgram;\n\n\t\t\tif (needsProgramChange === true) {\n\t\t\t\tprogram = getProgram(material, scene, object);\n\t\t\t}\n\n\t\t\tlet refreshProgram = false;\n\t\t\tlet refreshMaterial = false;\n\t\t\tlet refreshLights = false;\n\t\t\tconst p_uniforms = program.getUniforms(),\n\t\t\t\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\t\tif (state.useProgram(program.program)) {\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\t\t\t}\n\n\t\t\tif (material.id !== _currentMaterialId) {\n\t\t\t\t_currentMaterialId = material.id;\n\t\t\t\trefreshMaterial = true;\n\t\t\t}\n\n\t\t\tif (refreshProgram || _currentCamera !== camera) {\n\t\t\t\tp_uniforms.setValue(_gl, 'projectionMatrix', camera.projectionMatrix);\n\n\t\t\t\tif (capabilities.logarithmicDepthBuffer) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'logDepthBufFC', 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));\n\t\t\t\t}\n\n\t\t\t\tif (_currentCamera !== camera) {\n\t\t\t\t\t_currentCamera = camera; // lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true; // set to true on material change\n\n\t\t\t\t\trefreshLights = true; // remains set until update done\n\t\t\t\t} // load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\n\t\t\t\tif (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {\n\t\t\t\t\tconst uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif (uCamPos !== undefined) {\n\t\t\t\t\t\tuCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'isOrthographic', camera.isOrthographicCamera === true);\n\t\t\t\t}\n\n\t\t\t\tif (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || object.isSkinnedMesh) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);\n\t\t\t\t}\n\t\t\t} // skinning and morph target uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone and morph texture must go before other textures\n\t\t\t// otherwise textures used for skinning and morphing can take over texture units reserved for other material textures\n\n\n\t\t\tif (object.isSkinnedMesh) {\n\t\t\t\tp_uniforms.setOptional(_gl, object, 'bindMatrix');\n\t\t\t\tp_uniforms.setOptional(_gl, object, 'bindMatrixInverse');\n\t\t\t\tconst skeleton = object.skeleton;\n\n\t\t\t\tif (skeleton) {\n\t\t\t\t\tif (capabilities.floatVertexTextures) {\n\t\t\t\t\t\tif (skeleton.boneTexture === null) skeleton.computeBoneTexture();\n\t\t\t\t\t\tp_uniforms.setValue(_gl, 'boneTexture', skeleton.boneTexture, textures);\n\t\t\t\t\t\tp_uniforms.setValue(_gl, 'boneTextureSize', skeleton.boneTextureSize);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tp_uniforms.setOptional(_gl, skeleton, 'boneMatrices');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!!geometry && (geometry.morphAttributes.position !== undefined || geometry.morphAttributes.normal !== undefined)) {\n\t\t\t\tmorphtargets.update(object, geometry, material, program);\n\t\t\t}\n\n\t\t\tif (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {\n\t\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\t\tp_uniforms.setValue(_gl, 'receiveShadow', object.receiveShadow);\n\t\t\t}\n\n\t\t\tif (refreshMaterial) {\n\t\t\t\tp_uniforms.setValue(_gl, 'toneMappingExposure', _this.toneMappingExposure);\n\n\t\t\t\tif (materialProperties.needsLights) {\n\t\t\t\t\t// the current material requires lighting info\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate(m_uniforms, refreshLights);\n\t\t\t\t} // refresh uniforms common to several materials\n\n\n\t\t\t\tif (fog && material.fog) {\n\t\t\t\t\tmaterials.refreshFogUniforms(m_uniforms, fog);\n\t\t\t\t}\n\n\t\t\t\tmaterials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget);\n\t\t\t\tWebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n\t\t\t}\n\n\t\t\tif (material.isShaderMaterial && material.uniformsNeedUpdate === true) {\n\t\t\t\tWebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\n\t\t\t}\n\n\t\t\tif (material.isSpriteMaterial) {\n\t\t\t\tp_uniforms.setValue(_gl, 'center', object.center);\n\t\t\t} // common matrices\n\n\n\t\t\tp_uniforms.setValue(_gl, 'modelViewMatrix', object.modelViewMatrix);\n\t\t\tp_uniforms.setValue(_gl, 'normalMatrix', object.normalMatrix);\n\t\t\tp_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld);\n\t\t\treturn program;\n\t\t} // If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\n\t\tfunction markUniformsLightsNeedsUpdate(uniforms, value) {\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\t\tuniforms.lightProbe.needsUpdate = value;\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.directionalLightShadows.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.pointLightShadows.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.spotLightShadows.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\t\t}\n\n\t\tfunction materialNeedsLights(material) {\n\t\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;\n\t\t}\n\n\t\tthis.getActiveCubeFace = function () {\n\t\t\treturn _currentActiveCubeFace;\n\t\t};\n\n\t\tthis.getActiveMipmapLevel = function () {\n\t\t\treturn _currentActiveMipmapLevel;\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\t\t\treturn _currentRenderTarget;\n\t\t};\n\n\t\tthis.setRenderTarget = function (renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {\n\t\t\t_currentRenderTarget = renderTarget;\n\t\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\t\tif (renderTarget && properties.get(renderTarget).__webglFramebuffer === undefined) {\n\t\t\t\ttextures.setupRenderTarget(renderTarget);\n\t\t\t}\n\n\t\t\tlet framebuffer = null;\n\t\t\tlet isCube = false;\n\t\t\tlet isRenderTarget3D = false;\n\n\t\t\tif (renderTarget) {\n\t\t\t\tconst texture = renderTarget.texture;\n\n\t\t\t\tif (texture.isDataTexture3D || texture.isDataTexture2DArray) {\n\t\t\t\t\tisRenderTarget3D = true;\n\t\t\t\t}\n\n\t\t\t\tconst __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n\t\t\t\tif (renderTarget.isWebGLCubeRenderTarget) {\n\t\t\t\t\tframebuffer = __webglFramebuffer[activeCubeFace];\n\t\t\t\t\tisCube = true;\n\t\t\t\t} else if (renderTarget.isWebGLMultisampleRenderTarget) {\n\t\t\t\t\tframebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;\n\t\t\t\t} else {\n\t\t\t\t\tframebuffer = __webglFramebuffer;\n\t\t\t\t}\n\n\t\t\t\t_currentViewport.copy(renderTarget.viewport);\n\n\t\t\t\t_currentScissor.copy(renderTarget.scissor);\n\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\t\t\t} else {\n\t\t\t\t_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();\n\n\t\t\t\t_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();\n\n\t\t\t\t_currentScissorTest = _scissorTest;\n\t\t\t}\n\n\t\t\tconst framebufferBound = state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n\t\t\tif (framebufferBound && capabilities.drawBuffers) {\n\t\t\t\tlet needsUpdate = false;\n\n\t\t\t\tif (renderTarget) {\n\t\t\t\t\tif (renderTarget.isWebGLMultipleRenderTargets) {\n\t\t\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\t\t\tif (_currentDrawBuffers.length !== textures.length || _currentDrawBuffers[0] !== _gl.COLOR_ATTACHMENT0) {\n\t\t\t\t\t\t\tfor (let i = 0, il = textures.length; i < il; i++) {\n\t\t\t\t\t\t\t\t_currentDrawBuffers[i] = _gl.COLOR_ATTACHMENT0 + i;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_currentDrawBuffers.length = textures.length;\n\t\t\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (_currentDrawBuffers.length !== 1 || _currentDrawBuffers[0] !== _gl.COLOR_ATTACHMENT0) {\n\t\t\t\t\t\t\t_currentDrawBuffers[0] = _gl.COLOR_ATTACHMENT0;\n\t\t\t\t\t\t\t_currentDrawBuffers.length = 1;\n\t\t\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (_currentDrawBuffers.length !== 1 || _currentDrawBuffers[0] !== _gl.BACK) {\n\t\t\t\t\t\t_currentDrawBuffers[0] = _gl.BACK;\n\t\t\t\t\t\t_currentDrawBuffers.length = 1;\n\t\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (needsUpdate) {\n\t\t\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t\t\t_gl.drawBuffers(_currentDrawBuffers);\n\t\t\t\t\t} else {\n\t\t\t\t\t\textensions.get('WEBGL_draw_buffers').drawBuffersWEBGL(_currentDrawBuffers);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.viewport(_currentViewport);\n\t\t\tstate.scissor(_currentScissor);\n\t\t\tstate.setScissorTest(_currentScissorTest);\n\n\t\t\tif (isCube) {\n\t\t\t\tconst textureProperties = properties.get(renderTarget.texture);\n\n\t\t\t\t_gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);\n\t\t\t} else if (isRenderTarget3D) {\n\t\t\t\tconst textureProperties = properties.get(renderTarget.texture);\n\t\t\t\tconst layer = activeCubeFace || 0;\n\n\t\t\t\t_gl.framebufferTextureLayer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel || 0, layer);\n\t\t\t}\n\n\t\t\t_currentMaterialId = -1; // reset current material to ensure correct uniform bindings\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function (renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {\n\t\t\tif (!(renderTarget && renderTarget.isWebGLRenderTarget)) {\n\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet framebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined) {\n\t\t\t\tframebuffer = framebuffer[activeCubeFaceIndex];\n\t\t\t}\n\n\t\t\tif (framebuffer) {\n\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n\t\t\t\ttry {\n\t\t\t\t\tconst texture = renderTarget.texture;\n\t\t\t\t\tconst textureFormat = texture.format;\n\t\t\t\t\tconst textureType = texture.type;\n\n\t\t\t\t\tif (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_FORMAT)) {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst halfFloatSupportedByExt = textureType === HalfFloatType && (extensions.has('EXT_color_buffer_half_float') || capabilities.isWebGL2 && extensions.has('EXT_color_buffer_float'));\n\n\t\t\t\t\tif (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t!(textureType === FloatType && (capabilities.isWebGL2 || extensions.has('OES_texture_float') || extensions.has('WEBGL_color_buffer_float'))) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t!halfFloatSupportedByExt) {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_gl.checkFramebufferStatus(_gl.FRAMEBUFFER) === _gl.FRAMEBUFFER_COMPLETE) {\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\t\t\t\t\t\tif (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) {\n\t\t\t\t\t\t\t_gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\t// restore framebuffer of current render target if necessary\n\t\t\t\t\tconst framebuffer = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;\n\t\t\t\t\tstate.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.copyFramebufferToTexture = function (position, texture, level = 0) {\n\t\t\tconst levelScale = Math.pow(2, -level);\n\t\t\tconst width = Math.floor(texture.image.width * levelScale);\n\t\t\tconst height = Math.floor(texture.image.height * levelScale);\n\t\t\tlet glFormat = utils.convert(texture.format);\n\n\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t// Workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=1120100\n\t\t\t\t// Not needed in Chrome 93+\n\t\t\t\tif (glFormat === _gl.RGB) glFormat = _gl.RGB8;\n\t\t\t\tif (glFormat === _gl.RGBA) glFormat = _gl.RGBA8;\n\t\t\t}\n\n\t\t\ttextures.setTexture2D(texture, 0);\n\n\t\t\t_gl.copyTexImage2D(_gl.TEXTURE_2D, level, glFormat, position.x, position.y, width, height, 0);\n\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.copyTextureToTexture = function (position, srcTexture, dstTexture, level = 0) {\n\t\t\tconst width = srcTexture.image.width;\n\t\t\tconst height = srcTexture.image.height;\n\t\t\tconst glFormat = utils.convert(dstTexture.format);\n\t\t\tconst glType = utils.convert(dstTexture.type);\n\t\t\ttextures.setTexture2D(dstTexture, 0); // As another texture upload may have changed pixelStorei\n\t\t\t// parameters, make sure they are correct for the dstTexture\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);\n\n\t\t\tif (srcTexture.isDataTexture) {\n\t\t\t\t_gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);\n\t\t\t} else {\n\t\t\t\tif (srcTexture.isCompressedTexture) {\n\t\t\t\t\t_gl.compressedTexSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, glFormat, glType, srcTexture.image);\n\t\t\t\t}\n\t\t\t} // Generate mipmaps only when copying level 0\n\n\n\t\t\tif (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(_gl.TEXTURE_2D);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.copyTextureToTexture3D = function (sourceBox, position, srcTexture, dstTexture, level = 0) {\n\t\t\tif (_this.isWebGL1Renderer) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst width = sourceBox.max.x - sourceBox.min.x + 1;\n\t\t\tconst height = sourceBox.max.y - sourceBox.min.y + 1;\n\t\t\tconst depth = sourceBox.max.z - sourceBox.min.z + 1;\n\t\t\tconst glFormat = utils.convert(dstTexture.format);\n\t\t\tconst glType = utils.convert(dstTexture.type);\n\t\t\tlet glTarget;\n\n\t\t\tif (dstTexture.isDataTexture3D) {\n\t\t\t\ttextures.setTexture3D(dstTexture, 0);\n\t\t\t\tglTarget = _gl.TEXTURE_3D;\n\t\t\t} else if (dstTexture.isDataTexture2DArray) {\n\t\t\t\ttextures.setTexture2DArray(dstTexture, 0);\n\t\t\t\tglTarget = _gl.TEXTURE_2D_ARRAY;\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);\n\n\t\t\tconst unpackRowLen = _gl.getParameter(_gl.UNPACK_ROW_LENGTH);\n\n\t\t\tconst unpackImageHeight = _gl.getParameter(_gl.UNPACK_IMAGE_HEIGHT);\n\n\t\t\tconst unpackSkipPixels = _gl.getParameter(_gl.UNPACK_SKIP_PIXELS);\n\n\t\t\tconst unpackSkipRows = _gl.getParameter(_gl.UNPACK_SKIP_ROWS);\n\n\t\t\tconst unpackSkipImages = _gl.getParameter(_gl.UNPACK_SKIP_IMAGES);\n\n\t\t\tconst image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[0] : srcTexture.image;\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, image.width);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, image.height);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, sourceBox.min.x);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, sourceBox.min.y);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, sourceBox.min.z);\n\n\t\t\tif (srcTexture.isDataTexture || srcTexture.isDataTexture3D) {\n\t\t\t\t_gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image.data);\n\t\t\t} else {\n\t\t\t\tif (srcTexture.isCompressedTexture) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.');\n\n\t\t\t\t\t_gl.compressedTexSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, image.data);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, unpackRowLen);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, unpackImageHeight);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, unpackSkipPixels);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, unpackSkipRows);\n\n\t\t\t_gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, unpackSkipImages); // Generate mipmaps only when copying level 0\n\n\n\t\t\tif (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(glTarget);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.initTexture = function (texture) {\n\t\t\ttextures.setTexture2D(texture, 0);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.resetState = function () {\n\t\t\t_currentActiveCubeFace = 0;\n\t\t\t_currentActiveMipmapLevel = 0;\n\t\t\t_currentRenderTarget = null;\n\t\t\tstate.reset();\n\t\t\tbindingStates.reset();\n\t\t};\n\n\t\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n\t\t\t\tdetail: this\n\t\t\t})); // eslint-disable-line no-undef\n\n\t\t}\n\t}\n\n\tWebGLRenderer.prototype.isWebGLRenderer = true;\n\n\tclass WebGL1Renderer extends WebGLRenderer {}\n\n\tWebGL1Renderer.prototype.isWebGL1Renderer = true;\n\n\tclass FogExp2 {\n\t\tconstructor(color, density = 0.00025) {\n\t\t\tthis.name = '';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.density = density;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new FogExp2(this.color, this.density);\n\t\t}\n\n\t\ttoJSON() {\n\t\t\treturn {\n\t\t\t\ttype: 'FogExp2',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tdensity: this.density\n\t\t\t};\n\t\t}\n\n\t}\n\n\tFogExp2.prototype.isFogExp2 = true;\n\n\tclass Fog {\n\t\tconstructor(color, near = 1, far = 1000) {\n\t\t\tthis.name = '';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.near = near;\n\t\t\tthis.far = far;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new Fog(this.color, this.near, this.far);\n\t\t}\n\n\t\ttoJSON() {\n\t\t\treturn {\n\t\t\t\ttype: 'Fog',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tnear: this.near,\n\t\t\t\tfar: this.far\n\t\t\t};\n\t\t}\n\n\t}\n\n\tFog.prototype.isFog = true;\n\n\tclass Scene extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'Scene';\n\t\t\tthis.background = null;\n\t\t\tthis.environment = null;\n\t\t\tthis.fog = null;\n\t\t\tthis.overrideMaterial = null;\n\t\t\tthis.autoUpdate = true; // checked by the renderer\n\n\t\t\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n\t\t\t\t\tdetail: this\n\t\t\t\t})); // eslint-disable-line no-undef\n\n\t\t\t}\n\t\t}\n\n\t\tcopy(source, recursive) {\n\t\t\tsuper.copy(source, recursive);\n\t\t\tif (source.background !== null) this.background = source.background.clone();\n\t\t\tif (source.environment !== null) this.environment = source.environment.clone();\n\t\t\tif (source.fog !== null) this.fog = source.fog.clone();\n\t\t\tif (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tif (this.fog !== null) data.object.fog = this.fog.toJSON();\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tScene.prototype.isScene = true;\n\n\tclass InterleavedBuffer {\n\t\tconstructor(array, stride) {\n\t\t\tthis.array = array;\n\t\t\tthis.stride = stride;\n\t\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\t\t\tthis.usage = StaticDrawUsage;\n\t\t\tthis.updateRange = {\n\t\t\t\toffset: 0,\n\t\t\t\tcount: -1\n\t\t\t};\n\t\t\tthis.version = 0;\n\t\t\tthis.uuid = generateUUID();\n\t\t}\n\n\t\tonUploadCallback() {}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t\tsetUsage(value) {\n\t\t\tthis.usage = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.array = new source.array.constructor(source.array);\n\t\t\tthis.count = source.count;\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.usage = source.usage;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyAt(index1, attribute, index2) {\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\n\t\t\tfor (let i = 0, l = this.stride; i < l; i++) {\n\t\t\t\tthis.array[index1 + i] = attribute.array[index2 + i];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tset(value, offset = 0) {\n\t\t\tthis.array.set(value, offset);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone(data) {\n\t\t\tif (data.arrayBuffers === undefined) {\n\t\t\t\tdata.arrayBuffers = {};\n\t\t\t}\n\n\t\t\tif (this.array.buffer._uuid === undefined) {\n\t\t\t\tthis.array.buffer._uuid = generateUUID();\n\t\t\t}\n\n\t\t\tif (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n\t\t\t\tdata.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;\n\t\t\t}\n\n\t\t\tconst array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);\n\t\t\tconst ib = new this.constructor(array, this.stride);\n\t\t\tib.setUsage(this.usage);\n\t\t\treturn ib;\n\t\t}\n\n\t\tonUpload(callback) {\n\t\t\tthis.onUploadCallback = callback;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(data) {\n\t\t\tif (data.arrayBuffers === undefined) {\n\t\t\t\tdata.arrayBuffers = {};\n\t\t\t} // generate UUID for array buffer if necessary\n\n\n\t\t\tif (this.array.buffer._uuid === undefined) {\n\t\t\t\tthis.array.buffer._uuid = generateUUID();\n\t\t\t}\n\n\t\t\tif (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n\t\t\t\tdata.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer));\n\t\t\t} //\n\n\n\t\t\treturn {\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tbuffer: this.array.buffer._uuid,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tstride: this.stride\n\t\t\t};\n\t\t}\n\n\t}\n\n\tInterleavedBuffer.prototype.isInterleavedBuffer = true;\n\n\tconst _vector$6 = /*@__PURE__*/new Vector3();\n\n\tclass InterleavedBufferAttribute {\n\t\tconstructor(interleavedBuffer, itemSize, offset, normalized = false) {\n\t\t\tthis.name = '';\n\t\t\tthis.data = interleavedBuffer;\n\t\t\tthis.itemSize = itemSize;\n\t\t\tthis.offset = offset;\n\t\t\tthis.normalized = normalized === true;\n\t\t}\n\n\t\tget count() {\n\t\t\treturn this.data.count;\n\t\t}\n\n\t\tget array() {\n\t\t\treturn this.data.array;\n\t\t}\n\n\t\tset needsUpdate(value) {\n\t\t\tthis.data.needsUpdate = value;\n\t\t}\n\n\t\tapplyMatrix4(m) {\n\t\t\tfor (let i = 0, l = this.data.count; i < l; i++) {\n\t\t\t\t_vector$6.x = this.getX(i);\n\t\t\t\t_vector$6.y = this.getY(i);\n\t\t\t\t_vector$6.z = this.getZ(i);\n\n\t\t\t\t_vector$6.applyMatrix4(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tapplyNormalMatrix(m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$6.x = this.getX(i);\n\t\t\t\t_vector$6.y = this.getY(i);\n\t\t\t\t_vector$6.z = this.getZ(i);\n\n\t\t\t\t_vector$6.applyNormalMatrix(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttransformDirection(m) {\n\t\t\tfor (let i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$6.x = this.getX(i);\n\t\t\t\t_vector$6.y = this.getY(i);\n\t\t\t\t_vector$6.z = this.getZ(i);\n\n\t\t\t\t_vector$6.transformDirection(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetX(index, x) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset] = x;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetY(index, y) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 1] = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetZ(index, z) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 2] = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetW(index, w) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 3] = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetX(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset];\n\t\t}\n\n\t\tgetY(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 1];\n\t\t}\n\n\t\tgetZ(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 2];\n\t\t}\n\n\t\tgetW(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 3];\n\t\t}\n\n\t\tsetXY(index, x, y) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetXYZ(index, x, y, z) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\tthis.data.array[index + 2] = z;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetXYZW(index, x, y, z, w) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\tthis.data.array[index + 2] = z;\n\t\t\tthis.data.array[index + 3] = w;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone(data) {\n\t\t\tif (data === undefined) {\n\t\t\t\tconsole.log('THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.');\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor (let i = 0; i < this.count; i++) {\n\t\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor (let j = 0; j < this.itemSize; j++) {\n\t\t\t\t\t\tarray.push(this.data.array[index + j]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);\n\t\t\t} else {\n\t\t\t\tif (data.interleavedBuffers === undefined) {\n\t\t\t\t\tdata.interleavedBuffers = {};\n\t\t\t\t}\n\n\t\t\t\tif (data.interleavedBuffers[this.data.uuid] === undefined) {\n\t\t\t\t\tdata.interleavedBuffers[this.data.uuid] = this.data.clone(data);\n\t\t\t\t}\n\n\t\t\t\treturn new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);\n\t\t\t}\n\t\t}\n\n\t\ttoJSON(data) {\n\t\t\tif (data === undefined) {\n\t\t\t\tconsole.log('THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.');\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor (let i = 0; i < this.count; i++) {\n\t\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor (let j = 0; j < this.itemSize; j++) {\n\t\t\t\t\t\tarray.push(this.data.array[index + j]);\n\t\t\t\t\t}\n\t\t\t\t} // deinterleave data and save it as an ordinary buffer attribute for now\n\n\n\t\t\t\treturn {\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\t\tarray: array,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\t// save as true interlaved attribtue\n\t\t\t\tif (data.interleavedBuffers === undefined) {\n\t\t\t\t\tdata.interleavedBuffers = {};\n\t\t\t\t}\n\n\t\t\t\tif (data.interleavedBuffers[this.data.uuid] === undefined) {\n\t\t\t\t\tdata.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tisInterleavedBufferAttribute: true,\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\tdata: this.data.uuid,\n\t\t\t\t\toffset: this.offset,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t}\n\n\tInterleavedBufferAttribute.prototype.isInterleavedBufferAttribute = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\trotation: <float>,\n\t *\tsizeAttenuation: <bool>\n\t * }\n\t */\n\n\tclass SpriteMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'SpriteMaterial';\n\t\t\tthis.color = new Color(0xffffff);\n\t\t\tthis.map = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.rotation = 0;\n\t\t\tthis.sizeAttenuation = true;\n\t\t\tthis.transparent = true;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.rotation = source.rotation;\n\t\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\n\n\tlet _geometry;\n\n\tconst _intersectPoint = /*@__PURE__*/new Vector3();\n\n\tconst _worldScale = /*@__PURE__*/new Vector3();\n\n\tconst _mvPosition = /*@__PURE__*/new Vector3();\n\n\tconst _alignedPosition = /*@__PURE__*/new Vector2();\n\n\tconst _rotatedPosition = /*@__PURE__*/new Vector2();\n\n\tconst _viewWorldMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _vA = /*@__PURE__*/new Vector3();\n\n\tconst _vB = /*@__PURE__*/new Vector3();\n\n\tconst _vC = /*@__PURE__*/new Vector3();\n\n\tconst _uvA = /*@__PURE__*/new Vector2();\n\n\tconst _uvB = /*@__PURE__*/new Vector2();\n\n\tconst _uvC = /*@__PURE__*/new Vector2();\n\n\tclass Sprite extends Object3D {\n\t\tconstructor(material) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Sprite';\n\n\t\t\tif (_geometry === undefined) {\n\t\t\t\t_geometry = new BufferGeometry();\n\t\t\t\tconst float32Array = new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]);\n\t\t\t\tconst interleavedBuffer = new InterleavedBuffer(float32Array, 5);\n\n\t\t\t\t_geometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n\t\t\t\t_geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n\n\t\t\t\t_geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\n\t\t\t}\n\n\t\t\tthis.geometry = _geometry;\n\t\t\tthis.material = material !== undefined ? material : new SpriteMaterial();\n\t\t\tthis.center = new Vector2(0.5, 0.5);\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tif (raycaster.camera === null) {\n\t\t\t\tconsole.error('THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.');\n\t\t\t}\n\n\t\t\t_worldScale.setFromMatrixScale(this.matrixWorld);\n\n\t\t\t_viewWorldMatrix.copy(raycaster.camera.matrixWorld);\n\n\t\t\tthis.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);\n\n\t\t\t_mvPosition.setFromMatrixPosition(this.modelViewMatrix);\n\n\t\t\tif (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {\n\t\t\t\t_worldScale.multiplyScalar(-_mvPosition.z);\n\t\t\t}\n\n\t\t\tconst rotation = this.material.rotation;\n\t\t\tlet sin, cos;\n\n\t\t\tif (rotation !== 0) {\n\t\t\t\tcos = Math.cos(rotation);\n\t\t\t\tsin = Math.sin(rotation);\n\t\t\t}\n\n\t\t\tconst center = this.center;\n\t\t\ttransformVertex(_vA.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\t\t\ttransformVertex(_vB.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\t\t\ttransformVertex(_vC.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n\t\t\t_uvA.set(0, 0);\n\n\t\t\t_uvB.set(1, 0);\n\n\t\t\t_uvC.set(1, 1); // check first triangle\n\n\n\t\t\tlet intersect = raycaster.ray.intersectTriangle(_vA, _vB, _vC, false, _intersectPoint);\n\n\t\t\tif (intersect === null) {\n\t\t\t\t// check second triangle\n\t\t\t\ttransformVertex(_vB.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n\t\t\t\t_uvB.set(0, 1);\n\n\t\t\t\tintersect = raycaster.ray.intersectTriangle(_vA, _vC, _vB, false, _intersectPoint);\n\n\t\t\t\tif (intersect === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst distance = raycaster.ray.origin.distanceTo(_intersectPoint);\n\t\t\tif (distance < raycaster.near || distance > raycaster.far) return;\n\t\t\tintersects.push({\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: _intersectPoint.clone(),\n\t\t\t\tuv: Triangle.getUV(_intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2()),\n\t\t\t\tface: null,\n\t\t\t\tobject: this\n\t\t\t});\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tif (source.center !== undefined) this.center.copy(source.center);\n\t\t\tthis.material = source.material;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSprite.prototype.isSprite = true;\n\n\tfunction transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {\n\t\t// compute position in camera space\n\t\t_alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale); // to check if rotation is not zero\n\n\n\t\tif (sin !== undefined) {\n\t\t\t_rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;\n\t\t\t_rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;\n\t\t} else {\n\t\t\t_rotatedPosition.copy(_alignedPosition);\n\t\t}\n\n\t\tvertexPosition.copy(mvPosition);\n\t\tvertexPosition.x += _rotatedPosition.x;\n\t\tvertexPosition.y += _rotatedPosition.y; // transform to world space\n\n\t\tvertexPosition.applyMatrix4(_viewWorldMatrix);\n\t}\n\n\tconst _v1$2 = /*@__PURE__*/new Vector3();\n\n\tconst _v2$1 = /*@__PURE__*/new Vector3();\n\n\tclass LOD extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis._currentLevel = 0;\n\t\t\tthis.type = 'LOD';\n\t\t\tObject.defineProperties(this, {\n\t\t\t\tlevels: {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: []\n\t\t\t\t},\n\t\t\t\tisLOD: {\n\t\t\t\t\tvalue: true\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.autoUpdate = true;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source, false);\n\t\t\tconst levels = source.levels;\n\n\t\t\tfor (let i = 0, l = levels.length; i < l; i++) {\n\t\t\t\tconst level = levels[i];\n\t\t\t\tthis.addLevel(level.object.clone(), level.distance);\n\t\t\t}\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\treturn this;\n\t\t}\n\n\t\taddLevel(object, distance = 0) {\n\t\t\tdistance = Math.abs(distance);\n\t\t\tconst levels = this.levels;\n\t\t\tlet l;\n\n\t\t\tfor (l = 0; l < levels.length; l++) {\n\t\t\t\tif (distance < levels[l].distance) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlevels.splice(l, 0, {\n\t\t\t\tdistance: distance,\n\t\t\t\tobject: object\n\t\t\t});\n\t\t\tthis.add(object);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetCurrentLevel() {\n\t\t\treturn this._currentLevel;\n\t\t}\n\n\t\tgetObjectForDistance(distance) {\n\t\t\tconst levels = this.levels;\n\n\t\t\tif (levels.length > 0) {\n\t\t\t\tlet i, l;\n\n\t\t\t\tfor (i = 1, l = levels.length; i < l; i++) {\n\t\t\t\t\tif (distance < levels[i].distance) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn levels[i - 1].object;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst levels = this.levels;\n\n\t\t\tif (levels.length > 0) {\n\t\t\t\t_v1$2.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\t\tconst distance = raycaster.ray.origin.distanceTo(_v1$2);\n\t\t\t\tthis.getObjectForDistance(distance).raycast(raycaster, intersects);\n\t\t\t}\n\t\t}\n\n\t\tupdate(camera) {\n\t\t\tconst levels = this.levels;\n\n\t\t\tif (levels.length > 1) {\n\t\t\t\t_v1$2.setFromMatrixPosition(camera.matrixWorld);\n\n\t\t\t\t_v2$1.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\t\tconst distance = _v1$2.distanceTo(_v2$1) / camera.zoom;\n\t\t\t\tlevels[0].object.visible = true;\n\t\t\t\tlet i, l;\n\n\t\t\t\tfor (i = 1, l = levels.length; i < l; i++) {\n\t\t\t\t\tif (distance >= levels[i].distance) {\n\t\t\t\t\t\tlevels[i - 1].object.visible = false;\n\t\t\t\t\t\tlevels[i].object.visible = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._currentLevel = i - 1;\n\n\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\tlevels[i].object.visible = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tif (this.autoUpdate === false) data.object.autoUpdate = false;\n\t\t\tdata.object.levels = [];\n\t\t\tconst levels = this.levels;\n\n\t\t\tfor (let i = 0, l = levels.length; i < l; i++) {\n\t\t\t\tconst level = levels[i];\n\t\t\t\tdata.object.levels.push({\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tconst _basePosition = /*@__PURE__*/new Vector3();\n\n\tconst _skinIndex = /*@__PURE__*/new Vector4();\n\n\tconst _skinWeight = /*@__PURE__*/new Vector4();\n\n\tconst _vector$5 = /*@__PURE__*/new Vector3();\n\n\tconst _matrix = /*@__PURE__*/new Matrix4();\n\n\tclass SkinnedMesh extends Mesh {\n\t\tconstructor(geometry, material) {\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'SkinnedMesh';\n\t\t\tthis.bindMode = 'attached';\n\t\t\tthis.bindMatrix = new Matrix4();\n\t\t\tthis.bindMatrixInverse = new Matrix4();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.bindMode = source.bindMode;\n\t\t\tthis.bindMatrix.copy(source.bindMatrix);\n\t\t\tthis.bindMatrixInverse.copy(source.bindMatrixInverse);\n\t\t\tthis.skeleton = source.skeleton;\n\t\t\treturn this;\n\t\t}\n\n\t\tbind(skeleton, bindMatrix) {\n\t\t\tthis.skeleton = skeleton;\n\n\t\t\tif (bindMatrix === undefined) {\n\t\t\t\tthis.updateMatrixWorld(true);\n\t\t\t\tthis.skeleton.calculateInverses();\n\t\t\t\tbindMatrix = this.matrixWorld;\n\t\t\t}\n\n\t\t\tthis.bindMatrix.copy(bindMatrix);\n\t\t\tthis.bindMatrixInverse.copy(bindMatrix).invert();\n\t\t}\n\n\t\tpose() {\n\t\t\tthis.skeleton.pose();\n\t\t}\n\n\t\tnormalizeSkinWeights() {\n\t\t\tconst vector = new Vector4();\n\t\t\tconst skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\tfor (let i = 0, l = skinWeight.count; i < l; i++) {\n\t\t\t\tvector.x = skinWeight.getX(i);\n\t\t\t\tvector.y = skinWeight.getY(i);\n\t\t\t\tvector.z = skinWeight.getZ(i);\n\t\t\t\tvector.w = skinWeight.getW(i);\n\t\t\t\tconst scale = 1.0 / vector.manhattanLength();\n\n\t\t\t\tif (scale !== Infinity) {\n\t\t\t\t\tvector.multiplyScalar(scale);\n\t\t\t\t} else {\n\t\t\t\t\tvector.set(1, 0, 0, 0); // do something reasonable\n\t\t\t\t}\n\n\t\t\t\tskinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);\n\t\t\t}\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tsuper.updateMatrixWorld(force);\n\n\t\t\tif (this.bindMode === 'attached') {\n\t\t\t\tthis.bindMatrixInverse.copy(this.matrixWorld).invert();\n\t\t\t} else if (this.bindMode === 'detached') {\n\t\t\t\tthis.bindMatrixInverse.copy(this.bindMatrix).invert();\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode);\n\t\t\t}\n\t\t}\n\n\t\tboneTransform(index, target) {\n\t\t\tconst skeleton = this.skeleton;\n\t\t\tconst geometry = this.geometry;\n\n\t\t\t_skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);\n\n\t\t\t_skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);\n\n\t\t\t_basePosition.copy(target).applyMatrix4(this.bindMatrix);\n\n\t\t\ttarget.set(0, 0, 0);\n\n\t\t\tfor (let i = 0; i < 4; i++) {\n\t\t\t\tconst weight = _skinWeight.getComponent(i);\n\n\t\t\t\tif (weight !== 0) {\n\t\t\t\t\tconst boneIndex = _skinIndex.getComponent(i);\n\n\t\t\t\t\t_matrix.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);\n\n\t\t\t\t\ttarget.addScaledVector(_vector$5.copy(_basePosition).applyMatrix4(_matrix), weight);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn target.applyMatrix4(this.bindMatrixInverse);\n\t\t}\n\n\t}\n\n\tSkinnedMesh.prototype.isSkinnedMesh = true;\n\n\tclass Bone extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'Bone';\n\t\t}\n\n\t}\n\n\tBone.prototype.isBone = true;\n\n\tclass DataTexture extends Texture {\n\t\tconstructor(data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, encoding) {\n\t\t\tsuper(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n\t\t\tthis.image = {\n\t\t\t\tdata: data,\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\t\t\tthis.magFilter = magFilter;\n\t\t\tthis.minFilter = minFilter;\n\t\t\tthis.generateMipmaps = false;\n\t\t\tthis.flipY = false;\n\t\t\tthis.unpackAlignment = 1;\n\t\t\tthis.needsUpdate = true;\n\t\t}\n\n\t}\n\n\tDataTexture.prototype.isDataTexture = true;\n\n\tconst _offsetMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _identityMatrix = /*@__PURE__*/new Matrix4();\n\n\tclass Skeleton {\n\t\tconstructor(bones = [], boneInverses = []) {\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.bones = bones.slice(0);\n\t\t\tthis.boneInverses = boneInverses;\n\t\t\tthis.boneMatrices = null;\n\t\t\tthis.boneTexture = null;\n\t\t\tthis.boneTextureSize = 0;\n\t\t\tthis.frame = -1;\n\t\t\tthis.init();\n\t\t}\n\n\t\tinit() {\n\t\t\tconst bones = this.bones;\n\t\t\tconst boneInverses = this.boneInverses;\n\t\t\tthis.boneMatrices = new Float32Array(bones.length * 16); // calculate inverse bone matrices if necessary\n\n\t\t\tif (boneInverses.length === 0) {\n\t\t\t\tthis.calculateInverses();\n\t\t\t} else {\n\t\t\t\t// handle special case\n\t\t\t\tif (bones.length !== boneInverses.length) {\n\t\t\t\t\tconsole.warn('THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.');\n\t\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\t\t\tthis.boneInverses.push(new Matrix4());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcalculateInverses() {\n\t\t\tthis.boneInverses.length = 0;\n\n\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tconst inverse = new Matrix4();\n\n\t\t\t\tif (this.bones[i]) {\n\t\t\t\t\tinverse.copy(this.bones[i].matrixWorld).invert();\n\t\t\t\t}\n\n\t\t\t\tthis.boneInverses.push(inverse);\n\t\t\t}\n\t\t}\n\n\t\tpose() {\n\t\t\t// recover the bind-time world matrices\n\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tconst bone = this.bones[i];\n\n\t\t\t\tif (bone) {\n\t\t\t\t\tbone.matrixWorld.copy(this.boneInverses[i]).invert();\n\t\t\t\t}\n\t\t\t} // compute the local matrices, positions, rotations and scales\n\n\n\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tconst bone = this.bones[i];\n\n\t\t\t\tif (bone) {\n\t\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\t\tbone.matrix.copy(bone.parent.matrixWorld).invert();\n\t\t\t\t\t\tbone.matrix.multiply(bone.matrixWorld);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbone.matrix.copy(bone.matrixWorld);\n\t\t\t\t\t}\n\n\t\t\t\t\tbone.matrix.decompose(bone.position, bone.quaternion, bone.scale);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tupdate() {\n\t\t\tconst bones = this.bones;\n\t\t\tconst boneInverses = this.boneInverses;\n\t\t\tconst boneMatrices = this.boneMatrices;\n\t\t\tconst boneTexture = this.boneTexture; // flatten bone matrices to array\n\n\t\t\tfor (let i = 0, il = bones.length; i < il; i++) {\n\t\t\t\t// compute the offset between the current and the original transform\n\t\t\t\tconst matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;\n\n\t\t\t\t_offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);\n\n\t\t\t\t_offsetMatrix.toArray(boneMatrices, i * 16);\n\t\t\t}\n\n\t\t\tif (boneTexture !== null) {\n\t\t\t\tboneTexture.needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new Skeleton(this.bones, this.boneInverses);\n\t\t}\n\n\t\tcomputeBoneTexture() {\n\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t//\t\t\tRGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t//\twith\t8x8\tpixel texture max\t 16 bones * 4 pixels =\t(8 * 8)\n\t\t\t//\t\t\t 16x16 pixel texture max\t 64 bones * 4 pixels = (16 * 16)\n\t\t\t//\t\t\t 32x32 pixel texture max\t256 bones * 4 pixels = (32 * 32)\n\t\t\t//\t\t\t 64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\t\t\tlet size = Math.sqrt(this.bones.length * 4); // 4 pixels needed for 1 matrix\n\n\t\t\tsize = ceilPowerOfTwo(size);\n\t\t\tsize = Math.max(size, 4);\n\t\t\tconst boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel\n\n\t\t\tboneMatrices.set(this.boneMatrices); // copy current values\n\n\t\t\tconst boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);\n\t\t\tthis.boneMatrices = boneMatrices;\n\t\t\tthis.boneTexture = boneTexture;\n\t\t\tthis.boneTextureSize = size;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetBoneByName(name) {\n\t\t\tfor (let i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tconst bone = this.bones[i];\n\n\t\t\t\tif (bone.name === name) {\n\t\t\t\t\treturn bone;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\tdispose() {\n\t\t\tif (this.boneTexture !== null) {\n\t\t\t\tthis.boneTexture.dispose();\n\t\t\t\tthis.boneTexture = null;\n\t\t\t}\n\t\t}\n\n\t\tfromJSON(json, bones) {\n\t\t\tthis.uuid = json.uuid;\n\n\t\t\tfor (let i = 0, l = json.bones.length; i < l; i++) {\n\t\t\t\tconst uuid = json.bones[i];\n\t\t\t\tlet bone = bones[uuid];\n\n\t\t\t\tif (bone === undefined) {\n\t\t\t\t\tconsole.warn('THREE.Skeleton: No bone found with UUID:', uuid);\n\t\t\t\t\tbone = new Bone();\n\t\t\t\t}\n\n\t\t\t\tthis.bones.push(bone);\n\t\t\t\tthis.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]));\n\t\t\t}\n\n\t\t\tthis.init();\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Skeleton',\n\t\t\t\t\tgenerator: 'Skeleton.toJSON'\n\t\t\t\t},\n\t\t\t\tbones: [],\n\t\t\t\tboneInverses: []\n\t\t\t};\n\t\t\tdata.uuid = this.uuid;\n\t\t\tconst bones = this.bones;\n\t\t\tconst boneInverses = this.boneInverses;\n\n\t\t\tfor (let i = 0, l = bones.length; i < l; i++) {\n\t\t\t\tconst bone = bones[i];\n\t\t\t\tdata.bones.push(bone.uuid);\n\t\t\t\tconst boneInverse = boneInverses[i];\n\t\t\t\tdata.boneInverses.push(boneInverse.toArray());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tclass InstancedBufferAttribute extends BufferAttribute {\n\t\tconstructor(array, itemSize, normalized, meshPerAttribute = 1) {\n\t\t\tif (typeof normalized === 'number') {\n\t\t\t\tmeshPerAttribute = normalized;\n\t\t\t\tnormalized = false;\n\t\t\t\tconsole.error('THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.');\n\t\t\t}\n\n\t\t\tsuper(array, itemSize, normalized);\n\t\t\tthis.meshPerAttribute = meshPerAttribute;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\t\t\tdata.isInstancedBufferAttribute = true;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tInstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;\n\n\tconst _instanceLocalMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _instanceWorldMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _instanceIntersects = [];\n\n\tconst _mesh = /*@__PURE__*/new Mesh();\n\n\tclass InstancedMesh extends Mesh {\n\t\tconstructor(geometry, material, count) {\n\t\t\tsuper(geometry, material);\n\t\t\tthis.instanceMatrix = new InstancedBufferAttribute(new Float32Array(count * 16), 16);\n\t\t\tthis.instanceColor = null;\n\t\t\tthis.count = count;\n\t\t\tthis.frustumCulled = false;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.instanceMatrix.copy(source.instanceMatrix);\n\t\t\tif (source.instanceColor !== null) this.instanceColor = source.instanceColor.clone();\n\t\t\tthis.count = source.count;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetColorAt(index, color) {\n\t\t\tcolor.fromArray(this.instanceColor.array, index * 3);\n\t\t}\n\n\t\tgetMatrixAt(index, matrix) {\n\t\t\tmatrix.fromArray(this.instanceMatrix.array, index * 16);\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst matrixWorld = this.matrixWorld;\n\t\t\tconst raycastTimes = this.count;\n\t\t\t_mesh.geometry = this.geometry;\n\t\t\t_mesh.material = this.material;\n\t\t\tif (_mesh.material === undefined) return;\n\n\t\t\tfor (let instanceId = 0; instanceId < raycastTimes; instanceId++) {\n\t\t\t\t// calculate the world matrix for each instance\n\t\t\t\tthis.getMatrixAt(instanceId, _instanceLocalMatrix);\n\n\t\t\t\t_instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix); // the mesh represents this single instance\n\n\n\t\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t\t_mesh.raycast(raycaster, _instanceIntersects); // process the result of raycast\n\n\n\t\t\t\tfor (let i = 0, l = _instanceIntersects.length; i < l; i++) {\n\t\t\t\t\tconst intersect = _instanceIntersects[i];\n\t\t\t\t\tintersect.instanceId = instanceId;\n\t\t\t\t\tintersect.object = this;\n\t\t\t\t\tintersects.push(intersect);\n\t\t\t\t}\n\n\t\t\t\t_instanceIntersects.length = 0;\n\t\t\t}\n\t\t}\n\n\t\tsetColorAt(index, color) {\n\t\t\tif (this.instanceColor === null) {\n\t\t\t\tthis.instanceColor = new InstancedBufferAttribute(new Float32Array(this.instanceMatrix.count * 3), 3);\n\t\t\t}\n\n\t\t\tcolor.toArray(this.instanceColor.array, index * 3);\n\t\t}\n\n\t\tsetMatrixAt(index, matrix) {\n\t\t\tmatrix.toArray(this.instanceMatrix.array, index * 16);\n\t\t}\n\n\t\tupdateMorphTargets() {}\n\n\t\tdispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\n\t}\n\n\tInstancedMesh.prototype.isInstancedMesh = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tlinewidth: <float>,\n\t *\tlinecap: \"round\",\n\t *\tlinejoin: \"round\"\n\t * }\n\t */\n\n\tclass LineBasicMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LineBasicMaterial';\n\t\t\tthis.color = new Color(0xffffff);\n\t\t\tthis.linewidth = 1;\n\t\t\tthis.linecap = 'round';\n\t\t\tthis.linejoin = 'round';\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.linewidth = source.linewidth;\n\t\t\tthis.linecap = source.linecap;\n\t\t\tthis.linejoin = source.linejoin;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n\tconst _start$1 = /*@__PURE__*/new Vector3();\n\n\tconst _end$1 = /*@__PURE__*/new Vector3();\n\n\tconst _inverseMatrix$1 = /*@__PURE__*/new Matrix4();\n\n\tconst _ray$1 = /*@__PURE__*/new Ray();\n\n\tconst _sphere$1 = /*@__PURE__*/new Sphere();\n\n\tclass Line extends Object3D {\n\t\tconstructor(geometry = new BufferGeometry(), material = new LineBasicMaterial()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Line';\n\t\t\tthis.geometry = geometry;\n\t\t\tthis.material = material;\n\t\t\tthis.updateMorphTargets();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t}\n\n\t\tcomputeLineDistances() {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\t// we assume non-indexed geometry\n\t\t\t\tif (geometry.index === null) {\n\t\t\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\t\t\tconst lineDistances = [0];\n\n\t\t\t\t\tfor (let i = 1, l = positionAttribute.count; i < l; i++) {\n\t\t\t\t\t\t_start$1.fromBufferAttribute(positionAttribute, i - 1);\n\n\t\t\t\t\t\t_end$1.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\tlineDistances[i] = lineDistances[i - 1];\n\t\t\t\t\t\tlineDistances[i] += _start$1.distanceTo(_end$1);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst matrixWorld = this.matrixWorld;\n\t\t\tconst threshold = raycaster.params.Line.threshold;\n\t\t\tconst drawRange = geometry.drawRange; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$1.copy(geometry.boundingSphere);\n\n\t\t\t_sphere$1.applyMatrix4(matrixWorld);\n\n\t\t\t_sphere$1.radius += threshold;\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere$1) === false) return; //\n\n\t\t\t_inverseMatrix$1.copy(matrixWorld).invert();\n\n\t\t\t_ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);\n\n\t\t\tconst localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n\t\t\tconst localThresholdSq = localThreshold * localThreshold;\n\t\t\tconst vStart = new Vector3();\n\t\t\tconst vEnd = new Vector3();\n\t\t\tconst interSegment = new Vector3();\n\t\t\tconst interRay = new Vector3();\n\t\t\tconst step = this.isLineSegments ? 2 : 1;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst index = geometry.index;\n\t\t\t\tconst attributes = geometry.attributes;\n\t\t\t\tconst positionAttribute = attributes.position;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\tconst end = Math.min(index.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\tfor (let i = start, l = end - 1; i < l; i += step) {\n\t\t\t\t\t\tconst a = index.getX(i);\n\t\t\t\t\t\tconst b = index.getX(i + 1);\n\t\t\t\t\t\tvStart.fromBufferAttribute(positionAttribute, a);\n\t\t\t\t\t\tvEnd.fromBufferAttribute(positionAttribute, b);\n\n\t\t\t\t\t\tconst distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n\n\t\t\t\t\t\tif (distSq > localThresholdSq) continue;\n\t\t\t\t\t\tinterRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tconst distance = raycaster.ray.origin.distanceTo(interRay);\n\t\t\t\t\t\tif (distance < raycaster.near || distance > raycaster.far) continue;\n\t\t\t\t\t\tintersects.push({\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4(this.matrixWorld),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\tconst end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\tfor (let i = start, l = end - 1; i < l; i += step) {\n\t\t\t\t\t\tvStart.fromBufferAttribute(positionAttribute, i);\n\t\t\t\t\t\tvEnd.fromBufferAttribute(positionAttribute, i + 1);\n\n\t\t\t\t\t\tconst distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n\n\t\t\t\t\t\tif (distSq > localThresholdSq) continue;\n\t\t\t\t\t\tinterRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tconst distance = raycaster.ray.origin.distanceTo(interRay);\n\t\t\t\t\t\tif (distance < raycaster.near || distance > raycaster.far) continue;\n\t\t\t\t\t\tintersects.push({\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4(this.matrixWorld),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t}\n\n\t\tupdateMorphTargets() {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\t\tconst keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tconst morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tconst name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tLine.prototype.isLine = true;\n\n\tconst _start = /*@__PURE__*/new Vector3();\n\n\tconst _end = /*@__PURE__*/new Vector3();\n\n\tclass LineSegments extends Line {\n\t\tconstructor(geometry, material) {\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'LineSegments';\n\t\t}\n\n\t\tcomputeLineDistances() {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\t// we assume non-indexed geometry\n\t\t\t\tif (geometry.index === null) {\n\t\t\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\t\t\tconst lineDistances = [];\n\n\t\t\t\t\tfor (let i = 0, l = positionAttribute.count; i < l; i += 2) {\n\t\t\t\t\t\t_start.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\t_end.fromBufferAttribute(positionAttribute, i + 1);\n\n\t\t\t\t\t\tlineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];\n\t\t\t\t\t\tlineDistances[i + 1] = lineDistances[i] + _start.distanceTo(_end);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tLineSegments.prototype.isLineSegments = true;\n\n\tclass LineLoop extends Line {\n\t\tconstructor(geometry, material) {\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'LineLoop';\n\t\t}\n\n\t}\n\n\tLineLoop.prototype.isLineLoop = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tsize: <float>,\n\t *\tsizeAttenuation: <bool>\n\t *\n\t * }\n\t */\n\n\tclass PointsMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'PointsMaterial';\n\t\t\tthis.color = new Color(0xffffff);\n\t\t\tthis.map = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.size = 1;\n\t\t\tthis.sizeAttenuation = true;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.size = source.size;\n\t\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tPointsMaterial.prototype.isPointsMaterial = true;\n\n\tconst _inverseMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _ray = /*@__PURE__*/new Ray();\n\n\tconst _sphere = /*@__PURE__*/new Sphere();\n\n\tconst _position$2 = /*@__PURE__*/new Vector3();\n\n\tclass Points extends Object3D {\n\t\tconstructor(geometry = new BufferGeometry(), material = new PointsMaterial()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Points';\n\t\t\tthis.geometry = geometry;\n\t\t\tthis.material = material;\n\t\t\tthis.updateMorphTargets();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t}\n\n\t\traycast(raycaster, intersects) {\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst matrixWorld = this.matrixWorld;\n\t\t\tconst threshold = raycaster.params.Points.threshold;\n\t\t\tconst drawRange = geometry.drawRange; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere.copy(geometry.boundingSphere);\n\n\t\t\t_sphere.applyMatrix4(matrixWorld);\n\n\t\t\t_sphere.radius += threshold;\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere) === false) return; //\n\n\t\t\t_inverseMatrix.copy(matrixWorld).invert();\n\n\t\t\t_ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);\n\n\t\t\tconst localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n\t\t\tconst localThresholdSq = localThreshold * localThreshold;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst index = geometry.index;\n\t\t\t\tconst attributes = geometry.attributes;\n\t\t\t\tconst positionAttribute = attributes.position;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\tconst end = Math.min(index.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\tfor (let i = start, il = end; i < il; i++) {\n\t\t\t\t\t\tconst a = index.getX(i);\n\n\t\t\t\t\t\t_position$2.fromBufferAttribute(positionAttribute, a);\n\n\t\t\t\t\t\ttestPoint(_position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst start = Math.max(0, drawRange.start);\n\t\t\t\t\tconst end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\tfor (let i = start, l = end; i < l; i++) {\n\t\t\t\t\t\t_position$2.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\ttestPoint(_position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t}\n\n\t\tupdateMorphTargets() {\n\t\t\tconst geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\t\tconst keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tconst morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (let m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tconst name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tPoints.prototype.isPoints = true;\n\n\tfunction testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {\n\t\tconst rayPointDistanceSq = _ray.distanceSqToPoint(point);\n\n\t\tif (rayPointDistanceSq < localThresholdSq) {\n\t\t\tconst intersectPoint = new Vector3();\n\n\t\t\t_ray.closestPointToPoint(point, intersectPoint);\n\n\t\t\tintersectPoint.applyMatrix4(matrixWorld);\n\t\t\tconst distance = raycaster.ray.origin.distanceTo(intersectPoint);\n\t\t\tif (distance < raycaster.near || distance > raycaster.far) return;\n\t\t\tintersects.push({\n\t\t\t\tdistance: distance,\n\t\t\t\tdistanceToRay: Math.sqrt(rayPointDistanceSq),\n\t\t\t\tpoint: intersectPoint,\n\t\t\t\tindex: index,\n\t\t\t\tface: null,\n\t\t\t\tobject: object\n\t\t\t});\n\t\t}\n\t}\n\n\tclass VideoTexture extends Texture {\n\t\tconstructor(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n\t\t\tsuper(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\t\tthis.format = format !== undefined ? format : RGBFormat;\n\t\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\t\tthis.generateMipmaps = false;\n\t\t\tconst scope = this;\n\n\t\t\tfunction updateVideo() {\n\t\t\t\tscope.needsUpdate = true;\n\t\t\t\tvideo.requestVideoFrameCallback(updateVideo);\n\t\t\t}\n\n\t\t\tif ('requestVideoFrameCallback' in video) {\n\t\t\t\tvideo.requestVideoFrameCallback(updateVideo);\n\t\t\t}\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor(this.image).copy(this);\n\t\t}\n\n\t\tupdate() {\n\t\t\tconst video = this.image;\n\t\t\tconst hasVideoFrameCallback = ('requestVideoFrameCallback' in video);\n\n\t\t\tif (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) {\n\t\t\t\tthis.needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t}\n\n\tVideoTexture.prototype.isVideoTexture = true;\n\n\tclass CompressedTexture extends Texture {\n\t\tconstructor(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n\t\t\tsuper(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n\t\t\tthis.image = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\t\t\tthis.mipmaps = mipmaps; // no flipping for cube textures\n\t\t\t// (also flipping doesn't work for compressed textures )\n\n\t\t\tthis.flipY = false; // can't generate mipmaps for compressed textures\n\t\t\t// mips must be embedded in DDS files\n\n\t\t\tthis.generateMipmaps = false;\n\t\t}\n\n\t}\n\n\tCompressedTexture.prototype.isCompressedTexture = true;\n\n\tclass CanvasTexture extends Texture {\n\t\tconstructor(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n\t\t\tsuper(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\t\tthis.needsUpdate = true;\n\t\t}\n\n\t}\n\n\tCanvasTexture.prototype.isCanvasTexture = true;\n\n\tclass DepthTexture extends Texture {\n\t\tconstructor(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {\n\t\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\t\tif (format !== DepthFormat && format !== DepthStencilFormat) {\n\t\t\t\tthrow new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');\n\t\t\t}\n\n\t\t\tif (type === undefined && format === DepthFormat) type = UnsignedShortType;\n\t\t\tif (type === undefined && format === DepthStencilFormat) type = UnsignedInt248Type;\n\t\t\tsuper(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n\t\t\tthis.image = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\t\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\t\tthis.flipY = false;\n\t\t\tthis.generateMipmaps = false;\n\t\t}\n\n\t}\n\n\tDepthTexture.prototype.isDepthTexture = true;\n\n\tclass CircleGeometry extends BufferGeometry {\n\t\tconstructor(radius = 1, segments = 8, thetaStart = 0, thetaLength = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CircleGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tsegments: segments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tsegments = Math.max(3, segments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst uv = new Vector2(); // center point\n\n\t\t\tvertices.push(0, 0, 0);\n\t\t\tnormals.push(0, 0, 1);\n\t\t\tuvs.push(0.5, 0.5);\n\n\t\t\tfor (let s = 0, i = 3; s <= segments; s++, i += 3) {\n\t\t\t\tconst segment = thetaStart + s / segments * thetaLength; // vertex\n\n\t\t\t\tvertex.x = radius * Math.cos(segment);\n\t\t\t\tvertex.y = radius * Math.sin(segment);\n\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\tnormals.push(0, 0, 1); // uvs\n\n\t\t\t\tuv.x = (vertices[i] / radius + 1) / 2;\n\t\t\t\tuv.y = (vertices[i + 1] / radius + 1) / 2;\n\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t} // indices\n\n\n\t\t\tfor (let i = 1; i <= segments; i++) {\n\t\t\t\tindices.push(i, i + 1, 0);\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\treturn new CircleGeometry(data.radius, data.segments, data.thetaStart, data.thetaLength);\n\t\t}\n\n\t}\n\n\tclass CylinderGeometry extends BufferGeometry {\n\t\tconstructor(radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CylinderGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradiusTop: radiusTop,\n\t\t\t\tradiusBottom: radiusBottom,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tconst scope = this;\n\t\t\tradialSegments = Math.floor(radialSegments);\n\t\t\theightSegments = Math.floor(heightSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tlet index = 0;\n\t\t\tconst indexArray = [];\n\t\t\tconst halfHeight = height / 2;\n\t\t\tlet groupStart = 0; // generate geometry\n\n\t\t\tgenerateTorso();\n\n\t\t\tif (openEnded === false) {\n\t\t\t\tif (radiusTop > 0) generateCap(true);\n\t\t\t\tif (radiusBottom > 0) generateCap(false);\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\tfunction generateTorso() {\n\t\t\t\tconst normal = new Vector3();\n\t\t\t\tconst vertex = new Vector3();\n\t\t\t\tlet groupCount = 0; // this will be used to calculate the normal\n\n\t\t\t\tconst slope = (radiusBottom - radiusTop) / height; // generate vertices, normals and uvs\n\n\t\t\t\tfor (let y = 0; y <= heightSegments; y++) {\n\t\t\t\t\tconst indexRow = [];\n\t\t\t\t\tconst v = y / heightSegments; // calculate the radius of the current row\n\n\t\t\t\t\tconst radius = v * (radiusBottom - radiusTop) + radiusTop;\n\n\t\t\t\t\tfor (let x = 0; x <= radialSegments; x++) {\n\t\t\t\t\t\tconst u = x / radialSegments;\n\t\t\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\t\t\t\t\t\tconst sinTheta = Math.sin(theta);\n\t\t\t\t\t\tconst cosTheta = Math.cos(theta); // vertex\n\n\t\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\t\tvertex.y = -v * height + halfHeight;\n\t\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\t\tnormal.set(sinTheta, slope, cosTheta).normalize();\n\t\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\t\tuvs.push(u, 1 - v); // save index of vertex in respective row\n\n\t\t\t\t\t\tindexRow.push(index++);\n\t\t\t\t\t} // now save vertices of the row in our index array\n\n\n\t\t\t\t\tindexArray.push(indexRow);\n\t\t\t\t} // generate indices\n\n\n\t\t\t\tfor (let x = 0; x < radialSegments; x++) {\n\t\t\t\t\tfor (let y = 0; y < heightSegments; y++) {\n\t\t\t\t\t\t// we use the index array to access the correct indices\n\t\t\t\t\t\tconst a = indexArray[y][x];\n\t\t\t\t\t\tconst b = indexArray[y + 1][x];\n\t\t\t\t\t\tconst c = indexArray[y + 1][x + 1];\n\t\t\t\t\t\tconst d = indexArray[y][x + 1]; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d); // update group counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\t\t\t\t\t}\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, 0); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t}\n\n\t\t\tfunction generateCap(top) {\n\t\t\t\t// save the index of the first center vertex\n\t\t\t\tconst centerIndexStart = index;\n\t\t\t\tconst uv = new Vector2();\n\t\t\t\tconst vertex = new Vector3();\n\t\t\t\tlet groupCount = 0;\n\t\t\t\tconst radius = top === true ? radiusTop : radiusBottom;\n\t\t\t\tconst sign = top === true ? 1 : -1; // first we generate the center vertex data of the cap.\n\t\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\t\tfor (let x = 1; x <= radialSegments; x++) {\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertices.push(0, halfHeight * sign, 0); // normal\n\n\t\t\t\t\tnormals.push(0, sign, 0); // uv\n\n\t\t\t\t\tuvs.push(0.5, 0.5); // increase index\n\n\t\t\t\t\tindex++;\n\t\t\t\t} // save the index of the last center vertex\n\n\n\t\t\t\tconst centerIndexEnd = index; // now we generate the surrounding vertices, normals and uvs\n\n\t\t\t\tfor (let x = 0; x <= radialSegments; x++) {\n\t\t\t\t\tconst u = x / radialSegments;\n\t\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\t\t\t\t\tconst cosTheta = Math.cos(theta);\n\t\t\t\t\tconst sinTheta = Math.sin(theta); // vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormals.push(0, sign, 0); // uv\n\n\t\t\t\t\tuv.x = cosTheta * 0.5 + 0.5;\n\t\t\t\t\tuv.y = sinTheta * 0.5 * sign + 0.5;\n\t\t\t\t\tuvs.push(uv.x, uv.y); // increase index\n\n\t\t\t\t\tindex++;\n\t\t\t\t} // generate indices\n\n\n\t\t\t\tfor (let x = 0; x < radialSegments; x++) {\n\t\t\t\t\tconst c = centerIndexStart + x;\n\t\t\t\t\tconst i = centerIndexEnd + x;\n\n\t\t\t\t\tif (top === true) {\n\t\t\t\t\t\t// face top\n\t\t\t\t\t\tindices.push(i, i + 1, c);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// face bottom\n\t\t\t\t\t\tindices.push(i + 1, i, c);\n\t\t\t\t\t}\n\n\t\t\t\t\tgroupCount += 3;\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, top === true ? 1 : 2); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t}\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\treturn new CylinderGeometry(data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n\t\t}\n\n\t}\n\n\tclass ConeGeometry extends CylinderGeometry {\n\t\tconstructor(radius = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {\n\t\t\tsuper(0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);\n\t\t\tthis.type = 'ConeGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\treturn new ConeGeometry(data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n\t\t}\n\n\t}\n\n\tclass PolyhedronGeometry extends BufferGeometry {\n\t\tconstructor(vertices = [], indices = [], radius = 1, detail = 0) {\n\t\t\tsuper();\n\t\t\tthis.type = 'PolyhedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tvertices: vertices,\n\t\t\t\tindices: indices,\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t}; // default buffer data\n\n\t\t\tconst vertexBuffer = [];\n\t\t\tconst uvBuffer = []; // the subdivision creates the vertex buffer data\n\n\t\t\tsubdivide(detail); // all vertices should lie on a conceptual sphere with a given radius\n\n\t\t\tapplyRadius(radius); // finally, create the uv data\n\n\t\t\tgenerateUVs(); // build non-indexed geometry\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertexBuffer, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(vertexBuffer.slice(), 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvBuffer, 2));\n\n\t\t\tif (detail === 0) {\n\t\t\t\tthis.computeVertexNormals(); // flat normals\n\t\t\t} else {\n\t\t\t\tthis.normalizeNormals(); // smooth normals\n\t\t\t} // helper functions\n\n\n\t\t\tfunction subdivide(detail) {\n\t\t\t\tconst a = new Vector3();\n\t\t\t\tconst b = new Vector3();\n\t\t\t\tconst c = new Vector3(); // iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\t\tfor (let i = 0; i < indices.length; i += 3) {\n\t\t\t\t\t// get the vertices of the face\n\t\t\t\t\tgetVertexByIndex(indices[i + 0], a);\n\t\t\t\t\tgetVertexByIndex(indices[i + 1], b);\n\t\t\t\t\tgetVertexByIndex(indices[i + 2], c); // perform subdivision\n\n\t\t\t\t\tsubdivideFace(a, b, c, detail);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction subdivideFace(a, b, c, detail) {\n\t\t\t\tconst cols = detail + 1; // we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\t\tconst v = []; // construct all of the vertices for this subdivision\n\n\t\t\t\tfor (let i = 0; i <= cols; i++) {\n\t\t\t\t\tv[i] = [];\n\t\t\t\t\tconst aj = a.clone().lerp(c, i / cols);\n\t\t\t\t\tconst bj = b.clone().lerp(c, i / cols);\n\t\t\t\t\tconst rows = cols - i;\n\n\t\t\t\t\tfor (let j = 0; j <= rows; j++) {\n\t\t\t\t\t\tif (j === 0 && i === cols) {\n\t\t\t\t\t\t\tv[i][j] = aj;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tv[i][j] = aj.clone().lerp(bj, j / rows);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // construct all of the faces\n\n\n\t\t\t\tfor (let i = 0; i < cols; i++) {\n\t\t\t\t\tfor (let j = 0; j < 2 * (cols - i) - 1; j++) {\n\t\t\t\t\t\tconst k = Math.floor(j / 2);\n\n\t\t\t\t\t\tif (j % 2 === 0) {\n\t\t\t\t\t\t\tpushVertex(v[i][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[i + 1][k]);\n\t\t\t\t\t\t\tpushVertex(v[i][k]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpushVertex(v[i][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[i + 1][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[i + 1][k]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction applyRadius(radius) {\n\t\t\t\tconst vertex = new Vector3(); // iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\t\tfor (let i = 0; i < vertexBuffer.length; i += 3) {\n\t\t\t\t\tvertex.x = vertexBuffer[i + 0];\n\t\t\t\t\tvertex.y = vertexBuffer[i + 1];\n\t\t\t\t\tvertex.z = vertexBuffer[i + 2];\n\t\t\t\t\tvertex.normalize().multiplyScalar(radius);\n\t\t\t\t\tvertexBuffer[i + 0] = vertex.x;\n\t\t\t\t\tvertexBuffer[i + 1] = vertex.y;\n\t\t\t\t\tvertexBuffer[i + 2] = vertex.z;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateUVs() {\n\t\t\t\tconst vertex = new Vector3();\n\n\t\t\t\tfor (let i = 0; i < vertexBuffer.length; i += 3) {\n\t\t\t\t\tvertex.x = vertexBuffer[i + 0];\n\t\t\t\t\tvertex.y = vertexBuffer[i + 1];\n\t\t\t\t\tvertex.z = vertexBuffer[i + 2];\n\t\t\t\t\tconst u = azimuth(vertex) / 2 / Math.PI + 0.5;\n\t\t\t\t\tconst v = inclination(vertex) / Math.PI + 0.5;\n\t\t\t\t\tuvBuffer.push(u, 1 - v);\n\t\t\t\t}\n\n\t\t\t\tcorrectUVs();\n\t\t\t\tcorrectSeam();\n\t\t\t}\n\n\t\t\tfunction correctSeam() {\n\t\t\t\t// handle case when face straddles the seam, see #3269\n\t\t\t\tfor (let i = 0; i < uvBuffer.length; i += 6) {\n\t\t\t\t\t// uv data of a single face\n\t\t\t\t\tconst x0 = uvBuffer[i + 0];\n\t\t\t\t\tconst x1 = uvBuffer[i + 2];\n\t\t\t\t\tconst x2 = uvBuffer[i + 4];\n\t\t\t\t\tconst max = Math.max(x0, x1, x2);\n\t\t\t\t\tconst min = Math.min(x0, x1, x2); // 0.9 is somewhat arbitrary\n\n\t\t\t\t\tif (max > 0.9 && min < 0.1) {\n\t\t\t\t\t\tif (x0 < 0.2) uvBuffer[i + 0] += 1;\n\t\t\t\t\t\tif (x1 < 0.2) uvBuffer[i + 2] += 1;\n\t\t\t\t\t\tif (x2 < 0.2) uvBuffer[i + 4] += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction pushVertex(vertex) {\n\t\t\t\tvertexBuffer.push(vertex.x, vertex.y, vertex.z);\n\t\t\t}\n\n\t\t\tfunction getVertexByIndex(index, vertex) {\n\t\t\t\tconst stride = index * 3;\n\t\t\t\tvertex.x = vertices[stride + 0];\n\t\t\t\tvertex.y = vertices[stride + 1];\n\t\t\t\tvertex.z = vertices[stride + 2];\n\t\t\t}\n\n\t\t\tfunction correctUVs() {\n\t\t\t\tconst a = new Vector3();\n\t\t\t\tconst b = new Vector3();\n\t\t\t\tconst c = new Vector3();\n\t\t\t\tconst centroid = new Vector3();\n\t\t\t\tconst uvA = new Vector2();\n\t\t\t\tconst uvB = new Vector2();\n\t\t\t\tconst uvC = new Vector2();\n\n\t\t\t\tfor (let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {\n\t\t\t\t\ta.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);\n\t\t\t\t\tb.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);\n\t\t\t\t\tc.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);\n\t\t\t\t\tuvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);\n\t\t\t\t\tuvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);\n\t\t\t\t\tuvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);\n\t\t\t\t\tcentroid.copy(a).add(b).add(c).divideScalar(3);\n\t\t\t\t\tconst azi = azimuth(centroid);\n\t\t\t\t\tcorrectUV(uvA, j + 0, a, azi);\n\t\t\t\t\tcorrectUV(uvB, j + 2, b, azi);\n\t\t\t\t\tcorrectUV(uvC, j + 4, c, azi);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction correctUV(uv, stride, vector, azimuth) {\n\t\t\t\tif (azimuth < 0 && uv.x === 1) {\n\t\t\t\t\tuvBuffer[stride] = uv.x - 1;\n\t\t\t\t}\n\n\t\t\t\tif (vector.x === 0 && vector.z === 0) {\n\t\t\t\t\tuvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;\n\t\t\t\t}\n\t\t\t} // Angle around the Y axis, counter-clockwise when looking from above.\n\n\n\t\t\tfunction azimuth(vector) {\n\t\t\t\treturn Math.atan2(vector.z, -vector.x);\n\t\t\t} // Angle above the XZ plane.\n\n\n\t\t\tfunction inclination(vector) {\n\t\t\t\treturn Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));\n\t\t\t}\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\treturn new PolyhedronGeometry(data.vertices, data.indices, data.radius, data.details);\n\t\t}\n\n\t}\n\n\tclass DodecahedronGeometry extends PolyhedronGeometry {\n\t\tconstructor(radius = 1, detail = 0) {\n\t\t\tconst t = (1 + Math.sqrt(5)) / 2;\n\t\t\tconst r = 1 / t;\n\t\t\tconst vertices = [// (±1, ±1, ±1)\n\t\t\t-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, // (0, ±1/φ, ±φ)\n\t\t\t0, -r, -t, 0, -r, t, 0, r, -t, 0, r, t, // (±1/φ, ±φ, 0)\n\t\t\t-r, -t, 0, -r, t, 0, r, -t, 0, r, t, 0, // (±φ, 0, ±1/φ)\n\t\t\t-t, 0, -r, t, 0, -r, -t, 0, r, t, 0, r];\n\t\t\tconst indices = [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9];\n\t\t\tsuper(vertices, indices, radius, detail);\n\t\t\tthis.type = 'DodecahedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\treturn new DodecahedronGeometry(data.radius, data.detail);\n\t\t}\n\n\t}\n\n\tconst _v0 = new Vector3();\n\n\tconst _v1$1 = new Vector3();\n\n\tconst _normal = new Vector3();\n\n\tconst _triangle = new Triangle();\n\n\tclass EdgesGeometry extends BufferGeometry {\n\t\tconstructor(geometry = null, thresholdAngle = 1) {\n\t\t\tsuper();\n\t\t\tthis.type = 'EdgesGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tgeometry: geometry,\n\t\t\t\tthresholdAngle: thresholdAngle\n\t\t\t};\n\n\t\t\tif (geometry !== null) {\n\t\t\t\tconst precisionPoints = 4;\n\t\t\t\tconst precision = Math.pow(10, precisionPoints);\n\t\t\t\tconst thresholdDot = Math.cos(DEG2RAD * thresholdAngle);\n\t\t\t\tconst indexAttr = geometry.getIndex();\n\t\t\t\tconst positionAttr = geometry.getAttribute('position');\n\t\t\t\tconst indexCount = indexAttr ? indexAttr.count : positionAttr.count;\n\t\t\t\tconst indexArr = [0, 0, 0];\n\t\t\t\tconst vertKeys = ['a', 'b', 'c'];\n\t\t\t\tconst hashes = new Array(3);\n\t\t\t\tconst edgeData = {};\n\t\t\t\tconst vertices = [];\n\n\t\t\t\tfor (let i = 0; i < indexCount; i += 3) {\n\t\t\t\t\tif (indexAttr) {\n\t\t\t\t\t\tindexArr[0] = indexAttr.getX(i);\n\t\t\t\t\t\tindexArr[1] = indexAttr.getX(i + 1);\n\t\t\t\t\t\tindexArr[2] = indexAttr.getX(i + 2);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tindexArr[0] = i;\n\t\t\t\t\t\tindexArr[1] = i + 1;\n\t\t\t\t\t\tindexArr[2] = i + 2;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst {\n\t\t\t\t\t\ta,\n\t\t\t\t\t\tb,\n\t\t\t\t\t\tc\n\t\t\t\t\t} = _triangle;\n\t\t\t\t\ta.fromBufferAttribute(positionAttr, indexArr[0]);\n\t\t\t\t\tb.fromBufferAttribute(positionAttr, indexArr[1]);\n\t\t\t\t\tc.fromBufferAttribute(positionAttr, indexArr[2]);\n\n\t\t\t\t\t_triangle.getNormal(_normal); // create hashes for the edge from the vertices\n\n\n\t\t\t\t\thashes[0] = `${Math.round(a.x * precision)},${Math.round(a.y * precision)},${Math.round(a.z * precision)}`;\n\t\t\t\t\thashes[1] = `${Math.round(b.x * precision)},${Math.round(b.y * precision)},${Math.round(b.z * precision)}`;\n\t\t\t\t\thashes[2] = `${Math.round(c.x * precision)},${Math.round(c.y * precision)},${Math.round(c.z * precision)}`; // skip degenerate triangles\n\n\t\t\t\t\tif (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} // iterate over every edge\n\n\n\t\t\t\t\tfor (let j = 0; j < 3; j++) {\n\t\t\t\t\t\t// get the first and next vertex making up the edge\n\t\t\t\t\t\tconst jNext = (j + 1) % 3;\n\t\t\t\t\t\tconst vecHash0 = hashes[j];\n\t\t\t\t\t\tconst vecHash1 = hashes[jNext];\n\t\t\t\t\t\tconst v0 = _triangle[vertKeys[j]];\n\t\t\t\t\t\tconst v1 = _triangle[vertKeys[jNext]];\n\t\t\t\t\t\tconst hash = `${vecHash0}_${vecHash1}`;\n\t\t\t\t\t\tconst reverseHash = `${vecHash1}_${vecHash0}`;\n\n\t\t\t\t\t\tif (reverseHash in edgeData && edgeData[reverseHash]) {\n\t\t\t\t\t\t\t// if we found a sibling edge add it into the vertex array if\n\t\t\t\t\t\t\t// it meets the angle threshold and delete the edge from the map.\n\t\t\t\t\t\t\tif (_normal.dot(edgeData[reverseHash].normal) <= thresholdDot) {\n\t\t\t\t\t\t\t\tvertices.push(v0.x, v0.y, v0.z);\n\t\t\t\t\t\t\t\tvertices.push(v1.x, v1.y, v1.z);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tedgeData[reverseHash] = null;\n\t\t\t\t\t\t} else if (!(hash in edgeData)) {\n\t\t\t\t\t\t\t// if we've already got an edge here then skip adding a new one\n\t\t\t\t\t\t\tedgeData[hash] = {\n\t\t\t\t\t\t\t\tindex0: indexArr[j],\n\t\t\t\t\t\t\t\tindex1: indexArr[jNext],\n\t\t\t\t\t\t\t\tnormal: _normal.clone()\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // iterate over all remaining, unmatched edges and add them to the vertex array\n\n\n\t\t\t\tfor (const key in edgeData) {\n\t\t\t\t\tif (edgeData[key]) {\n\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\tindex0,\n\t\t\t\t\t\t\tindex1\n\t\t\t\t\t\t} = edgeData[key];\n\n\t\t\t\t\t\t_v0.fromBufferAttribute(positionAttr, index0);\n\n\t\t\t\t\t\t_v1$1.fromBufferAttribute(positionAttr, index1);\n\n\t\t\t\t\t\tvertices.push(_v0.x, _v0.y, _v0.z);\n\t\t\t\t\t\tvertices.push(_v1$1.x, _v1$1.y, _v1$1.z);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * Extensible curve object.\n\t *\n\t * Some common of curve methods:\n\t * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )\n\t * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following curves inherit from THREE.Curve:\n\t *\n\t * -- 2D curves --\n\t * THREE.ArcCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.EllipseCurve\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.SplineCurve\n\t *\n\t * -- 3D curves --\n\t * THREE.CatmullRomCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath.\n\t *\n\t **/\n\n\tclass Curve {\n\t\tconstructor() {\n\t\t\tthis.type = 'Curve';\n\t\t\tthis.arcLengthDivisions = 200;\n\t\t} // Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\n\n\t\tgetPoint() {\n\t\t\tconsole.warn('THREE.Curve: .getPoint() not implemented.');\n\t\t\treturn null;\n\t\t} // Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\n\n\t\tgetPointAt(u, optionalTarget) {\n\t\t\tconst t = this.getUtoTmapping(u);\n\t\t\treturn this.getPoint(t, optionalTarget);\n\t\t} // Get sequence of points using getPoint( t )\n\n\n\t\tgetPoints(divisions = 5) {\n\t\t\tconst points = [];\n\n\t\t\tfor (let d = 0; d <= divisions; d++) {\n\t\t\t\tpoints.push(this.getPoint(d / divisions));\n\t\t\t}\n\n\t\t\treturn points;\n\t\t} // Get sequence of points using getPointAt( u )\n\n\n\t\tgetSpacedPoints(divisions = 5) {\n\t\t\tconst points = [];\n\n\t\t\tfor (let d = 0; d <= divisions; d++) {\n\t\t\t\tpoints.push(this.getPointAt(d / divisions));\n\t\t\t}\n\n\t\t\treturn points;\n\t\t} // Get total curve arc length\n\n\n\t\tgetLength() {\n\t\t\tconst lengths = this.getLengths();\n\t\t\treturn lengths[lengths.length - 1];\n\t\t} // Get list of cumulative segment lengths\n\n\n\t\tgetLengths(divisions = this.arcLengthDivisions) {\n\t\t\tif (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {\n\t\t\t\treturn this.cacheArcLengths;\n\t\t\t}\n\n\t\t\tthis.needsUpdate = false;\n\t\t\tconst cache = [];\n\t\t\tlet current,\n\t\t\t\t\tlast = this.getPoint(0);\n\t\t\tlet sum = 0;\n\t\t\tcache.push(0);\n\n\t\t\tfor (let p = 1; p <= divisions; p++) {\n\t\t\t\tcurrent = this.getPoint(p / divisions);\n\t\t\t\tsum += current.distanceTo(last);\n\t\t\t\tcache.push(sum);\n\t\t\t\tlast = current;\n\t\t\t}\n\n\t\t\tthis.cacheArcLengths = cache;\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\t\t}\n\n\t\tupdateArcLengths() {\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\t\t} // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\n\t\tgetUtoTmapping(u, distance) {\n\t\t\tconst arcLengths = this.getLengths();\n\t\t\tlet i = 0;\n\t\t\tconst il = arcLengths.length;\n\t\t\tlet targetArcLength; // The targeted u distance value to get\n\n\t\t\tif (distance) {\n\t\t\t\ttargetArcLength = distance;\n\t\t\t} else {\n\t\t\t\ttargetArcLength = u * arcLengths[il - 1];\n\t\t\t} // binary search for the index with largest value smaller than target u distance\n\n\n\t\t\tlet low = 0,\n\t\t\t\t\thigh = il - 1,\n\t\t\t\t\tcomparison;\n\n\t\t\twhile (low <= high) {\n\t\t\t\ti = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\t\tcomparison = arcLengths[i] - targetArcLength;\n\n\t\t\t\tif (comparison < 0) {\n\t\t\t\t\tlow = i + 1;\n\t\t\t\t} else if (comparison > 0) {\n\t\t\t\t\thigh = i - 1;\n\t\t\t\t} else {\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak; // DONE\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ti = high;\n\n\t\t\tif (arcLengths[i] === targetArcLength) {\n\t\t\t\treturn i / (il - 1);\n\t\t\t} // we could get finer grain at lengths, or use simple interpolation between two points\n\n\n\t\t\tconst lengthBefore = arcLengths[i];\n\t\t\tconst lengthAfter = arcLengths[i + 1];\n\t\t\tconst segmentLength = lengthAfter - lengthBefore; // determine where we are between the 'before' and 'after' points\n\n\t\t\tconst segmentFraction = (targetArcLength - lengthBefore) / segmentLength; // add that fractional amount to t\n\n\t\t\tconst t = (i + segmentFraction) / (il - 1);\n\t\t\treturn t;\n\t\t} // Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\n\n\t\tgetTangent(t, optionalTarget) {\n\t\t\tconst delta = 0.0001;\n\t\t\tlet t1 = t - delta;\n\t\t\tlet t2 = t + delta; // Capping in case of danger\n\n\t\t\tif (t1 < 0) t1 = 0;\n\t\t\tif (t2 > 1) t2 = 1;\n\t\t\tconst pt1 = this.getPoint(t1);\n\t\t\tconst pt2 = this.getPoint(t2);\n\t\t\tconst tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());\n\t\t\ttangent.copy(pt2).sub(pt1).normalize();\n\t\t\treturn tangent;\n\t\t}\n\n\t\tgetTangentAt(u, optionalTarget) {\n\t\t\tconst t = this.getUtoTmapping(u);\n\t\t\treturn this.getTangent(t, optionalTarget);\n\t\t}\n\n\t\tcomputeFrenetFrames(segments, closed) {\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\t\t\tconst normal = new Vector3();\n\t\t\tconst tangents = [];\n\t\t\tconst normals = [];\n\t\t\tconst binormals = [];\n\t\t\tconst vec = new Vector3();\n\t\t\tconst mat = new Matrix4(); // compute the tangent vectors for each segment on the curve\n\n\t\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\t\tconst u = i / segments;\n\t\t\t\ttangents[i] = this.getTangentAt(u, new Vector3());\n\t\t\t} // select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the minimum tangent xyz component\n\n\n\t\t\tnormals[0] = new Vector3();\n\t\t\tbinormals[0] = new Vector3();\n\t\t\tlet min = Number.MAX_VALUE;\n\t\t\tconst tx = Math.abs(tangents[0].x);\n\t\t\tconst ty = Math.abs(tangents[0].y);\n\t\t\tconst tz = Math.abs(tangents[0].z);\n\n\t\t\tif (tx <= min) {\n\t\t\t\tmin = tx;\n\t\t\t\tnormal.set(1, 0, 0);\n\t\t\t}\n\n\t\t\tif (ty <= min) {\n\t\t\t\tmin = ty;\n\t\t\t\tnormal.set(0, 1, 0);\n\t\t\t}\n\n\t\t\tif (tz <= min) {\n\t\t\t\tnormal.set(0, 0, 1);\n\t\t\t}\n\n\t\t\tvec.crossVectors(tangents[0], normal).normalize();\n\t\t\tnormals[0].crossVectors(tangents[0], vec);\n\t\t\tbinormals[0].crossVectors(tangents[0], normals[0]); // compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\t\tfor (let i = 1; i <= segments; i++) {\n\t\t\t\tnormals[i] = normals[i - 1].clone();\n\t\t\t\tbinormals[i] = binormals[i - 1].clone();\n\t\t\t\tvec.crossVectors(tangents[i - 1], tangents[i]);\n\n\t\t\t\tif (vec.length() > Number.EPSILON) {\n\t\t\t\t\tvec.normalize();\n\t\t\t\t\tconst theta = Math.acos(clamp(tangents[i - 1].dot(tangents[i]), -1, 1)); // clamp for floating pt errors\n\n\t\t\t\t\tnormals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));\n\t\t\t\t}\n\n\t\t\t\tbinormals[i].crossVectors(tangents[i], normals[i]);\n\t\t\t} // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\n\t\t\tif (closed === true) {\n\t\t\t\tlet theta = Math.acos(clamp(normals[0].dot(normals[segments]), -1, 1));\n\t\t\t\ttheta /= segments;\n\n\t\t\t\tif (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {\n\t\t\t\t\ttheta = -theta;\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 1; i <= segments; i++) {\n\t\t\t\t\t// twist a little...\n\t\t\t\t\tnormals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));\n\t\t\t\t\tbinormals[i].crossVectors(tangents[i], normals[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttangents: tangents,\n\t\t\t\tnormals: normals,\n\t\t\t\tbinormals: binormals\n\t\t\t};\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Curve',\n\t\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t\t}\n\t\t\t};\n\t\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\t\tdata.type = this.type;\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass EllipseCurve extends Curve {\n\t\tconstructor(aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0) {\n\t\t\tsuper();\n\t\t\tthis.type = 'EllipseCurve';\n\t\t\tthis.aX = aX;\n\t\t\tthis.aY = aY;\n\t\t\tthis.xRadius = xRadius;\n\t\t\tthis.yRadius = yRadius;\n\t\t\tthis.aStartAngle = aStartAngle;\n\t\t\tthis.aEndAngle = aEndAngle;\n\t\t\tthis.aClockwise = aClockwise;\n\t\t\tthis.aRotation = aRotation;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget) {\n\t\t\tconst point = optionalTarget || new Vector2();\n\t\t\tconst twoPi = Math.PI * 2;\n\t\t\tlet deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\t\tconst samePoints = Math.abs(deltaAngle) < Number.EPSILON; // ensures that deltaAngle is 0 .. 2 PI\n\n\t\t\twhile (deltaAngle < 0) deltaAngle += twoPi;\n\n\t\t\twhile (deltaAngle > twoPi) deltaAngle -= twoPi;\n\n\t\t\tif (deltaAngle < Number.EPSILON) {\n\t\t\t\tif (samePoints) {\n\t\t\t\t\tdeltaAngle = 0;\n\t\t\t\t} else {\n\t\t\t\t\tdeltaAngle = twoPi;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.aClockwise === true && !samePoints) {\n\t\t\t\tif (deltaAngle === twoPi) {\n\t\t\t\t\tdeltaAngle = -twoPi;\n\t\t\t\t} else {\n\t\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst angle = this.aStartAngle + t * deltaAngle;\n\t\t\tlet x = this.aX + this.xRadius * Math.cos(angle);\n\t\t\tlet y = this.aY + this.yRadius * Math.sin(angle);\n\n\t\t\tif (this.aRotation !== 0) {\n\t\t\t\tconst cos = Math.cos(this.aRotation);\n\t\t\t\tconst sin = Math.sin(this.aRotation);\n\t\t\t\tconst tx = x - this.aX;\n\t\t\t\tconst ty = y - this.aY; // Rotate the point about the center of the ellipse.\n\n\t\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\t\ty = tx * sin + ty * cos + this.aY;\n\t\t\t}\n\n\t\t\treturn point.set(x, y);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.aX = source.aX;\n\t\t\tthis.aY = source.aY;\n\t\t\tthis.xRadius = source.xRadius;\n\t\t\tthis.yRadius = source.yRadius;\n\t\t\tthis.aStartAngle = source.aStartAngle;\n\t\t\tthis.aEndAngle = source.aEndAngle;\n\t\t\tthis.aClockwise = source.aClockwise;\n\t\t\tthis.aRotation = source.aRotation;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.aX = this.aX;\n\t\t\tdata.aY = this.aY;\n\t\t\tdata.xRadius = this.xRadius;\n\t\t\tdata.yRadius = this.yRadius;\n\t\t\tdata.aStartAngle = this.aStartAngle;\n\t\t\tdata.aEndAngle = this.aEndAngle;\n\t\t\tdata.aClockwise = this.aClockwise;\n\t\t\tdata.aRotation = this.aRotation;\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.aX = json.aX;\n\t\t\tthis.aY = json.aY;\n\t\t\tthis.xRadius = json.xRadius;\n\t\t\tthis.yRadius = json.yRadius;\n\t\t\tthis.aStartAngle = json.aStartAngle;\n\t\t\tthis.aEndAngle = json.aEndAngle;\n\t\t\tthis.aClockwise = json.aClockwise;\n\t\t\tthis.aRotation = json.aRotation;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tEllipseCurve.prototype.isEllipseCurve = true;\n\n\tclass ArcCurve extends EllipseCurve {\n\t\tconstructor(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tsuper(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\tthis.type = 'ArcCurve';\n\t\t}\n\n\t}\n\n\tArcCurve.prototype.isArcCurve = true;\n\n\t/**\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\t\tlet c0 = 0,\n\t\t\t\tc1 = 0,\n\t\t\t\tc2 = 0,\n\t\t\t\tc3 = 0;\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *\t p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *\t p(0) = x0, p(1) = x1\n\t\t *\tand\n\t\t *\t p'(0) = t0, p'(1) = t1.\n\t\t */\n\n\t\tfunction init(x0, x1, t0, t1) {\n\t\t\tc0 = x0;\n\t\t\tc1 = t0;\n\t\t\tc2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\t\t}\n\n\t\treturn {\n\t\t\tinitCatmullRom: function (x0, x1, x2, x3, tension) {\n\t\t\t\tinit(x1, x2, tension * (x2 - x0), tension * (x3 - x1));\n\t\t\t},\n\t\t\tinitNonuniformCatmullRom: function (x0, x1, x2, x3, dt0, dt1, dt2) {\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\t\tlet t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;\n\t\t\t\tlet t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2; // rescale tangents for parametrization in [0,1]\n\n\t\t\t\tt1 *= dt1;\n\t\t\t\tt2 *= dt1;\n\t\t\t\tinit(x1, x2, t1, t2);\n\t\t\t},\n\t\t\tcalc: function (t) {\n\t\t\t\tconst t2 = t * t;\n\t\t\t\tconst t3 = t2 * t;\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\t\t\t}\n\t\t};\n\t} //\n\n\n\tconst tmp = new Vector3();\n\tconst px = new CubicPoly(),\n\t\t\t\tpy = new CubicPoly(),\n\t\t\t\tpz = new CubicPoly();\n\n\tclass CatmullRomCurve3 extends Curve {\n\t\tconstructor(points = [], closed = false, curveType = 'centripetal', tension = 0.5) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CatmullRomCurve3';\n\t\t\tthis.points = points;\n\t\t\tthis.closed = closed;\n\t\t\tthis.curveType = curveType;\n\t\t\tthis.tension = tension;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector3()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst points = this.points;\n\t\t\tconst l = points.length;\n\t\t\tconst p = (l - (this.closed ? 0 : 1)) * t;\n\t\t\tlet intPoint = Math.floor(p);\n\t\t\tlet weight = p - intPoint;\n\n\t\t\tif (this.closed) {\n\t\t\t\tintPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;\n\t\t\t} else if (weight === 0 && intPoint === l - 1) {\n\t\t\t\tintPoint = l - 2;\n\t\t\t\tweight = 1;\n\t\t\t}\n\n\t\t\tlet p0, p3; // 4 points (p1 & p2 defined below)\n\n\t\t\tif (this.closed || intPoint > 0) {\n\t\t\t\tp0 = points[(intPoint - 1) % l];\n\t\t\t} else {\n\t\t\t\t// extrapolate first point\n\t\t\t\ttmp.subVectors(points[0], points[1]).add(points[0]);\n\t\t\t\tp0 = tmp;\n\t\t\t}\n\n\t\t\tconst p1 = points[intPoint % l];\n\t\t\tconst p2 = points[(intPoint + 1) % l];\n\n\t\t\tif (this.closed || intPoint + 2 < l) {\n\t\t\t\tp3 = points[(intPoint + 2) % l];\n\t\t\t} else {\n\t\t\t\t// extrapolate last point\n\t\t\t\ttmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);\n\t\t\t\tp3 = tmp;\n\t\t\t}\n\n\t\t\tif (this.curveType === 'centripetal' || this.curveType === 'chordal') {\n\t\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\t\tconst pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\t\tlet dt0 = Math.pow(p0.distanceToSquared(p1), pow);\n\t\t\t\tlet dt1 = Math.pow(p1.distanceToSquared(p2), pow);\n\t\t\t\tlet dt2 = Math.pow(p2.distanceToSquared(p3), pow); // safety check for repeated points\n\n\t\t\t\tif (dt1 < 1e-4) dt1 = 1.0;\n\t\t\t\tif (dt0 < 1e-4) dt0 = dt1;\n\t\t\t\tif (dt2 < 1e-4) dt2 = dt1;\n\t\t\t\tpx.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);\n\t\t\t\tpy.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);\n\t\t\t\tpz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);\n\t\t\t} else if (this.curveType === 'catmullrom') {\n\t\t\t\tpx.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);\n\t\t\t\tpy.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);\n\t\t\t\tpz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);\n\t\t\t}\n\n\t\t\tpoint.set(px.calc(weight), py.calc(weight), pz.calc(weight));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.points = [];\n\n\t\t\tfor (let i = 0, l = source.points.length; i < l; i++) {\n\t\t\t\tconst point = source.points[i];\n\t\t\t\tthis.points.push(point.clone());\n\t\t\t}\n\n\t\t\tthis.closed = source.closed;\n\t\t\tthis.curveType = source.curveType;\n\t\t\tthis.tension = source.tension;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.points = [];\n\n\t\t\tfor (let i = 0, l = this.points.length; i < l; i++) {\n\t\t\t\tconst point = this.points[i];\n\t\t\t\tdata.points.push(point.toArray());\n\t\t\t}\n\n\t\t\tdata.closed = this.closed;\n\t\t\tdata.curveType = this.curveType;\n\t\t\tdata.tension = this.tension;\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.points = [];\n\n\t\t\tfor (let i = 0, l = json.points.length; i < l; i++) {\n\t\t\t\tconst point = json.points[i];\n\t\t\t\tthis.points.push(new Vector3().fromArray(point));\n\t\t\t}\n\n\t\t\tthis.closed = json.closed;\n\t\t\tthis.curveType = json.curveType;\n\t\t\tthis.tension = json.tension;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\n\t/**\n\t * Bezier Curves formulas obtained from\n\t * http://en.wikipedia.org/wiki/Bézier_curve\n\t */\n\tfunction CatmullRom(t, p0, p1, p2, p3) {\n\t\tconst v0 = (p2 - p0) * 0.5;\n\t\tconst v1 = (p3 - p1) * 0.5;\n\t\tconst t2 = t * t;\n\t\tconst t3 = t * t2;\n\t\treturn (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n\t} //\n\n\n\tfunction QuadraticBezierP0(t, p) {\n\t\tconst k = 1 - t;\n\t\treturn k * k * p;\n\t}\n\n\tfunction QuadraticBezierP1(t, p) {\n\t\treturn 2 * (1 - t) * t * p;\n\t}\n\n\tfunction QuadraticBezierP2(t, p) {\n\t\treturn t * t * p;\n\t}\n\n\tfunction QuadraticBezier(t, p0, p1, p2) {\n\t\treturn QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);\n\t} //\n\n\n\tfunction CubicBezierP0(t, p) {\n\t\tconst k = 1 - t;\n\t\treturn k * k * k * p;\n\t}\n\n\tfunction CubicBezierP1(t, p) {\n\t\tconst k = 1 - t;\n\t\treturn 3 * k * k * t * p;\n\t}\n\n\tfunction CubicBezierP2(t, p) {\n\t\treturn 3 * (1 - t) * t * t * p;\n\t}\n\n\tfunction CubicBezierP3(t, p) {\n\t\treturn t * t * t * p;\n\t}\n\n\tfunction CubicBezier(t, p0, p1, p2, p3) {\n\t\treturn CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);\n\t}\n\n\tclass CubicBezierCurve extends Curve {\n\t\tconstructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CubicBezierCurve';\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t\tthis.v3 = v3;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector2()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst v0 = this.v0,\n\t\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\t\tv2 = this.v2,\n\t\t\t\t\t\tv3 = this.v3;\n\t\t\tpoint.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\tthis.v3.copy(source.v3);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\tdata.v3 = this.v3.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\tthis.v3.fromArray(json.v3);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\n\tclass CubicBezierCurve3 extends Curve {\n\t\tconstructor(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'CubicBezierCurve3';\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t\tthis.v3 = v3;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector3()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst v0 = this.v0,\n\t\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\t\tv2 = this.v2,\n\t\t\t\t\t\tv3 = this.v3;\n\t\t\tpoint.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\tthis.v3.copy(source.v3);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\tdata.v3 = this.v3.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\tthis.v3.fromArray(json.v3);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\n\tclass LineCurve extends Curve {\n\t\tconstructor(v1 = new Vector2(), v2 = new Vector2()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LineCurve';\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector2()) {\n\t\t\tconst point = optionalTarget;\n\n\t\t\tif (t === 1) {\n\t\t\t\tpoint.copy(this.v2);\n\t\t\t} else {\n\t\t\t\tpoint.copy(this.v2).sub(this.v1);\n\t\t\t\tpoint.multiplyScalar(t).add(this.v1);\n\t\t\t}\n\n\t\t\treturn point;\n\t\t} // Line curve is linear, so we can overwrite default getPointAt\n\n\n\t\tgetPointAt(u, optionalTarget) {\n\t\t\treturn this.getPoint(u, optionalTarget);\n\t\t}\n\n\t\tgetTangent(t, optionalTarget) {\n\t\t\tconst tangent = optionalTarget || new Vector2();\n\t\t\ttangent.copy(this.v2).sub(this.v1).normalize();\n\t\t\treturn tangent;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tLineCurve.prototype.isLineCurve = true;\n\n\tclass LineCurve3 extends Curve {\n\t\tconstructor(v1 = new Vector3(), v2 = new Vector3()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LineCurve3';\n\t\t\tthis.isLineCurve3 = true;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector3()) {\n\t\t\tconst point = optionalTarget;\n\n\t\t\tif (t === 1) {\n\t\t\t\tpoint.copy(this.v2);\n\t\t\t} else {\n\t\t\t\tpoint.copy(this.v2).sub(this.v1);\n\t\t\t\tpoint.multiplyScalar(t).add(this.v1);\n\t\t\t}\n\n\t\t\treturn point;\n\t\t} // Line curve is linear, so we can overwrite default getPointAt\n\n\n\t\tgetPointAt(u, optionalTarget) {\n\t\t\treturn this.getPoint(u, optionalTarget);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass QuadraticBezierCurve extends Curve {\n\t\tconstructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'QuadraticBezierCurve';\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector2()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst v0 = this.v0,\n\t\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\t\tv2 = this.v2;\n\t\t\tpoint.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\n\tclass QuadraticBezierCurve3 extends Curve {\n\t\tconstructor(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3()) {\n\t\t\tsuper();\n\t\t\tthis.type = 'QuadraticBezierCurve3';\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector3()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst v0 = this.v0,\n\t\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\t\tv2 = this.v2;\n\t\t\tpoint.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\n\tclass SplineCurve extends Curve {\n\t\tconstructor(points = []) {\n\t\t\tsuper();\n\t\t\tthis.type = 'SplineCurve';\n\t\t\tthis.points = points;\n\t\t}\n\n\t\tgetPoint(t, optionalTarget = new Vector2()) {\n\t\t\tconst point = optionalTarget;\n\t\t\tconst points = this.points;\n\t\t\tconst p = (points.length - 1) * t;\n\t\t\tconst intPoint = Math.floor(p);\n\t\t\tconst weight = p - intPoint;\n\t\t\tconst p0 = points[intPoint === 0 ? intPoint : intPoint - 1];\n\t\t\tconst p1 = points[intPoint];\n\t\t\tconst p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\n\t\t\tconst p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\n\t\t\tpoint.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));\n\t\t\treturn point;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.points = [];\n\n\t\t\tfor (let i = 0, l = source.points.length; i < l; i++) {\n\t\t\t\tconst point = source.points[i];\n\t\t\t\tthis.points.push(point.clone());\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.points = [];\n\n\t\t\tfor (let i = 0, l = this.points.length; i < l; i++) {\n\t\t\t\tconst point = this.points[i];\n\t\t\t\tdata.points.push(point.toArray());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.points = [];\n\n\t\t\tfor (let i = 0, l = json.points.length; i < l; i++) {\n\t\t\t\tconst point = json.points[i];\n\t\t\t\tthis.points.push(new Vector2().fromArray(point));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSplineCurve.prototype.isSplineCurve = true;\n\n\tvar Curves = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tArcCurve: ArcCurve,\n\t\tCatmullRomCurve3: CatmullRomCurve3,\n\t\tCubicBezierCurve: CubicBezierCurve,\n\t\tCubicBezierCurve3: CubicBezierCurve3,\n\t\tEllipseCurve: EllipseCurve,\n\t\tLineCurve: LineCurve,\n\t\tLineCurve3: LineCurve3,\n\t\tQuadraticBezierCurve: QuadraticBezierCurve,\n\t\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\t\tSplineCurve: SplineCurve\n\t});\n\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *\tcurves, but retains the api of a curve\n\t **************************************************************/\n\n\tclass CurvePath extends Curve {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'CurvePath';\n\t\t\tthis.curves = [];\n\t\t\tthis.autoClose = false; // Automatically closes the path\n\t\t}\n\n\t\tadd(curve) {\n\t\t\tthis.curves.push(curve);\n\t\t}\n\n\t\tclosePath() {\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tconst startPoint = this.curves[0].getPoint(0);\n\t\t\tconst endPoint = this.curves[this.curves.length - 1].getPoint(1);\n\n\t\t\tif (!startPoint.equals(endPoint)) {\n\t\t\t\tthis.curves.push(new LineCurve(endPoint, startPoint));\n\t\t\t}\n\t\t} // To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\n\n\t\tgetPoint(t, optionalTarget) {\n\t\t\tconst d = t * this.getLength();\n\t\t\tconst curveLengths = this.getCurveLengths();\n\t\t\tlet i = 0; // To think about boundaries points.\n\n\t\t\twhile (i < curveLengths.length) {\n\t\t\t\tif (curveLengths[i] >= d) {\n\t\t\t\t\tconst diff = curveLengths[i] - d;\n\t\t\t\t\tconst curve = this.curves[i];\n\t\t\t\t\tconst segmentLength = curve.getLength();\n\t\t\t\t\tconst u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\t\t\t\t\treturn curve.getPointAt(u, optionalTarget);\n\t\t\t\t}\n\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\treturn null; // loop where sum != 0, sum > d , sum+1 <d\n\t\t} // We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\n\n\t\tgetLength() {\n\t\t\tconst lens = this.getCurveLengths();\n\t\t\treturn lens[lens.length - 1];\n\t\t} // cacheLengths must be recalculated.\n\n\n\t\tupdateArcLengths() {\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getCurveLengths();\n\t\t} // Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\n\t\tgetCurveLengths() {\n\t\t\t// We use cache values if curves and cache array are same length\n\t\t\tif (this.cacheLengths && this.cacheLengths.length === this.curves.length) {\n\t\t\t\treturn this.cacheLengths;\n\t\t\t} // Get length of sub-curve\n\t\t\t// Push sums into cached array\n\n\n\t\t\tconst lengths = [];\n\t\t\tlet sums = 0;\n\n\t\t\tfor (let i = 0, l = this.curves.length; i < l; i++) {\n\t\t\t\tsums += this.curves[i].getLength();\n\t\t\t\tlengths.push(sums);\n\t\t\t}\n\n\t\t\tthis.cacheLengths = lengths;\n\t\t\treturn lengths;\n\t\t}\n\n\t\tgetSpacedPoints(divisions = 40) {\n\t\t\tconst points = [];\n\n\t\t\tfor (let i = 0; i <= divisions; i++) {\n\t\t\t\tpoints.push(this.getPoint(i / divisions));\n\t\t\t}\n\n\t\t\tif (this.autoClose) {\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\n\t\t\treturn points;\n\t\t}\n\n\t\tgetPoints(divisions = 12) {\n\t\t\tconst points = [];\n\t\t\tlet last;\n\n\t\t\tfor (let i = 0, curves = this.curves; i < curves.length; i++) {\n\t\t\t\tconst curve = curves[i];\n\t\t\t\tconst resolution = curve && curve.isEllipseCurve ? divisions * 2 : curve && (curve.isLineCurve || curve.isLineCurve3) ? 1 : curve && curve.isSplineCurve ? divisions * curve.points.length : divisions;\n\t\t\t\tconst pts = curve.getPoints(resolution);\n\n\t\t\t\tfor (let j = 0; j < pts.length; j++) {\n\t\t\t\t\tconst point = pts[j];\n\t\t\t\t\tif (last && last.equals(point)) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\t\tpoints.push(point);\n\t\t\t\t\tlast = point;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\n\t\t\treturn points;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.curves = [];\n\n\t\t\tfor (let i = 0, l = source.curves.length; i < l; i++) {\n\t\t\t\tconst curve = source.curves[i];\n\t\t\t\tthis.curves.push(curve.clone());\n\t\t\t}\n\n\t\t\tthis.autoClose = source.autoClose;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.autoClose = this.autoClose;\n\t\t\tdata.curves = [];\n\n\t\t\tfor (let i = 0, l = this.curves.length; i < l; i++) {\n\t\t\t\tconst curve = this.curves[i];\n\t\t\t\tdata.curves.push(curve.toJSON());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.autoClose = json.autoClose;\n\t\t\tthis.curves = [];\n\n\t\t\tfor (let i = 0, l = json.curves.length; i < l; i++) {\n\t\t\t\tconst curve = json.curves[i];\n\t\t\t\tthis.curves.push(new Curves[curve.type]().fromJSON(curve));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass Path extends CurvePath {\n\t\tconstructor(points) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Path';\n\t\t\tthis.currentPoint = new Vector2();\n\n\t\t\tif (points) {\n\t\t\t\tthis.setFromPoints(points);\n\t\t\t}\n\t\t}\n\n\t\tsetFromPoints(points) {\n\t\t\tthis.moveTo(points[0].x, points[0].y);\n\n\t\t\tfor (let i = 1, l = points.length; i < l; i++) {\n\t\t\t\tthis.lineTo(points[i].x, points[i].y);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tmoveTo(x, y) {\n\t\t\tthis.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?\n\n\t\t\treturn this;\n\t\t}\n\n\t\tlineTo(x, y) {\n\t\t\tconst curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(x, y);\n\t\t\treturn this;\n\t\t}\n\n\t\tquadraticCurveTo(aCPx, aCPy, aX, aY) {\n\t\t\tconst curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(aX, aY);\n\t\t\treturn this;\n\t\t}\n\n\t\tbezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n\t\t\tconst curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(aX, aY);\n\t\t\treturn this;\n\t\t}\n\n\t\tsplineThru(pts\n\t\t/*Array of Vector*/\n\t\t) {\n\t\t\tconst npts = [this.currentPoint.clone()].concat(pts);\n\t\t\tconst curve = new SplineCurve(npts);\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.copy(pts[pts.length - 1]);\n\t\t\treturn this;\n\t\t}\n\n\t\tarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tconst x0 = this.currentPoint.x;\n\t\t\tconst y0 = this.currentPoint.y;\n\t\t\tthis.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\treturn this;\n\t\t}\n\n\t\tabsarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tthis.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\treturn this;\n\t\t}\n\n\t\tellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\t\tconst x0 = this.currentPoint.x;\n\t\t\tconst y0 = this.currentPoint.y;\n\t\t\tthis.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n\t\t\treturn this;\n\t\t}\n\n\t\tabsellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\t\tconst curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n\n\t\t\tif (this.curves.length > 0) {\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tconst firstPoint = curve.getPoint(0);\n\n\t\t\t\tif (!firstPoint.equals(this.currentPoint)) {\n\t\t\t\t\tthis.lineTo(firstPoint.x, firstPoint.y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.curves.push(curve);\n\t\t\tconst lastPoint = curve.getPoint(1);\n\t\t\tthis.currentPoint.copy(lastPoint);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.currentPoint.copy(source.currentPoint);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.currentPoint = this.currentPoint.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.currentPoint.fromArray(json.currentPoint);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass Shape extends Path {\n\t\tconstructor(points) {\n\t\t\tsuper(points);\n\t\t\tthis.uuid = generateUUID();\n\t\t\tthis.type = 'Shape';\n\t\t\tthis.holes = [];\n\t\t}\n\n\t\tgetPointsHoles(divisions) {\n\t\t\tconst holesPts = [];\n\n\t\t\tfor (let i = 0, l = this.holes.length; i < l; i++) {\n\t\t\t\tholesPts[i] = this.holes[i].getPoints(divisions);\n\t\t\t}\n\n\t\t\treturn holesPts;\n\t\t} // get points of shape and holes (keypoints based on segments parameter)\n\n\n\t\textractPoints(divisions) {\n\t\t\treturn {\n\t\t\t\tshape: this.getPoints(divisions),\n\t\t\t\tholes: this.getPointsHoles(divisions)\n\t\t\t};\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.holes = [];\n\n\t\t\tfor (let i = 0, l = source.holes.length; i < l; i++) {\n\t\t\t\tconst hole = source.holes[i];\n\t\t\t\tthis.holes.push(hole.clone());\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.holes = [];\n\n\t\t\tfor (let i = 0, l = this.holes.length; i < l; i++) {\n\t\t\t\tconst hole = this.holes[i];\n\t\t\t\tdata.holes.push(hole.toJSON());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tsuper.fromJSON(json);\n\t\t\tthis.uuid = json.uuid;\n\t\t\tthis.holes = [];\n\n\t\t\tfor (let i = 0, l = json.holes.length; i < l; i++) {\n\t\t\t\tconst hole = json.holes[i];\n\t\t\t\tthis.holes.push(new Path().fromJSON(hole));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\t/**\n\t * Port from https://github.com/mapbox/earcut (v2.2.2)\n\t */\n\tconst Earcut = {\n\t\ttriangulate: function (data, holeIndices, dim = 2) {\n\t\t\tconst hasHoles = holeIndices && holeIndices.length;\n\t\t\tconst outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\t\t\tlet outerNode = linkedList(data, 0, outerLen, dim, true);\n\t\t\tconst triangles = [];\n\t\t\tif (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\t\t\tlet minX, minY, maxX, maxY, x, y, invSize;\n\t\t\tif (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\n\t\t\tif (data.length > 80 * dim) {\n\t\t\t\tminX = maxX = data[0];\n\t\t\t\tminY = maxY = data[1];\n\n\t\t\t\tfor (let i = dim; i < outerLen; i += dim) {\n\t\t\t\t\tx = data[i];\n\t\t\t\t\ty = data[i + 1];\n\t\t\t\t\tif (x < minX) minX = x;\n\t\t\t\t\tif (y < minY) minY = y;\n\t\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\t} // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\n\n\t\t\t\tinvSize = Math.max(maxX - minX, maxY - minY);\n\t\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\t\t\t}\n\n\t\t\tearcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n\t\t\treturn triangles;\n\t\t}\n\t}; // create a circular doubly linked list from polygon points in the specified winding order\n\n\tfunction linkedList(data, start, end, dim, clockwise) {\n\t\tlet i, last;\n\n\t\tif (clockwise === signedArea(data, start, end, dim) > 0) {\n\t\t\tfor (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n\t\t} else {\n\t\t\tfor (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n\t\t}\n\n\t\tif (last && equals(last, last.next)) {\n\t\t\tremoveNode(last);\n\t\t\tlast = last.next;\n\t\t}\n\n\t\treturn last;\n\t} // eliminate colinear or duplicate points\n\n\n\tfunction filterPoints(start, end) {\n\t\tif (!start) return start;\n\t\tif (!end) end = start;\n\t\tlet p = start,\n\t\t\t\tagain;\n\n\t\tdo {\n\t\t\tagain = false;\n\n\t\t\tif (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n\t\t\t\tremoveNode(p);\n\t\t\t\tp = end = p.prev;\n\t\t\t\tif (p === p.next) break;\n\t\t\t\tagain = true;\n\t\t\t} else {\n\t\t\t\tp = p.next;\n\t\t\t}\n\t\t} while (again || p !== end);\n\n\t\treturn end;\n\t} // main ear slicing loop which triangulates a polygon (given as a linked list)\n\n\n\tfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n\t\tif (!ear) return; // interlink polygon nodes in z-order\n\n\t\tif (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\t\tlet stop = ear,\n\t\t\t\tprev,\n\t\t\t\tnext; // iterate through ears, slicing them one by one\n\n\t\twhile (ear.prev !== ear.next) {\n\t\t\tprev = ear.prev;\n\t\t\tnext = ear.next;\n\n\t\t\tif (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n\t\t\t\t// cut off the triangle\n\t\t\t\ttriangles.push(prev.i / dim);\n\t\t\t\ttriangles.push(ear.i / dim);\n\t\t\t\ttriangles.push(next.i / dim);\n\t\t\t\tremoveNode(ear); // skipping the next vertex leads to less sliver triangles\n\n\t\t\t\tear = next.next;\n\t\t\t\tstop = next.next;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tear = next; // if we looped through the whole remaining polygon and can't find any more ears\n\n\t\t\tif (ear === stop) {\n\t\t\t\t// try filtering points and slicing again\n\t\t\t\tif (!pass) {\n\t\t\t\t\tearcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1); // if this didn't work, try curing all small self-intersections locally\n\t\t\t\t} else if (pass === 1) {\n\t\t\t\t\tear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n\t\t\t\t\tearcutLinked(ear, triangles, dim, minX, minY, invSize, 2); // as a last resort, try splitting the remaining polygon into two\n\t\t\t\t} else if (pass === 2) {\n\t\t\t\t\tsplitEarcut(ear, triangles, dim, minX, minY, invSize);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} // check whether a polygon node forms a valid ear with adjacent nodes\n\n\n\tfunction isEar(ear) {\n\t\tconst a = ear.prev,\n\t\t\t\t\tb = ear,\n\t\t\t\t\tc = ear.next;\n\t\tif (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\t\t// now make sure we don't have other points inside the potential ear\n\n\t\tlet p = ear.next.next;\n\n\t\twhile (p !== ear.prev) {\n\t\t\tif (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.next;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction isEarHashed(ear, minX, minY, invSize) {\n\t\tconst a = ear.prev,\n\t\t\t\t\tb = ear,\n\t\t\t\t\tc = ear.next;\n\t\tif (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\t\t// triangle bbox; min & max are calculated like this for speed\n\n\t\tconst minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x,\n\t\t\t\t\tminTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y,\n\t\t\t\t\tmaxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x,\n\t\t\t\t\tmaxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y; // z-order range for the current triangle bbox;\n\n\t\tconst minZ = zOrder(minTX, minTY, minX, minY, invSize),\n\t\t\t\t\tmaxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n\t\tlet p = ear.prevZ,\n\t\t\t\tn = ear.nextZ; // look for points inside the triangle in both directions\n\n\t\twhile (p && p.z >= minZ && n && n.z <= maxZ) {\n\t\t\tif (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.prevZ;\n\t\t\tif (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n\t\t\tn = n.nextZ;\n\t\t} // look for remaining points in decreasing z-order\n\n\n\t\twhile (p && p.z >= minZ) {\n\t\t\tif (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.prevZ;\n\t\t} // look for remaining points in increasing z-order\n\n\n\t\twhile (n && n.z <= maxZ) {\n\t\t\tif (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n\t\t\tn = n.nextZ;\n\t\t}\n\n\t\treturn true;\n\t} // go through all polygon nodes and cure small local self-intersections\n\n\n\tfunction cureLocalIntersections(start, triangles, dim) {\n\t\tlet p = start;\n\n\t\tdo {\n\t\t\tconst a = p.prev,\n\t\t\t\t\t\tb = p.next.next;\n\n\t\t\tif (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\t\t\t\ttriangles.push(a.i / dim);\n\t\t\t\ttriangles.push(p.i / dim);\n\t\t\t\ttriangles.push(b.i / dim); // remove two nodes involved\n\n\t\t\t\tremoveNode(p);\n\t\t\t\tremoveNode(p.next);\n\t\t\t\tp = start = b;\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\treturn filterPoints(p);\n\t} // try splitting polygon into two and triangulate them independently\n\n\n\tfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n\t\t// look for a valid diagonal that divides the polygon into two\n\t\tlet a = start;\n\n\t\tdo {\n\t\t\tlet b = a.next.next;\n\n\t\t\twhile (b !== a.prev) {\n\t\t\t\tif (a.i !== b.i && isValidDiagonal(a, b)) {\n\t\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\t\tlet c = splitPolygon(a, b); // filter colinear points around the cuts\n\n\t\t\t\t\ta = filterPoints(a, a.next);\n\t\t\t\t\tc = filterPoints(c, c.next); // run earcut on each half\n\n\t\t\t\t\tearcutLinked(a, triangles, dim, minX, minY, invSize);\n\t\t\t\t\tearcutLinked(c, triangles, dim, minX, minY, invSize);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tb = b.next;\n\t\t\t}\n\n\t\t\ta = a.next;\n\t\t} while (a !== start);\n\t} // link every hole into the outer loop, producing a single-ring polygon without holes\n\n\n\tfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n\t\tconst queue = [];\n\t\tlet i, len, start, end, list;\n\n\t\tfor (i = 0, len = holeIndices.length; i < len; i++) {\n\t\t\tstart = holeIndices[i] * dim;\n\t\t\tend = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n\t\t\tlist = linkedList(data, start, end, dim, false);\n\t\t\tif (list === list.next) list.steiner = true;\n\t\t\tqueue.push(getLeftmost(list));\n\t\t}\n\n\t\tqueue.sort(compareX); // process holes from left to right\n\n\t\tfor (i = 0; i < queue.length; i++) {\n\t\t\teliminateHole(queue[i], outerNode);\n\t\t\touterNode = filterPoints(outerNode, outerNode.next);\n\t\t}\n\n\t\treturn outerNode;\n\t}\n\n\tfunction compareX(a, b) {\n\t\treturn a.x - b.x;\n\t} // find a bridge between vertices that connects hole with an outer ring and and link it\n\n\n\tfunction eliminateHole(hole, outerNode) {\n\t\touterNode = findHoleBridge(hole, outerNode);\n\n\t\tif (outerNode) {\n\t\t\tconst b = splitPolygon(outerNode, hole); // filter collinear points around the cuts\n\n\t\t\tfilterPoints(outerNode, outerNode.next);\n\t\t\tfilterPoints(b, b.next);\n\t\t}\n\t} // David Eberly's algorithm for finding a bridge between hole and outer polygon\n\n\n\tfunction findHoleBridge(hole, outerNode) {\n\t\tlet p = outerNode;\n\t\tconst hx = hole.x;\n\t\tconst hy = hole.y;\n\t\tlet qx = -Infinity,\n\t\t\t\tm; // find a segment intersected by a ray from the hole's leftmost point to the left;\n\t\t// segment's endpoint with lesser x will be potential connection point\n\n\t\tdo {\n\t\t\tif (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n\t\t\t\tconst x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n\n\t\t\t\tif (x <= hx && x > qx) {\n\t\t\t\t\tqx = x;\n\n\t\t\t\t\tif (x === hx) {\n\t\t\t\t\t\tif (hy === p.y) return p;\n\t\t\t\t\t\tif (hy === p.next.y) return p.next;\n\t\t\t\t\t}\n\n\t\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== outerNode);\n\n\t\tif (!m) return null;\n\t\tif (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\n\t\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t\t// if there are no points found, we have a valid connection;\n\t\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\t\tconst stop = m,\n\t\t\t\t\tmx = m.x,\n\t\t\t\t\tmy = m.y;\n\t\tlet tanMin = Infinity,\n\t\t\t\ttan;\n\t\tp = m;\n\n\t\tdo {\n\t\t\tif (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\t\t\t\ttan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n\t\t\t\tif (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {\n\t\t\t\t\tm = p;\n\t\t\t\t\ttanMin = tan;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== stop);\n\n\t\treturn m;\n\t} // whether sector in vertex m contains sector in vertex p in the same coordinates\n\n\n\tfunction sectorContainsSector(m, p) {\n\t\treturn area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n\t} // interlink polygon nodes in z-order\n\n\n\tfunction indexCurve(start, minX, minY, invSize) {\n\t\tlet p = start;\n\n\t\tdo {\n\t\t\tif (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n\t\t\tp.prevZ = p.prev;\n\t\t\tp.nextZ = p.next;\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\tp.prevZ.nextZ = null;\n\t\tp.prevZ = null;\n\t\tsortLinked(p);\n\t} // Simon Tatham's linked list merge sort algorithm\n\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\n\n\tfunction sortLinked(list) {\n\t\tlet i,\n\t\t\t\tp,\n\t\t\t\tq,\n\t\t\t\te,\n\t\t\t\ttail,\n\t\t\t\tnumMerges,\n\t\t\t\tpSize,\n\t\t\t\tqSize,\n\t\t\t\tinSize = 1;\n\n\t\tdo {\n\t\t\tp = list;\n\t\t\tlist = null;\n\t\t\ttail = null;\n\t\t\tnumMerges = 0;\n\n\t\t\twhile (p) {\n\t\t\t\tnumMerges++;\n\t\t\t\tq = p;\n\t\t\t\tpSize = 0;\n\n\t\t\t\tfor (i = 0; i < inSize; i++) {\n\t\t\t\t\tpSize++;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tif (!q) break;\n\t\t\t\t}\n\n\t\t\t\tqSize = inSize;\n\n\t\t\t\twhile (pSize > 0 || qSize > 0 && q) {\n\t\t\t\t\tif (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n\t\t\t\t\t\te = p;\n\t\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\t\tpSize--;\n\t\t\t\t\t} else {\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\t\tqSize--;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tail) tail.nextZ = e;else list = e;\n\t\t\t\t\te.prevZ = tail;\n\t\t\t\t\ttail = e;\n\t\t\t\t}\n\n\t\t\t\tp = q;\n\t\t\t}\n\n\t\t\ttail.nextZ = null;\n\t\t\tinSize *= 2;\n\t\t} while (numMerges > 1);\n\n\t\treturn list;\n\t} // z-order of a point given coords and inverse of the longer side of data bbox\n\n\n\tfunction zOrder(x, y, minX, minY, invSize) {\n\t\t// coords are transformed into non-negative 15-bit integer range\n\t\tx = 32767 * (x - minX) * invSize;\n\t\ty = 32767 * (y - minY) * invSize;\n\t\tx = (x | x << 8) & 0x00FF00FF;\n\t\tx = (x | x << 4) & 0x0F0F0F0F;\n\t\tx = (x | x << 2) & 0x33333333;\n\t\tx = (x | x << 1) & 0x55555555;\n\t\ty = (y | y << 8) & 0x00FF00FF;\n\t\ty = (y | y << 4) & 0x0F0F0F0F;\n\t\ty = (y | y << 2) & 0x33333333;\n\t\ty = (y | y << 1) & 0x55555555;\n\t\treturn x | y << 1;\n\t} // find the leftmost node of a polygon ring\n\n\n\tfunction getLeftmost(start) {\n\t\tlet p = start,\n\t\t\t\tleftmost = start;\n\n\t\tdo {\n\t\t\tif (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\treturn leftmost;\n\t} // check if a point lies within a convex triangle\n\n\n\tfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n\t\treturn (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n\t} // check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\n\n\tfunction isValidDiagonal(a, b) {\n\t\treturn a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && ( // dones't intersect other edges\n\t\tlocallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && ( // locally visible\n\t\tarea(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n\t\tequals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n\t} // signed area of a triangle\n\n\n\tfunction area(p, q, r) {\n\t\treturn (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n\t} // check if two points are equal\n\n\n\tfunction equals(p1, p2) {\n\t\treturn p1.x === p2.x && p1.y === p2.y;\n\t} // check if two segments intersect\n\n\n\tfunction intersects(p1, q1, p2, q2) {\n\t\tconst o1 = sign(area(p1, q1, p2));\n\t\tconst o2 = sign(area(p1, q1, q2));\n\t\tconst o3 = sign(area(p2, q2, p1));\n\t\tconst o4 = sign(area(p2, q2, q1));\n\t\tif (o1 !== o2 && o3 !== o4) return true; // general case\n\n\t\tif (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n\n\t\tif (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n\n\t\tif (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n\n\t\tif (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n\t\treturn false;\n\t} // for collinear points p, q, r, check if point q lies on segment pr\n\n\n\tfunction onSegment(p, q, r) {\n\t\treturn q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n\t}\n\n\tfunction sign(num) {\n\t\treturn num > 0 ? 1 : num < 0 ? -1 : 0;\n\t} // check if a polygon diagonal intersects any polygon segments\n\n\n\tfunction intersectsPolygon(a, b) {\n\t\tlet p = a;\n\n\t\tdo {\n\t\t\tif (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;\n\t\t\tp = p.next;\n\t\t} while (p !== a);\n\n\t\treturn false;\n\t} // check if a polygon diagonal is locally inside the polygon\n\n\n\tfunction locallyInside(a, b) {\n\t\treturn area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n\t} // check if the middle point of a polygon diagonal is inside the polygon\n\n\n\tfunction middleInside(a, b) {\n\t\tlet p = a,\n\t\t\t\tinside = false;\n\t\tconst px = (a.x + b.x) / 2,\n\t\t\t\t\tpy = (a.y + b.y) / 2;\n\n\t\tdo {\n\t\t\tif (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;\n\t\t\tp = p.next;\n\t\t} while (p !== a);\n\n\t\treturn inside;\n\t} // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\n\n\tfunction splitPolygon(a, b) {\n\t\tconst a2 = new Node(a.i, a.x, a.y),\n\t\t\t\t\tb2 = new Node(b.i, b.x, b.y),\n\t\t\t\t\tan = a.next,\n\t\t\t\t\tbp = b.prev;\n\t\ta.next = b;\n\t\tb.prev = a;\n\t\ta2.next = an;\n\t\tan.prev = a2;\n\t\tb2.next = a2;\n\t\ta2.prev = b2;\n\t\tbp.next = b2;\n\t\tb2.prev = bp;\n\t\treturn b2;\n\t} // create a node and optionally link it with previous one (in a circular doubly linked list)\n\n\n\tfunction insertNode(i, x, y, last) {\n\t\tconst p = new Node(i, x, y);\n\n\t\tif (!last) {\n\t\t\tp.prev = p;\n\t\t\tp.next = p;\n\t\t} else {\n\t\t\tp.next = last.next;\n\t\t\tp.prev = last;\n\t\t\tlast.next.prev = p;\n\t\t\tlast.next = p;\n\t\t}\n\n\t\treturn p;\n\t}\n\n\tfunction removeNode(p) {\n\t\tp.next.prev = p.prev;\n\t\tp.prev.next = p.next;\n\t\tif (p.prevZ) p.prevZ.nextZ = p.nextZ;\n\t\tif (p.nextZ) p.nextZ.prevZ = p.prevZ;\n\t}\n\n\tfunction Node(i, x, y) {\n\t\t// vertex index in coordinates array\n\t\tthis.i = i; // vertex coordinates\n\n\t\tthis.x = x;\n\t\tthis.y = y; // previous and next vertex nodes in a polygon ring\n\n\t\tthis.prev = null;\n\t\tthis.next = null; // z-order curve value\n\n\t\tthis.z = null; // previous and next nodes in z-order\n\n\t\tthis.prevZ = null;\n\t\tthis.nextZ = null; // indicates whether this is a steiner point\n\n\t\tthis.steiner = false;\n\t}\n\n\tfunction signedArea(data, start, end, dim) {\n\t\tlet sum = 0;\n\n\t\tfor (let i = start, j = end - dim; i < end; i += dim) {\n\t\t\tsum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n\t\t\tj = i;\n\t\t}\n\n\t\treturn sum;\n\t}\n\n\tclass ShapeUtils {\n\t\t// calculate area of the contour polygon\n\t\tstatic area(contour) {\n\t\t\tconst n = contour.length;\n\t\t\tlet a = 0.0;\n\n\t\t\tfor (let p = n - 1, q = 0; q < n; p = q++) {\n\t\t\t\ta += contour[p].x * contour[q].y - contour[q].x * contour[p].y;\n\t\t\t}\n\n\t\t\treturn a * 0.5;\n\t\t}\n\n\t\tstatic isClockWise(pts) {\n\t\t\treturn ShapeUtils.area(pts) < 0;\n\t\t}\n\n\t\tstatic triangulateShape(contour, holes) {\n\t\t\tconst vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\n\t\t\tconst holeIndices = []; // array of hole indices\n\n\t\t\tconst faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\t\tremoveDupEndPts(contour);\n\t\t\taddContour(vertices, contour); //\n\n\t\t\tlet holeIndex = contour.length;\n\t\t\tholes.forEach(removeDupEndPts);\n\n\t\t\tfor (let i = 0; i < holes.length; i++) {\n\t\t\t\tholeIndices.push(holeIndex);\n\t\t\t\tholeIndex += holes[i].length;\n\t\t\t\taddContour(vertices, holes[i]);\n\t\t\t} //\n\n\n\t\t\tconst triangles = Earcut.triangulate(vertices, holeIndices); //\n\n\t\t\tfor (let i = 0; i < triangles.length; i += 3) {\n\t\t\t\tfaces.push(triangles.slice(i, i + 3));\n\t\t\t}\n\n\t\t\treturn faces;\n\t\t}\n\n\t}\n\n\tfunction removeDupEndPts(points) {\n\t\tconst l = points.length;\n\n\t\tif (l > 2 && points[l - 1].equals(points[0])) {\n\t\t\tpoints.pop();\n\t\t}\n\t}\n\n\tfunction addContour(vertices, contour) {\n\t\tfor (let i = 0; i < contour.length; i++) {\n\t\t\tvertices.push(contour[i].x);\n\t\t\tvertices.push(contour[i].y);\n\t\t}\n\t}\n\n\t/**\n\t * Creates extruded geometry from a path shape.\n\t *\n\t * parameters = {\n\t *\n\t *\tcurveSegments: <int>, // number of points on the curves\n\t *\tsteps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n\t *\tdepth: <float>, // Depth to extrude the shape\n\t *\n\t *\tbevelEnabled: <bool>, // turn on bevel\n\t *\tbevelThickness: <float>, // how deep into the original shape bevel goes\n\t *\tbevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\n\t *\tbevelOffset: <float>, // how far from shape outline does bevel start\n\t *\tbevelSegments: <int>, // number of bevel layers\n\t *\n\t *\textrudePath: <THREE.Curve> // curve to extrude shape along\n\t *\n\t *\tUVGenerator: <Object> // object that provides UV generator functions\n\t *\n\t * }\n\t */\n\n\tclass ExtrudeGeometry extends BufferGeometry {\n\t\tconstructor(shapes = new Shape([new Vector2(0.5, 0.5), new Vector2(-0.5, 0.5), new Vector2(-0.5, -0.5), new Vector2(0.5, -0.5)]), options = {}) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ExtrudeGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\toptions: options\n\t\t\t};\n\t\t\tshapes = Array.isArray(shapes) ? shapes : [shapes];\n\t\t\tconst scope = this;\n\t\t\tconst verticesArray = [];\n\t\t\tconst uvArray = [];\n\n\t\t\tfor (let i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\taddShape(shape);\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(verticesArray, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvArray, 2));\n\t\t\tthis.computeVertexNormals(); // functions\n\n\t\t\tfunction addShape(shape) {\n\t\t\t\tconst placeholder = []; // options\n\n\t\t\t\tconst curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\t\tconst steps = options.steps !== undefined ? options.steps : 1;\n\t\t\t\tlet depth = options.depth !== undefined ? options.depth : 1;\n\t\t\t\tlet bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\t\tlet bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 0.2;\n\t\t\t\tlet bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 0.1;\n\t\t\t\tlet bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\t\tlet bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\t\t\t\tconst extrudePath = options.extrudePath;\n\t\t\t\tconst uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator; // deprecated options\n\n\t\t\t\tif (options.amount !== undefined) {\n\t\t\t\t\tconsole.warn('THREE.ExtrudeBufferGeometry: amount has been renamed to depth.');\n\t\t\t\t\tdepth = options.amount;\n\t\t\t\t} //\n\n\n\t\t\t\tlet extrudePts,\n\t\t\t\t\t\textrudeByPath = false;\n\t\t\t\tlet splineTube, binormal, normal, position2;\n\n\t\t\t\tif (extrudePath) {\n\t\t\t\t\textrudePts = extrudePath.getSpacedPoints(steps);\n\t\t\t\t\textrudeByPath = true;\n\t\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\t\t\t\t\t// SETUP TNB variables\n\t\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\t\tsplineTube = extrudePath.computeFrenetFrames(steps, false); // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\t\tbinormal = new Vector3();\n\t\t\t\t\tnormal = new Vector3();\n\t\t\t\t\tposition2 = new Vector3();\n\t\t\t\t} // Safeguards if bevels are not enabled\n\n\n\t\t\t\tif (!bevelEnabled) {\n\t\t\t\t\tbevelSegments = 0;\n\t\t\t\t\tbevelThickness = 0;\n\t\t\t\t\tbevelSize = 0;\n\t\t\t\t\tbevelOffset = 0;\n\t\t\t\t} // Variables initialization\n\n\n\t\t\t\tconst shapePoints = shape.extractPoints(curveSegments);\n\t\t\t\tlet vertices = shapePoints.shape;\n\t\t\t\tconst holes = shapePoints.holes;\n\t\t\t\tconst reverse = !ShapeUtils.isClockWise(vertices);\n\n\t\t\t\tif (reverse) {\n\t\t\t\t\tvertices = vertices.reverse(); // Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tconst ahole = holes[h];\n\n\t\t\t\t\t\tif (ShapeUtils.isClockWise(ahole)) {\n\t\t\t\t\t\t\tholes[h] = ahole.reverse();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst faces = ShapeUtils.triangulateShape(vertices, holes);\n\t\t\t\t/* Vertices */\n\n\t\t\t\tconst contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\tvertices = vertices.concat(ahole);\n\t\t\t\t}\n\n\t\t\t\tfunction scalePt2(pt, vec, size) {\n\t\t\t\t\tif (!vec) console.error('THREE.ExtrudeGeometry: vec does not exist');\n\t\t\t\t\treturn vec.clone().multiplyScalar(size).add(pt);\n\t\t\t\t}\n\n\t\t\t\tconst vlen = vertices.length,\n\t\t\t\t\t\t\tflen = faces.length; // Find directions for point movement\n\n\t\t\t\tfunction getBevelVec(inPt, inPrev, inNext) {\n\t\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t\t//\t shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t\t//\n\t\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t\t//\tadjacent edges of inPt at a distance of 1 unit on the left side.\n\t\t\t\t\tlet v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\t\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\t\tconst v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\t\tconst v_next_x = inNext.x - inPt.x,\n\t\t\t\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\t\t\t\t\tconst v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y; // check for collinear edges\n\n\t\t\t\t\tconst collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;\n\n\t\t\t\t\tif (Math.abs(collinear0) > Number.EPSILON) {\n\t\t\t\t\t\t// not collinear\n\t\t\t\t\t\t// length of vectors for normalizing\n\t\t\t\t\t\tconst v_prev_len = Math.sqrt(v_prev_lensq);\n\t\t\t\t\t\tconst v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y); // shift adjacent points by unit vectors to the left\n\n\t\t\t\t\t\tconst ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;\n\t\t\t\t\t\tconst ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;\n\t\t\t\t\t\tconst ptNextShift_x = inNext.x - v_next_y / v_next_len;\n\t\t\t\t\t\tconst ptNextShift_y = inNext.y + v_next_x / v_next_len; // scaling factor for v_prev to intersection point\n\n\t\t\t\t\t\tconst sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x); // vector from inPt to intersection point\n\n\t\t\t\t\t\tv_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;\n\t\t\t\t\t\tv_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y; // Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t\t//\tbut prevent crazy spikes\n\n\t\t\t\t\t\tconst v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;\n\n\t\t\t\t\t\tif (v_trans_lensq <= 2) {\n\t\t\t\t\t\t\treturn new Vector2(v_trans_x, v_trans_y);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_trans_lensq / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// handle special case of collinear edges\n\t\t\t\t\t\tlet direction_eq = false; // assumes: opposite\n\n\t\t\t\t\t\tif (v_prev_x > Number.EPSILON) {\n\t\t\t\t\t\t\tif (v_next_x > Number.EPSILON) {\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (v_prev_x < -Number.EPSILON) {\n\t\t\t\t\t\t\t\tif (v_next_x < -Number.EPSILON) {\n\t\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (Math.sign(v_prev_y) === Math.sign(v_next_y)) {\n\t\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (direction_eq) {\n\t\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\t\tv_trans_x = -v_prev_y;\n\t\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_prev_lensq);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_prev_lensq / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);\n\t\t\t\t}\n\n\t\t\t\tconst contourMovements = [];\n\n\t\t\t\tfor (let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {\n\t\t\t\t\tif (j === il) j = 0;\n\t\t\t\t\tif (k === il) k = 0; //\t(j)---(i)---(k)\n\t\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\t\tcontourMovements[i] = getBevelVec(contour[i], contour[j], contour[k]);\n\t\t\t\t}\n\n\t\t\t\tconst holesMovements = [];\n\t\t\t\tlet oneHoleMovements,\n\t\t\t\t\t\tverticesMovements = contourMovements.concat();\n\n\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\toneHoleMovements = [];\n\n\t\t\t\t\tfor (let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {\n\t\t\t\t\t\tif (j === il) j = 0;\n\t\t\t\t\t\tif (k === il) k = 0; //\t(j)---(i)---(k)\n\n\t\t\t\t\t\toneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k]);\n\t\t\t\t\t}\n\n\t\t\t\t\tholesMovements.push(oneHoleMovements);\n\t\t\t\t\tverticesMovements = verticesMovements.concat(oneHoleMovements);\n\t\t\t\t} // Loop bevelSegments, 1 for the front, 1 for the back\n\n\n\t\t\t\tfor (let b = 0; b < bevelSegments; b++) {\n\t\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\t\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\t\tconst z = bevelThickness * Math.cos(t * Math.PI / 2);\n\t\t\t\t\tconst bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape\n\n\t\t\t\t\tfor (let i = 0, il = contour.length; i < il; i++) {\n\t\t\t\t\t\tconst vert = scalePt2(contour[i], contourMovements[i], bs);\n\t\t\t\t\t\tv(vert.x, vert.y, -z);\n\t\t\t\t\t} // expand holes\n\n\n\t\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\t\toneHoleMovements = holesMovements[h];\n\n\t\t\t\t\t\tfor (let i = 0, il = ahole.length; i < il; i++) {\n\t\t\t\t\t\t\tconst vert = scalePt2(ahole[i], oneHoleMovements[i], bs);\n\t\t\t\t\t\t\tv(vert.x, vert.y, -z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst bs = bevelSize + bevelOffset; // Back facing vertices\n\n\t\t\t\tfor (let i = 0; i < vlen; i++) {\n\t\t\t\t\tconst vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];\n\n\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\tv(vert.x, vert.y, 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\t\t\t\t\t\tnormal.copy(splineTube.normals[0]).multiplyScalar(vert.x);\n\t\t\t\t\t\tbinormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);\n\t\t\t\t\t\tposition2.copy(extrudePts[0]).add(normal).add(binormal);\n\t\t\t\t\t\tv(position2.x, position2.y, position2.z);\n\t\t\t\t\t}\n\t\t\t\t} // Add stepped vertices...\n\t\t\t\t// Including front facing vertices\n\n\n\t\t\t\tfor (let s = 1; s <= steps; s++) {\n\t\t\t\t\tfor (let i = 0; i < vlen; i++) {\n\t\t\t\t\t\tconst vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];\n\n\t\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\t\tv(vert.x, vert.y, depth / steps * s);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\t\t\t\t\t\t\tnormal.copy(splineTube.normals[s]).multiplyScalar(vert.x);\n\t\t\t\t\t\t\tbinormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);\n\t\t\t\t\t\t\tposition2.copy(extrudePts[s]).add(normal).add(binormal);\n\t\t\t\t\t\t\tv(position2.x, position2.y, position2.z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // Add bevel segments planes\n\t\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\n\n\t\t\t\tfor (let b = bevelSegments - 1; b >= 0; b--) {\n\t\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\t\tconst z = bevelThickness * Math.cos(t * Math.PI / 2);\n\t\t\t\t\tconst bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape\n\n\t\t\t\t\tfor (let i = 0, il = contour.length; i < il; i++) {\n\t\t\t\t\t\tconst vert = scalePt2(contour[i], contourMovements[i], bs);\n\t\t\t\t\t\tv(vert.x, vert.y, depth + z);\n\t\t\t\t\t} // expand holes\n\n\n\t\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\t\toneHoleMovements = holesMovements[h];\n\n\t\t\t\t\t\tfor (let i = 0, il = ahole.length; i < il; i++) {\n\t\t\t\t\t\t\tconst vert = scalePt2(ahole[i], oneHoleMovements[i], bs);\n\n\t\t\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\t\t\tv(vert.x, vert.y, depth + z);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tv(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/* Faces */\n\t\t\t\t// Top and bottom faces\n\n\n\t\t\t\tbuildLidFaces(); // Sides faces\n\n\t\t\t\tbuildSideFaces(); /////\tInternal functions\n\n\t\t\t\tfunction buildLidFaces() {\n\t\t\t\t\tconst start = verticesArray.length / 3;\n\n\t\t\t\t\tif (bevelEnabled) {\n\t\t\t\t\t\tlet layer = 0; // steps + 1\n\n\t\t\t\t\t\tlet offset = vlen * layer; // Bottom faces\n\n\t\t\t\t\t\tfor (let i = 0; i < flen; i++) {\n\t\t\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\t\t\tf3(face[2] + offset, face[1] + offset, face[0] + offset);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\t\toffset = vlen * layer; // Top faces\n\n\t\t\t\t\t\tfor (let i = 0; i < flen; i++) {\n\t\t\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\t\t\tf3(face[0] + offset, face[1] + offset, face[2] + offset);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Bottom faces\n\t\t\t\t\t\tfor (let i = 0; i < flen; i++) {\n\t\t\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\t\t\tf3(face[2], face[1], face[0]);\n\t\t\t\t\t\t} // Top faces\n\n\n\t\t\t\t\t\tfor (let i = 0; i < flen; i++) {\n\t\t\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\t\t\tf3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addGroup(start, verticesArray.length / 3 - start, 0);\n\t\t\t\t} // Create faces for the z-sides of the shape\n\n\n\t\t\t\tfunction buildSideFaces() {\n\t\t\t\t\tconst start = verticesArray.length / 3;\n\t\t\t\t\tlet layeroffset = 0;\n\t\t\t\t\tsidewalls(contour, layeroffset);\n\t\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\t\tfor (let h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tconst ahole = holes[h];\n\t\t\t\t\t\tsidewalls(ahole, layeroffset); //, true\n\n\t\t\t\t\t\tlayeroffset += ahole.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addGroup(start, verticesArray.length / 3 - start, 1);\n\t\t\t\t}\n\n\t\t\t\tfunction sidewalls(contour, layeroffset) {\n\t\t\t\t\tlet i = contour.length;\n\n\t\t\t\t\twhile (--i >= 0) {\n\t\t\t\t\t\tconst j = i;\n\t\t\t\t\t\tlet k = i - 1;\n\t\t\t\t\t\tif (k < 0) k = contour.length - 1; //console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\t\tfor (let s = 0, sl = steps + bevelSegments * 2; s < sl; s++) {\n\t\t\t\t\t\t\tconst slen1 = vlen * s;\n\t\t\t\t\t\t\tconst slen2 = vlen * (s + 1);\n\t\t\t\t\t\t\tconst a = layeroffset + j + slen1,\n\t\t\t\t\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\t\t\t\t\td = layeroffset + j + slen2;\n\t\t\t\t\t\t\tf4(a, b, c, d);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfunction v(x, y, z) {\n\t\t\t\t\tplaceholder.push(x);\n\t\t\t\t\tplaceholder.push(y);\n\t\t\t\t\tplaceholder.push(z);\n\t\t\t\t}\n\n\t\t\t\tfunction f3(a, b, c) {\n\t\t\t\t\taddVertex(a);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(c);\n\t\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\t\tconst uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n\t\t\t\t\taddUV(uvs[0]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[2]);\n\t\t\t\t}\n\n\t\t\t\tfunction f4(a, b, c, d) {\n\t\t\t\t\taddVertex(a);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(d);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(c);\n\t\t\t\t\taddVertex(d);\n\t\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\t\tconst uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n\t\t\t\t\taddUV(uvs[0]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[3]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[2]);\n\t\t\t\t\taddUV(uvs[3]);\n\t\t\t\t}\n\n\t\t\t\tfunction addVertex(index) {\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 0]);\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 1]);\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 2]);\n\t\t\t\t}\n\n\t\t\t\tfunction addUV(vector2) {\n\t\t\t\t\tuvArray.push(vector2.x);\n\t\t\t\t\tuvArray.push(vector2.y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tconst shapes = this.parameters.shapes;\n\t\t\tconst options = this.parameters.options;\n\t\t\treturn toJSON$1(shapes, options, data);\n\t\t}\n\n\t\tstatic fromJSON(data, shapes) {\n\t\t\tconst geometryShapes = [];\n\n\t\t\tfor (let j = 0, jl = data.shapes.length; j < jl; j++) {\n\t\t\t\tconst shape = shapes[data.shapes[j]];\n\t\t\t\tgeometryShapes.push(shape);\n\t\t\t}\n\n\t\t\tconst extrudePath = data.options.extrudePath;\n\n\t\t\tif (extrudePath !== undefined) {\n\t\t\t\tdata.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);\n\t\t\t}\n\n\t\t\treturn new ExtrudeGeometry(geometryShapes, data.options);\n\t\t}\n\n\t}\n\n\tconst WorldUVGenerator = {\n\t\tgenerateTopUV: function (geometry, vertices, indexA, indexB, indexC) {\n\t\t\tconst a_x = vertices[indexA * 3];\n\t\t\tconst a_y = vertices[indexA * 3 + 1];\n\t\t\tconst b_x = vertices[indexB * 3];\n\t\t\tconst b_y = vertices[indexB * 3 + 1];\n\t\t\tconst c_x = vertices[indexC * 3];\n\t\t\tconst c_y = vertices[indexC * 3 + 1];\n\t\t\treturn [new Vector2(a_x, a_y), new Vector2(b_x, b_y), new Vector2(c_x, c_y)];\n\t\t},\n\t\tgenerateSideWallUV: function (geometry, vertices, indexA, indexB, indexC, indexD) {\n\t\t\tconst a_x = vertices[indexA * 3];\n\t\t\tconst a_y = vertices[indexA * 3 + 1];\n\t\t\tconst a_z = vertices[indexA * 3 + 2];\n\t\t\tconst b_x = vertices[indexB * 3];\n\t\t\tconst b_y = vertices[indexB * 3 + 1];\n\t\t\tconst b_z = vertices[indexB * 3 + 2];\n\t\t\tconst c_x = vertices[indexC * 3];\n\t\t\tconst c_y = vertices[indexC * 3 + 1];\n\t\t\tconst c_z = vertices[indexC * 3 + 2];\n\t\t\tconst d_x = vertices[indexD * 3];\n\t\t\tconst d_y = vertices[indexD * 3 + 1];\n\t\t\tconst d_z = vertices[indexD * 3 + 2];\n\n\t\t\tif (Math.abs(a_y - b_y) < Math.abs(a_x - b_x)) {\n\t\t\t\treturn [new Vector2(a_x, 1 - a_z), new Vector2(b_x, 1 - b_z), new Vector2(c_x, 1 - c_z), new Vector2(d_x, 1 - d_z)];\n\t\t\t} else {\n\t\t\t\treturn [new Vector2(a_y, 1 - a_z), new Vector2(b_y, 1 - b_z), new Vector2(c_y, 1 - c_z), new Vector2(d_y, 1 - d_z)];\n\t\t\t}\n\t\t}\n\t};\n\n\tfunction toJSON$1(shapes, options, data) {\n\t\tdata.shapes = [];\n\n\t\tif (Array.isArray(shapes)) {\n\t\t\tfor (let i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\tdata.shapes.push(shape.uuid);\n\t\t\t}\n\t\t} else {\n\t\t\tdata.shapes.push(shapes.uuid);\n\t\t}\n\n\t\tif (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();\n\t\treturn data;\n\t}\n\n\tclass IcosahedronGeometry extends PolyhedronGeometry {\n\t\tconstructor(radius = 1, detail = 0) {\n\t\t\tconst t = (1 + Math.sqrt(5)) / 2;\n\t\t\tconst vertices = [-1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, 0, 0, -1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, t, 0, -1, t, 0, 1, -t, 0, -1, -t, 0, 1];\n\t\t\tconst indices = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1];\n\t\t\tsuper(vertices, indices, radius, detail);\n\t\t\tthis.type = 'IcosahedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\treturn new IcosahedronGeometry(data.radius, data.detail);\n\t\t}\n\n\t}\n\n\tclass LatheGeometry extends BufferGeometry {\n\t\tconstructor(points = [new Vector2(0, 0.5), new Vector2(0.5, 0), new Vector2(0, -0.5)], segments = 12, phiStart = 0, phiLength = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LatheGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tpoints: points,\n\t\t\t\tsegments: segments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength\n\t\t\t};\n\t\t\tsegments = Math.floor(segments); // clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\t\tphiLength = clamp(phiLength, 0, Math.PI * 2); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tconst inverseSegments = 1.0 / segments;\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst uv = new Vector2(); // generate vertices and uvs\n\n\t\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\t\tconst phi = phiStart + i * inverseSegments * phiLength;\n\t\t\t\tconst sin = Math.sin(phi);\n\t\t\t\tconst cos = Math.cos(phi);\n\n\t\t\t\tfor (let j = 0; j <= points.length - 1; j++) {\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertex.x = points[j].x * sin;\n\t\t\t\t\tvertex.y = points[j].y;\n\t\t\t\t\tvertex.z = points[j].x * cos;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // uv\n\n\t\t\t\t\tuv.x = i / segments;\n\t\t\t\t\tuv.y = j / (points.length - 1);\n\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t}\n\t\t\t} // indices\n\n\n\t\t\tfor (let i = 0; i < segments; i++) {\n\t\t\t\tfor (let j = 0; j < points.length - 1; j++) {\n\t\t\t\t\tconst base = j + i * points.length;\n\t\t\t\t\tconst a = base;\n\t\t\t\t\tconst b = base + points.length;\n\t\t\t\t\tconst c = base + points.length + 1;\n\t\t\t\t\tconst d = base + 1; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // generate normals\n\n\t\t\tthis.computeVertexNormals(); // if the geometry is closed, we need to average the normals along the seam.\n\t\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\t\t\tif (phiLength === Math.PI * 2) {\n\t\t\t\tconst normals = this.attributes.normal.array;\n\t\t\t\tconst n1 = new Vector3();\n\t\t\t\tconst n2 = new Vector3();\n\t\t\t\tconst n = new Vector3(); // this is the buffer offset for the last line of vertices\n\n\t\t\t\tconst base = segments * points.length * 3;\n\n\t\t\t\tfor (let i = 0, j = 0; i < points.length; i++, j += 3) {\n\t\t\t\t\t// select the normal of the vertex in the first line\n\t\t\t\t\tn1.x = normals[j + 0];\n\t\t\t\t\tn1.y = normals[j + 1];\n\t\t\t\t\tn1.z = normals[j + 2]; // select the normal of the vertex in the last line\n\n\t\t\t\t\tn2.x = normals[base + j + 0];\n\t\t\t\t\tn2.y = normals[base + j + 1];\n\t\t\t\t\tn2.z = normals[base + j + 2]; // average normals\n\n\t\t\t\t\tn.addVectors(n1, n2).normalize(); // assign the new values to both normals\n\n\t\t\t\t\tnormals[j + 0] = normals[base + j + 0] = n.x;\n\t\t\t\t\tnormals[j + 1] = normals[base + j + 1] = n.y;\n\t\t\t\t\tnormals[j + 2] = normals[base + j + 2] = n.z;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\treturn new LatheGeometry(data.points, data.segments, data.phiStart, data.phiLength);\n\t\t}\n\n\t}\n\n\tclass OctahedronGeometry extends PolyhedronGeometry {\n\t\tconstructor(radius = 1, detail = 0) {\n\t\t\tconst vertices = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1];\n\t\t\tconst indices = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2];\n\t\t\tsuper(vertices, indices, radius, detail);\n\t\t\tthis.type = 'OctahedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\treturn new OctahedronGeometry(data.radius, data.detail);\n\t\t}\n\n\t}\n\n\tclass RingGeometry extends BufferGeometry {\n\t\tconstructor(innerRadius = 0.5, outerRadius = 1, thetaSegments = 8, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'RingGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tinnerRadius: innerRadius,\n\t\t\t\touterRadius: outerRadius,\n\t\t\t\tthetaSegments: thetaSegments,\n\t\t\t\tphiSegments: phiSegments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tthetaSegments = Math.max(3, thetaSegments);\n\t\t\tphiSegments = Math.max(1, phiSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // some helper variables\n\n\t\t\tlet radius = innerRadius;\n\t\t\tconst radiusStep = (outerRadius - innerRadius) / phiSegments;\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst uv = new Vector2(); // generate vertices, normals and uvs\n\n\t\t\tfor (let j = 0; j <= phiSegments; j++) {\n\t\t\t\tfor (let i = 0; i <= thetaSegments; i++) {\n\t\t\t\t\t// values are generate from the inside of the ring to the outside\n\t\t\t\t\tconst segment = thetaStart + i / thetaSegments * thetaLength; // vertex\n\n\t\t\t\t\tvertex.x = radius * Math.cos(segment);\n\t\t\t\t\tvertex.y = radius * Math.sin(segment);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormals.push(0, 0, 1); // uv\n\n\t\t\t\t\tuv.x = (vertex.x / outerRadius + 1) / 2;\n\t\t\t\t\tuv.y = (vertex.y / outerRadius + 1) / 2;\n\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t} // increase the radius for next row of vertices\n\n\n\t\t\t\tradius += radiusStep;\n\t\t\t} // indices\n\n\n\t\t\tfor (let j = 0; j < phiSegments; j++) {\n\t\t\t\tconst thetaSegmentLevel = j * (thetaSegments + 1);\n\n\t\t\t\tfor (let i = 0; i < thetaSegments; i++) {\n\t\t\t\t\tconst segment = i + thetaSegmentLevel;\n\t\t\t\t\tconst a = segment;\n\t\t\t\t\tconst b = segment + thetaSegments + 1;\n\t\t\t\t\tconst c = segment + thetaSegments + 2;\n\t\t\t\t\tconst d = segment + 1; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\treturn new RingGeometry(data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);\n\t\t}\n\n\t}\n\n\tclass ShapeGeometry extends BufferGeometry {\n\t\tconstructor(shapes = new Shape([new Vector2(0, 0.5), new Vector2(-0.5, -0.5), new Vector2(0.5, -0.5)]), curveSegments = 12) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ShapeGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\tcurveSegments: curveSegments\n\t\t\t}; // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tlet groupStart = 0;\n\t\t\tlet groupCount = 0; // allow single and array values for \"shapes\" parameter\n\n\t\t\tif (Array.isArray(shapes) === false) {\n\t\t\t\taddShape(shapes);\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < shapes.length; i++) {\n\t\t\t\t\taddShape(shapes[i]);\n\t\t\t\t\tthis.addGroup(groupStart, groupCount, i); // enables MultiMaterial support\n\n\t\t\t\t\tgroupStart += groupCount;\n\t\t\t\t\tgroupCount = 0;\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // helper functions\n\n\t\t\tfunction addShape(shape) {\n\t\t\t\tconst indexOffset = vertices.length / 3;\n\t\t\t\tconst points = shape.extractPoints(curveSegments);\n\t\t\t\tlet shapeVertices = points.shape;\n\t\t\t\tconst shapeHoles = points.holes; // check direction of vertices\n\n\t\t\t\tif (ShapeUtils.isClockWise(shapeVertices) === false) {\n\t\t\t\t\tshapeVertices = shapeVertices.reverse();\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 0, l = shapeHoles.length; i < l; i++) {\n\t\t\t\t\tconst shapeHole = shapeHoles[i];\n\n\t\t\t\t\tif (ShapeUtils.isClockWise(shapeHole) === true) {\n\t\t\t\t\t\tshapeHoles[i] = shapeHole.reverse();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles); // join vertices of inner and outer paths to a single array\n\n\t\t\t\tfor (let i = 0, l = shapeHoles.length; i < l; i++) {\n\t\t\t\t\tconst shapeHole = shapeHoles[i];\n\t\t\t\t\tshapeVertices = shapeVertices.concat(shapeHole);\n\t\t\t\t} // vertices, normals, uvs\n\n\n\t\t\t\tfor (let i = 0, l = shapeVertices.length; i < l; i++) {\n\t\t\t\t\tconst vertex = shapeVertices[i];\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, 0);\n\t\t\t\t\tnormals.push(0, 0, 1);\n\t\t\t\t\tuvs.push(vertex.x, vertex.y); // world uvs\n\t\t\t\t} // incides\n\n\n\t\t\t\tfor (let i = 0, l = faces.length; i < l; i++) {\n\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\tconst a = face[0] + indexOffset;\n\t\t\t\t\tconst b = face[1] + indexOffset;\n\t\t\t\t\tconst c = face[2] + indexOffset;\n\t\t\t\t\tindices.push(a, b, c);\n\t\t\t\t\tgroupCount += 3;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tconst shapes = this.parameters.shapes;\n\t\t\treturn toJSON(shapes, data);\n\t\t}\n\n\t\tstatic fromJSON(data, shapes) {\n\t\t\tconst geometryShapes = [];\n\n\t\t\tfor (let j = 0, jl = data.shapes.length; j < jl; j++) {\n\t\t\t\tconst shape = shapes[data.shapes[j]];\n\t\t\t\tgeometryShapes.push(shape);\n\t\t\t}\n\n\t\t\treturn new ShapeGeometry(geometryShapes, data.curveSegments);\n\t\t}\n\n\t}\n\n\tfunction toJSON(shapes, data) {\n\t\tdata.shapes = [];\n\n\t\tif (Array.isArray(shapes)) {\n\t\t\tfor (let i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\tdata.shapes.push(shape.uuid);\n\t\t\t}\n\t\t} else {\n\t\t\tdata.shapes.push(shapes.uuid);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tclass SphereGeometry extends BufferGeometry {\n\t\tconstructor(radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI) {\n\t\t\tsuper();\n\t\t\tthis.type = 'SphereGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\twidthSegments = Math.max(3, Math.floor(widthSegments));\n\t\t\theightSegments = Math.max(2, Math.floor(heightSegments));\n\t\t\tconst thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);\n\t\t\tlet index = 0;\n\t\t\tconst grid = [];\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst normal = new Vector3(); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // generate vertices, normals and uvs\n\n\t\t\tfor (let iy = 0; iy <= heightSegments; iy++) {\n\t\t\t\tconst verticesRow = [];\n\t\t\t\tconst v = iy / heightSegments; // special case for the poles\n\n\t\t\t\tlet uOffset = 0;\n\n\t\t\t\tif (iy == 0 && thetaStart == 0) {\n\t\t\t\t\tuOffset = 0.5 / widthSegments;\n\t\t\t\t} else if (iy == heightSegments && thetaEnd == Math.PI) {\n\t\t\t\t\tuOffset = -0.5 / widthSegments;\n\t\t\t\t}\n\n\t\t\t\tfor (let ix = 0; ix <= widthSegments; ix++) {\n\t\t\t\t\tconst u = ix / widthSegments; // vertex\n\n\t\t\t\t\tvertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n\t\t\t\t\tvertex.y = radius * Math.cos(thetaStart + v * thetaLength);\n\t\t\t\t\tvertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormal.copy(vertex).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(u + uOffset, 1 - v);\n\t\t\t\t\tverticesRow.push(index++);\n\t\t\t\t}\n\n\t\t\t\tgrid.push(verticesRow);\n\t\t\t} // indices\n\n\n\t\t\tfor (let iy = 0; iy < heightSegments; iy++) {\n\t\t\t\tfor (let ix = 0; ix < widthSegments; ix++) {\n\t\t\t\t\tconst a = grid[iy][ix + 1];\n\t\t\t\t\tconst b = grid[iy][ix];\n\t\t\t\t\tconst c = grid[iy + 1][ix];\n\t\t\t\t\tconst d = grid[iy + 1][ix + 1];\n\t\t\t\t\tif (iy !== 0 || thetaStart > 0) indices.push(a, b, d);\n\t\t\t\t\tif (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\treturn new SphereGeometry(data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);\n\t\t}\n\n\t}\n\n\tclass TetrahedronGeometry extends PolyhedronGeometry {\n\t\tconstructor(radius = 1, detail = 0) {\n\t\t\tconst vertices = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1];\n\t\t\tconst indices = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1];\n\t\t\tsuper(vertices, indices, radius, detail);\n\t\t\tthis.type = 'TetrahedronGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\treturn new TetrahedronGeometry(data.radius, data.detail);\n\t\t}\n\n\t}\n\n\tclass TorusGeometry extends BufferGeometry {\n\t\tconstructor(radius = 1, tube = 0.4, radialSegments = 8, tubularSegments = 6, arc = Math.PI * 2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'TorusGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tarc: arc\n\t\t\t};\n\t\t\tradialSegments = Math.floor(radialSegments);\n\t\t\ttubularSegments = Math.floor(tubularSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tconst center = new Vector3();\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst normal = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\tfor (let j = 0; j <= radialSegments; j++) {\n\t\t\t\tfor (let i = 0; i <= tubularSegments; i++) {\n\t\t\t\t\tconst u = i / tubularSegments * arc;\n\t\t\t\t\tconst v = j / radialSegments * Math.PI * 2; // vertex\n\n\t\t\t\t\tvertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n\t\t\t\t\tvertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n\t\t\t\t\tvertex.z = tube * Math.sin(v);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tcenter.x = radius * Math.cos(u);\n\t\t\t\t\tcenter.y = radius * Math.sin(u);\n\t\t\t\t\tnormal.subVectors(vertex, center).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(i / tubularSegments);\n\t\t\t\t\tuvs.push(j / radialSegments);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (let j = 1; j <= radialSegments; j++) {\n\t\t\t\tfor (let i = 1; i <= tubularSegments; i++) {\n\t\t\t\t\t// indices\n\t\t\t\t\tconst a = (tubularSegments + 1) * j + i - 1;\n\t\t\t\t\tconst b = (tubularSegments + 1) * (j - 1) + i - 1;\n\t\t\t\t\tconst c = (tubularSegments + 1) * (j - 1) + i;\n\t\t\t\t\tconst d = (tubularSegments + 1) * j + i; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\treturn new TorusGeometry(data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);\n\t\t}\n\n\t}\n\n\tclass TorusKnotGeometry extends BufferGeometry {\n\t\tconstructor(radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3) {\n\t\t\tsuper();\n\t\t\tthis.type = 'TorusKnotGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tp: p,\n\t\t\t\tq: q\n\t\t\t};\n\t\t\ttubularSegments = Math.floor(tubularSegments);\n\t\t\tradialSegments = Math.floor(radialSegments); // buffers\n\n\t\t\tconst indices = [];\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = []; // helper variables\n\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst normal = new Vector3();\n\t\t\tconst P1 = new Vector3();\n\t\t\tconst P2 = new Vector3();\n\t\t\tconst B = new Vector3();\n\t\t\tconst T = new Vector3();\n\t\t\tconst N = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\tfor (let i = 0; i <= tubularSegments; ++i) {\n\t\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\t\t\t\tconst u = i / tubularSegments * p * Math.PI * 2; // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\t\tcalculatePositionOnCurve(u, p, q, radius, P1);\n\t\t\t\tcalculatePositionOnCurve(u + 0.01, p, q, radius, P2); // calculate orthonormal basis\n\n\t\t\t\tT.subVectors(P2, P1);\n\t\t\t\tN.addVectors(P2, P1);\n\t\t\t\tB.crossVectors(T, N);\n\t\t\t\tN.crossVectors(B, T); // normalize B, N. T can be ignored, we don't use it\n\n\t\t\t\tB.normalize();\n\t\t\t\tN.normalize();\n\n\t\t\t\tfor (let j = 0; j <= radialSegments; ++j) {\n\t\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\t\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\t\t\t\t\tconst cx = -tube * Math.cos(v);\n\t\t\t\t\tconst cy = tube * Math.sin(v); // now calculate the final vertex position.\n\t\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\t\tvertex.x = P1.x + (cx * N.x + cy * B.x);\n\t\t\t\t\tvertex.y = P1.y + (cx * N.y + cy * B.y);\n\t\t\t\t\tvertex.z = P1.z + (cx * N.z + cy * B.z);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\t\tnormal.subVectors(vertex, P1).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(i / tubularSegments);\n\t\t\t\t\tuvs.push(j / radialSegments);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (let j = 1; j <= tubularSegments; j++) {\n\t\t\t\tfor (let i = 1; i <= radialSegments; i++) {\n\t\t\t\t\t// indices\n\t\t\t\t\tconst a = (radialSegments + 1) * (j - 1) + (i - 1);\n\t\t\t\t\tconst b = (radialSegments + 1) * j + (i - 1);\n\t\t\t\t\tconst c = (radialSegments + 1) * j + i;\n\t\t\t\t\tconst d = (radialSegments + 1) * (j - 1) + i; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // this function calculates the current position on the torus curve\n\n\t\t\tfunction calculatePositionOnCurve(u, p, q, radius, position) {\n\t\t\t\tconst cu = Math.cos(u);\n\t\t\t\tconst su = Math.sin(u);\n\t\t\t\tconst quOverP = q / p * u;\n\t\t\t\tconst cs = Math.cos(quOverP);\n\t\t\t\tposition.x = radius * (2 + cs) * 0.5 * cu;\n\t\t\t\tposition.y = radius * (2 + cs) * su * 0.5;\n\t\t\t\tposition.z = radius * Math.sin(quOverP) * 0.5;\n\t\t\t}\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\treturn new TorusKnotGeometry(data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);\n\t\t}\n\n\t}\n\n\tclass TubeGeometry extends BufferGeometry {\n\t\tconstructor(path = new QuadraticBezierCurve3(new Vector3(-1, -1, 0), new Vector3(-1, 1, 0), new Vector3(1, 1, 0)), tubularSegments = 64, radius = 1, radialSegments = 8, closed = false) {\n\t\t\tsuper();\n\t\t\tthis.type = 'TubeGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tpath: path,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradius: radius,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tclosed: closed\n\t\t\t};\n\t\t\tconst frames = path.computeFrenetFrames(tubularSegments, closed); // expose internals\n\n\t\t\tthis.tangents = frames.tangents;\n\t\t\tthis.normals = frames.normals;\n\t\t\tthis.binormals = frames.binormals; // helper variables\n\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst normal = new Vector3();\n\t\t\tconst uv = new Vector2();\n\t\t\tlet P = new Vector3(); // buffer\n\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst uvs = [];\n\t\t\tconst indices = []; // create buffer data\n\n\t\t\tgenerateBufferData(); // build geometry\n\n\t\t\tthis.setIndex(indices);\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // functions\n\n\t\t\tfunction generateBufferData() {\n\t\t\t\tfor (let i = 0; i < tubularSegments; i++) {\n\t\t\t\t\tgenerateSegment(i);\n\t\t\t\t} // if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t\t// at the regular position on the given path\n\t\t\t\t//\n\t\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\n\t\t\t\tgenerateSegment(closed === false ? tubularSegments : 0); // uvs are generated in a separate function.\n\t\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\t\tgenerateUVs(); // finally create faces\n\n\t\t\t\tgenerateIndices();\n\t\t\t}\n\n\t\t\tfunction generateSegment(i) {\n\t\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\t\t\t\tP = path.getPointAt(i / tubularSegments, P); // retrieve corresponding normal and binormal\n\n\t\t\t\tconst N = frames.normals[i];\n\t\t\t\tconst B = frames.binormals[i]; // generate normals and vertices for the current segment\n\n\t\t\t\tfor (let j = 0; j <= radialSegments; j++) {\n\t\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\t\t\t\t\tconst sin = Math.sin(v);\n\t\t\t\t\tconst cos = -Math.cos(v); // normal\n\n\t\t\t\t\tnormal.x = cos * N.x + sin * B.x;\n\t\t\t\t\tnormal.y = cos * N.y + sin * B.y;\n\t\t\t\t\tnormal.z = cos * N.z + sin * B.z;\n\t\t\t\t\tnormal.normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // vertex\n\n\t\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\t\tvertex.z = P.z + radius * normal.z;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateIndices() {\n\t\t\t\tfor (let j = 1; j <= tubularSegments; j++) {\n\t\t\t\t\tfor (let i = 1; i <= radialSegments; i++) {\n\t\t\t\t\t\tconst a = (radialSegments + 1) * (j - 1) + (i - 1);\n\t\t\t\t\t\tconst b = (radialSegments + 1) * j + (i - 1);\n\t\t\t\t\t\tconst c = (radialSegments + 1) * j + i;\n\t\t\t\t\t\tconst d = (radialSegments + 1) * (j - 1) + i; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateUVs() {\n\t\t\t\tfor (let i = 0; i <= tubularSegments; i++) {\n\t\t\t\t\tfor (let j = 0; j <= radialSegments; j++) {\n\t\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\t\tuv.y = j / radialSegments;\n\t\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON();\n\t\t\tdata.path = this.parameters.path.toJSON();\n\t\t\treturn data;\n\t\t}\n\n\t\tstatic fromJSON(data) {\n\t\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\t\treturn new TubeGeometry(new Curves[data.path.type]().fromJSON(data.path), data.tubularSegments, data.radius, data.radialSegments, data.closed);\n\t\t}\n\n\t}\n\n\tclass WireframeGeometry extends BufferGeometry {\n\t\tconstructor(geometry = null) {\n\t\t\tsuper();\n\t\t\tthis.type = 'WireframeGeometry';\n\t\t\tthis.parameters = {\n\t\t\t\tgeometry: geometry\n\t\t\t};\n\n\t\t\tif (geometry !== null) {\n\t\t\t\t// buffer\n\t\t\t\tconst vertices = [];\n\t\t\t\tconst edges = new Set(); // helper variables\n\n\t\t\t\tconst start = new Vector3();\n\t\t\t\tconst end = new Vector3();\n\n\t\t\t\tif (geometry.index !== null) {\n\t\t\t\t\t// indexed BufferGeometry\n\t\t\t\t\tconst position = geometry.attributes.position;\n\t\t\t\t\tconst indices = geometry.index;\n\t\t\t\t\tlet groups = geometry.groups;\n\n\t\t\t\t\tif (groups.length === 0) {\n\t\t\t\t\t\tgroups = [{\n\t\t\t\t\t\t\tstart: 0,\n\t\t\t\t\t\t\tcount: indices.count,\n\t\t\t\t\t\t\tmaterialIndex: 0\n\t\t\t\t\t\t}];\n\t\t\t\t\t} // create a data structure that contains all eges without duplicates\n\n\n\t\t\t\t\tfor (let o = 0, ol = groups.length; o < ol; ++o) {\n\t\t\t\t\t\tconst group = groups[o];\n\t\t\t\t\t\tconst groupStart = group.start;\n\t\t\t\t\t\tconst groupCount = group.count;\n\n\t\t\t\t\t\tfor (let i = groupStart, l = groupStart + groupCount; i < l; i += 3) {\n\t\t\t\t\t\t\tfor (let j = 0; j < 3; j++) {\n\t\t\t\t\t\t\t\tconst index1 = indices.getX(i + j);\n\t\t\t\t\t\t\t\tconst index2 = indices.getX(i + (j + 1) % 3);\n\t\t\t\t\t\t\t\tstart.fromBufferAttribute(position, index1);\n\t\t\t\t\t\t\t\tend.fromBufferAttribute(position, index2);\n\n\t\t\t\t\t\t\t\tif (isUniqueEdge(start, end, edges) === true) {\n\t\t\t\t\t\t\t\t\tvertices.push(start.x, start.y, start.z);\n\t\t\t\t\t\t\t\t\tvertices.push(end.x, end.y, end.z);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// non-indexed BufferGeometry\n\t\t\t\t\tconst position = geometry.attributes.position;\n\n\t\t\t\t\tfor (let i = 0, l = position.count / 3; i < l; i++) {\n\t\t\t\t\t\tfor (let j = 0; j < 3; j++) {\n\t\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\t\t\t\t\t\t\tconst index1 = 3 * i + j;\n\t\t\t\t\t\t\tconst index2 = 3 * i + (j + 1) % 3;\n\t\t\t\t\t\t\tstart.fromBufferAttribute(position, index1);\n\t\t\t\t\t\t\tend.fromBufferAttribute(position, index2);\n\n\t\t\t\t\t\t\tif (isUniqueEdge(start, end, edges) === true) {\n\t\t\t\t\t\t\t\tvertices.push(start.x, start.y, start.z);\n\t\t\t\t\t\t\t\tvertices.push(end.x, end.y, end.z);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // build geometry\n\n\n\t\t\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\t}\n\t\t}\n\n\t}\n\n\tfunction isUniqueEdge(start, end, edges) {\n\t\tconst hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;\n\t\tconst hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`; // coincident edge\n\n\t\tif (edges.has(hash1) === true || edges.has(hash2) === true) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tedges.add(hash1, hash2);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tvar Geometries = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tBoxGeometry: BoxGeometry,\n\t\tBoxBufferGeometry: BoxGeometry,\n\t\tCircleGeometry: CircleGeometry,\n\t\tCircleBufferGeometry: CircleGeometry,\n\t\tConeGeometry: ConeGeometry,\n\t\tConeBufferGeometry: ConeGeometry,\n\t\tCylinderGeometry: CylinderGeometry,\n\t\tCylinderBufferGeometry: CylinderGeometry,\n\t\tDodecahedronGeometry: DodecahedronGeometry,\n\t\tDodecahedronBufferGeometry: DodecahedronGeometry,\n\t\tEdgesGeometry: EdgesGeometry,\n\t\tExtrudeGeometry: ExtrudeGeometry,\n\t\tExtrudeBufferGeometry: ExtrudeGeometry,\n\t\tIcosahedronGeometry: IcosahedronGeometry,\n\t\tIcosahedronBufferGeometry: IcosahedronGeometry,\n\t\tLatheGeometry: LatheGeometry,\n\t\tLatheBufferGeometry: LatheGeometry,\n\t\tOctahedronGeometry: OctahedronGeometry,\n\t\tOctahedronBufferGeometry: OctahedronGeometry,\n\t\tPlaneGeometry: PlaneGeometry,\n\t\tPlaneBufferGeometry: PlaneGeometry,\n\t\tPolyhedronGeometry: PolyhedronGeometry,\n\t\tPolyhedronBufferGeometry: PolyhedronGeometry,\n\t\tRingGeometry: RingGeometry,\n\t\tRingBufferGeometry: RingGeometry,\n\t\tShapeGeometry: ShapeGeometry,\n\t\tShapeBufferGeometry: ShapeGeometry,\n\t\tSphereGeometry: SphereGeometry,\n\t\tSphereBufferGeometry: SphereGeometry,\n\t\tTetrahedronGeometry: TetrahedronGeometry,\n\t\tTetrahedronBufferGeometry: TetrahedronGeometry,\n\t\tTorusGeometry: TorusGeometry,\n\t\tTorusBufferGeometry: TorusGeometry,\n\t\tTorusKnotGeometry: TorusKnotGeometry,\n\t\tTorusKnotBufferGeometry: TorusKnotGeometry,\n\t\tTubeGeometry: TubeGeometry,\n\t\tTubeBufferGeometry: TubeGeometry,\n\t\tWireframeGeometry: WireframeGeometry\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <THREE.Color>\n\t * }\n\t */\n\n\tclass ShadowMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ShadowMaterial';\n\t\t\tthis.color = new Color(0x000000);\n\t\t\tthis.transparent = true;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tShadowMaterial.prototype.isShadowMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\troughness: <float>,\n\t *\tmetalness: <float>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\troughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tmetalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tenvMapIntensity: <float>\n\t *\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tclass MeshStandardMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.defines = {\n\t\t\t\t'STANDARD': ''\n\t\t\t};\n\t\t\tthis.type = 'MeshStandardMaterial';\n\t\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\t\tthis.roughness = 1.0;\n\t\t\tthis.metalness = 0.0;\n\t\t\tthis.map = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.emissive = new Color(0x000000);\n\t\t\tthis.emissiveIntensity = 1.0;\n\t\t\tthis.emissiveMap = null;\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.roughnessMap = null;\n\t\t\tthis.metalnessMap = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.envMap = null;\n\t\t\tthis.envMapIntensity = 1.0;\n\t\t\tthis.refractionRatio = 0.98;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.flatShading = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.defines = {\n\t\t\t\t'STANDARD': ''\n\t\t\t};\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.roughness = source.roughness;\n\t\t\tthis.metalness = source.metalness;\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.roughnessMap = source.roughnessMap;\n\t\t\tthis.metalnessMap = source.metalnessMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.envMapIntensity = source.envMapIntensity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tclearcoat: <float>,\n\t *\tclearcoatMap: new THREE.Texture( <Image> ),\n\t *\tclearcoatRoughness: <float>,\n\t *\tclearcoatRoughnessMap: new THREE.Texture( <Image> ),\n\t *\tclearcoatNormalScale: <Vector2>,\n\t *\tclearcoatNormalMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tior: <float>,\n\t *\treflectivity: <float>,\n\t *\n\t *\tsheen: <float>,\n\t *\tsheenColor: <Color>,\n\t *\tsheenColorMap: new THREE.Texture( <Image> ),\n\t *\tsheenRoughness: <float>,\n\t *\tsheenRoughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *\ttransmission: <float>,\n\t *\ttransmissionMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tthickness: <float>,\n\t *\tthicknessMap: new THREE.Texture( <Image> ),\n\t *\tattenuationDistance: <float>,\n\t *\tattenuationColor: <Color>,\n\t *\n\t *\tspecularIntensity: <float>,\n\t *\tspecularIntensityMap: new THREE.Texture( <Image> ),\n\t *\tspecularColor: <Color>,\n\t *\tspecularColorMap: new THREE.Texture( <Image> )\n\t * }\n\t */\n\n\tclass MeshPhysicalMaterial extends MeshStandardMaterial {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.defines = {\n\t\t\t\t'STANDARD': '',\n\t\t\t\t'PHYSICAL': ''\n\t\t\t};\n\t\t\tthis.type = 'MeshPhysicalMaterial';\n\t\t\tthis.clearcoatMap = null;\n\t\t\tthis.clearcoatRoughness = 0.0;\n\t\t\tthis.clearcoatRoughnessMap = null;\n\t\t\tthis.clearcoatNormalScale = new Vector2(1, 1);\n\t\t\tthis.clearcoatNormalMap = null;\n\t\t\tthis.ior = 1.5;\n\t\t\tObject.defineProperty(this, 'reflectivity', {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn clamp(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);\n\t\t\t\t},\n\t\t\t\tset: function (reflectivity) {\n\t\t\t\t\tthis.ior = (1 + 0.4 * reflectivity) / (1 - 0.4 * reflectivity);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.sheenColor = new Color(0x000000);\n\t\t\tthis.sheenColorMap = null;\n\t\t\tthis.sheenRoughness = 1.0;\n\t\t\tthis.sheenRoughnessMap = null;\n\t\t\tthis.transmissionMap = null;\n\t\t\tthis.thickness = 0.01;\n\t\t\tthis.thicknessMap = null;\n\t\t\tthis.attenuationDistance = 0.0;\n\t\t\tthis.attenuationColor = new Color(1, 1, 1);\n\t\t\tthis.specularIntensity = 1.0;\n\t\t\tthis.specularIntensityMap = null;\n\t\t\tthis.specularColor = new Color(1, 1, 1);\n\t\t\tthis.specularColorMap = null;\n\t\t\tthis._sheen = 0.0;\n\t\t\tthis._clearcoat = 0;\n\t\t\tthis._transmission = 0;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tget sheen() {\n\t\t\treturn this._sheen;\n\t\t}\n\n\t\tset sheen(value) {\n\t\t\tif (this._sheen > 0 !== value > 0) {\n\t\t\t\tthis.version++;\n\t\t\t}\n\n\t\t\tthis._sheen = value;\n\t\t}\n\n\t\tget clearcoat() {\n\t\t\treturn this._clearcoat;\n\t\t}\n\n\t\tset clearcoat(value) {\n\t\t\tif (this._clearcoat > 0 !== value > 0) {\n\t\t\t\tthis.version++;\n\t\t\t}\n\n\t\t\tthis._clearcoat = value;\n\t\t}\n\n\t\tget transmission() {\n\t\t\treturn this._transmission;\n\t\t}\n\n\t\tset transmission(value) {\n\t\t\tif (this._transmission > 0 !== value > 0) {\n\t\t\t\tthis.version++;\n\t\t\t}\n\n\t\t\tthis._transmission = value;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.defines = {\n\t\t\t\t'STANDARD': '',\n\t\t\t\t'PHYSICAL': ''\n\t\t\t};\n\t\t\tthis.clearcoat = source.clearcoat;\n\t\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\t\tthis.clearcoatNormalScale.copy(source.clearcoatNormalScale);\n\t\t\tthis.ior = source.ior;\n\t\t\tthis.sheen = source.sheen;\n\t\t\tthis.sheenColor.copy(source.sheenColor);\n\t\t\tthis.sheenColorMap = source.sheenColorMap;\n\t\t\tthis.sheenRoughness = source.sheenRoughness;\n\t\t\tthis.sheenRoughnessMap = source.sheenRoughnessMap;\n\t\t\tthis.transmission = source.transmission;\n\t\t\tthis.transmissionMap = source.transmissionMap;\n\t\t\tthis.thickness = source.thickness;\n\t\t\tthis.thicknessMap = source.thicknessMap;\n\t\t\tthis.attenuationDistance = source.attenuationDistance;\n\t\t\tthis.attenuationColor.copy(source.attenuationColor);\n\t\t\tthis.specularIntensity = source.specularIntensity;\n\t\t\tthis.specularIntensityMap = source.specularIntensityMap;\n\t\t\tthis.specularColor.copy(source.specularColor);\n\t\t\tthis.specularColorMap = source.specularColorMap;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\tspecular: <hex>,\n\t *\tshininess: <float>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.MultiplyOperation,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tclass MeshPhongMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshPhongMaterial';\n\t\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\t\tthis.specular = new Color(0x111111);\n\t\t\tthis.shininess = 30;\n\t\t\tthis.map = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.emissive = new Color(0x000000);\n\t\t\tthis.emissiveIntensity = 1.0;\n\t\t\tthis.emissiveMap = null;\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.specularMap = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.envMap = null;\n\t\t\tthis.combine = MultiplyOperation;\n\t\t\tthis.reflectivity = 1;\n\t\t\tthis.refractionRatio = 0.98;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.flatShading = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.specular.copy(source.specular);\n\t\t\tthis.shininess = source.shininess;\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.specularMap = source.specularMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.combine = source.combine;\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\tgradientMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t * }\n\t */\n\n\tclass MeshToonMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.defines = {\n\t\t\t\t'TOON': ''\n\t\t\t};\n\t\t\tthis.type = 'MeshToonMaterial';\n\t\t\tthis.color = new Color(0xffffff);\n\t\t\tthis.map = null;\n\t\t\tthis.gradientMap = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.emissive = new Color(0x000000);\n\t\t\tthis.emissiveIntensity = 1.0;\n\t\t\tthis.emissiveMap = null;\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.gradientMap = source.gradientMap;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\topacity: <float>,\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tclass MeshNormalMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshNormalMaterial';\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.fog = false;\n\t\t\tthis.flatShading = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.Multiply,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t * }\n\t */\n\n\tclass MeshLambertMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'MeshLambertMaterial';\n\t\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\t\tthis.map = null;\n\t\t\tthis.lightMap = null;\n\t\t\tthis.lightMapIntensity = 1.0;\n\t\t\tthis.aoMap = null;\n\t\t\tthis.aoMapIntensity = 1.0;\n\t\t\tthis.emissive = new Color(0x000000);\n\t\t\tthis.emissiveIntensity = 1.0;\n\t\t\tthis.emissiveMap = null;\n\t\t\tthis.specularMap = null;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.envMap = null;\n\t\t\tthis.combine = MultiplyOperation;\n\t\t\tthis.reflectivity = 1;\n\t\t\tthis.refractionRatio = 0.98;\n\t\t\tthis.wireframe = false;\n\t\t\tthis.wireframeLinewidth = 1;\n\t\t\tthis.wireframeLinecap = 'round';\n\t\t\tthis.wireframeLinejoin = 'round';\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.specularMap = source.specularMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.combine = source.combine;\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tmatcap: new THREE.Texture( <Image> ),\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tclass MeshMatcapMaterial extends Material {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.defines = {\n\t\t\t\t'MATCAP': ''\n\t\t\t};\n\t\t\tthis.type = 'MeshMatcapMaterial';\n\t\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\t\tthis.matcap = null;\n\t\t\tthis.map = null;\n\t\t\tthis.bumpMap = null;\n\t\t\tthis.bumpScale = 1;\n\t\t\tthis.normalMap = null;\n\t\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\t\tthis.normalScale = new Vector2(1, 1);\n\t\t\tthis.displacementMap = null;\n\t\t\tthis.displacementScale = 1;\n\t\t\tthis.displacementBias = 0;\n\t\t\tthis.alphaMap = null;\n\t\t\tthis.flatShading = false;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.defines = {\n\t\t\t\t'MATCAP': ''\n\t\t\t};\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.matcap = source.matcap;\n\t\t\tthis.map = source.map;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tlinewidth: <float>,\n\t *\n\t *\tscale: <float>,\n\t *\tdashSize: <float>,\n\t *\tgapSize: <float>\n\t * }\n\t */\n\n\tclass LineDashedMaterial extends LineBasicMaterial {\n\t\tconstructor(parameters) {\n\t\t\tsuper();\n\t\t\tthis.type = 'LineDashedMaterial';\n\t\t\tthis.scale = 1;\n\t\t\tthis.dashSize = 3;\n\t\t\tthis.gapSize = 1;\n\t\t\tthis.setValues(parameters);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.scale = source.scale;\n\t\t\tthis.dashSize = source.dashSize;\n\t\t\tthis.gapSize = source.gapSize;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n\tvar Materials = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tShadowMaterial: ShadowMaterial,\n\t\tSpriteMaterial: SpriteMaterial,\n\t\tRawShaderMaterial: RawShaderMaterial,\n\t\tShaderMaterial: ShaderMaterial,\n\t\tPointsMaterial: PointsMaterial,\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t\tMeshStandardMaterial: MeshStandardMaterial,\n\t\tMeshPhongMaterial: MeshPhongMaterial,\n\t\tMeshToonMaterial: MeshToonMaterial,\n\t\tMeshNormalMaterial: MeshNormalMaterial,\n\t\tMeshLambertMaterial: MeshLambertMaterial,\n\t\tMeshDepthMaterial: MeshDepthMaterial,\n\t\tMeshDistanceMaterial: MeshDistanceMaterial,\n\t\tMeshBasicMaterial: MeshBasicMaterial,\n\t\tMeshMatcapMaterial: MeshMatcapMaterial,\n\t\tLineDashedMaterial: LineDashedMaterial,\n\t\tLineBasicMaterial: LineBasicMaterial,\n\t\tMaterial: Material\n\t});\n\n\tconst AnimationUtils = {\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function (array, from, to) {\n\t\t\tif (AnimationUtils.isTypedArray(array)) {\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\t\treturn new array.constructor(array.subarray(from, to !== undefined ? to : array.length));\n\t\t\t}\n\n\t\t\treturn array.slice(from, to);\n\t\t},\n\t\t// converts an array to a specific type\n\t\tconvertArray: function (array, type, forceClone) {\n\t\t\tif (!array || // let 'undefined' and 'null' pass\n\t\t\t!forceClone && array.constructor === type) return array;\n\n\t\t\tif (typeof type.BYTES_PER_ELEMENT === 'number') {\n\t\t\t\treturn new type(array); // create typed array\n\t\t\t}\n\n\t\t\treturn Array.prototype.slice.call(array); // create Array\n\t\t},\n\t\tisTypedArray: function (object) {\n\t\t\treturn ArrayBuffer.isView(object) && !(object instanceof DataView);\n\t\t},\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function (times) {\n\t\t\tfunction compareTime(i, j) {\n\t\t\t\treturn times[i] - times[j];\n\t\t\t}\n\n\t\t\tconst n = times.length;\n\t\t\tconst result = new Array(n);\n\n\t\t\tfor (let i = 0; i !== n; ++i) result[i] = i;\n\n\t\t\tresult.sort(compareTime);\n\t\t\treturn result;\n\t\t},\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function (values, stride, order) {\n\t\t\tconst nValues = values.length;\n\t\t\tconst result = new values.constructor(nValues);\n\n\t\t\tfor (let i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {\n\t\t\t\tconst srcOffset = order[i] * stride;\n\n\t\t\t\tfor (let j = 0; j !== stride; ++j) {\n\t\t\t\t\tresult[dstOffset++] = values[srcOffset + j];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function (jsonKeys, times, values, valuePropertyName) {\n\t\t\tlet i = 1,\n\t\t\t\t\tkey = jsonKeys[0];\n\n\t\t\twhile (key !== undefined && key[valuePropertyName] === undefined) {\n\t\t\t\tkey = jsonKeys[i++];\n\t\t\t}\n\n\t\t\tif (key === undefined) return; // no data\n\n\t\t\tlet value = key[valuePropertyName];\n\t\t\tif (value === undefined) return; // no data\n\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalues.push.apply(values, value); // push all elements\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t} else if (value.toArray !== undefined) {\n\t\t\t\t// ...assume THREE.Math-ish\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalue.toArray(values, values.length);\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t} else {\n\t\t\t\t// otherwise push as-is\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t}\n\t\t},\n\t\tsubclip: function (sourceClip, name, startFrame, endFrame, fps = 30) {\n\t\t\tconst clip = sourceClip.clone();\n\t\t\tclip.name = name;\n\t\t\tconst tracks = [];\n\n\t\t\tfor (let i = 0; i < clip.tracks.length; ++i) {\n\t\t\t\tconst track = clip.tracks[i];\n\t\t\t\tconst valueSize = track.getValueSize();\n\t\t\t\tconst times = [];\n\t\t\t\tconst values = [];\n\n\t\t\t\tfor (let j = 0; j < track.times.length; ++j) {\n\t\t\t\t\tconst frame = track.times[j] * fps;\n\t\t\t\t\tif (frame < startFrame || frame >= endFrame) continue;\n\t\t\t\t\ttimes.push(track.times[j]);\n\n\t\t\t\t\tfor (let k = 0; k < valueSize; ++k) {\n\t\t\t\t\t\tvalues.push(track.values[j * valueSize + k]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (times.length === 0) continue;\n\t\t\t\ttrack.times = AnimationUtils.convertArray(times, track.times.constructor);\n\t\t\t\ttrack.values = AnimationUtils.convertArray(values, track.values.constructor);\n\t\t\t\ttracks.push(track);\n\t\t\t}\n\n\t\t\tclip.tracks = tracks; // find minimum .times value across all tracks in the trimmed clip\n\n\t\t\tlet minStartTime = Infinity;\n\n\t\t\tfor (let i = 0; i < clip.tracks.length; ++i) {\n\t\t\t\tif (minStartTime > clip.tracks[i].times[0]) {\n\t\t\t\t\tminStartTime = clip.tracks[i].times[0];\n\t\t\t\t}\n\t\t\t} // shift all tracks such that clip begins at t=0\n\n\n\t\t\tfor (let i = 0; i < clip.tracks.length; ++i) {\n\t\t\t\tclip.tracks[i].shift(-1 * minStartTime);\n\t\t\t}\n\n\t\t\tclip.resetDuration();\n\t\t\treturn clip;\n\t\t},\n\t\tmakeClipAdditive: function (targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30) {\n\t\t\tif (fps <= 0) fps = 30;\n\t\t\tconst numTracks = referenceClip.tracks.length;\n\t\t\tconst referenceTime = referenceFrame / fps; // Make each track's values relative to the values at the reference frame\n\n\t\t\tfor (let i = 0; i < numTracks; ++i) {\n\t\t\t\tconst referenceTrack = referenceClip.tracks[i];\n\t\t\t\tconst referenceTrackType = referenceTrack.ValueTypeName; // Skip this track if it's non-numeric\n\n\t\t\t\tif (referenceTrackType === 'bool' || referenceTrackType === 'string') continue; // Find the track in the target clip whose name and type matches the reference track\n\n\t\t\t\tconst targetTrack = targetClip.tracks.find(function (track) {\n\t\t\t\t\treturn track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;\n\t\t\t\t});\n\t\t\t\tif (targetTrack === undefined) continue;\n\t\t\t\tlet referenceOffset = 0;\n\t\t\t\tconst referenceValueSize = referenceTrack.getValueSize();\n\n\t\t\t\tif (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n\t\t\t\t\treferenceOffset = referenceValueSize / 3;\n\t\t\t\t}\n\n\t\t\t\tlet targetOffset = 0;\n\t\t\t\tconst targetValueSize = targetTrack.getValueSize();\n\n\t\t\t\tif (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n\t\t\t\t\ttargetOffset = targetValueSize / 3;\n\t\t\t\t}\n\n\t\t\t\tconst lastIndex = referenceTrack.times.length - 1;\n\t\t\t\tlet referenceValue; // Find the value to subtract out of the track\n\n\t\t\t\tif (referenceTime <= referenceTrack.times[0]) {\n\t\t\t\t\t// Reference frame is earlier than the first keyframe, so just use the first keyframe\n\t\t\t\t\tconst startIndex = referenceOffset;\n\t\t\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);\n\t\t\t\t} else if (referenceTime >= referenceTrack.times[lastIndex]) {\n\t\t\t\t\t// Reference frame is after the last keyframe, so just use the last keyframe\n\t\t\t\t\tconst startIndex = lastIndex * referenceValueSize + referenceOffset;\n\t\t\t\t\tconst endIndex = startIndex + referenceValueSize - referenceOffset;\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);\n\t\t\t\t} else {\n\t\t\t\t\t// Interpolate to the reference value\n\t\t\t\t\tconst interpolant = referenceTrack.createInterpolant();\n\t\t\t\t\tconst startIndex = referenceOffset;\n\t\t\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\t\t\tinterpolant.evaluate(referenceTime);\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(interpolant.resultBuffer, startIndex, endIndex);\n\t\t\t\t} // Conjugate the quaternion\n\n\n\t\t\t\tif (referenceTrackType === 'quaternion') {\n\t\t\t\t\tconst referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();\n\t\t\t\t\treferenceQuat.toArray(referenceValue);\n\t\t\t\t} // Subtract the reference value from all of the track values\n\n\n\t\t\t\tconst numTimes = targetTrack.times.length;\n\n\t\t\t\tfor (let j = 0; j < numTimes; ++j) {\n\t\t\t\t\tconst valueStart = j * targetValueSize + targetOffset;\n\n\t\t\t\t\tif (referenceTrackType === 'quaternion') {\n\t\t\t\t\t\t// Multiply the conjugate for quaternion track types\n\t\t\t\t\t\tQuaternion.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst valueEnd = targetValueSize - targetOffset * 2; // Subtract each value for all other numeric track types\n\n\t\t\t\t\t\tfor (let k = 0; k < valueEnd; ++k) {\n\t\t\t\t\t\t\ttargetTrack.values[valueStart + k] -= referenceValue[k];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttargetClip.blendMode = AdditiveAnimationBlendMode;\n\t\t\treturn targetClip;\n\t\t}\n\t};\n\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t */\n\tclass Interpolant {\n\t\tconstructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\t\tthis.parameterPositions = parameterPositions;\n\t\t\tthis._cachedIndex = 0;\n\t\t\tthis.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor(sampleSize);\n\t\t\tthis.sampleValues = sampleValues;\n\t\t\tthis.valueSize = sampleSize;\n\t\t\tthis.settings = null;\n\t\t\tthis.DefaultSettings_ = {};\n\t\t}\n\n\t\tevaluate(t) {\n\t\t\tconst pp = this.parameterPositions;\n\t\t\tlet i1 = this._cachedIndex,\n\t\t\t\t\tt1 = pp[i1],\n\t\t\t\t\tt0 = pp[i1 - 1];\n\n\t\t\tvalidate_interval: {\n\t\t\t\tseek: {\n\t\t\t\t\tlet right;\n\n\t\t\t\t\tlinear_scan: {\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if (!(t < t1)) {\n\t\t\t\t\t\t\tfor (let giveUpAt = i1 + 2;;) {\n\t\t\t\t\t\t\t\tif (t1 === undefined) {\n\t\t\t\t\t\t\t\t\tif (t < t0) break forward_scan; // after end\n\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_(i1 - 1, t, t0);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (i1 === giveUpAt) break; // this loop\n\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[++i1];\n\n\t\t\t\t\t\t\t\tif (t < t1) {\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} // prepare binary search on the right side of the index\n\n\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\t\t\t\t\t\t} //- slower code:\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\n\n\t\t\t\t\t\tif (!(t >= t0)) {\n\t\t\t\t\t\t\t// looping?\n\t\t\t\t\t\t\tconst t1global = pp[1];\n\n\t\t\t\t\t\t\tif (t < t1global) {\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\n\t\t\t\t\t\t\t\tt0 = t1global;\n\t\t\t\t\t\t\t} // linear reverse scan\n\n\n\t\t\t\t\t\t\tfor (let giveUpAt = i1 - 2;;) {\n\t\t\t\t\t\t\t\tif (t0 === undefined) {\n\t\t\t\t\t\t\t\t\t// before start\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_(0, t, t1);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (i1 === giveUpAt) break; // this loop\n\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[--i1 - 1];\n\n\t\t\t\t\t\t\t\tif (t >= t0) {\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} // prepare binary search on the left side of the index\n\n\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\t\t\t\t\t\t} // the interval is valid\n\n\n\t\t\t\t\t\tbreak validate_interval;\n\t\t\t\t\t} // linear scan\n\t\t\t\t\t// binary search\n\n\n\t\t\t\t\twhile (i1 < right) {\n\t\t\t\t\t\tconst mid = i1 + right >>> 1;\n\n\t\t\t\t\t\tif (t < pp[mid]) {\n\t\t\t\t\t\t\tright = mid;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ti1 = mid + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tt1 = pp[i1];\n\t\t\t\t\tt0 = pp[i1 - 1]; // check boundary cases, again\n\n\t\t\t\t\tif (t0 === undefined) {\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_(0, t, t1);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (t1 === undefined) {\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_(i1 - 1, t0, t);\n\t\t\t\t\t}\n\t\t\t\t} // seek\n\n\n\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\tthis.intervalChanged_(i1, t0, t1);\n\t\t\t} // validate_interval\n\n\n\t\t\treturn this.interpolate_(i1, t0, t, t1);\n\t\t}\n\n\t\tgetSettings_() {\n\t\t\treturn this.settings || this.DefaultSettings_;\n\t\t}\n\n\t\tcopySampleValue_(index) {\n\t\t\t// copies a sample value to the result buffer\n\t\t\tconst result = this.resultBuffer,\n\t\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toffset = index * stride;\n\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = values[offset + i];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t} // Template methods for derived classes:\n\n\n\t\tinterpolate_() {\n\t\t\tthrow new Error('call to abstract method'); // implementations shall return this.resultBuffer\n\t\t}\n\n\t\tintervalChanged_() {// empty\n\t\t}\n\n\t} // ALIAS DEFINITIONS\n\n\n\tInterpolant.prototype.beforeStart_ = Interpolant.prototype.copySampleValue_;\n\tInterpolant.prototype.afterEnd_ = Interpolant.prototype.copySampleValue_;\n\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t */\n\n\tclass CubicInterpolant extends Interpolant {\n\t\tconstructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\t\tsuper(parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\t\tthis._weightPrev = -0;\n\t\t\tthis._offsetPrev = -0;\n\t\t\tthis._weightNext = -0;\n\t\t\tthis._offsetNext = -0;\n\t\t\tthis.DefaultSettings_ = {\n\t\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t\t};\n\t\t}\n\n\t\tintervalChanged_(i1, t0, t1) {\n\t\t\tconst pp = this.parameterPositions;\n\t\t\tlet iPrev = i1 - 2,\n\t\t\t\t\tiNext = i1 + 1,\n\t\t\t\t\ttPrev = pp[iPrev],\n\t\t\t\t\ttNext = pp[iNext];\n\n\t\t\tif (tPrev === undefined) {\n\t\t\t\tswitch (this.getSettings_().endingStart) {\n\t\t\t\t\tcase ZeroSlopeEnding:\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[iPrev] - pp[iPrev + 1];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// ZeroCurvatureEnding\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tNext === undefined) {\n\t\t\t\tswitch (this.getSettings_().endingEnd) {\n\t\t\t\t\tcase ZeroSlopeEnding:\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[1] - pp[0];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// ZeroCurvatureEnding\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst halfDt = (t1 - t0) * 0.5,\n\t\t\t\t\t\tstride = this.valueSize;\n\t\t\tthis._weightPrev = halfDt / (t0 - tPrev);\n\t\t\tthis._weightNext = halfDt / (tNext - t1);\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\t\t}\n\n\t\tinterpolate_(i1, t0, t, t1) {\n\t\t\tconst result = this.resultBuffer,\n\t\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\to1 = i1 * stride,\n\t\t\t\t\t\to0 = o1 - stride,\n\t\t\t\t\t\toP = this._offsetPrev,\n\t\t\t\t\t\toN = this._offsetNext,\n\t\t\t\t\t\twP = this._weightPrev,\n\t\t\t\t\t\twN = this._weightNext,\n\t\t\t\t\t\tp = (t - t0) / (t1 - t0),\n\t\t\t\t\t\tpp = p * p,\n\t\t\t\t\t\tppp = pp * p; // evaluate polynomials\n\n\t\t\tconst sP = -wP * ppp + 2 * wP * pp - wP * p;\n\t\t\tconst s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;\n\t\t\tconst s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;\n\t\t\tconst sN = wN * ppp - wN * pp; // combine data linearly\n\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t}\n\n\tclass LinearInterpolant extends Interpolant {\n\t\tconstructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\t\tsuper(parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\t}\n\n\t\tinterpolate_(i1, t0, t, t1) {\n\t\t\tconst result = this.resultBuffer,\n\t\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toffset1 = i1 * stride,\n\t\t\t\t\t\toffset0 = offset1 - stride,\n\t\t\t\t\t\tweight1 = (t - t0) / (t1 - t0),\n\t\t\t\t\t\tweight0 = 1 - weight1;\n\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t}\n\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t */\n\n\tclass DiscreteInterpolant extends Interpolant {\n\t\tconstructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\t\tsuper(parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\t}\n\n\t\tinterpolate_(i1\n\t\t/*, t0, t, t1 */\n\t\t) {\n\t\t\treturn this.copySampleValue_(i1 - 1);\n\t\t}\n\n\t}\n\n\tclass KeyframeTrack {\n\t\tconstructor(name, times, values, interpolation) {\n\t\t\tif (name === undefined) throw new Error('THREE.KeyframeTrack: track name is undefined');\n\t\t\tif (times === undefined || times.length === 0) throw new Error('THREE.KeyframeTrack: no keyframes in track named ' + name);\n\t\t\tthis.name = name;\n\t\t\tthis.times = AnimationUtils.convertArray(times, this.TimeBufferType);\n\t\t\tthis.values = AnimationUtils.convertArray(values, this.ValueBufferType);\n\t\t\tthis.setInterpolation(interpolation || this.DefaultInterpolation);\n\t\t} // Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\n\n\t\tstatic toJSON(track) {\n\t\t\tconst trackType = track.constructor;\n\t\t\tlet json; // derived classes can define a static toJSON method\n\n\t\t\tif (trackType.toJSON !== this.toJSON) {\n\t\t\t\tjson = trackType.toJSON(track);\n\t\t\t} else {\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': AnimationUtils.convertArray(track.times, Array),\n\t\t\t\t\t'values': AnimationUtils.convertArray(track.values, Array)\n\t\t\t\t};\n\t\t\t\tconst interpolation = track.getInterpolation();\n\n\t\t\t\tif (interpolation !== track.DefaultInterpolation) {\n\t\t\t\t\tjson.interpolation = interpolation;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\t\treturn json;\n\t\t}\n\n\t\tInterpolantFactoryMethodDiscrete(result) {\n\t\t\treturn new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t}\n\n\t\tInterpolantFactoryMethodLinear(result) {\n\t\t\treturn new LinearInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t}\n\n\t\tInterpolantFactoryMethodSmooth(result) {\n\t\t\treturn new CubicInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t}\n\n\t\tsetInterpolation(interpolation) {\n\t\t\tlet factoryMethod;\n\n\t\t\tswitch (interpolation) {\n\t\t\t\tcase InterpolateDiscrete:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateLinear:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateSmooth:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (factoryMethod === undefined) {\n\t\t\t\tconst message = 'unsupported interpolation for ' + this.ValueTypeName + ' keyframe track named ' + this.name;\n\n\t\t\t\tif (this.createInterpolant === undefined) {\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif (interpolation !== this.DefaultInterpolation) {\n\t\t\t\t\t\tthis.setInterpolation(this.DefaultInterpolation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(message); // fatal, in this case\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconsole.warn('THREE.KeyframeTrack:', message);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tthis.createInterpolant = factoryMethod;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetInterpolation() {\n\t\t\tswitch (this.createInterpolant) {\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\t\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\t\t\t\t\treturn InterpolateLinear;\n\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\t\t\t\t\treturn InterpolateSmooth;\n\t\t\t}\n\t\t}\n\n\t\tgetValueSize() {\n\t\t\treturn this.values.length / this.times.length;\n\t\t} // move all keyframes either forwards or backwards in time\n\n\n\t\tshift(timeOffset) {\n\t\t\tif (timeOffset !== 0.0) {\n\t\t\t\tconst times = this.times;\n\n\t\t\t\tfor (let i = 0, n = times.length; i !== n; ++i) {\n\t\t\t\t\ttimes[i] += timeOffset;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\n\n\t\tscale(timeScale) {\n\t\t\tif (timeScale !== 1.0) {\n\t\t\t\tconst times = this.times;\n\n\t\t\t\tfor (let i = 0, n = times.length; i !== n; ++i) {\n\t\t\t\t\ttimes[i] *= timeScale;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\n\n\t\ttrim(startTime, endTime) {\n\t\t\tconst times = this.times,\n\t\t\t\t\t\tnKeys = times.length;\n\t\t\tlet from = 0,\n\t\t\t\t\tto = nKeys - 1;\n\n\t\t\twhile (from !== nKeys && times[from] < startTime) {\n\t\t\t\t++from;\n\t\t\t}\n\n\t\t\twhile (to !== -1 && times[to] > endTime) {\n\t\t\t\t--to;\n\t\t\t}\n\n\t\t\t++to; // inclusive -> exclusive bound\n\n\t\t\tif (from !== 0 || to !== nKeys) {\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif (from >= to) {\n\t\t\t\t\tto = Math.max(to, 1);\n\t\t\t\t\tfrom = to - 1;\n\t\t\t\t}\n\n\t\t\t\tconst stride = this.getValueSize();\n\t\t\t\tthis.times = AnimationUtils.arraySlice(times, from, to);\n\t\t\t\tthis.values = AnimationUtils.arraySlice(this.values, from * stride, to * stride);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\n\n\t\tvalidate() {\n\t\t\tlet valid = true;\n\t\t\tconst valueSize = this.getValueSize();\n\n\t\t\tif (valueSize - Math.floor(valueSize) !== 0) {\n\t\t\t\tconsole.error('THREE.KeyframeTrack: Invalid value size in track.', this);\n\t\t\t\tvalid = false;\n\t\t\t}\n\n\t\t\tconst times = this.times,\n\t\t\t\t\t\tvalues = this.values,\n\t\t\t\t\t\tnKeys = times.length;\n\n\t\t\tif (nKeys === 0) {\n\t\t\t\tconsole.error('THREE.KeyframeTrack: Track is empty.', this);\n\t\t\t\tvalid = false;\n\t\t\t}\n\n\t\t\tlet prevTime = null;\n\n\t\t\tfor (let i = 0; i !== nKeys; i++) {\n\t\t\t\tconst currTime = times[i];\n\n\t\t\t\tif (typeof currTime === 'number' && isNaN(currTime)) {\n\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime);\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (prevTime !== null && prevTime > currTime) {\n\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime);\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tprevTime = currTime;\n\t\t\t}\n\n\t\t\tif (values !== undefined) {\n\t\t\t\tif (AnimationUtils.isTypedArray(values)) {\n\t\t\t\t\tfor (let i = 0, n = values.length; i !== n; ++i) {\n\t\t\t\t\t\tconst value = values[i];\n\n\t\t\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Value is not a valid number.', this, i, value);\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn valid;\n\t\t} // removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\n\n\t\toptimize() {\n\t\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\t\tconst times = AnimationUtils.arraySlice(this.times),\n\t\t\t\t\t\tvalues = AnimationUtils.arraySlice(this.values),\n\t\t\t\t\t\tstride = this.getValueSize(),\n\t\t\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\t\t\t\t\t\tlastIndex = times.length - 1;\n\t\t\tlet writeIndex = 1;\n\n\t\t\tfor (let i = 1; i < lastIndex; ++i) {\n\t\t\t\tlet keep = false;\n\t\t\t\tconst time = times[i];\n\t\t\t\tconst timeNext = times[i + 1]; // remove adjacent keyframes scheduled at the same time\n\n\t\t\t\tif (time !== timeNext && (i !== 1 || time !== times[0])) {\n\t\t\t\t\tif (!smoothInterpolation) {\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\t\t\t\t\t\tconst offset = i * stride,\n\t\t\t\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\t\tfor (let j = 0; j !== stride; ++j) {\n\t\t\t\t\t\t\tconst value = values[offset + j];\n\n\t\t\t\t\t\t\tif (value !== values[offsetP + j] || value !== values[offsetN + j]) {\n\t\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t}\n\t\t\t\t} // in-place compaction\n\n\n\t\t\t\tif (keep) {\n\t\t\t\t\tif (i !== writeIndex) {\n\t\t\t\t\t\ttimes[writeIndex] = times[i];\n\t\t\t\t\t\tconst readOffset = i * stride,\n\t\t\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\t\tfor (let j = 0; j !== stride; ++j) {\n\t\t\t\t\t\t\tvalues[writeOffset + j] = values[readOffset + j];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t++writeIndex;\n\t\t\t\t}\n\t\t\t} // flush last keyframe (compaction looks ahead)\n\n\n\t\t\tif (lastIndex > 0) {\n\t\t\t\ttimes[writeIndex] = times[lastIndex];\n\n\t\t\t\tfor (let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j) {\n\t\t\t\t\tvalues[writeOffset + j] = values[readOffset + j];\n\t\t\t\t}\n\n\t\t\t\t++writeIndex;\n\t\t\t}\n\n\t\t\tif (writeIndex !== times.length) {\n\t\t\t\tthis.times = AnimationUtils.arraySlice(times, 0, writeIndex);\n\t\t\t\tthis.values = AnimationUtils.arraySlice(values, 0, writeIndex * stride);\n\t\t\t} else {\n\t\t\t\tthis.times = times;\n\t\t\t\tthis.values = values;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\tconst times = AnimationUtils.arraySlice(this.times, 0);\n\t\t\tconst values = AnimationUtils.arraySlice(this.values, 0);\n\t\t\tconst TypedKeyframeTrack = this.constructor;\n\t\t\tconst track = new TypedKeyframeTrack(this.name, times, values); // Interpolant argument to constructor is not saved, so copy the factory method directly.\n\n\t\t\ttrack.createInterpolant = this.createInterpolant;\n\t\t\treturn track;\n\t\t}\n\n\t}\n\n\tKeyframeTrack.prototype.TimeBufferType = Float32Array;\n\tKeyframeTrack.prototype.ValueBufferType = Float32Array;\n\tKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\n\t/**\n\t * A Track of Boolean keyframe values.\n\t */\n\n\tclass BooleanKeyframeTrack extends KeyframeTrack {}\n\n\tBooleanKeyframeTrack.prototype.ValueTypeName = 'bool';\n\tBooleanKeyframeTrack.prototype.ValueBufferType = Array;\n\tBooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\n\tBooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\n\tBooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined; // Note: Actually this track could have a optimized / compressed\n\n\t/**\n\t * A Track of keyframe values that represent color.\n\t */\n\n\tclass ColorKeyframeTrack extends KeyframeTrack {}\n\n\tColorKeyframeTrack.prototype.ValueTypeName = 'color'; // ValueBufferType is inherited\n\n\t/**\n\t * A Track of numeric keyframe values.\n\t */\n\n\tclass NumberKeyframeTrack extends KeyframeTrack {}\n\n\tNumberKeyframeTrack.prototype.ValueTypeName = 'number'; // ValueBufferType is inherited\n\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t */\n\n\tclass QuaternionLinearInterpolant extends Interpolant {\n\t\tconstructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\t\tsuper(parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\t}\n\n\t\tinterpolate_(i1, t0, t, t1) {\n\t\t\tconst result = this.resultBuffer,\n\t\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\talpha = (t - t0) / (t1 - t0);\n\t\t\tlet offset = i1 * stride;\n\n\t\t\tfor (let end = offset + stride; offset !== end; offset += 4) {\n\t\t\t\tQuaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t}\n\n\t/**\n\t * A Track of quaternion keyframe values.\n\t */\n\n\tclass QuaternionKeyframeTrack extends KeyframeTrack {\n\t\tInterpolantFactoryMethodLinear(result) {\n\t\t\treturn new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t}\n\n\t}\n\n\tQuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion'; // ValueBufferType is inherited\n\n\tQuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\tQuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n\t/**\n\t * A Track that interpolates Strings\n\t */\n\n\tclass StringKeyframeTrack extends KeyframeTrack {}\n\n\tStringKeyframeTrack.prototype.ValueTypeName = 'string';\n\tStringKeyframeTrack.prototype.ValueBufferType = Array;\n\tStringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\n\tStringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\n\tStringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n\t/**\n\t * A Track of vectored keyframe values.\n\t */\n\n\tclass VectorKeyframeTrack extends KeyframeTrack {}\n\n\tVectorKeyframeTrack.prototype.ValueTypeName = 'vector'; // ValueBufferType is inherited\n\n\tclass AnimationClip {\n\t\tconstructor(name, duration = -1, tracks, blendMode = NormalAnimationBlendMode) {\n\t\t\tthis.name = name;\n\t\t\tthis.tracks = tracks;\n\t\t\tthis.duration = duration;\n\t\t\tthis.blendMode = blendMode;\n\t\t\tthis.uuid = generateUUID(); // this means it should figure out its duration by scanning the tracks\n\n\t\t\tif (this.duration < 0) {\n\t\t\t\tthis.resetDuration();\n\t\t\t}\n\t\t}\n\n\t\tstatic parse(json) {\n\t\t\tconst tracks = [],\n\t\t\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\t\t\tframeTime = 1.0 / (json.fps || 1.0);\n\n\t\t\tfor (let i = 0, n = jsonTracks.length; i !== n; ++i) {\n\t\t\t\ttracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));\n\t\t\t}\n\n\t\t\tconst clip = new this(json.name, json.duration, tracks, json.blendMode);\n\t\t\tclip.uuid = json.uuid;\n\t\t\treturn clip;\n\t\t}\n\n\t\tstatic toJSON(clip) {\n\t\t\tconst tracks = [],\n\t\t\t\t\t\tclipTracks = clip.tracks;\n\t\t\tconst json = {\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks,\n\t\t\t\t'uuid': clip.uuid,\n\t\t\t\t'blendMode': clip.blendMode\n\t\t\t};\n\n\t\t\tfor (let i = 0, n = clipTracks.length; i !== n; ++i) {\n\t\t\t\ttracks.push(KeyframeTrack.toJSON(clipTracks[i]));\n\t\t\t}\n\n\t\t\treturn json;\n\t\t}\n\n\t\tstatic CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {\n\t\t\tconst numMorphTargets = morphTargetSequence.length;\n\t\t\tconst tracks = [];\n\n\t\t\tfor (let i = 0; i < numMorphTargets; i++) {\n\t\t\t\tlet times = [];\n\t\t\t\tlet values = [];\n\t\t\t\ttimes.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);\n\t\t\t\tvalues.push(0, 1, 0);\n\t\t\t\tconst order = AnimationUtils.getKeyframeOrder(times);\n\t\t\t\ttimes = AnimationUtils.sortedArray(times, 1, order);\n\t\t\t\tvalues = AnimationUtils.sortedArray(values, 1, order); // if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\n\t\t\t\tif (!noLoop && times[0] === 0) {\n\t\t\t\t\ttimes.push(numMorphTargets);\n\t\t\t\t\tvalues.push(values[0]);\n\t\t\t\t}\n\n\t\t\t\ttracks.push(new NumberKeyframeTrack('.morphTargetInfluences[' + morphTargetSequence[i].name + ']', times, values).scale(1.0 / fps));\n\t\t\t}\n\n\t\t\treturn new this(name, -1, tracks);\n\t\t}\n\n\t\tstatic findByName(objectOrClipArray, name) {\n\t\t\tlet clipArray = objectOrClipArray;\n\n\t\t\tif (!Array.isArray(objectOrClipArray)) {\n\t\t\t\tconst o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < clipArray.length; i++) {\n\t\t\t\tif (clipArray[i].name === name) {\n\t\t\t\t\treturn clipArray[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\tstatic CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {\n\t\t\tconst animationToMorphTargets = {}; // tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\n\t\t\tconst pattern = /^([\\w-]*?)([\\d]+)$/; // sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\n\t\t\tfor (let i = 0, il = morphTargets.length; i < il; i++) {\n\t\t\t\tconst morphTarget = morphTargets[i];\n\t\t\t\tconst parts = morphTarget.name.match(pattern);\n\n\t\t\t\tif (parts && parts.length > 1) {\n\t\t\t\t\tconst name = parts[1];\n\t\t\t\t\tlet animationMorphTargets = animationToMorphTargets[name];\n\n\t\t\t\t\tif (!animationMorphTargets) {\n\t\t\t\t\t\tanimationToMorphTargets[name] = animationMorphTargets = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationMorphTargets.push(morphTarget);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst clips = [];\n\n\t\t\tfor (const name in animationToMorphTargets) {\n\t\t\t\tclips.push(this.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));\n\t\t\t}\n\n\t\t\treturn clips;\n\t\t} // parse the animation.hierarchy format\n\n\n\t\tstatic parseAnimation(animation, bones) {\n\t\t\tif (!animation) {\n\t\t\t\tconsole.error('THREE.AnimationClip: No animation in JSONLoader data.');\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst addNonemptyTrack = function (trackType, trackName, animationKeys, propertyName, destTracks) {\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif (animationKeys.length !== 0) {\n\t\t\t\t\tconst times = [];\n\t\t\t\t\tconst values = [];\n\t\t\t\t\tAnimationUtils.flattenJSON(animationKeys, times, values, propertyName); // empty keys are filtered out, so check again\n\n\t\t\t\t\tif (times.length !== 0) {\n\t\t\t\t\t\tdestTracks.push(new trackType(trackName, times, values));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst tracks = [];\n\t\t\tconst clipName = animation.name || 'default';\n\t\t\tconst fps = animation.fps || 30;\n\t\t\tconst blendMode = animation.blendMode; // automatic length determination in AnimationClip.\n\n\t\t\tlet duration = animation.length || -1;\n\t\t\tconst hierarchyTracks = animation.hierarchy || [];\n\n\t\t\tfor (let h = 0; h < hierarchyTracks.length; h++) {\n\t\t\t\tconst animationKeys = hierarchyTracks[h].keys; // skip empty tracks\n\n\t\t\t\tif (!animationKeys || animationKeys.length === 0) continue; // process morph targets\n\n\t\t\t\tif (animationKeys[0].morphTargets) {\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tconst morphTargetNames = {};\n\t\t\t\t\tlet k;\n\n\t\t\t\t\tfor (k = 0; k < animationKeys.length; k++) {\n\t\t\t\t\t\tif (animationKeys[k].morphTargets) {\n\t\t\t\t\t\t\tfor (let m = 0; m < animationKeys[k].morphTargets.length; m++) {\n\t\t\t\t\t\t\t\tmorphTargetNames[animationKeys[k].morphTargets[m]] = -1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} // create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\n\n\t\t\t\t\tfor (const morphTargetName in morphTargetNames) {\n\t\t\t\t\t\tconst times = [];\n\t\t\t\t\t\tconst values = [];\n\n\t\t\t\t\t\tfor (let m = 0; m !== animationKeys[k].morphTargets.length; ++m) {\n\t\t\t\t\t\t\tconst animationKey = animationKeys[k];\n\t\t\t\t\t\t\ttimes.push(animationKey.time);\n\t\t\t\t\t\t\tvalues.push(animationKey.morphTarget === morphTargetName ? 1 : 0);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push(new NumberKeyframeTrack('.morphTargetInfluence[' + morphTargetName + ']', times, values));\n\t\t\t\t\t}\n\n\t\t\t\t\tduration = morphTargetNames.length * (fps || 1.0);\n\t\t\t\t} else {\n\t\t\t\t\t// ...assume skeletal animation\n\t\t\t\t\tconst boneName = '.bones[' + bones[h].name + ']';\n\t\t\t\t\taddNonemptyTrack(VectorKeyframeTrack, boneName + '.position', animationKeys, 'pos', tracks);\n\t\t\t\t\taddNonemptyTrack(QuaternionKeyframeTrack, boneName + '.quaternion', animationKeys, 'rot', tracks);\n\t\t\t\t\taddNonemptyTrack(VectorKeyframeTrack, boneName + '.scale', animationKeys, 'scl', tracks);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tracks.length === 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst clip = new this(clipName, duration, tracks, blendMode);\n\t\t\treturn clip;\n\t\t}\n\n\t\tresetDuration() {\n\t\t\tconst tracks = this.tracks;\n\t\t\tlet duration = 0;\n\n\t\t\tfor (let i = 0, n = tracks.length; i !== n; ++i) {\n\t\t\t\tconst track = this.tracks[i];\n\t\t\t\tduration = Math.max(duration, track.times[track.times.length - 1]);\n\t\t\t}\n\n\t\t\tthis.duration = duration;\n\t\t\treturn this;\n\t\t}\n\n\t\ttrim() {\n\t\t\tfor (let i = 0; i < this.tracks.length; i++) {\n\t\t\t\tthis.tracks[i].trim(0, this.duration);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tvalidate() {\n\t\t\tlet valid = true;\n\n\t\t\tfor (let i = 0; i < this.tracks.length; i++) {\n\t\t\t\tvalid = valid && this.tracks[i].validate();\n\t\t\t}\n\n\t\t\treturn valid;\n\t\t}\n\n\t\toptimize() {\n\t\t\tfor (let i = 0; i < this.tracks.length; i++) {\n\t\t\t\tthis.tracks[i].optimize();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\tconst tracks = [];\n\n\t\t\tfor (let i = 0; i < this.tracks.length; i++) {\n\t\t\t\ttracks.push(this.tracks[i].clone());\n\t\t\t}\n\n\t\t\treturn new this.constructor(this.name, this.duration, tracks, this.blendMode);\n\t\t}\n\n\t\ttoJSON() {\n\t\t\treturn this.constructor.toJSON(this);\n\t\t}\n\n\t}\n\n\tfunction getTrackTypeForValueTypeName(typeName) {\n\t\tswitch (typeName.toLowerCase()) {\n\t\t\tcase 'scalar':\n\t\t\tcase 'double':\n\t\t\tcase 'float':\n\t\t\tcase 'number':\n\t\t\tcase 'integer':\n\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\tcase 'vector':\n\t\t\tcase 'vector2':\n\t\t\tcase 'vector3':\n\t\t\tcase 'vector4':\n\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\tcase 'color':\n\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\tcase 'quaternion':\n\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\tcase 'bool':\n\t\t\tcase 'boolean':\n\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\tcase 'string':\n\t\t\t\treturn StringKeyframeTrack;\n\t\t}\n\n\t\tthrow new Error('THREE.KeyframeTrack: Unsupported typeName: ' + typeName);\n\t}\n\n\tfunction parseKeyframeTrack(json) {\n\t\tif (json.type === undefined) {\n\t\t\tthrow new Error('THREE.KeyframeTrack: track type undefined, can not parse');\n\t\t}\n\n\t\tconst trackType = getTrackTypeForValueTypeName(json.type);\n\n\t\tif (json.times === undefined) {\n\t\t\tconst times = [],\n\t\t\t\t\t\tvalues = [];\n\t\t\tAnimationUtils.flattenJSON(json.keys, times, values, 'value');\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\t\t} // derived classes can define a static parse method\n\n\n\t\tif (trackType.parse !== undefined) {\n\t\t\treturn trackType.parse(json);\n\t\t} else {\n\t\t\t// by default, we assume a constructor compatible with the base\n\t\t\treturn new trackType(json.name, json.times, json.values, json.interpolation);\n\t\t}\n\t}\n\n\tconst Cache = {\n\t\tenabled: false,\n\t\tfiles: {},\n\t\tadd: function (key, file) {\n\t\t\tif (this.enabled === false) return; // console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\t\tthis.files[key] = file;\n\t\t},\n\t\tget: function (key) {\n\t\t\tif (this.enabled === false) return; // console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\t\treturn this.files[key];\n\t\t},\n\t\tremove: function (key) {\n\t\t\tdelete this.files[key];\n\t\t},\n\t\tclear: function () {\n\t\t\tthis.files = {};\n\t\t}\n\t};\n\n\tclass LoadingManager {\n\t\tconstructor(onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tlet isLoading = false;\n\t\t\tlet itemsLoaded = 0;\n\t\t\tlet itemsTotal = 0;\n\t\t\tlet urlModifier = undefined;\n\t\t\tconst handlers = []; // Refer to #5689 for the reason why we don't set .onStart\n\t\t\t// in the constructor\n\n\t\t\tthis.onStart = undefined;\n\t\t\tthis.onLoad = onLoad;\n\t\t\tthis.onProgress = onProgress;\n\t\t\tthis.onError = onError;\n\n\t\t\tthis.itemStart = function (url) {\n\t\t\t\titemsTotal++;\n\n\t\t\t\tif (isLoading === false) {\n\t\t\t\t\tif (scope.onStart !== undefined) {\n\t\t\t\t\t\tscope.onStart(url, itemsLoaded, itemsTotal);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tisLoading = true;\n\t\t\t};\n\n\t\t\tthis.itemEnd = function (url) {\n\t\t\t\titemsLoaded++;\n\n\t\t\t\tif (scope.onProgress !== undefined) {\n\t\t\t\t\tscope.onProgress(url, itemsLoaded, itemsTotal);\n\t\t\t\t}\n\n\t\t\t\tif (itemsLoaded === itemsTotal) {\n\t\t\t\t\tisLoading = false;\n\n\t\t\t\t\tif (scope.onLoad !== undefined) {\n\t\t\t\t\t\tscope.onLoad();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.itemError = function (url) {\n\t\t\t\tif (scope.onError !== undefined) {\n\t\t\t\t\tscope.onError(url);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.resolveURL = function (url) {\n\t\t\t\tif (urlModifier) {\n\t\t\t\t\treturn urlModifier(url);\n\t\t\t\t}\n\n\t\t\t\treturn url;\n\t\t\t};\n\n\t\t\tthis.setURLModifier = function (transform) {\n\t\t\t\turlModifier = transform;\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\tthis.addHandler = function (regex, loader) {\n\t\t\t\thandlers.push(regex, loader);\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\tthis.removeHandler = function (regex) {\n\t\t\t\tconst index = handlers.indexOf(regex);\n\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\thandlers.splice(index, 2);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\tthis.getHandler = function (file) {\n\t\t\t\tfor (let i = 0, l = handlers.length; i < l; i += 2) {\n\t\t\t\t\tconst regex = handlers[i];\n\t\t\t\t\tconst loader = handlers[i + 1];\n\t\t\t\t\tif (regex.global) regex.lastIndex = 0; // see #17920\n\n\t\t\t\t\tif (regex.test(file)) {\n\t\t\t\t\t\treturn loader;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t};\n\t\t}\n\n\t}\n\n\tconst DefaultLoadingManager = new LoadingManager();\n\n\tclass Loader {\n\t\tconstructor(manager) {\n\t\t\tthis.manager = manager !== undefined ? manager : DefaultLoadingManager;\n\t\t\tthis.crossOrigin = 'anonymous';\n\t\t\tthis.withCredentials = false;\n\t\t\tthis.path = '';\n\t\t\tthis.resourcePath = '';\n\t\t\tthis.requestHeader = {};\n\t\t}\n\n\t\tload() {}\n\n\t\tloadAsync(url, onProgress) {\n\t\t\tconst scope = this;\n\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\tscope.load(url, resolve, onProgress, reject);\n\t\t\t});\n\t\t}\n\n\t\tparse() {}\n\n\t\tsetCrossOrigin(crossOrigin) {\n\t\t\tthis.crossOrigin = crossOrigin;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetWithCredentials(value) {\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetPath(path) {\n\t\t\tthis.path = path;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetResourcePath(resourcePath) {\n\t\t\tthis.resourcePath = resourcePath;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetRequestHeader(requestHeader) {\n\t\t\tthis.requestHeader = requestHeader;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tconst loading = {};\n\n\tclass FileLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tif (url === undefined) url = '';\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tconst cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tthis.manager.itemStart(url);\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tthis.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t} // Check if request is duplicate\n\n\n\t\t\tif (loading[url] !== undefined) {\n\t\t\t\tloading[url].push({\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t} // Initialise array for duplicate requests\n\n\n\t\t\tloading[url] = [];\n\t\t\tloading[url].push({\n\t\t\t\tonLoad: onLoad,\n\t\t\t\tonProgress: onProgress,\n\t\t\t\tonError: onError\n\t\t\t}); // create request\n\n\t\t\tconst req = new Request(url, {\n\t\t\t\theaders: new Headers(this.requestHeader),\n\t\t\t\tcredentials: this.withCredentials ? 'include' : 'same-origin' // An abort controller could be added within a future PR\n\n\t\t\t}); // start the fetch\n\n\t\t\tfetch(req).then(response => {\n\t\t\t\tif (response.status === 200 || response.status === 0) {\n\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\t\t\t\t\tif (response.status === 0) {\n\t\t\t\t\t\tconsole.warn('THREE.FileLoader: HTTP Status 0 received.');\n\t\t\t\t\t}\n\n\t\t\t\t\tconst callbacks = loading[url];\n\t\t\t\t\tconst reader = response.body.getReader();\n\t\t\t\t\tconst contentLength = response.headers.get('Content-Length');\n\t\t\t\t\tconst total = contentLength ? parseInt(contentLength) : 0;\n\t\t\t\t\tconst lengthComputable = total !== 0;\n\t\t\t\t\tlet loaded = 0; // periodically read data into the new stream tracking while download progress\n\n\t\t\t\t\treturn new ReadableStream({\n\t\t\t\t\t\tstart(controller) {\n\t\t\t\t\t\t\treadData();\n\n\t\t\t\t\t\t\tfunction readData() {\n\t\t\t\t\t\t\t\treader.read().then(({\n\t\t\t\t\t\t\t\t\tdone,\n\t\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\t}) => {\n\t\t\t\t\t\t\t\t\tif (done) {\n\t\t\t\t\t\t\t\t\t\tcontroller.close();\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tloaded += value.byteLength;\n\t\t\t\t\t\t\t\t\t\tconst event = new ProgressEvent('progress', {\n\t\t\t\t\t\t\t\t\t\t\tlengthComputable,\n\t\t\t\t\t\t\t\t\t\t\tloaded,\n\t\t\t\t\t\t\t\t\t\t\ttotal\n\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\t\t\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\t\t\t\t\t\t\tif (callback.onProgress) callback.onProgress(event);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tcontroller.enqueue(value);\n\t\t\t\t\t\t\t\t\t\treadData();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthrow Error(`fetch for \"${response.url}\" responded with ${response.status}: ${response.statusText}`);\n\t\t\t\t}\n\t\t\t}).then(stream => {\n\t\t\t\tconst response = new Response(stream);\n\n\t\t\t\tswitch (this.responseType) {\n\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\treturn response.arrayBuffer();\n\n\t\t\t\t\tcase 'blob':\n\t\t\t\t\t\treturn response.blob();\n\n\t\t\t\t\tcase 'document':\n\t\t\t\t\t\treturn response.text().then(text => {\n\t\t\t\t\t\t\tconst parser = new DOMParser();\n\t\t\t\t\t\t\treturn parser.parseFromString(text, this.mimeType);\n\t\t\t\t\t\t});\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\treturn response.json();\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn response.text();\n\t\t\t\t}\n\t\t\t}).then(data => {\n\t\t\t\t// Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t// error response bodies as proper responses to requests.\n\t\t\t\tCache.add(url, data);\n\t\t\t\tconst callbacks = loading[url];\n\t\t\t\tdelete loading[url];\n\n\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\tif (callback.onLoad) callback.onLoad(data);\n\t\t\t\t}\n\n\t\t\t\tthis.manager.itemEnd(url);\n\t\t\t}).catch(err => {\n\t\t\t\t// Abort errors and other errors are handled the same\n\t\t\t\tconst callbacks = loading[url];\n\t\t\t\tdelete loading[url];\n\n\t\t\t\tfor (let i = 0, il = callbacks.length; i < il; i++) {\n\t\t\t\t\tconst callback = callbacks[i];\n\t\t\t\t\tif (callback.onError) callback.onError(err);\n\t\t\t\t}\n\n\t\t\t\tthis.manager.itemError(url);\n\t\t\t\tthis.manager.itemEnd(url);\n\t\t\t});\n\t\t\tthis.manager.itemStart(url);\n\t\t}\n\n\t\tsetResponseType(value) {\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetMimeType(value) {\n\t\t\tthis.mimeType = value;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass AnimationLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json) {\n\t\t\tconst animations = [];\n\n\t\t\tfor (let i = 0; i < json.length; i++) {\n\t\t\t\tconst clip = AnimationClip.parse(json[i]);\n\t\t\t\tanimations.push(clip);\n\t\t\t}\n\n\t\t\treturn animations;\n\t\t}\n\n\t}\n\n\t/**\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tclass CompressedTextureLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst images = [];\n\t\t\tconst texture = new CompressedTexture();\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tlet loaded = 0;\n\n\t\t\tfunction loadTexture(i) {\n\t\t\t\tloader.load(url[i], function (buffer) {\n\t\t\t\t\tconst texDatas = scope.parse(buffer, true);\n\t\t\t\t\timages[i] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif (loaded === 6) {\n\t\t\t\t\t\tif (texDatas.mipmapCount === 1) texture.minFilter = LinearFilter;\n\t\t\t\t\t\ttexture.image = images;\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t\t}\n\t\t\t\t}, onProgress, onError);\n\t\t\t}\n\n\t\t\tif (Array.isArray(url)) {\n\t\t\t\tfor (let i = 0, il = url.length; i < il; ++i) {\n\t\t\t\t\tloadTexture(i);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\t\t\t\tloader.load(url, function (buffer) {\n\t\t\t\t\tconst texDatas = scope.parse(buffer, true);\n\n\t\t\t\t\tif (texDatas.isCubemap) {\n\t\t\t\t\t\tconst faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\t\tfor (let f = 0; f < faces; f++) {\n\t\t\t\t\t\t\timages[f] = {\n\t\t\t\t\t\t\t\tmipmaps: []\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tfor (let i = 0; i < texDatas.mipmapCount; i++) {\n\t\t\t\t\t\t\t\timages[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i]);\n\t\t\t\t\t\t\t\timages[f].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[f].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[f].height = texDatas.height;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttexture.image = images;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (texDatas.mipmapCount === 1) {\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t}, onProgress, onError);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t}\n\n\tclass ImageLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tconst scope = this;\n\t\t\tconst cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t}\n\n\t\t\tconst image = createElementNS('img');\n\n\t\t\tfunction onImageLoad() {\n\t\t\t\tremoveEventListeners();\n\t\t\t\tCache.add(url, this);\n\t\t\t\tif (onLoad) onLoad(this);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}\n\n\t\t\tfunction onImageError(event) {\n\t\t\t\tremoveEventListeners();\n\t\t\t\tif (onError) onError(event);\n\t\t\t\tscope.manager.itemError(url);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}\n\n\t\t\tfunction removeEventListeners() {\n\t\t\t\timage.removeEventListener('load', onImageLoad, false);\n\t\t\t\timage.removeEventListener('error', onImageError, false);\n\t\t\t}\n\n\t\t\timage.addEventListener('load', onImageLoad, false);\n\t\t\timage.addEventListener('error', onImageError, false);\n\n\t\t\tif (url.substr(0, 5) !== 'data:') {\n\t\t\t\tif (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;\n\t\t\t}\n\n\t\t\tscope.manager.itemStart(url);\n\t\t\timage.src = url;\n\t\t\treturn image;\n\t\t}\n\n\t}\n\n\tclass CubeTextureLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(urls, onLoad, onProgress, onError) {\n\t\t\tconst texture = new CubeTexture();\n\t\t\tconst loader = new ImageLoader(this.manager);\n\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\t\tloader.setPath(this.path);\n\t\t\tlet loaded = 0;\n\n\t\t\tfunction loadTexture(i) {\n\t\t\t\tloader.load(urls[i], function (image) {\n\t\t\t\t\ttexture.images[i] = image;\n\t\t\t\t\tloaded++;\n\n\t\t\t\t\tif (loaded === 6) {\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t\t}\n\t\t\t\t}, undefined, onError);\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < urls.length; ++i) {\n\t\t\t\tloadTexture(i);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t}\n\n\t/**\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tclass DataTextureLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst texture = new DataTexture();\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (buffer) {\n\t\t\t\tconst texData = scope.parse(buffer);\n\t\t\t\tif (!texData) return;\n\n\t\t\t\tif (texData.image !== undefined) {\n\t\t\t\t\ttexture.image = texData.image;\n\t\t\t\t} else if (texData.data !== undefined) {\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\t\t\t\t}\n\n\t\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\t\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\t\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\t\tif (texData.encoding !== undefined) {\n\t\t\t\t\ttexture.encoding = texData.encoding;\n\t\t\t\t}\n\n\t\t\t\tif (texData.flipY !== undefined) {\n\t\t\t\t\ttexture.flipY = texData.flipY;\n\t\t\t\t}\n\n\t\t\t\tif (texData.format !== undefined) {\n\t\t\t\t\ttexture.format = texData.format;\n\t\t\t\t}\n\n\t\t\t\tif (texData.type !== undefined) {\n\t\t\t\t\ttexture.type = texData.type;\n\t\t\t\t}\n\n\t\t\t\tif (texData.mipmaps !== undefined) {\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\t\t\t\t}\n\n\t\t\t\tif (texData.mipmapCount === 1) {\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t}\n\n\t\t\t\tif (texData.generateMipmaps !== undefined) {\n\t\t\t\t\ttexture.generateMipmaps = texData.generateMipmaps;\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\tif (onLoad) onLoad(texture, texData);\n\t\t\t}, onProgress, onError);\n\t\t\treturn texture;\n\t\t}\n\n\t}\n\n\tclass TextureLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst texture = new Texture();\n\t\t\tconst loader = new ImageLoader(this.manager);\n\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.load(url, function (image) {\n\t\t\t\ttexture.image = image;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif (onLoad !== undefined) {\n\t\t\t\t\tonLoad(texture);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t\treturn texture;\n\t\t}\n\n\t}\n\n\tclass Light extends Object3D {\n\t\tconstructor(color, intensity = 1) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Light';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.intensity = intensity;\n\t\t}\n\n\t\tdispose() {// Empty here in base class; some subclasses override.\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.intensity = source.intensity;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\t\t\tif (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();\n\t\t\tif (this.distance !== undefined) data.object.distance = this.distance;\n\t\t\tif (this.angle !== undefined) data.object.angle = this.angle;\n\t\t\tif (this.decay !== undefined) data.object.decay = this.decay;\n\t\t\tif (this.penumbra !== undefined) data.object.penumbra = this.penumbra;\n\t\t\tif (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tLight.prototype.isLight = true;\n\n\tclass HemisphereLight extends Light {\n\t\tconstructor(skyColor, groundColor, intensity) {\n\t\t\tsuper(skyColor, intensity);\n\t\t\tthis.type = 'HemisphereLight';\n\t\t\tthis.position.copy(Object3D.DefaultUp);\n\t\t\tthis.updateMatrix();\n\t\t\tthis.groundColor = new Color(groundColor);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.groundColor.copy(source.groundColor);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tHemisphereLight.prototype.isHemisphereLight = true;\n\n\tconst _projScreenMatrix$1 = /*@__PURE__*/new Matrix4();\n\n\tconst _lightPositionWorld$1 = /*@__PURE__*/new Vector3();\n\n\tconst _lookTarget$1 = /*@__PURE__*/new Vector3();\n\n\tclass LightShadow {\n\t\tconstructor(camera) {\n\t\t\tthis.camera = camera;\n\t\t\tthis.bias = 0;\n\t\t\tthis.normalBias = 0;\n\t\t\tthis.radius = 1;\n\t\t\tthis.blurSamples = 8;\n\t\t\tthis.mapSize = new Vector2(512, 512);\n\t\t\tthis.map = null;\n\t\t\tthis.mapPass = null;\n\t\t\tthis.matrix = new Matrix4();\n\t\t\tthis.autoUpdate = true;\n\t\t\tthis.needsUpdate = false;\n\t\t\tthis._frustum = new Frustum();\n\t\t\tthis._frameExtents = new Vector2(1, 1);\n\t\t\tthis._viewportCount = 1;\n\t\t\tthis._viewports = [new Vector4(0, 0, 1, 1)];\n\t\t}\n\n\t\tgetViewportCount() {\n\t\t\treturn this._viewportCount;\n\t\t}\n\n\t\tgetFrustum() {\n\t\t\treturn this._frustum;\n\t\t}\n\n\t\tupdateMatrices(light) {\n\t\t\tconst shadowCamera = this.camera;\n\t\t\tconst shadowMatrix = this.matrix;\n\n\t\t\t_lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\tshadowCamera.position.copy(_lightPositionWorld$1);\n\n\t\t\t_lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);\n\n\t\t\tshadowCamera.lookAt(_lookTarget$1);\n\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\t_projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);\n\n\t\t\tthis._frustum.setFromProjectionMatrix(_projScreenMatrix$1);\n\n\t\t\tshadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n\t\t\tshadowMatrix.multiply(shadowCamera.projectionMatrix);\n\t\t\tshadowMatrix.multiply(shadowCamera.matrixWorldInverse);\n\t\t}\n\n\t\tgetViewport(viewportIndex) {\n\t\t\treturn this._viewports[viewportIndex];\n\t\t}\n\n\t\tgetFrameExtents() {\n\t\t\treturn this._frameExtents;\n\t\t}\n\n\t\tdispose() {\n\t\t\tif (this.map) {\n\t\t\t\tthis.map.dispose();\n\t\t\t}\n\n\t\t\tif (this.mapPass) {\n\t\t\t\tthis.mapPass.dispose();\n\t\t\t}\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tthis.camera = source.camera.clone();\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\t\t\tthis.mapSize.copy(source.mapSize);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst object = {};\n\t\t\tif (this.bias !== 0) object.bias = this.bias;\n\t\t\tif (this.normalBias !== 0) object.normalBias = this.normalBias;\n\t\t\tif (this.radius !== 1) object.radius = this.radius;\n\t\t\tif (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();\n\t\t\tobject.camera = this.camera.toJSON(false).object;\n\t\t\tdelete object.camera.matrix;\n\t\t\treturn object;\n\t\t}\n\n\t}\n\n\tclass SpotLightShadow extends LightShadow {\n\t\tconstructor() {\n\t\t\tsuper(new PerspectiveCamera(50, 1, 0.5, 500));\n\t\t\tthis.focus = 1;\n\t\t}\n\n\t\tupdateMatrices(light) {\n\t\t\tconst camera = this.camera;\n\t\t\tconst fov = RAD2DEG * 2 * light.angle * this.focus;\n\t\t\tconst aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tconst far = light.distance || camera.far;\n\n\t\t\tif (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\t\t\t}\n\n\t\t\tsuper.updateMatrices(light);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.focus = source.focus;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSpotLightShadow.prototype.isSpotLightShadow = true;\n\n\tclass SpotLight extends Light {\n\t\tconstructor(color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 1) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'SpotLight';\n\t\t\tthis.position.copy(Object3D.DefaultUp);\n\t\t\tthis.updateMatrix();\n\t\t\tthis.target = new Object3D();\n\t\t\tthis.distance = distance;\n\t\t\tthis.angle = angle;\n\t\t\tthis.penumbra = penumbra;\n\t\t\tthis.decay = decay; // for physically correct lights, should be 2.\n\n\t\t\tthis.shadow = new SpotLightShadow();\n\t\t}\n\n\t\tget power() {\n\t\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\n\t\t\t// by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)\n\t\t\treturn this.intensity * Math.PI;\n\t\t}\n\n\t\tset power(power) {\n\t\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\n\t\t\tthis.intensity = power / Math.PI;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.shadow.dispose();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\t\t\tthis.target = source.target.clone();\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tSpotLight.prototype.isSpotLight = true;\n\n\tconst _projScreenMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _lightPositionWorld = /*@__PURE__*/new Vector3();\n\n\tconst _lookTarget = /*@__PURE__*/new Vector3();\n\n\tclass PointLightShadow extends LightShadow {\n\t\tconstructor() {\n\t\t\tsuper(new PerspectiveCamera(90, 1, 0.5, 500));\n\t\t\tthis._frameExtents = new Vector2(4, 2);\n\t\t\tthis._viewportCount = 6;\n\t\t\tthis._viewports = [// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//\txzXZ\n\t\t\t//\t y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\t\t\t// positive X\n\t\t\tnew Vector4(2, 1, 1, 1), // negative X\n\t\t\tnew Vector4(0, 1, 1, 1), // positive Z\n\t\t\tnew Vector4(3, 1, 1, 1), // negative Z\n\t\t\tnew Vector4(1, 1, 1, 1), // positive Y\n\t\t\tnew Vector4(3, 0, 1, 1), // negative Y\n\t\t\tnew Vector4(1, 0, 1, 1)];\n\t\t\tthis._cubeDirections = [new Vector3(1, 0, 0), new Vector3(-1, 0, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1), new Vector3(0, 1, 0), new Vector3(0, -1, 0)];\n\t\t\tthis._cubeUps = [new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1)];\n\t\t}\n\n\t\tupdateMatrices(light, viewportIndex = 0) {\n\t\t\tconst camera = this.camera;\n\t\t\tconst shadowMatrix = this.matrix;\n\t\t\tconst far = light.distance || camera.far;\n\n\t\t\tif (far !== camera.far) {\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\t\t\t}\n\n\t\t\t_lightPositionWorld.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\tcamera.position.copy(_lightPositionWorld);\n\n\t\t\t_lookTarget.copy(camera.position);\n\n\t\t\t_lookTarget.add(this._cubeDirections[viewportIndex]);\n\n\t\t\tcamera.up.copy(this._cubeUps[viewportIndex]);\n\t\t\tcamera.lookAt(_lookTarget);\n\t\t\tcamera.updateMatrixWorld();\n\t\t\tshadowMatrix.makeTranslation(-_lightPositionWorld.x, -_lightPositionWorld.y, -_lightPositionWorld.z);\n\n\t\t\t_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n\t\t\tthis._frustum.setFromProjectionMatrix(_projScreenMatrix);\n\t\t}\n\n\t}\n\n\tPointLightShadow.prototype.isPointLightShadow = true;\n\n\tclass PointLight extends Light {\n\t\tconstructor(color, intensity, distance = 0, decay = 1) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'PointLight';\n\t\t\tthis.distance = distance;\n\t\t\tthis.decay = decay; // for physically correct lights, should be 2.\n\n\t\t\tthis.shadow = new PointLightShadow();\n\t\t}\n\n\t\tget power() {\n\t\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\n\t\t\t// for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)\n\t\t\treturn this.intensity * 4 * Math.PI;\n\t\t}\n\n\t\tset power(power) {\n\t\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\n\t\t\tthis.intensity = power / (4 * Math.PI);\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.shadow.dispose();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tPointLight.prototype.isPointLight = true;\n\n\tclass DirectionalLightShadow extends LightShadow {\n\t\tconstructor() {\n\t\t\tsuper(new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));\n\t\t}\n\n\t}\n\n\tDirectionalLightShadow.prototype.isDirectionalLightShadow = true;\n\n\tclass DirectionalLight extends Light {\n\t\tconstructor(color, intensity) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'DirectionalLight';\n\t\t\tthis.position.copy(Object3D.DefaultUp);\n\t\t\tthis.updateMatrix();\n\t\t\tthis.target = new Object3D();\n\t\t\tthis.shadow = new DirectionalLightShadow();\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.shadow.dispose();\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.target = source.target.clone();\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tDirectionalLight.prototype.isDirectionalLight = true;\n\n\tclass AmbientLight extends Light {\n\t\tconstructor(color, intensity) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'AmbientLight';\n\t\t}\n\n\t}\n\n\tAmbientLight.prototype.isAmbientLight = true;\n\n\tclass RectAreaLight extends Light {\n\t\tconstructor(color, intensity, width = 10, height = 10) {\n\t\t\tsuper(color, intensity);\n\t\t\tthis.type = 'RectAreaLight';\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t}\n\n\t\tget power() {\n\t\t\t// compute the light's luminous power (in lumens) from its intensity (in nits)\n\t\t\treturn this.intensity * this.width * this.height * Math.PI;\n\t\t}\n\n\t\tset power(power) {\n\t\t\t// set the light's intensity (in nits) from the desired luminous power (in lumens)\n\t\t\tthis.intensity = power / (this.width * this.height * Math.PI);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.width = this.width;\n\t\t\tdata.object.height = this.height;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tRectAreaLight.prototype.isRectAreaLight = true;\n\n\t/**\n\t * Primary reference:\n\t *\t https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t *\n\t * Secondary reference:\n\t *\t https://www.ppsloan.org/publications/StupidSH36.pdf\n\t */\n\t// 3-band SH defined by 9 coefficients\n\n\tclass SphericalHarmonics3 {\n\t\tconstructor() {\n\t\t\tthis.coefficients = [];\n\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients.push(new Vector3());\n\t\t\t}\n\t\t}\n\n\t\tset(coefficients) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].copy(coefficients[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tzero() {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].set(0, 0, 0);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // get the radiance in the direction of the normal\n\t\t// target is a Vector3\n\n\n\t\tgetAt(normal, target) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tconst x = normal.x,\n\t\t\t\t\t\ty = normal.y,\n\t\t\t\t\t\tz = normal.z;\n\t\t\tconst coeff = this.coefficients; // band 0\n\n\t\t\ttarget.copy(coeff[0]).multiplyScalar(0.282095); // band 1\n\n\t\t\ttarget.addScaledVector(coeff[1], 0.488603 * y);\n\t\t\ttarget.addScaledVector(coeff[2], 0.488603 * z);\n\t\t\ttarget.addScaledVector(coeff[3], 0.488603 * x); // band 2\n\n\t\t\ttarget.addScaledVector(coeff[4], 1.092548 * (x * y));\n\t\t\ttarget.addScaledVector(coeff[5], 1.092548 * (y * z));\n\t\t\ttarget.addScaledVector(coeff[6], 0.315392 * (3.0 * z * z - 1.0));\n\t\t\ttarget.addScaledVector(coeff[7], 1.092548 * (x * z));\n\t\t\ttarget.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));\n\t\t\treturn target;\n\t\t} // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t\t// target is a Vector3\n\t\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\n\n\t\tgetIrradianceAt(normal, target) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tconst x = normal.x,\n\t\t\t\t\t\ty = normal.y,\n\t\t\t\t\t\tz = normal.z;\n\t\t\tconst coeff = this.coefficients; // band 0\n\n\t\t\ttarget.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095\n\t\t\t// band 1\n\n\t\t\ttarget.addScaledVector(coeff[1], 2.0 * 0.511664 * y); // ( 2 * π / 3 ) * 0.488603\n\n\t\t\ttarget.addScaledVector(coeff[2], 2.0 * 0.511664 * z);\n\t\t\ttarget.addScaledVector(coeff[3], 2.0 * 0.511664 * x); // band 2\n\n\t\t\ttarget.addScaledVector(coeff[4], 2.0 * 0.429043 * x * y); // ( π / 4 ) * 1.092548\n\n\t\t\ttarget.addScaledVector(coeff[5], 2.0 * 0.429043 * y * z);\n\t\t\ttarget.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3\n\n\t\t\ttarget.addScaledVector(coeff[7], 2.0 * 0.429043 * x * z);\n\t\t\ttarget.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274\n\n\t\t\treturn target;\n\t\t}\n\n\t\tadd(sh) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].add(sh.coefficients[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\taddScaledSH(sh, s) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].addScaledVector(sh.coefficients[i], s);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tscale(s) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].multiplyScalar(s);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tlerp(sh, alpha) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].lerp(sh.coefficients[i], alpha);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(sh) {\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tif (!this.coefficients[i].equals(sh.coefficients[i])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tcopy(sh) {\n\t\t\treturn this.set(sh.coefficients);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tfromArray(array, offset = 0) {\n\t\t\tconst coefficients = this.coefficients;\n\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tcoefficients[i].fromArray(array, offset + i * 3);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\ttoArray(array = [], offset = 0) {\n\t\t\tconst coefficients = this.coefficients;\n\n\t\t\tfor (let i = 0; i < 9; i++) {\n\t\t\t\tcoefficients[i].toArray(array, offset + i * 3);\n\t\t\t}\n\n\t\t\treturn array;\n\t\t} // evaluate the basis functions\n\t\t// shBasis is an Array[ 9 ]\n\n\n\t\tstatic getBasisAt(normal, shBasis) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tconst x = normal.x,\n\t\t\t\t\t\ty = normal.y,\n\t\t\t\t\t\tz = normal.z; // band 0\n\n\t\t\tshBasis[0] = 0.282095; // band 1\n\n\t\t\tshBasis[1] = 0.488603 * y;\n\t\t\tshBasis[2] = 0.488603 * z;\n\t\t\tshBasis[3] = 0.488603 * x; // band 2\n\n\t\t\tshBasis[4] = 1.092548 * x * y;\n\t\t\tshBasis[5] = 1.092548 * y * z;\n\t\t\tshBasis[6] = 0.315392 * (3 * z * z - 1);\n\t\t\tshBasis[7] = 1.092548 * x * z;\n\t\t\tshBasis[8] = 0.546274 * (x * x - y * y);\n\t\t}\n\n\t}\n\n\tSphericalHarmonics3.prototype.isSphericalHarmonics3 = true;\n\n\tclass LightProbe extends Light {\n\t\tconstructor(sh = new SphericalHarmonics3(), intensity = 1) {\n\t\t\tsuper(undefined, intensity);\n\t\t\tthis.sh = sh;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.sh.copy(source.sh);\n\t\t\treturn this;\n\t\t}\n\n\t\tfromJSON(json) {\n\t\t\tthis.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\n\t\t\tthis.sh.fromArray(json.sh);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoJSON(meta) {\n\t\t\tconst data = super.toJSON(meta);\n\t\t\tdata.object.sh = this.sh.toArray();\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tLightProbe.prototype.isLightProbe = true;\n\n\tclass MaterialLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t\tthis.textures = {};\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(scope.manager);\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json) {\n\t\t\tconst textures = this.textures;\n\n\t\t\tfunction getTexture(name) {\n\t\t\t\tif (textures[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.MaterialLoader: Undefined texture', name);\n\t\t\t\t}\n\n\t\t\t\treturn textures[name];\n\t\t\t}\n\n\t\t\tconst material = new Materials[json.type]();\n\t\t\tif (json.uuid !== undefined) material.uuid = json.uuid;\n\t\t\tif (json.name !== undefined) material.name = json.name;\n\t\t\tif (json.color !== undefined && material.color !== undefined) material.color.setHex(json.color);\n\t\t\tif (json.roughness !== undefined) material.roughness = json.roughness;\n\t\t\tif (json.metalness !== undefined) material.metalness = json.metalness;\n\t\t\tif (json.sheen !== undefined) material.sheen = json.sheen;\n\t\t\tif (json.sheenColor !== undefined) material.sheenColor = new Color().setHex(json.sheenColor);\n\t\t\tif (json.sheenRoughness !== undefined) material.sheenRoughness = json.sheenRoughness;\n\t\t\tif (json.emissive !== undefined && material.emissive !== undefined) material.emissive.setHex(json.emissive);\n\t\t\tif (json.specular !== undefined && material.specular !== undefined) material.specular.setHex(json.specular);\n\t\t\tif (json.specularIntensity !== undefined) material.specularIntensity = json.specularIntensity;\n\t\t\tif (json.specularColor !== undefined && material.specularColor !== undefined) material.specularColor.setHex(json.specularColor);\n\t\t\tif (json.shininess !== undefined) material.shininess = json.shininess;\n\t\t\tif (json.clearcoat !== undefined) material.clearcoat = json.clearcoat;\n\t\t\tif (json.clearcoatRoughness !== undefined) material.clearcoatRoughness = json.clearcoatRoughness;\n\t\t\tif (json.transmission !== undefined) material.transmission = json.transmission;\n\t\t\tif (json.thickness !== undefined) material.thickness = json.thickness;\n\t\t\tif (json.attenuationDistance !== undefined) material.attenuationDistance = json.attenuationDistance;\n\t\t\tif (json.attenuationColor !== undefined && material.attenuationColor !== undefined) material.attenuationColor.setHex(json.attenuationColor);\n\t\t\tif (json.fog !== undefined) material.fog = json.fog;\n\t\t\tif (json.flatShading !== undefined) material.flatShading = json.flatShading;\n\t\t\tif (json.blending !== undefined) material.blending = json.blending;\n\t\t\tif (json.combine !== undefined) material.combine = json.combine;\n\t\t\tif (json.side !== undefined) material.side = json.side;\n\t\t\tif (json.shadowSide !== undefined) material.shadowSide = json.shadowSide;\n\t\t\tif (json.opacity !== undefined) material.opacity = json.opacity;\n\t\t\tif (json.format !== undefined) material.format = json.format;\n\t\t\tif (json.transparent !== undefined) material.transparent = json.transparent;\n\t\t\tif (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;\n\t\t\tif (json.depthTest !== undefined) material.depthTest = json.depthTest;\n\t\t\tif (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;\n\t\t\tif (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;\n\t\t\tif (json.stencilWrite !== undefined) material.stencilWrite = json.stencilWrite;\n\t\t\tif (json.stencilWriteMask !== undefined) material.stencilWriteMask = json.stencilWriteMask;\n\t\t\tif (json.stencilFunc !== undefined) material.stencilFunc = json.stencilFunc;\n\t\t\tif (json.stencilRef !== undefined) material.stencilRef = json.stencilRef;\n\t\t\tif (json.stencilFuncMask !== undefined) material.stencilFuncMask = json.stencilFuncMask;\n\t\t\tif (json.stencilFail !== undefined) material.stencilFail = json.stencilFail;\n\t\t\tif (json.stencilZFail !== undefined) material.stencilZFail = json.stencilZFail;\n\t\t\tif (json.stencilZPass !== undefined) material.stencilZPass = json.stencilZPass;\n\t\t\tif (json.wireframe !== undefined) material.wireframe = json.wireframe;\n\t\t\tif (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\t\tif (json.wireframeLinecap !== undefined) material.wireframeLinecap = json.wireframeLinecap;\n\t\t\tif (json.wireframeLinejoin !== undefined) material.wireframeLinejoin = json.wireframeLinejoin;\n\t\t\tif (json.rotation !== undefined) material.rotation = json.rotation;\n\t\t\tif (json.linewidth !== 1) material.linewidth = json.linewidth;\n\t\t\tif (json.dashSize !== undefined) material.dashSize = json.dashSize;\n\t\t\tif (json.gapSize !== undefined) material.gapSize = json.gapSize;\n\t\t\tif (json.scale !== undefined) material.scale = json.scale;\n\t\t\tif (json.polygonOffset !== undefined) material.polygonOffset = json.polygonOffset;\n\t\t\tif (json.polygonOffsetFactor !== undefined) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\t\tif (json.polygonOffsetUnits !== undefined) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\t\t\tif (json.dithering !== undefined) material.dithering = json.dithering;\n\t\t\tif (json.alphaToCoverage !== undefined) material.alphaToCoverage = json.alphaToCoverage;\n\t\t\tif (json.premultipliedAlpha !== undefined) material.premultipliedAlpha = json.premultipliedAlpha;\n\t\t\tif (json.visible !== undefined) material.visible = json.visible;\n\t\t\tif (json.toneMapped !== undefined) material.toneMapped = json.toneMapped;\n\t\t\tif (json.userData !== undefined) material.userData = json.userData;\n\n\t\t\tif (json.vertexColors !== undefined) {\n\t\t\t\tif (typeof json.vertexColors === 'number') {\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors > 0 ? true : false;\n\t\t\t\t} else {\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\t\t\t\t}\n\t\t\t} // Shader Material\n\n\n\t\t\tif (json.uniforms !== undefined) {\n\t\t\t\tfor (const name in json.uniforms) {\n\t\t\t\t\tconst uniform = json.uniforms[name];\n\t\t\t\t\tmaterial.uniforms[name] = {};\n\n\t\t\t\t\tswitch (uniform.type) {\n\t\t\t\t\t\tcase 't':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = getTexture(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Color().setHex(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector2().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector3().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector4().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Matrix3().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Matrix4().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = uniform.value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (json.defines !== undefined) material.defines = json.defines;\n\t\t\tif (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;\n\t\t\tif (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;\n\n\t\t\tif (json.extensions !== undefined) {\n\t\t\t\tfor (const key in json.extensions) {\n\t\t\t\t\tmaterial.extensions[key] = json.extensions[key];\n\t\t\t\t}\n\t\t\t} // Deprecated\n\n\n\t\t\tif (json.shading !== undefined) material.flatShading = json.shading === 1; // THREE.FlatShading\n\t\t\t// for PointsMaterial\n\n\t\t\tif (json.size !== undefined) material.size = json.size;\n\t\t\tif (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation; // maps\n\n\t\t\tif (json.map !== undefined) material.map = getTexture(json.map);\n\t\t\tif (json.matcap !== undefined) material.matcap = getTexture(json.matcap);\n\t\t\tif (json.alphaMap !== undefined) material.alphaMap = getTexture(json.alphaMap);\n\t\t\tif (json.bumpMap !== undefined) material.bumpMap = getTexture(json.bumpMap);\n\t\t\tif (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;\n\t\t\tif (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);\n\t\t\tif (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;\n\n\t\t\tif (json.normalScale !== undefined) {\n\t\t\t\tlet normalScale = json.normalScale;\n\n\t\t\t\tif (Array.isArray(normalScale) === false) {\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\t\t\t\t\tnormalScale = [normalScale, normalScale];\n\t\t\t\t}\n\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray(normalScale);\n\t\t\t}\n\n\t\t\tif (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);\n\t\t\tif (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;\n\t\t\tif (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;\n\t\t\tif (json.roughnessMap !== undefined) material.roughnessMap = getTexture(json.roughnessMap);\n\t\t\tif (json.metalnessMap !== undefined) material.metalnessMap = getTexture(json.metalnessMap);\n\t\t\tif (json.emissiveMap !== undefined) material.emissiveMap = getTexture(json.emissiveMap);\n\t\t\tif (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;\n\t\t\tif (json.specularMap !== undefined) material.specularMap = getTexture(json.specularMap);\n\t\t\tif (json.specularIntensityMap !== undefined) material.specularIntensityMap = getTexture(json.specularIntensityMap);\n\t\t\tif (json.specularColorMap !== undefined) material.specularColorMap = getTexture(json.specularColorMap);\n\t\t\tif (json.envMap !== undefined) material.envMap = getTexture(json.envMap);\n\t\t\tif (json.envMapIntensity !== undefined) material.envMapIntensity = json.envMapIntensity;\n\t\t\tif (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;\n\t\t\tif (json.refractionRatio !== undefined) material.refractionRatio = json.refractionRatio;\n\t\t\tif (json.lightMap !== undefined) material.lightMap = getTexture(json.lightMap);\n\t\t\tif (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;\n\t\t\tif (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);\n\t\t\tif (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity;\n\t\t\tif (json.gradientMap !== undefined) material.gradientMap = getTexture(json.gradientMap);\n\t\t\tif (json.clearcoatMap !== undefined) material.clearcoatMap = getTexture(json.clearcoatMap);\n\t\t\tif (json.clearcoatRoughnessMap !== undefined) material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);\n\t\t\tif (json.clearcoatNormalMap !== undefined) material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);\n\t\t\tif (json.clearcoatNormalScale !== undefined) material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale);\n\t\t\tif (json.transmissionMap !== undefined) material.transmissionMap = getTexture(json.transmissionMap);\n\t\t\tif (json.thicknessMap !== undefined) material.thicknessMap = getTexture(json.thicknessMap);\n\t\t\tif (json.sheenColorMap !== undefined) material.sheenColorMap = getTexture(json.sheenColorMap);\n\t\t\tif (json.sheenRoughnessMap !== undefined) material.sheenRoughnessMap = getTexture(json.sheenRoughnessMap);\n\t\t\treturn material;\n\t\t}\n\n\t\tsetTextures(value) {\n\t\t\tthis.textures = value;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass LoaderUtils {\n\t\tstatic decodeText(array) {\n\t\t\tif (typeof TextDecoder !== 'undefined') {\n\t\t\t\treturn new TextDecoder().decode(array);\n\t\t\t} // Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\n\t\t\tlet s = '';\n\n\t\t\tfor (let i = 0, il = array.length; i < il; i++) {\n\t\t\t\t// Implicitly assumes little-endian.\n\t\t\t\ts += String.fromCharCode(array[i]);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t// merges multi-byte utf-8 characters.\n\t\t\t\treturn decodeURIComponent(escape(s));\n\t\t\t} catch (e) {\n\t\t\t\t// see #16358\n\t\t\t\treturn s;\n\t\t\t}\n\t\t}\n\n\t\tstatic extractUrlBase(url) {\n\t\t\tconst index = url.lastIndexOf('/');\n\t\t\tif (index === -1) return './';\n\t\t\treturn url.substr(0, index + 1);\n\t\t}\n\n\t\tstatic resolveURL(url, path) {\n\t\t\t// Invalid URL\n\t\t\tif (typeof url !== 'string' || url === '') return ''; // Host Relative URL\n\n\t\t\tif (/^https?:\\/\\//i.test(path) && /^\\//.test(url)) {\n\t\t\t\tpath = path.replace(/(^https?:\\/\\/[^\\/]+).*/i, '$1');\n\t\t\t} // Absolute URL http://,https://,//\n\n\n\t\t\tif (/^(https?:)?\\/\\//i.test(url)) return url; // Data URI\n\n\t\t\tif (/^data:.*,.*$/i.test(url)) return url; // Blob URL\n\n\t\t\tif (/^blob:.*$/i.test(url)) return url; // Relative URL\n\n\t\t\treturn path + url;\n\t\t}\n\n\t}\n\n\tclass InstancedBufferGeometry extends BufferGeometry {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'InstancedBufferGeometry';\n\t\t\tthis.instanceCount = Infinity;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.instanceCount = source.instanceCount;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\ttoJSON() {\n\t\t\tconst data = super.toJSON(this);\n\t\t\tdata.instanceCount = this.instanceCount;\n\t\t\tdata.isInstancedBufferGeometry = true;\n\t\t\treturn data;\n\t\t}\n\n\t}\n\n\tInstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;\n\n\tclass BufferGeometryLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(scope.manager);\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tparse(json) {\n\t\t\tconst interleavedBufferMap = {};\n\t\t\tconst arrayBufferMap = {};\n\n\t\t\tfunction getInterleavedBuffer(json, uuid) {\n\t\t\t\tif (interleavedBufferMap[uuid] !== undefined) return interleavedBufferMap[uuid];\n\t\t\t\tconst interleavedBuffers = json.interleavedBuffers;\n\t\t\t\tconst interleavedBuffer = interleavedBuffers[uuid];\n\t\t\t\tconst buffer = getArrayBuffer(json, interleavedBuffer.buffer);\n\t\t\t\tconst array = getTypedArray(interleavedBuffer.type, buffer);\n\t\t\t\tconst ib = new InterleavedBuffer(array, interleavedBuffer.stride);\n\t\t\t\tib.uuid = interleavedBuffer.uuid;\n\t\t\t\tinterleavedBufferMap[uuid] = ib;\n\t\t\t\treturn ib;\n\t\t\t}\n\n\t\t\tfunction getArrayBuffer(json, uuid) {\n\t\t\t\tif (arrayBufferMap[uuid] !== undefined) return arrayBufferMap[uuid];\n\t\t\t\tconst arrayBuffers = json.arrayBuffers;\n\t\t\t\tconst arrayBuffer = arrayBuffers[uuid];\n\t\t\t\tconst ab = new Uint32Array(arrayBuffer).buffer;\n\t\t\t\tarrayBufferMap[uuid] = ab;\n\t\t\t\treturn ab;\n\t\t\t}\n\n\t\t\tconst geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\t\t\tconst index = json.data.index;\n\n\t\t\tif (index !== undefined) {\n\t\t\t\tconst typedArray = getTypedArray(index.type, index.array);\n\t\t\t\tgeometry.setIndex(new BufferAttribute(typedArray, 1));\n\t\t\t}\n\n\t\t\tconst attributes = json.data.attributes;\n\n\t\t\tfor (const key in attributes) {\n\t\t\t\tconst attribute = attributes[key];\n\t\t\t\tlet bufferAttribute;\n\n\t\t\t\tif (attribute.isInterleavedBufferAttribute) {\n\t\t\t\t\tconst interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\n\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);\n\t\t\t\t} else {\n\t\t\t\t\tconst typedArray = getTypedArray(attribute.type, attribute.array);\n\t\t\t\t\tconst bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\t\tbufferAttribute = new bufferAttributeConstr(typedArray, attribute.itemSize, attribute.normalized);\n\t\t\t\t}\n\n\t\t\t\tif (attribute.name !== undefined) bufferAttribute.name = attribute.name;\n\t\t\t\tif (attribute.usage !== undefined) bufferAttribute.setUsage(attribute.usage);\n\n\t\t\t\tif (attribute.updateRange !== undefined) {\n\t\t\t\t\tbufferAttribute.updateRange.offset = attribute.updateRange.offset;\n\t\t\t\t\tbufferAttribute.updateRange.count = attribute.updateRange.count;\n\t\t\t\t}\n\n\t\t\t\tgeometry.setAttribute(key, bufferAttribute);\n\t\t\t}\n\n\t\t\tconst morphAttributes = json.data.morphAttributes;\n\n\t\t\tif (morphAttributes) {\n\t\t\t\tfor (const key in morphAttributes) {\n\t\t\t\t\tconst attributeArray = morphAttributes[key];\n\t\t\t\t\tconst array = [];\n\n\t\t\t\t\tfor (let i = 0, il = attributeArray.length; i < il; i++) {\n\t\t\t\t\t\tconst attribute = attributeArray[i];\n\t\t\t\t\t\tlet bufferAttribute;\n\n\t\t\t\t\t\tif (attribute.isInterleavedBufferAttribute) {\n\t\t\t\t\t\t\tconst interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\n\t\t\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst typedArray = getTypedArray(attribute.type, attribute.array);\n\t\t\t\t\t\t\tbufferAttribute = new BufferAttribute(typedArray, attribute.itemSize, attribute.normalized);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (attribute.name !== undefined) bufferAttribute.name = attribute.name;\n\t\t\t\t\t\tarray.push(bufferAttribute);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.morphAttributes[key] = array;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\t\tif (morphTargetsRelative) {\n\t\t\t\tgeometry.morphTargetsRelative = true;\n\t\t\t}\n\n\t\t\tconst groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\t\tif (groups !== undefined) {\n\t\t\t\tfor (let i = 0, n = groups.length; i !== n; ++i) {\n\t\t\t\t\tconst group = groups[i];\n\t\t\t\t\tgeometry.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst boundingSphere = json.data.boundingSphere;\n\n\t\t\tif (boundingSphere !== undefined) {\n\t\t\t\tconst center = new Vector3();\n\n\t\t\t\tif (boundingSphere.center !== undefined) {\n\t\t\t\t\tcenter.fromArray(boundingSphere.center);\n\t\t\t\t}\n\n\t\t\t\tgeometry.boundingSphere = new Sphere(center, boundingSphere.radius);\n\t\t\t}\n\n\t\t\tif (json.name) geometry.name = json.name;\n\t\t\tif (json.userData) geometry.userData = json.userData;\n\t\t\treturn geometry;\n\t\t}\n\n\t}\n\n\tclass ObjectLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n\t\t\tthis.resourcePath = this.resourcePath || path;\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\tlet json = null;\n\n\t\t\t\ttry {\n\t\t\t\t\tjson = JSON.parse(text);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (onError !== undefined) onError(error);\n\t\t\t\t\tconsole.error('THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst metadata = json.metadata;\n\n\t\t\t\tif (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {\n\t\t\t\t\tconsole.error('THREE.ObjectLoader: Can\\'t load ' + url);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tscope.parse(json, onLoad);\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\tasync loadAsync(url, onProgress) {\n\t\t\tconst scope = this;\n\t\t\tconst path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n\t\t\tthis.resourcePath = this.resourcePath || path;\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tconst text = await loader.loadAsync(url, onProgress);\n\t\t\tconst json = JSON.parse(text);\n\t\t\tconst metadata = json.metadata;\n\n\t\t\tif (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {\n\t\t\t\tthrow new Error('THREE.ObjectLoader: Can\\'t load ' + url);\n\t\t\t}\n\n\t\t\treturn await scope.parseAsync(json);\n\t\t}\n\n\t\tparse(json, onLoad) {\n\t\t\tconst animations = this.parseAnimations(json.animations);\n\t\t\tconst shapes = this.parseShapes(json.shapes);\n\t\t\tconst geometries = this.parseGeometries(json.geometries, shapes);\n\t\t\tconst images = this.parseImages(json.images, function () {\n\t\t\t\tif (onLoad !== undefined) onLoad(object);\n\t\t\t});\n\t\t\tconst textures = this.parseTextures(json.textures, images);\n\t\t\tconst materials = this.parseMaterials(json.materials, textures);\n\t\t\tconst object = this.parseObject(json.object, geometries, materials, textures, animations);\n\t\t\tconst skeletons = this.parseSkeletons(json.skeletons, object);\n\t\t\tthis.bindSkeletons(object, skeletons); //\n\n\t\t\tif (onLoad !== undefined) {\n\t\t\t\tlet hasImages = false;\n\n\t\t\t\tfor (const uuid in images) {\n\t\t\t\t\tif (images[uuid] instanceof HTMLImageElement) {\n\t\t\t\t\t\thasImages = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (hasImages === false) onLoad(object);\n\t\t\t}\n\n\t\t\treturn object;\n\t\t}\n\n\t\tasync parseAsync(json) {\n\t\t\tconst animations = this.parseAnimations(json.animations);\n\t\t\tconst shapes = this.parseShapes(json.shapes);\n\t\t\tconst geometries = this.parseGeometries(json.geometries, shapes);\n\t\t\tconst images = await this.parseImagesAsync(json.images);\n\t\t\tconst textures = this.parseTextures(json.textures, images);\n\t\t\tconst materials = this.parseMaterials(json.materials, textures);\n\t\t\tconst object = this.parseObject(json.object, geometries, materials, textures, animations);\n\t\t\tconst skeletons = this.parseSkeletons(json.skeletons, object);\n\t\t\tthis.bindSkeletons(object, skeletons);\n\t\t\treturn object;\n\t\t}\n\n\t\tparseShapes(json) {\n\t\t\tconst shapes = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tconst shape = new Shape().fromJSON(json[i]);\n\t\t\t\t\tshapes[shape.uuid] = shape;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn shapes;\n\t\t}\n\n\t\tparseSkeletons(json, object) {\n\t\t\tconst skeletons = {};\n\t\t\tconst bones = {}; // generate bone lookup table\n\n\t\t\tobject.traverse(function (child) {\n\t\t\t\tif (child.isBone) bones[child.uuid] = child;\n\t\t\t}); // create skeletons\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tconst skeleton = new Skeleton().fromJSON(json[i], bones);\n\t\t\t\t\tskeletons[skeleton.uuid] = skeleton;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn skeletons;\n\t\t}\n\n\t\tparseGeometries(json, shapes) {\n\t\t\tconst geometries = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tconst bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tlet geometry;\n\t\t\t\t\tconst data = json[i];\n\n\t\t\t\t\tswitch (data.type) {\n\t\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\t\tcase 'InstancedBufferGeometry':\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse(data);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Geometry':\n\t\t\t\t\t\t\tconsole.error('THREE.ObjectLoader: The legacy Geometry type is no longer supported.');\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tif (data.type in Geometries) {\n\t\t\t\t\t\t\t\tgeometry = Geometries[data.type].fromJSON(data, shapes);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.warn(`THREE.ObjectLoader: Unsupported geometry type \"${data.type}\"`);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\t\t\t\t\tif (data.name !== undefined) geometry.name = data.name;\n\t\t\t\t\tif (geometry.isBufferGeometry === true && data.userData !== undefined) geometry.userData = data.userData;\n\t\t\t\t\tgeometries[data.uuid] = geometry;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn geometries;\n\t\t}\n\n\t\tparseMaterials(json, textures) {\n\t\t\tconst cache = {}; // MultiMaterial\n\n\t\t\tconst materials = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tconst loader = new MaterialLoader();\n\t\t\t\tloader.setTextures(textures);\n\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tconst data = json[i];\n\n\t\t\t\t\tif (data.type === 'MultiMaterial') {\n\t\t\t\t\t\t// Deprecated\n\t\t\t\t\t\tconst array = [];\n\n\t\t\t\t\t\tfor (let j = 0; j < data.materials.length; j++) {\n\t\t\t\t\t\t\tconst material = data.materials[j];\n\n\t\t\t\t\t\t\tif (cache[material.uuid] === undefined) {\n\t\t\t\t\t\t\t\tcache[material.uuid] = loader.parse(material);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tarray.push(cache[material.uuid]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[data.uuid] = array;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (cache[data.uuid] === undefined) {\n\t\t\t\t\t\t\tcache[data.uuid] = loader.parse(data);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[data.uuid] = cache[data.uuid];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn materials;\n\t\t}\n\n\t\tparseAnimations(json) {\n\t\t\tconst animations = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (let i = 0; i < json.length; i++) {\n\t\t\t\t\tconst data = json[i];\n\t\t\t\t\tconst clip = AnimationClip.parse(data);\n\t\t\t\t\tanimations[clip.uuid] = clip;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn animations;\n\t\t}\n\n\t\tparseImages(json, onLoad) {\n\t\t\tconst scope = this;\n\t\t\tconst images = {};\n\t\t\tlet loader;\n\n\t\t\tfunction loadImage(url) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\treturn loader.load(url, function () {\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, undefined, function () {\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfunction deserializeImage(image) {\n\t\t\t\tif (typeof image === 'string') {\n\t\t\t\t\tconst url = image;\n\t\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(url) ? url : scope.resourcePath + url;\n\t\t\t\t\treturn loadImage(path);\n\t\t\t\t} else {\n\t\t\t\t\tif (image.data) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdata: getTypedArray(image.type, image.data),\n\t\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\t\theight: image.height\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (json !== undefined && json.length > 0) {\n\t\t\t\tconst manager = new LoadingManager(onLoad);\n\t\t\t\tloader = new ImageLoader(manager);\n\t\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\n\t\t\t\tfor (let i = 0, il = json.length; i < il; i++) {\n\t\t\t\t\tconst image = json[i];\n\t\t\t\t\tconst url = image.url;\n\n\t\t\t\t\tif (Array.isArray(url)) {\n\t\t\t\t\t\t// load array of images e.g CubeTexture\n\t\t\t\t\t\timages[image.uuid] = [];\n\n\t\t\t\t\t\tfor (let j = 0, jl = url.length; j < jl; j++) {\n\t\t\t\t\t\t\tconst currentUrl = url[j];\n\t\t\t\t\t\t\tconst deserializedImage = deserializeImage(currentUrl);\n\n\t\t\t\t\t\t\tif (deserializedImage !== null) {\n\t\t\t\t\t\t\t\tif (deserializedImage instanceof HTMLImageElement) {\n\t\t\t\t\t\t\t\t\timages[image.uuid].push(deserializedImage);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\t\t\t\t\t\t\t\t\timages[image.uuid].push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// load single image\n\t\t\t\t\t\tconst deserializedImage = deserializeImage(image.url);\n\n\t\t\t\t\t\tif (deserializedImage !== null) {\n\t\t\t\t\t\t\timages[image.uuid] = deserializedImage;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn images;\n\t\t}\n\n\t\tasync parseImagesAsync(json) {\n\t\t\tconst scope = this;\n\t\t\tconst images = {};\n\t\t\tlet loader;\n\n\t\t\tasync function deserializeImage(image) {\n\t\t\t\tif (typeof image === 'string') {\n\t\t\t\t\tconst url = image;\n\t\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(url) ? url : scope.resourcePath + url;\n\t\t\t\t\treturn await loader.loadAsync(path);\n\t\t\t\t} else {\n\t\t\t\t\tif (image.data) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdata: getTypedArray(image.type, image.data),\n\t\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\t\theight: image.height\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (json !== undefined && json.length > 0) {\n\t\t\t\tloader = new ImageLoader(this.manager);\n\t\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\n\t\t\t\tfor (let i = 0, il = json.length; i < il; i++) {\n\t\t\t\t\tconst image = json[i];\n\t\t\t\t\tconst url = image.url;\n\n\t\t\t\t\tif (Array.isArray(url)) {\n\t\t\t\t\t\t// load array of images e.g CubeTexture\n\t\t\t\t\t\timages[image.uuid] = [];\n\n\t\t\t\t\t\tfor (let j = 0, jl = url.length; j < jl; j++) {\n\t\t\t\t\t\t\tconst currentUrl = url[j];\n\t\t\t\t\t\t\tconst deserializedImage = await deserializeImage(currentUrl);\n\n\t\t\t\t\t\t\tif (deserializedImage !== null) {\n\t\t\t\t\t\t\t\tif (deserializedImage instanceof HTMLImageElement) {\n\t\t\t\t\t\t\t\t\timages[image.uuid].push(deserializedImage);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\t\t\t\t\t\t\t\t\timages[image.uuid].push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// load single image\n\t\t\t\t\t\tconst deserializedImage = await deserializeImage(image.url);\n\n\t\t\t\t\t\tif (deserializedImage !== null) {\n\t\t\t\t\t\t\timages[image.uuid] = deserializedImage;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn images;\n\t\t}\n\n\t\tparseTextures(json, images) {\n\t\t\tfunction parseConstant(value, type) {\n\t\t\t\tif (typeof value === 'number') return value;\n\t\t\t\tconsole.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value);\n\t\t\t\treturn type[value];\n\t\t\t}\n\n\t\t\tconst textures = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (let i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tconst data = json[i];\n\n\t\t\t\t\tif (data.image === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: No \"image\" specified for', data.uuid);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (images[data.image] === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined image', data.image);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet texture;\n\t\t\t\t\tconst image = images[data.image];\n\n\t\t\t\t\tif (Array.isArray(image)) {\n\t\t\t\t\t\ttexture = new CubeTexture(image);\n\t\t\t\t\t\tif (image.length === 6) texture.needsUpdate = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (image && image.data) {\n\t\t\t\t\t\t\ttexture = new DataTexture(image.data, image.width, image.height);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttexture = new Texture(image);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (image) texture.needsUpdate = true; // textures can have undefined image data\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.uuid = data.uuid;\n\t\t\t\t\tif (data.name !== undefined) texture.name = data.name;\n\t\t\t\t\tif (data.mapping !== undefined) texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);\n\t\t\t\t\tif (data.offset !== undefined) texture.offset.fromArray(data.offset);\n\t\t\t\t\tif (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);\n\t\t\t\t\tif (data.center !== undefined) texture.center.fromArray(data.center);\n\t\t\t\t\tif (data.rotation !== undefined) texture.rotation = data.rotation;\n\n\t\t\t\t\tif (data.wrap !== undefined) {\n\t\t\t\t\t\ttexture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);\n\t\t\t\t\t\ttexture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.format !== undefined) texture.format = data.format;\n\t\t\t\t\tif (data.type !== undefined) texture.type = data.type;\n\t\t\t\t\tif (data.encoding !== undefined) texture.encoding = data.encoding;\n\t\t\t\t\tif (data.minFilter !== undefined) texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);\n\t\t\t\t\tif (data.magFilter !== undefined) texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);\n\t\t\t\t\tif (data.anisotropy !== undefined) texture.anisotropy = data.anisotropy;\n\t\t\t\t\tif (data.flipY !== undefined) texture.flipY = data.flipY;\n\t\t\t\t\tif (data.premultiplyAlpha !== undefined) texture.premultiplyAlpha = data.premultiplyAlpha;\n\t\t\t\t\tif (data.unpackAlignment !== undefined) texture.unpackAlignment = data.unpackAlignment;\n\t\t\t\t\tif (data.userData !== undefined) texture.userData = data.userData;\n\t\t\t\t\ttextures[data.uuid] = texture;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn textures;\n\t\t}\n\n\t\tparseObject(data, geometries, materials, textures, animations) {\n\t\t\tlet object;\n\n\t\t\tfunction getGeometry(name) {\n\t\t\t\tif (geometries[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined geometry', name);\n\t\t\t\t}\n\n\t\t\t\treturn geometries[name];\n\t\t\t}\n\n\t\t\tfunction getMaterial(name) {\n\t\t\t\tif (name === undefined) return undefined;\n\n\t\t\t\tif (Array.isArray(name)) {\n\t\t\t\t\tconst array = [];\n\n\t\t\t\t\tfor (let i = 0, l = name.length; i < l; i++) {\n\t\t\t\t\t\tconst uuid = name[i];\n\n\t\t\t\t\t\tif (materials[uuid] === undefined) {\n\t\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined material', uuid);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarray.push(materials[uuid]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn array;\n\t\t\t\t}\n\n\t\t\t\tif (materials[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined material', name);\n\t\t\t\t}\n\n\t\t\t\treturn materials[name];\n\t\t\t}\n\n\t\t\tfunction getTexture(uuid) {\n\t\t\t\tif (textures[uuid] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined texture', uuid);\n\t\t\t\t}\n\n\t\t\t\treturn textures[uuid];\n\t\t\t}\n\n\t\t\tlet geometry, material;\n\n\t\t\tswitch (data.type) {\n\t\t\t\tcase 'Scene':\n\t\t\t\t\tobject = new Scene();\n\n\t\t\t\t\tif (data.background !== undefined) {\n\t\t\t\t\t\tif (Number.isInteger(data.background)) {\n\t\t\t\t\t\t\tobject.background = new Color(data.background);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tobject.background = getTexture(data.background);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.environment !== undefined) {\n\t\t\t\t\t\tobject.environment = getTexture(data.environment);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.fog !== undefined) {\n\t\t\t\t\t\tif (data.fog.type === 'Fog') {\n\t\t\t\t\t\t\tobject.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);\n\t\t\t\t\t\t} else if (data.fog.type === 'FogExp2') {\n\t\t\t\t\t\t\tobject.fog = new FogExp2(data.fog.color, data.fog.density);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\t\t\t\t\tobject = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);\n\t\t\t\t\tif (data.focus !== undefined) object.focus = data.focus;\n\t\t\t\t\tif (data.zoom !== undefined) object.zoom = data.zoom;\n\t\t\t\t\tif (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;\n\t\t\t\t\tif (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;\n\t\t\t\t\tif (data.view !== undefined) object.view = Object.assign({}, data.view);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\t\t\t\t\tobject = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);\n\t\t\t\t\tif (data.zoom !== undefined) object.zoom = data.zoom;\n\t\t\t\t\tif (data.view !== undefined) object.view = Object.assign({}, data.view);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\t\t\t\t\tobject = new AmbientLight(data.color, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tobject = new DirectionalLight(data.color, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tobject = new PointLight(data.color, data.intensity, data.distance, data.decay);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\tobject = new RectAreaLight(data.color, data.intensity, data.width, data.height);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tobject = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\tobject = new HemisphereLight(data.color, data.groundColor, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LightProbe':\n\t\t\t\t\tobject = new LightProbe().fromJSON(data);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SkinnedMesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tobject = new SkinnedMesh(geometry, material);\n\t\t\t\t\tif (data.bindMode !== undefined) object.bindMode = data.bindMode;\n\t\t\t\t\tif (data.bindMatrix !== undefined) object.bindMatrix.fromArray(data.bindMatrix);\n\t\t\t\t\tif (data.skeleton !== undefined) object.skeleton = data.skeleton;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Mesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tobject = new Mesh(geometry, material);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'InstancedMesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tconst count = data.count;\n\t\t\t\t\tconst instanceMatrix = data.instanceMatrix;\n\t\t\t\t\tconst instanceColor = data.instanceColor;\n\t\t\t\t\tobject = new InstancedMesh(geometry, material, count);\n\t\t\t\t\tobject.instanceMatrix = new InstancedBufferAttribute(new Float32Array(instanceMatrix.array), 16);\n\t\t\t\t\tif (instanceColor !== undefined) object.instanceColor = new InstancedBufferAttribute(new Float32Array(instanceColor.array), instanceColor.itemSize);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\t\t\t\t\tobject = new LOD();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\t\t\t\t\tobject = new Line(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineLoop':\n\t\t\t\t\tobject = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineSegments':\n\t\t\t\t\tobject = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\t\t\t\t\tobject = new Points(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\t\t\t\t\tobject = new Sprite(getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\t\t\t\t\tobject = new Group();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Bone':\n\t\t\t\t\tobject = new Bone();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tobject = new Object3D();\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\t\t\tif (data.name !== undefined) object.name = data.name;\n\n\t\t\tif (data.matrix !== undefined) {\n\t\t\t\tobject.matrix.fromArray(data.matrix);\n\t\t\t\tif (data.matrixAutoUpdate !== undefined) object.matrixAutoUpdate = data.matrixAutoUpdate;\n\t\t\t\tif (object.matrixAutoUpdate) object.matrix.decompose(object.position, object.quaternion, object.scale);\n\t\t\t} else {\n\t\t\t\tif (data.position !== undefined) object.position.fromArray(data.position);\n\t\t\t\tif (data.rotation !== undefined) object.rotation.fromArray(data.rotation);\n\t\t\t\tif (data.quaternion !== undefined) object.quaternion.fromArray(data.quaternion);\n\t\t\t\tif (data.scale !== undefined) object.scale.fromArray(data.scale);\n\t\t\t}\n\n\t\t\tif (data.castShadow !== undefined) object.castShadow = data.castShadow;\n\t\t\tif (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;\n\n\t\t\tif (data.shadow) {\n\t\t\t\tif (data.shadow.bias !== undefined) object.shadow.bias = data.shadow.bias;\n\t\t\t\tif (data.shadow.normalBias !== undefined) object.shadow.normalBias = data.shadow.normalBias;\n\t\t\t\tif (data.shadow.radius !== undefined) object.shadow.radius = data.shadow.radius;\n\t\t\t\tif (data.shadow.mapSize !== undefined) object.shadow.mapSize.fromArray(data.shadow.mapSize);\n\t\t\t\tif (data.shadow.camera !== undefined) object.shadow.camera = this.parseObject(data.shadow.camera);\n\t\t\t}\n\n\t\t\tif (data.visible !== undefined) object.visible = data.visible;\n\t\t\tif (data.frustumCulled !== undefined) object.frustumCulled = data.frustumCulled;\n\t\t\tif (data.renderOrder !== undefined) object.renderOrder = data.renderOrder;\n\t\t\tif (data.userData !== undefined) object.userData = data.userData;\n\t\t\tif (data.layers !== undefined) object.layers.mask = data.layers;\n\n\t\t\tif (data.children !== undefined) {\n\t\t\t\tconst children = data.children;\n\n\t\t\t\tfor (let i = 0; i < children.length; i++) {\n\t\t\t\t\tobject.add(this.parseObject(children[i], geometries, materials, textures, animations));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (data.animations !== undefined) {\n\t\t\t\tconst objectAnimations = data.animations;\n\n\t\t\t\tfor (let i = 0; i < objectAnimations.length; i++) {\n\t\t\t\t\tconst uuid = objectAnimations[i];\n\t\t\t\t\tobject.animations.push(animations[uuid]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (data.type === 'LOD') {\n\t\t\t\tif (data.autoUpdate !== undefined) object.autoUpdate = data.autoUpdate;\n\t\t\t\tconst levels = data.levels;\n\n\t\t\t\tfor (let l = 0; l < levels.length; l++) {\n\t\t\t\t\tconst level = levels[l];\n\t\t\t\t\tconst child = object.getObjectByProperty('uuid', level.object);\n\n\t\t\t\t\tif (child !== undefined) {\n\t\t\t\t\t\tobject.addLevel(child, level.distance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn object;\n\t\t}\n\n\t\tbindSkeletons(object, skeletons) {\n\t\t\tif (Object.keys(skeletons).length === 0) return;\n\t\t\tobject.traverse(function (child) {\n\t\t\t\tif (child.isSkinnedMesh === true && child.skeleton !== undefined) {\n\t\t\t\t\tconst skeleton = skeletons[child.skeleton];\n\n\t\t\t\t\tif (skeleton === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchild.bind(skeleton, child.bindMatrix);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t/* DEPRECATED */\n\n\n\t\tsetTexturePath(value) {\n\t\t\tconsole.warn('THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().');\n\t\t\treturn this.setResourcePath(value);\n\t\t}\n\n\t}\n\n\tconst TEXTURE_MAPPING = {\n\t\tUVMapping: UVMapping,\n\t\tCubeReflectionMapping: CubeReflectionMapping,\n\t\tCubeRefractionMapping: CubeRefractionMapping,\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\n\t};\n\tconst TEXTURE_WRAPPING = {\n\t\tRepeatWrapping: RepeatWrapping,\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\n\t};\n\tconst TEXTURE_FILTER = {\n\t\tNearestFilter: NearestFilter,\n\t\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\t\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\t\tLinearFilter: LinearFilter,\n\t\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\t\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n\t};\n\n\tclass ImageBitmapLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\n\t\t\tif (typeof createImageBitmap === 'undefined') {\n\t\t\t\tconsole.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');\n\t\t\t}\n\n\t\t\tif (typeof fetch === 'undefined') {\n\t\t\t\tconsole.warn('THREE.ImageBitmapLoader: fetch() not supported.');\n\t\t\t}\n\n\t\t\tthis.options = {\n\t\t\t\tpremultiplyAlpha: 'none'\n\t\t\t};\n\t\t}\n\n\t\tsetOptions(options) {\n\t\t\tthis.options = options;\n\t\t\treturn this;\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tif (url === undefined) url = '';\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tconst scope = this;\n\t\t\tconst cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t}\n\n\t\t\tconst fetchOptions = {};\n\t\t\tfetchOptions.credentials = this.crossOrigin === 'anonymous' ? 'same-origin' : 'include';\n\t\t\tfetchOptions.headers = this.requestHeader;\n\t\t\tfetch(url, fetchOptions).then(function (res) {\n\t\t\t\treturn res.blob();\n\t\t\t}).then(function (blob) {\n\t\t\t\treturn createImageBitmap(blob, Object.assign(scope.options, {\n\t\t\t\t\tcolorSpaceConversion: 'none'\n\t\t\t\t}));\n\t\t\t}).then(function (imageBitmap) {\n\t\t\t\tCache.add(url, imageBitmap);\n\t\t\t\tif (onLoad) onLoad(imageBitmap);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}).catch(function (e) {\n\t\t\t\tif (onError) onError(e);\n\t\t\t\tscope.manager.itemError(url);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t});\n\t\t\tscope.manager.itemStart(url);\n\t\t}\n\n\t}\n\n\tImageBitmapLoader.prototype.isImageBitmapLoader = true;\n\n\tlet _context;\n\n\tconst AudioContext = {\n\t\tgetContext: function () {\n\t\t\tif (_context === undefined) {\n\t\t\t\t_context = new (window.AudioContext || window.webkitAudioContext)();\n\t\t\t}\n\n\t\t\treturn _context;\n\t\t},\n\t\tsetContext: function (value) {\n\t\t\t_context = value;\n\t\t}\n\t};\n\n\tclass AudioLoader extends Loader {\n\t\tconstructor(manager) {\n\t\t\tsuper(manager);\n\t\t}\n\n\t\tload(url, onLoad, onProgress, onError) {\n\t\t\tconst scope = this;\n\t\t\tconst loader = new FileLoader(this.manager);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (buffer) {\n\t\t\t\ttry {\n\t\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\t\tconst bufferCopy = buffer.slice(0);\n\t\t\t\t\tconst context = AudioContext.getContext();\n\t\t\t\t\tcontext.decodeAudioData(bufferCopy, function (audioBuffer) {\n\t\t\t\t\t\tonLoad(audioBuffer);\n\t\t\t\t\t});\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t}\n\n\tclass HemisphereLightProbe extends LightProbe {\n\t\tconstructor(skyColor, groundColor, intensity = 1) {\n\t\t\tsuper(undefined, intensity);\n\t\t\tconst color1 = new Color().set(skyColor);\n\t\t\tconst color2 = new Color().set(groundColor);\n\t\t\tconst sky = new Vector3(color1.r, color1.g, color1.b);\n\t\t\tconst ground = new Vector3(color2.r, color2.g, color2.b); // without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\n\t\t\tconst c0 = Math.sqrt(Math.PI);\n\t\t\tconst c1 = c0 * Math.sqrt(0.75);\n\t\t\tthis.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);\n\t\t\tthis.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);\n\t\t}\n\n\t}\n\n\tHemisphereLightProbe.prototype.isHemisphereLightProbe = true;\n\n\tclass AmbientLightProbe extends LightProbe {\n\t\tconstructor(color, intensity = 1) {\n\t\t\tsuper(undefined, intensity);\n\t\t\tconst color1 = new Color().set(color); // without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\n\t\t\tthis.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));\n\t\t}\n\n\t}\n\n\tAmbientLightProbe.prototype.isAmbientLightProbe = true;\n\n\tconst _eyeRight = /*@__PURE__*/new Matrix4();\n\n\tconst _eyeLeft = /*@__PURE__*/new Matrix4();\n\n\tclass StereoCamera {\n\t\tconstructor() {\n\t\t\tthis.type = 'StereoCamera';\n\t\t\tthis.aspect = 1;\n\t\t\tthis.eyeSep = 0.064;\n\t\t\tthis.cameraL = new PerspectiveCamera();\n\t\t\tthis.cameraL.layers.enable(1);\n\t\t\tthis.cameraL.matrixAutoUpdate = false;\n\t\t\tthis.cameraR = new PerspectiveCamera();\n\t\t\tthis.cameraR.layers.enable(2);\n\t\t\tthis.cameraR.matrixAutoUpdate = false;\n\t\t\tthis._cache = {\n\t\t\t\tfocus: null,\n\t\t\t\tfov: null,\n\t\t\t\taspect: null,\n\t\t\t\tnear: null,\n\t\t\t\tfar: null,\n\t\t\t\tzoom: null,\n\t\t\t\teyeSep: null\n\t\t\t};\n\t\t}\n\n\t\tupdate(camera) {\n\t\t\tconst cache = this._cache;\n\t\t\tconst needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\t\tif (needsUpdate) {\n\t\t\t\tcache.focus = camera.focus;\n\t\t\t\tcache.fov = camera.fov;\n\t\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\t\tcache.near = camera.near;\n\t\t\t\tcache.far = camera.far;\n\t\t\t\tcache.zoom = camera.zoom;\n\t\t\t\tcache.eyeSep = this.eyeSep; // Off-axis stereoscopic effect based on\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\tconst projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\tconst eyeSepHalf = cache.eyeSep / 2;\n\t\t\t\tconst eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\t\tconst ymax = cache.near * Math.tan(DEG2RAD * cache.fov * 0.5) / cache.zoom;\n\t\t\t\tlet xmin, xmax; // translate xOffset\n\n\t\t\t\t_eyeLeft.elements[12] = -eyeSepHalf;\n\t\t\t\t_eyeRight.elements[12] = eyeSepHalf; // for left eye\n\n\t\t\t\txmin = -ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\tprojectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n\t\t\t\tprojectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n\t\t\t\tthis.cameraL.projectionMatrix.copy(projectionMatrix); // for right eye\n\n\t\t\t\txmin = -ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\tprojectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n\t\t\t\tprojectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n\t\t\t\tthis.cameraR.projectionMatrix.copy(projectionMatrix);\n\t\t\t}\n\n\t\t\tthis.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);\n\t\t\tthis.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);\n\t\t}\n\n\t}\n\n\tclass Clock {\n\t\tconstructor(autoStart = true) {\n\t\t\tthis.autoStart = autoStart;\n\t\t\tthis.startTime = 0;\n\t\t\tthis.oldTime = 0;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = false;\n\t\t}\n\n\t\tstart() {\n\t\t\tthis.startTime = now();\n\t\t\tthis.oldTime = this.startTime;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = true;\n\t\t}\n\n\t\tstop() {\n\t\t\tthis.getElapsedTime();\n\t\t\tthis.running = false;\n\t\t\tthis.autoStart = false;\n\t\t}\n\n\t\tgetElapsedTime() {\n\t\t\tthis.getDelta();\n\t\t\treturn this.elapsedTime;\n\t\t}\n\n\t\tgetDelta() {\n\t\t\tlet diff = 0;\n\n\t\t\tif (this.autoStart && !this.running) {\n\t\t\t\tthis.start();\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (this.running) {\n\t\t\t\tconst newTime = now();\n\t\t\t\tdiff = (newTime - this.oldTime) / 1000;\n\t\t\t\tthis.oldTime = newTime;\n\t\t\t\tthis.elapsedTime += diff;\n\t\t\t}\n\n\t\t\treturn diff;\n\t\t}\n\n\t}\n\n\tfunction now() {\n\t\treturn (typeof performance === 'undefined' ? Date : performance).now(); // see #10732\n\t}\n\n\tconst _position$1 = /*@__PURE__*/new Vector3();\n\n\tconst _quaternion$1 = /*@__PURE__*/new Quaternion();\n\n\tconst _scale$1 = /*@__PURE__*/new Vector3();\n\n\tconst _orientation$1 = /*@__PURE__*/new Vector3();\n\n\tclass AudioListener extends Object3D {\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.type = 'AudioListener';\n\t\t\tthis.context = AudioContext.getContext();\n\t\t\tthis.gain = this.context.createGain();\n\t\t\tthis.gain.connect(this.context.destination);\n\t\t\tthis.filter = null;\n\t\t\tthis.timeDelta = 0; // private\n\n\t\t\tthis._clock = new Clock();\n\t\t}\n\n\t\tgetInput() {\n\t\t\treturn this.gain;\n\t\t}\n\n\t\tremoveFilter() {\n\t\t\tif (this.filter !== null) {\n\t\t\t\tthis.gain.disconnect(this.filter);\n\t\t\t\tthis.filter.disconnect(this.context.destination);\n\t\t\t\tthis.gain.connect(this.context.destination);\n\t\t\t\tthis.filter = null;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetFilter() {\n\t\t\treturn this.filter;\n\t\t}\n\n\t\tsetFilter(value) {\n\t\t\tif (this.filter !== null) {\n\t\t\t\tthis.gain.disconnect(this.filter);\n\t\t\t\tthis.filter.disconnect(this.context.destination);\n\t\t\t} else {\n\t\t\t\tthis.gain.disconnect(this.context.destination);\n\t\t\t}\n\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect(this.filter);\n\t\t\tthis.filter.connect(this.context.destination);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetMasterVolume() {\n\t\t\treturn this.gain.gain.value;\n\t\t}\n\n\t\tsetMasterVolume(value) {\n\t\t\tthis.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n\t\t\treturn this;\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t\tconst listener = this.context.listener;\n\t\t\tconst up = this.up;\n\t\t\tthis.timeDelta = this._clock.getDelta();\n\t\t\tthis.matrixWorld.decompose(_position$1, _quaternion$1, _scale$1);\n\n\t\t\t_orientation$1.set(0, 0, -1).applyQuaternion(_quaternion$1);\n\n\t\t\tif (listener.positionX) {\n\t\t\t\t// code path for Chrome (see #14393)\n\t\t\t\tconst endTime = this.context.currentTime + this.timeDelta;\n\t\t\t\tlistener.positionX.linearRampToValueAtTime(_position$1.x, endTime);\n\t\t\t\tlistener.positionY.linearRampToValueAtTime(_position$1.y, endTime);\n\t\t\t\tlistener.positionZ.linearRampToValueAtTime(_position$1.z, endTime);\n\t\t\t\tlistener.forwardX.linearRampToValueAtTime(_orientation$1.x, endTime);\n\t\t\t\tlistener.forwardY.linearRampToValueAtTime(_orientation$1.y, endTime);\n\t\t\t\tlistener.forwardZ.linearRampToValueAtTime(_orientation$1.z, endTime);\n\t\t\t\tlistener.upX.linearRampToValueAtTime(up.x, endTime);\n\t\t\t\tlistener.upY.linearRampToValueAtTime(up.y, endTime);\n\t\t\t\tlistener.upZ.linearRampToValueAtTime(up.z, endTime);\n\t\t\t} else {\n\t\t\t\tlistener.setPosition(_position$1.x, _position$1.y, _position$1.z);\n\t\t\t\tlistener.setOrientation(_orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass Audio extends Object3D {\n\t\tconstructor(listener) {\n\t\t\tsuper();\n\t\t\tthis.type = 'Audio';\n\t\t\tthis.listener = listener;\n\t\t\tthis.context = listener.context;\n\t\t\tthis.gain = this.context.createGain();\n\t\t\tthis.gain.connect(listener.getInput());\n\t\t\tthis.autoplay = false;\n\t\t\tthis.buffer = null;\n\t\t\tthis.detune = 0;\n\t\t\tthis.loop = false;\n\t\t\tthis.loopStart = 0;\n\t\t\tthis.loopEnd = 0;\n\t\t\tthis.offset = 0;\n\t\t\tthis.duration = undefined;\n\t\t\tthis.playbackRate = 1;\n\t\t\tthis.isPlaying = false;\n\t\t\tthis.hasPlaybackControl = true;\n\t\t\tthis.source = null;\n\t\t\tthis.sourceType = 'empty';\n\t\t\tthis._startedAt = 0;\n\t\t\tthis._progress = 0;\n\t\t\tthis._connected = false;\n\t\t\tthis.filters = [];\n\t\t}\n\n\t\tgetOutput() {\n\t\t\treturn this.gain;\n\t\t}\n\n\t\tsetNodeSource(audioNode) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetMediaElementSource(mediaElement) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaNode';\n\t\t\tthis.source = this.context.createMediaElementSource(mediaElement);\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetMediaStreamSource(mediaStream) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaStreamNode';\n\t\t\tthis.source = this.context.createMediaStreamSource(mediaStream);\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t}\n\n\t\tsetBuffer(audioBuffer) {\n\t\t\tthis.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\t\t\tif (this.autoplay) this.play();\n\t\t\treturn this;\n\t\t}\n\n\t\tplay(delay = 0) {\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tconsole.warn('THREE.Audio: Audio is already playing.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._startedAt = this.context.currentTime + delay;\n\t\t\tconst source = this.context.createBufferSource();\n\t\t\tsource.buffer = this.buffer;\n\t\t\tsource.loop = this.loop;\n\t\t\tsource.loopStart = this.loopStart;\n\t\t\tsource.loopEnd = this.loopEnd;\n\t\t\tsource.onended = this.onEnded.bind(this);\n\t\t\tsource.start(this._startedAt, this._progress + this.offset, this.duration);\n\t\t\tthis.isPlaying = true;\n\t\t\tthis.source = source;\n\t\t\tthis.setDetune(this.detune);\n\t\t\tthis.setPlaybackRate(this.playbackRate);\n\t\t\treturn this.connect();\n\t\t}\n\n\t\tpause() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\t// update current progress\n\t\t\t\tthis._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;\n\n\t\t\t\tif (this.loop === true) {\n\t\t\t\t\t// ensure _progress does not exceed duration with looped audios\n\t\t\t\t\tthis._progress = this._progress % (this.duration || this.buffer.duration);\n\t\t\t\t}\n\n\t\t\t\tthis.source.stop();\n\t\t\t\tthis.source.onended = null;\n\t\t\t\tthis.isPlaying = false;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tstop() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._progress = 0;\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\t\t\tthis.isPlaying = false;\n\t\t\treturn this;\n\t\t}\n\n\t\tconnect() {\n\t\t\tif (this.filters.length > 0) {\n\t\t\t\tthis.source.connect(this.filters[0]);\n\n\t\t\t\tfor (let i = 1, l = this.filters.length; i < l; i++) {\n\t\t\t\t\tthis.filters[i - 1].connect(this.filters[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.filters[this.filters.length - 1].connect(this.getOutput());\n\t\t\t} else {\n\t\t\t\tthis.source.connect(this.getOutput());\n\t\t\t}\n\n\t\t\tthis._connected = true;\n\t\t\treturn this;\n\t\t}\n\n\t\tdisconnect() {\n\t\t\tif (this.filters.length > 0) {\n\t\t\t\tthis.source.disconnect(this.filters[0]);\n\n\t\t\t\tfor (let i = 1, l = this.filters.length; i < l; i++) {\n\t\t\t\t\tthis.filters[i - 1].disconnect(this.filters[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.filters[this.filters.length - 1].disconnect(this.getOutput());\n\t\t\t} else {\n\t\t\t\tthis.source.disconnect(this.getOutput());\n\t\t\t}\n\n\t\t\tthis._connected = false;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetFilters() {\n\t\t\treturn this.filters;\n\t\t}\n\n\t\tsetFilters(value) {\n\t\t\tif (!value) value = [];\n\n\t\t\tif (this._connected === true) {\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value.slice();\n\t\t\t\tthis.connect();\n\t\t\t} else {\n\t\t\t\tthis.filters = value.slice();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetDetune(value) {\n\t\t\tthis.detune = value;\n\t\t\tif (this.source.detune === undefined) return; // only set detune when available\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetDetune() {\n\t\t\treturn this.detune;\n\t\t}\n\n\t\tgetFilter() {\n\t\t\treturn this.getFilters()[0];\n\t\t}\n\n\t\tsetFilter(filter) {\n\t\t\treturn this.setFilters(filter ? [filter] : []);\n\t\t}\n\n\t\tsetPlaybackRate(value) {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.playbackRate = value;\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tgetPlaybackRate() {\n\t\t\treturn this.playbackRate;\n\t\t}\n\n\t\tonEnded() {\n\t\t\tthis.isPlaying = false;\n\t\t}\n\n\t\tgetLoop() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn this.loop;\n\t\t}\n\n\t\tsetLoop(value) {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.loop = value;\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.loop = this.loop;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetLoopStart(value) {\n\t\t\tthis.loopStart = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetLoopEnd(value) {\n\t\t\tthis.loopEnd = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetVolume() {\n\t\t\treturn this.gain.gain.value;\n\t\t}\n\n\t\tsetVolume(value) {\n\t\t\tthis.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tconst _position = /*@__PURE__*/new Vector3();\n\n\tconst _quaternion = /*@__PURE__*/new Quaternion();\n\n\tconst _scale = /*@__PURE__*/new Vector3();\n\n\tconst _orientation = /*@__PURE__*/new Vector3();\n\n\tclass PositionalAudio extends Audio {\n\t\tconstructor(listener) {\n\t\t\tsuper(listener);\n\t\t\tthis.panner = this.context.createPanner();\n\t\t\tthis.panner.panningModel = 'HRTF';\n\t\t\tthis.panner.connect(this.gain);\n\t\t}\n\n\t\tgetOutput() {\n\t\t\treturn this.panner;\n\t\t}\n\n\t\tgetRefDistance() {\n\t\t\treturn this.panner.refDistance;\n\t\t}\n\n\t\tsetRefDistance(value) {\n\t\t\tthis.panner.refDistance = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetRolloffFactor() {\n\t\t\treturn this.panner.rolloffFactor;\n\t\t}\n\n\t\tsetRolloffFactor(value) {\n\t\t\tthis.panner.rolloffFactor = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetDistanceModel() {\n\t\t\treturn this.panner.distanceModel;\n\t\t}\n\n\t\tsetDistanceModel(value) {\n\t\t\tthis.panner.distanceModel = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tgetMaxDistance() {\n\t\t\treturn this.panner.maxDistance;\n\t\t}\n\n\t\tsetMaxDistance(value) {\n\t\t\tthis.panner.maxDistance = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {\n\t\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\t\tthis.panner.coneOuterGain = coneOuterGain;\n\t\t\treturn this;\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t\tif (this.hasPlaybackControl === true && this.isPlaying === false) return;\n\t\t\tthis.matrixWorld.decompose(_position, _quaternion, _scale);\n\n\t\t\t_orientation.set(0, 0, 1).applyQuaternion(_quaternion);\n\n\t\t\tconst panner = this.panner;\n\n\t\t\tif (panner.positionX) {\n\t\t\t\t// code path for Chrome and Firefox (see #14393)\n\t\t\t\tconst endTime = this.context.currentTime + this.listener.timeDelta;\n\t\t\t\tpanner.positionX.linearRampToValueAtTime(_position.x, endTime);\n\t\t\t\tpanner.positionY.linearRampToValueAtTime(_position.y, endTime);\n\t\t\t\tpanner.positionZ.linearRampToValueAtTime(_position.z, endTime);\n\t\t\t\tpanner.orientationX.linearRampToValueAtTime(_orientation.x, endTime);\n\t\t\t\tpanner.orientationY.linearRampToValueAtTime(_orientation.y, endTime);\n\t\t\t\tpanner.orientationZ.linearRampToValueAtTime(_orientation.z, endTime);\n\t\t\t} else {\n\t\t\t\tpanner.setPosition(_position.x, _position.y, _position.z);\n\t\t\t\tpanner.setOrientation(_orientation.x, _orientation.y, _orientation.z);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tclass AudioAnalyser {\n\t\tconstructor(audio, fftSize = 2048) {\n\t\t\tthis.analyser = audio.context.createAnalyser();\n\t\t\tthis.analyser.fftSize = fftSize;\n\t\t\tthis.data = new Uint8Array(this.analyser.frequencyBinCount);\n\t\t\taudio.getOutput().connect(this.analyser);\n\t\t}\n\n\t\tgetFrequencyData() {\n\t\t\tthis.analyser.getByteFrequencyData(this.data);\n\t\t\treturn this.data;\n\t\t}\n\n\t\tgetAverageFrequency() {\n\t\t\tlet value = 0;\n\t\t\tconst data = this.getFrequencyData();\n\n\t\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\t\tvalue += data[i];\n\t\t\t}\n\n\t\t\treturn value / data.length;\n\t\t}\n\n\t}\n\n\tclass PropertyMixer {\n\t\tconstructor(binding, typeName, valueSize) {\n\t\t\tthis.binding = binding;\n\t\t\tthis.valueSize = valueSize;\n\t\t\tlet mixFunction, mixFunctionAdditive, setIdentity; // buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n\t\t\t//\n\t\t\t// interpolators can use .buffer as their .result\n\t\t\t// the data then goes to 'incoming'\n\t\t\t//\n\t\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t\t// the cumulative result and are compared to detect\n\t\t\t// changes\n\t\t\t//\n\t\t\t// 'orig' stores the original state of the property\n\t\t\t//\n\t\t\t// 'add' is used for additive cumulative results\n\t\t\t//\n\t\t\t// 'work' is optional and is only present for quaternion types. It is used\n\t\t\t// to store intermediate quaternion multiplication results\n\n\t\t\tswitch (typeName) {\n\t\t\t\tcase 'quaternion':\n\t\t\t\t\tmixFunction = this._slerp;\n\t\t\t\t\tmixFunctionAdditive = this._slerpAdditive;\n\t\t\t\t\tsetIdentity = this._setAdditiveIdentityQuaternion;\n\t\t\t\t\tthis.buffer = new Float64Array(valueSize * 6);\n\t\t\t\t\tthis._workIndex = 5;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'string':\n\t\t\t\tcase 'bool':\n\t\t\t\t\tmixFunction = this._select; // Use the regular mix function and for additive on these types,\n\t\t\t\t\t// additive is not relevant for non-numeric types\n\n\t\t\t\t\tmixFunctionAdditive = this._select;\n\t\t\t\t\tsetIdentity = this._setAdditiveIdentityOther;\n\t\t\t\t\tthis.buffer = new Array(valueSize * 5);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tmixFunction = this._lerp;\n\t\t\t\t\tmixFunctionAdditive = this._lerpAdditive;\n\t\t\t\t\tsetIdentity = this._setAdditiveIdentityNumeric;\n\t\t\t\t\tthis.buffer = new Float64Array(valueSize * 5);\n\t\t\t}\n\n\t\t\tthis._mixBufferRegion = mixFunction;\n\t\t\tthis._mixBufferRegionAdditive = mixFunctionAdditive;\n\t\t\tthis._setIdentity = setIdentity;\n\t\t\tthis._origIndex = 3;\n\t\t\tthis._addIndex = 4;\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\t\t\tthis.useCount = 0;\n\t\t\tthis.referenceCount = 0;\n\t\t} // accumulate data in the 'incoming' region into 'accu<i>'\n\n\n\t\taccumulate(accuIndex, weight) {\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\t\t\tconst buffer = this.buffer,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toffset = accuIndex * stride + stride;\n\t\t\tlet currentWeight = this.cumulativeWeight;\n\n\t\t\tif (currentWeight === 0) {\n\t\t\t\t// accuN := incoming * weight\n\t\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\t\tbuffer[offset + i] = buffer[i];\n\t\t\t\t}\n\n\t\t\t\tcurrentWeight = weight;\n\t\t\t} else {\n\t\t\t\t// accuN := accuN + incoming * weight\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tconst mix = weight / currentWeight;\n\n\t\t\t\tthis._mixBufferRegion(buffer, offset, 0, mix, stride);\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = currentWeight;\n\t\t} // accumulate data in the 'incoming' region into 'add'\n\n\n\t\taccumulateAdditive(weight) {\n\t\t\tconst buffer = this.buffer,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toffset = stride * this._addIndex;\n\n\t\t\tif (this.cumulativeWeightAdditive === 0) {\n\t\t\t\t// add = identity\n\t\t\t\tthis._setIdentity();\n\t\t\t} // add := add + incoming * weight\n\n\n\t\t\tthis._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);\n\n\t\t\tthis.cumulativeWeightAdditive += weight;\n\t\t} // apply the state of 'accu<i>' to the binding when accus differ\n\n\n\t\tapply(accuIndex) {\n\t\t\tconst stride = this.valueSize,\n\t\t\t\t\t\tbuffer = this.buffer,\n\t\t\t\t\t\toffset = accuIndex * stride + stride,\n\t\t\t\t\t\tweight = this.cumulativeWeight,\n\t\t\t\t\t\tweightAdditive = this.cumulativeWeightAdditive,\n\t\t\t\t\t\tbinding = this.binding;\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\t\tif (weight < 1) {\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\t\t\t\tconst originalValueOffset = stride * this._origIndex;\n\n\t\t\t\tthis._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);\n\t\t\t}\n\n\t\t\tif (weightAdditive > 0) {\n\t\t\t\t// accuN := accuN + additive accuN\n\t\t\t\tthis._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);\n\t\t\t}\n\n\t\t\tfor (let i = stride, e = stride + stride; i !== e; ++i) {\n\t\t\t\tif (buffer[i] !== buffer[i + stride]) {\n\t\t\t\t\t// value has changed -> update scene graph\n\t\t\t\t\tbinding.setValue(buffer, offset);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} // remember the state of the bound property and copy it to both accus\n\n\n\t\tsaveOriginalState() {\n\t\t\tconst binding = this.binding;\n\t\t\tconst buffer = this.buffer,\n\t\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\t\toriginalValueOffset = stride * this._origIndex;\n\t\t\tbinding.getValue(buffer, originalValueOffset); // accu[0..1] := orig -- initially detect changes against the original\n\n\t\t\tfor (let i = stride, e = originalValueOffset; i !== e; ++i) {\n\t\t\t\tbuffer[i] = buffer[originalValueOffset + i % stride];\n\t\t\t} // Add to identity for additive\n\n\n\t\t\tthis._setIdentity();\n\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\t\t} // apply the state previously taken via 'saveOriginalState' to the binding\n\n\n\t\trestoreOriginalState() {\n\t\t\tconst originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue(this.buffer, originalValueOffset);\n\t\t}\n\n\t\t_setAdditiveIdentityNumeric() {\n\t\t\tconst startIndex = this._addIndex * this.valueSize;\n\t\t\tconst endIndex = startIndex + this.valueSize;\n\n\t\t\tfor (let i = startIndex; i < endIndex; i++) {\n\t\t\t\tthis.buffer[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\t_setAdditiveIdentityQuaternion() {\n\t\t\tthis._setAdditiveIdentityNumeric();\n\n\t\t\tthis.buffer[this._addIndex * this.valueSize + 3] = 1;\n\t\t}\n\n\t\t_setAdditiveIdentityOther() {\n\t\t\tconst startIndex = this._origIndex * this.valueSize;\n\t\t\tconst targetIndex = this._addIndex * this.valueSize;\n\n\t\t\tfor (let i = 0; i < this.valueSize; i++) {\n\t\t\t\tthis.buffer[targetIndex + i] = this.buffer[startIndex + i];\n\t\t\t}\n\t\t} // mix functions\n\n\n\t\t_select(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tif (t >= 0.5) {\n\t\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\t\tbuffer[dstOffset + i] = buffer[srcOffset + i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_slerp(buffer, dstOffset, srcOffset, t) {\n\t\t\tQuaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);\n\t\t}\n\n\t\t_slerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tconst workOffset = this._workIndex * stride; // Store result in intermediate buffer offset\n\n\t\t\tQuaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset); // Slerp to the intermediate result\n\n\t\t\tQuaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);\n\t\t}\n\n\t\t_lerp(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tconst s = 1 - t;\n\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tconst j = dstOffset + i;\n\t\t\t\tbuffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;\n\t\t\t}\n\t\t}\n\n\t\t_lerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tfor (let i = 0; i !== stride; ++i) {\n\t\t\t\tconst j = dstOffset + i;\n\t\t\t\tbuffer[j] = buffer[j] + buffer[srcOffset + i] * t;\n\t\t\t}\n\t\t}\n\n\t}\n\n\t// Characters [].:/ are reserved for track binding syntax.\n\tconst _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n\n\tconst _reservedRe = new RegExp('[' + _RESERVED_CHARS_RE + ']', 'g'); // Attempts to allow node names from any language. ES5's `\\w` regexp matches\n\t// only latin characters, and the unicode \\p{L} is not yet supported. So\n\t// instead, we exclude reserved characters and match everything else.\n\n\n\tconst _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\n\n\tconst _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace('\\\\.', '') + ']'; // Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t// be matched to parse the rest of the track name.\n\n\n\tconst _directoryRe = /((?:WC+[\\/:])*)/.source.replace('WC', _wordChar); // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\n\n\tconst _nodeRe = /(WCOD+)?/.source.replace('WCOD', _wordCharOrDot); // Object on target node, and accessor. May not contain reserved\n\t// characters. Accessor may contain any character except closing bracket.\n\n\n\tconst _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace('WC', _wordChar); // Property and accessor. May not contain reserved characters. Accessor may\n\t// contain any non-bracket characters.\n\n\n\tconst _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace('WC', _wordChar);\n\n\tconst _trackRe = new RegExp('' + '^' + _directoryRe + _nodeRe + _objectRe + _propertyRe + '$');\n\n\tconst _supportedObjectNames = ['material', 'materials', 'bones'];\n\n\tclass Composite {\n\t\tconstructor(targetGroup, path, optionalParsedPath) {\n\t\t\tconst parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);\n\t\t\tthis._targetGroup = targetGroup;\n\t\t\tthis._bindings = targetGroup.subscribe_(path, parsedPath);\n\t\t}\n\n\t\tgetValue(array, offset) {\n\t\t\tthis.bind(); // bind all binding\n\n\t\t\tconst firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\t\t\tbinding = this._bindings[firstValidIndex]; // and only call .getValue on the first\n\n\t\t\tif (binding !== undefined) binding.getValue(array, offset);\n\t\t}\n\n\t\tsetValue(array, offset) {\n\t\t\tconst bindings = this._bindings;\n\n\t\t\tfor (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].setValue(array, offset);\n\t\t\t}\n\t\t}\n\n\t\tbind() {\n\t\t\tconst bindings = this._bindings;\n\n\t\t\tfor (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].bind();\n\t\t\t}\n\t\t}\n\n\t\tunbind() {\n\t\t\tconst bindings = this._bindings;\n\n\t\t\tfor (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].unbind();\n\t\t\t}\n\t\t}\n\n\t} // Note: This class uses a State pattern on a per-method basis:\n\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t// prototype version of these methods with one that represents\n\t// the bound state. When the property is not found, the methods\n\t// become no-ops.\n\n\n\tclass PropertyBinding {\n\t\tconstructor(rootNode, path, parsedPath) {\n\t\t\tthis.path = path;\n\t\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);\n\t\t\tthis.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;\n\t\t\tthis.rootNode = rootNode; // initial state of these methods that calls 'bind'\n\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\t\t}\n\n\t\tstatic create(root, path, parsedPath) {\n\t\t\tif (!(root && root.isAnimationObjectGroup)) {\n\t\t\t\treturn new PropertyBinding(root, path, parsedPath);\n\t\t\t} else {\n\t\t\t\treturn new PropertyBinding.Composite(root, path, parsedPath);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Replaces spaces with underscores and removes unsupported characters from\n\t\t * node names, to ensure compatibility with parseTrackName().\n\t\t *\n\t\t * @param {string} name Node name to be sanitized.\n\t\t * @return {string}\n\t\t */\n\n\n\t\tstatic sanitizeNodeName(name) {\n\t\t\treturn name.replace(/\\s/g, '_').replace(_reservedRe, '');\n\t\t}\n\n\t\tstatic parseTrackName(trackName) {\n\t\t\tconst matches = _trackRe.exec(trackName);\n\n\t\t\tif (!matches) {\n\t\t\t\tthrow new Error('PropertyBinding: Cannot parse trackName: ' + trackName);\n\t\t\t}\n\n\t\t\tconst results = {\n\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\tnodeName: matches[2],\n\t\t\t\tobjectName: matches[3],\n\t\t\t\tobjectIndex: matches[4],\n\t\t\t\tpropertyName: matches[5],\n\t\t\t\t// required\n\t\t\t\tpropertyIndex: matches[6]\n\t\t\t};\n\t\t\tconst lastDot = results.nodeName && results.nodeName.lastIndexOf('.');\n\n\t\t\tif (lastDot !== undefined && lastDot !== -1) {\n\t\t\t\tconst objectName = results.nodeName.substring(lastDot + 1); // Object names must be checked against an allowlist. Otherwise, there\n\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t// include '.' characters).\n\n\t\t\t\tif (_supportedObjectNames.indexOf(objectName) !== -1) {\n\t\t\t\t\tresults.nodeName = results.nodeName.substring(0, lastDot);\n\t\t\t\t\tresults.objectName = objectName;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (results.propertyName === null || results.propertyName.length === 0) {\n\t\t\t\tthrow new Error('PropertyBinding: can not parse propertyName from trackName: ' + trackName);\n\t\t\t}\n\n\t\t\treturn results;\n\t\t}\n\n\t\tstatic findNode(root, nodeName) {\n\t\t\tif (!nodeName || nodeName === '' || nodeName === '.' || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {\n\t\t\t\treturn root;\n\t\t\t} // search into skeleton bones.\n\n\n\t\t\tif (root.skeleton) {\n\t\t\t\tconst bone = root.skeleton.getBoneByName(nodeName);\n\n\t\t\t\tif (bone !== undefined) {\n\t\t\t\t\treturn bone;\n\t\t\t\t}\n\t\t\t} // search into node subtree.\n\n\n\t\t\tif (root.children) {\n\t\t\t\tconst searchNodeSubtree = function (children) {\n\t\t\t\t\tfor (let i = 0; i < children.length; i++) {\n\t\t\t\t\t\tconst childNode = children[i];\n\n\t\t\t\t\t\tif (childNode.name === nodeName || childNode.uuid === nodeName) {\n\t\t\t\t\t\t\treturn childNode;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst result = searchNodeSubtree(childNode.children);\n\t\t\t\t\t\tif (result) return result;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t};\n\n\t\t\t\tconst subTreeNode = searchNodeSubtree(root.children);\n\n\t\t\t\tif (subTreeNode) {\n\t\t\t\t\treturn subTreeNode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t} // these are used to \"bind\" a nonexistent property\n\n\n\t\t_getValue_unavailable() {}\n\n\t\t_setValue_unavailable() {} // Getters\n\n\n\t\t_getValue_direct(buffer, offset) {\n\t\t\tbuffer[offset] = this.targetObject[this.propertyName];\n\t\t}\n\n\t\t_getValue_array(buffer, offset) {\n\t\t\tconst source = this.resolvedProperty;\n\n\t\t\tfor (let i = 0, n = source.length; i !== n; ++i) {\n\t\t\t\tbuffer[offset++] = source[i];\n\t\t\t}\n\t\t}\n\n\t\t_getValue_arrayElement(buffer, offset) {\n\t\t\tbuffer[offset] = this.resolvedProperty[this.propertyIndex];\n\t\t}\n\n\t\t_getValue_toArray(buffer, offset) {\n\t\t\tthis.resolvedProperty.toArray(buffer, offset);\n\t\t} // Direct\n\n\n\t\t_setValue_direct(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t}\n\n\t\t_setValue_direct_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}\n\n\t\t_setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t} // EntireArray\n\n\n\t\t_setValue_array(buffer, offset) {\n\t\t\tconst dest = this.resolvedProperty;\n\n\t\t\tfor (let i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\t\t}\n\n\t\t_setValue_array_setNeedsUpdate(buffer, offset) {\n\t\t\tconst dest = this.resolvedProperty;\n\n\t\t\tfor (let i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}\n\n\t\t_setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tconst dest = this.resolvedProperty;\n\n\t\t\tfor (let i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t} // ArrayElement\n\n\n\t\t_setValue_arrayElement(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t}\n\n\t\t_setValue_arrayElement_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}\n\n\t\t_setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t} // HasToFromArray\n\n\n\t\t_setValue_fromArray(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t}\n\n\t\t_setValue_fromArray_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}\n\n\t\t_setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}\n\n\t\t_getValue_unbound(targetArray, offset) {\n\t\t\tthis.bind();\n\t\t\tthis.getValue(targetArray, offset);\n\t\t}\n\n\t\t_setValue_unbound(sourceArray, offset) {\n\t\t\tthis.bind();\n\t\t\tthis.setValue(sourceArray, offset);\n\t\t} // create getter / setter pair for a property in the scene graph\n\n\n\t\tbind() {\n\t\t\tlet targetObject = this.node;\n\t\t\tconst parsedPath = this.parsedPath;\n\t\t\tconst objectName = parsedPath.objectName;\n\t\t\tconst propertyName = parsedPath.propertyName;\n\t\t\tlet propertyIndex = parsedPath.propertyIndex;\n\n\t\t\tif (!targetObject) {\n\t\t\t\ttargetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;\n\t\t\t\tthis.node = targetObject;\n\t\t\t} // set fail state so we can just 'return' on error\n\n\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable; // ensure there is a value node\n\n\t\t\tif (!targetObject) {\n\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (objectName) {\n\t\t\t\tlet objectIndex = parsedPath.objectIndex; // special cases were we need to reach deeper into the hierarchy to get the face materials....\n\n\t\t\t\tswitch (objectName) {\n\t\t\t\t\tcase 'materials':\n\t\t\t\t\t\tif (!targetObject.material) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!targetObject.material.materials) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bones':\n\t\t\t\t\t\tif (!targetObject.skeleton) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} // potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\n\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones; // support resolving morphTarget names into indices.\n\n\t\t\t\t\t\tfor (let i = 0; i < targetObject.length; i++) {\n\t\t\t\t\t\t\tif (targetObject[i].name === objectIndex) {\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (targetObject[objectName] === undefined) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject[objectName];\n\t\t\t\t}\n\n\t\t\t\tif (objectIndex !== undefined) {\n\t\t\t\t\tif (targetObject[objectIndex] === undefined) {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[objectIndex];\n\t\t\t\t}\n\t\t\t} // resolve property\n\n\n\t\t\tconst nodeProperty = targetObject[propertyName];\n\n\t\t\tif (nodeProperty === undefined) {\n\t\t\t\tconst nodeName = parsedPath.nodeName;\n\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to update property for track: ' + nodeName + '.' + propertyName + ' but it wasn\\'t found.', targetObject);\n\t\t\t\treturn;\n\t\t\t} // determine versioning scheme\n\n\n\t\t\tlet versioning = this.Versioning.None;\n\t\t\tthis.targetObject = targetObject;\n\n\t\t\tif (targetObject.needsUpdate !== undefined) {\n\t\t\t\t// material\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\t\t\t} else if (targetObject.matrixWorldNeedsUpdate !== undefined) {\n\t\t\t\t// node transform\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t\t\t} // determine how the property gets bound\n\n\n\t\t\tlet bindingType = this.BindingType.Direct;\n\n\t\t\tif (propertyIndex !== undefined) {\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\t\t\t\tif (propertyName === 'morphTargetInfluences') {\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif (!targetObject.geometry) {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (targetObject.geometry.isBufferGeometry) {\n\t\t\t\t\t\tif (!targetObject.geometry.morphAttributes) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (targetObject.morphTargetDictionary[propertyIndex] !== undefined) {\n\t\t\t\t\t\t\tpropertyIndex = targetObject.morphTargetDictionary[propertyIndex];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.', this);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\t\t\t} else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t} else if (Array.isArray(nodeProperty)) {\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t} else {\n\t\t\t\tthis.propertyName = propertyName;\n\t\t\t} // select getter / setter\n\n\n\t\t\tthis.getValue = this.GetterByBindingType[bindingType];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];\n\t\t}\n\n\t\tunbind() {\n\t\t\tthis.node = null; // back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\t\t}\n\n\t}\n\n\tPropertyBinding.Composite = Composite;\n\tPropertyBinding.prototype.BindingType = {\n\t\tDirect: 0,\n\t\tEntireArray: 1,\n\t\tArrayElement: 2,\n\t\tHasFromToArray: 3\n\t};\n\tPropertyBinding.prototype.Versioning = {\n\t\tNone: 0,\n\t\tNeedsUpdate: 1,\n\t\tMatrixWorldNeedsUpdate: 2\n\t};\n\tPropertyBinding.prototype.GetterByBindingType = [PropertyBinding.prototype._getValue_direct, PropertyBinding.prototype._getValue_array, PropertyBinding.prototype._getValue_arrayElement, PropertyBinding.prototype._getValue_toArray];\n\tPropertyBinding.prototype.SetterByBindingTypeAndVersioning = [[// Direct\n\tPropertyBinding.prototype._setValue_direct, PropertyBinding.prototype._setValue_direct_setNeedsUpdate, PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate], [// EntireArray\n\tPropertyBinding.prototype._setValue_array, PropertyBinding.prototype._setValue_array_setNeedsUpdate, PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate], [// ArrayElement\n\tPropertyBinding.prototype._setValue_arrayElement, PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate, PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate], [// HasToFromArray\n\tPropertyBinding.prototype._setValue_fromArray, PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate, PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];\n\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t *\t- Add objects you would otherwise pass as 'root' to the\n\t *\t\tconstructor or the .clipAction method of AnimationMixer.\n\t *\n\t *\t- Instead pass this object as 'root'.\n\t *\n\t *\t- You can also add and remove objects later when the mixer\n\t *\t\tis running.\n\t *\n\t * Note:\n\t *\n\t *\t\tObjects of this class appear as one object to the mixer,\n\t *\t\tso cache control of the individual objects must be done\n\t *\t\ton the group.\n\t *\n\t * Limitation:\n\t *\n\t *\t- The animated properties must be compatible among the\n\t *\t\tall objects in the group.\n\t *\n\t *\t- A single property can either be controlled through a\n\t *\t\ttarget group or directly, but not both.\n\t */\n\n\tclass AnimationObjectGroup {\n\t\tconstructor() {\n\t\t\tthis.uuid = generateUUID(); // cached objects followed by the active ones\n\n\t\t\tthis._objects = Array.prototype.slice.call(arguments);\n\t\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t\t// note: read by PropertyBinding.Composite\n\n\t\t\tconst indices = {};\n\t\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\t\tfor (let i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tindices[arguments[i].uuid] = i;\n\t\t\t}\n\n\t\t\tthis._paths = []; // inside: string\n\n\t\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\n\t\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\n\t\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\t\tconst scope = this;\n\t\t\tthis.stats = {\n\t\t\t\tobjects: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._objects.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tget bindingsPerObject() {\n\t\t\t\t\treturn scope._bindings.length;\n\t\t\t\t}\n\n\t\t\t};\n\t\t}\n\n\t\tadd() {\n\t\t\tconst objects = this._objects,\n\t\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\t\tpaths = this._paths,\n\t\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\tnBindings = bindings.length;\n\t\t\tlet knownObject = undefined,\n\t\t\t\t\tnObjects = objects.length,\n\t\t\t\t\tnCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor (let i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tconst object = arguments[i],\n\t\t\t\t\t\t\tuuid = object.uuid;\n\t\t\t\tlet index = indicesByUUID[uuid];\n\n\t\t\t\tif (index === undefined) {\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\t\t\t\t\tindex = nObjects++;\n\t\t\t\t\tindicesByUUID[uuid] = index;\n\t\t\t\t\tobjects.push(object); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tbindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));\n\t\t\t\t\t}\n\t\t\t\t} else if (index < nCachedObjects) {\n\t\t\t\t\tknownObject = objects[index]; // move existing object to the ACTIVE region\n\n\t\t\t\t\tconst firstActiveIndex = --nCachedObjects,\n\t\t\t\t\t\t\t\tlastCachedObject = objects[firstActiveIndex];\n\t\t\t\t\tindicesByUUID[lastCachedObject.uuid] = index;\n\t\t\t\t\tobjects[index] = lastCachedObject;\n\t\t\t\t\tindicesByUUID[uuid] = firstActiveIndex;\n\t\t\t\t\tobjects[firstActiveIndex] = object; // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tconst bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\t\tlastCached = bindingsForPath[firstActiveIndex];\n\t\t\t\t\t\tlet binding = bindingsForPath[index];\n\t\t\t\t\t\tbindingsForPath[index] = lastCached;\n\n\t\t\t\t\t\tif (binding === undefined) {\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\t\t\t\t\t\t\tbinding = new PropertyBinding(object, paths[j], parsedPaths[j]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbindingsForPath[firstActiveIndex] = binding;\n\t\t\t\t\t}\n\t\t\t\t} else if (objects[index] !== knownObject) {\n\t\t\t\t\tconsole.error('THREE.AnimationObjectGroup: Different objects with the same UUID ' + 'detected. Clean the caches or recreate your infrastructure when reloading scenes.');\n\t\t\t\t} // else the object is already where we want it to be\n\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t}\n\n\t\tremove() {\n\t\t\tconst objects = this._objects,\n\t\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\tnBindings = bindings.length;\n\t\t\tlet nCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor (let i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tconst object = arguments[i],\n\t\t\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\t\t\tindex = indicesByUUID[uuid];\n\n\t\t\t\tif (index !== undefined && index >= nCachedObjects) {\n\t\t\t\t\t// move existing object into the CACHED region\n\t\t\t\t\tconst lastCachedIndex = nCachedObjects++,\n\t\t\t\t\t\t\t\tfirstActiveObject = objects[lastCachedIndex];\n\t\t\t\t\tindicesByUUID[firstActiveObject.uuid] = index;\n\t\t\t\t\tobjects[index] = firstActiveObject;\n\t\t\t\t\tindicesByUUID[uuid] = lastCachedIndex;\n\t\t\t\t\tobjects[lastCachedIndex] = object; // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tconst bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\t\tfirstActive = bindingsForPath[lastCachedIndex],\n\t\t\t\t\t\t\t\t\tbinding = bindingsForPath[index];\n\t\t\t\t\t\tbindingsForPath[index] = firstActive;\n\t\t\t\t\t\tbindingsForPath[lastCachedIndex] = binding;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t} // remove & forget\n\n\n\t\tuncache() {\n\t\t\tconst objects = this._objects,\n\t\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\tnBindings = bindings.length;\n\t\t\tlet nCachedObjects = this.nCachedObjects_,\n\t\t\t\t\tnObjects = objects.length;\n\n\t\t\tfor (let i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tconst object = arguments[i],\n\t\t\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\t\t\tindex = indicesByUUID[uuid];\n\n\t\t\t\tif (index !== undefined) {\n\t\t\t\t\tdelete indicesByUUID[uuid];\n\n\t\t\t\t\tif (index < nCachedObjects) {\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\t\t\t\t\t\tconst firstActiveIndex = --nCachedObjects,\n\t\t\t\t\t\t\t\t\tlastCachedObject = objects[firstActiveIndex],\n\t\t\t\t\t\t\t\t\tlastIndex = --nObjects,\n\t\t\t\t\t\t\t\t\tlastObject = objects[lastIndex]; // last cached object takes this object's place\n\n\t\t\t\t\t\tindicesByUUID[lastCachedObject.uuid] = index;\n\t\t\t\t\t\tobjects[index] = lastCachedObject; // last object goes to the activated slot and pop\n\n\t\t\t\t\t\tindicesByUUID[lastObject.uuid] = firstActiveIndex;\n\t\t\t\t\t\tobjects[firstActiveIndex] = lastObject;\n\t\t\t\t\t\tobjects.pop(); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\t\tconst bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\t\t\tlastCached = bindingsForPath[firstActiveIndex],\n\t\t\t\t\t\t\t\t\t\tlast = bindingsForPath[lastIndex];\n\t\t\t\t\t\t\tbindingsForPath[index] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[firstActiveIndex] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\t\t\t\t\t\tconst lastIndex = --nObjects,\n\t\t\t\t\t\t\t\t\tlastObject = objects[lastIndex];\n\n\t\t\t\t\t\tif (lastIndex > 0) {\n\t\t\t\t\t\t\tindicesByUUID[lastObject.uuid] = index;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tobjects[index] = lastObject;\n\t\t\t\t\t\tobjects.pop(); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor (let j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\t\tconst bindingsForPath = bindings[j];\n\t\t\t\t\t\t\tbindingsForPath[index] = bindingsForPath[lastIndex];\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} // cached or active\n\n\t\t\t\t} // if object is known\n\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t} // Internal interface used by befriended PropertyBinding.Composite:\n\n\n\t\tsubscribe_(path, parsedPath) {\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\t\t\tconst indicesByPath = this._bindingsIndicesByPath;\n\t\t\tlet index = indicesByPath[path];\n\t\t\tconst bindings = this._bindings;\n\t\t\tif (index !== undefined) return bindings[index];\n\t\t\tconst paths = this._paths,\n\t\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\t\tobjects = this._objects,\n\t\t\t\t\t\tnObjects = objects.length,\n\t\t\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\t\t\tbindingsForPath = new Array(nObjects);\n\t\t\tindex = bindings.length;\n\t\t\tindicesByPath[path] = index;\n\t\t\tpaths.push(path);\n\t\t\tparsedPaths.push(parsedPath);\n\t\t\tbindings.push(bindingsForPath);\n\n\t\t\tfor (let i = nCachedObjects, n = objects.length; i !== n; ++i) {\n\t\t\t\tconst object = objects[i];\n\t\t\t\tbindingsForPath[i] = new PropertyBinding(object, path, parsedPath);\n\t\t\t}\n\n\t\t\treturn bindingsForPath;\n\t\t}\n\n\t\tunsubscribe_(path) {\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\t\t\tconst indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\t\t\tindex = indicesByPath[path];\n\n\t\t\tif (index !== undefined) {\n\t\t\t\tconst paths = this._paths,\n\t\t\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\t\t\tlastBindings = bindings[lastBindingsIndex],\n\t\t\t\t\t\t\tlastBindingsPath = path[lastBindingsIndex];\n\t\t\t\tindicesByPath[lastBindingsPath] = index;\n\t\t\t\tbindings[index] = lastBindings;\n\t\t\t\tbindings.pop();\n\t\t\t\tparsedPaths[index] = parsedPaths[lastBindingsIndex];\n\t\t\t\tparsedPaths.pop();\n\t\t\t\tpaths[index] = paths[lastBindingsIndex];\n\t\t\t\tpaths.pop();\n\t\t\t}\n\t\t}\n\n\t}\n\n\tAnimationObjectGroup.prototype.isAnimationObjectGroup = true;\n\n\tclass AnimationAction {\n\t\tconstructor(mixer, clip, localRoot = null, blendMode = clip.blendMode) {\n\t\t\tthis._mixer = mixer;\n\t\t\tthis._clip = clip;\n\t\t\tthis._localRoot = localRoot;\n\t\t\tthis.blendMode = blendMode;\n\t\t\tconst tracks = clip.tracks,\n\t\t\t\t\t\tnTracks = tracks.length,\n\t\t\t\t\t\tinterpolants = new Array(nTracks);\n\t\t\tconst interpolantSettings = {\n\t\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t\t};\n\n\t\t\tfor (let i = 0; i !== nTracks; ++i) {\n\t\t\t\tconst interpolant = tracks[i].createInterpolant(null);\n\t\t\t\tinterpolants[i] = interpolant;\n\t\t\t\tinterpolant.settings = interpolantSettings;\n\t\t\t}\n\n\t\t\tthis._interpolantSettings = interpolantSettings;\n\t\t\tthis._interpolants = interpolants; // bound by the mixer\n\t\t\t// inside: PropertyMixer (managed by the mixer)\n\n\t\t\tthis._propertyBindings = new Array(nTracks);\n\t\t\tthis._cacheIndex = null; // for the memory manager\n\n\t\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis.loop = LoopRepeat;\n\t\t\tthis._loopCount = -1; // global mixer time when the action is to be started\n\t\t\t// it's set back to 'null' upon start of the action\n\n\t\t\tthis._startTime = null; // scaled local time of the action\n\t\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\n\t\t\tthis.time = 0;\n\t\t\tthis.timeScale = 1;\n\t\t\tthis._effectiveTimeScale = 1;\n\t\t\tthis.weight = 1;\n\t\t\tthis._effectiveWeight = 1;\n\t\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\t\tthis.paused = false; // true -> zero effective time scale\n\n\t\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\t\tthis.clampWhenFinished = false; // keep feeding the last frame?\n\n\t\t\tthis.zeroSlopeAtStart = true; // for smooth interpolation w/o separate\n\n\t\t\tthis.zeroSlopeAtEnd = true; // clips for start, loop and end\n\t\t} // State & Scheduling\n\n\n\t\tplay() {\n\t\t\tthis._mixer._activateAction(this);\n\n\t\t\treturn this;\n\t\t}\n\n\t\tstop() {\n\t\t\tthis._mixer._deactivateAction(this);\n\n\t\t\treturn this.reset();\n\t\t}\n\n\t\treset() {\n\t\t\tthis.paused = false;\n\t\t\tthis.enabled = true;\n\t\t\tthis.time = 0; // restart clip\n\n\t\t\tthis._loopCount = -1; // forget previous loops\n\n\t\t\tthis._startTime = null; // forget scheduling\n\n\t\t\treturn this.stopFading().stopWarping();\n\t\t}\n\n\t\tisRunning() {\n\t\t\treturn this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);\n\t\t} // return true when play has been called\n\n\n\t\tisScheduled() {\n\t\t\treturn this._mixer._isActiveAction(this);\n\t\t}\n\n\t\tstartAt(time) {\n\t\t\tthis._startTime = time;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetLoop(mode, repetitions) {\n\t\t\tthis.loop = mode;\n\t\t\tthis.repetitions = repetitions;\n\t\t\treturn this;\n\t\t} // Weight\n\t\t// set the weight stopping any scheduled fading\n\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t// method does *not* change .enabled, because it would be confusing\n\n\n\t\tsetEffectiveWeight(weight) {\n\t\t\tthis.weight = weight; // note: same logic as when updated at runtime\n\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\t\t\treturn this.stopFading();\n\t\t} // return the weight considering fading and .enabled\n\n\n\t\tgetEffectiveWeight() {\n\t\t\treturn this._effectiveWeight;\n\t\t}\n\n\t\tfadeIn(duration) {\n\t\t\treturn this._scheduleFading(duration, 0, 1);\n\t\t}\n\n\t\tfadeOut(duration) {\n\t\t\treturn this._scheduleFading(duration, 1, 0);\n\t\t}\n\n\t\tcrossFadeFrom(fadeOutAction, duration, warp) {\n\t\t\tfadeOutAction.fadeOut(duration);\n\t\t\tthis.fadeIn(duration);\n\n\t\t\tif (warp) {\n\t\t\t\tconst fadeInDuration = this._clip.duration,\n\t\t\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\t\t\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\t\t\t\tfadeOutAction.warp(1.0, startEndRatio, duration);\n\t\t\t\tthis.warp(endStartRatio, 1.0, duration);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tcrossFadeTo(fadeInAction, duration, warp) {\n\t\t\treturn fadeInAction.crossFadeFrom(this, duration, warp);\n\t\t}\n\n\t\tstopFading() {\n\t\t\tconst weightInterpolant = this._weightInterpolant;\n\n\t\t\tif (weightInterpolant !== null) {\n\t\t\t\tthis._weightInterpolant = null;\n\n\t\t\t\tthis._mixer._takeBackControlInterpolant(weightInterpolant);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Time Scale Control\n\t\t// set the time scale stopping any scheduled warping\n\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t// method does *not* change .paused, because it would be confusing\n\n\n\t\tsetEffectiveTimeScale(timeScale) {\n\t\t\tthis.timeScale = timeScale;\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\t\t\treturn this.stopWarping();\n\t\t} // return the time scale considering warping and .paused\n\n\n\t\tgetEffectiveTimeScale() {\n\t\t\treturn this._effectiveTimeScale;\n\t\t}\n\n\t\tsetDuration(duration) {\n\t\t\tthis.timeScale = this._clip.duration / duration;\n\t\t\treturn this.stopWarping();\n\t\t}\n\n\t\tsyncWith(action) {\n\t\t\tthis.time = action.time;\n\t\t\tthis.timeScale = action.timeScale;\n\t\t\treturn this.stopWarping();\n\t\t}\n\n\t\thalt(duration) {\n\t\t\treturn this.warp(this._effectiveTimeScale, 0, duration);\n\t\t}\n\n\t\twarp(startTimeScale, endTimeScale, duration) {\n\t\t\tconst mixer = this._mixer,\n\t\t\t\t\t\tnow = mixer.time,\n\t\t\t\t\t\ttimeScale = this.timeScale;\n\t\t\tlet interpolant = this._timeScaleInterpolant;\n\n\t\t\tif (interpolant === null) {\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\t\t\t}\n\n\t\t\tconst times = interpolant.parameterPositions,\n\t\t\t\t\t\tvalues = interpolant.sampleValues;\n\t\t\ttimes[0] = now;\n\t\t\ttimes[1] = now + duration;\n\t\t\tvalues[0] = startTimeScale / timeScale;\n\t\t\tvalues[1] = endTimeScale / timeScale;\n\t\t\treturn this;\n\t\t}\n\n\t\tstopWarping() {\n\t\t\tconst timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\t\tif (timeScaleInterpolant !== null) {\n\t\t\t\tthis._timeScaleInterpolant = null;\n\n\t\t\t\tthis._mixer._takeBackControlInterpolant(timeScaleInterpolant);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Object Accessors\n\n\n\t\tgetMixer() {\n\t\t\treturn this._mixer;\n\t\t}\n\n\t\tgetClip() {\n\t\t\treturn this._clip;\n\t\t}\n\n\t\tgetRoot() {\n\t\t\treturn this._localRoot || this._mixer._root;\n\t\t} // Interna\n\n\n\t\t_update(time, deltaTime, timeDirection, accuIndex) {\n\t\t\t// called by the mixer\n\t\t\tif (!this.enabled) {\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\t\t\t\tthis._updateWeight(time);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst startTime = this._startTime;\n\n\t\t\tif (startTime !== null) {\n\t\t\t\t// check for scheduled start of action\n\t\t\t\tconst timeRunning = (time - startTime) * timeDirection;\n\n\t\t\t\tif (timeRunning < 0 || timeDirection === 0) {\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\t\t\t\t} // start\n\n\n\t\t\t\tthis._startTime = null; // unschedule\n\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\t\t\t} // apply time scale and advance time\n\n\n\t\t\tdeltaTime *= this._updateTimeScale(time);\n\n\t\t\tconst clipTime = this._updateTime(deltaTime); // note: _updateTime may disable the action resulting in\n\t\t\t// an effective weight of 0\n\n\n\t\t\tconst weight = this._updateWeight(time);\n\n\t\t\tif (weight > 0) {\n\t\t\t\tconst interpolants = this._interpolants;\n\t\t\t\tconst propertyMixers = this._propertyBindings;\n\n\t\t\t\tswitch (this.blendMode) {\n\t\t\t\t\tcase AdditiveAnimationBlendMode:\n\t\t\t\t\t\tfor (let j = 0, m = interpolants.length; j !== m; ++j) {\n\t\t\t\t\t\t\tinterpolants[j].evaluate(clipTime);\n\t\t\t\t\t\t\tpropertyMixers[j].accumulateAdditive(weight);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase NormalAnimationBlendMode:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tfor (let j = 0, m = interpolants.length; j !== m; ++j) {\n\t\t\t\t\t\t\tinterpolants[j].evaluate(clipTime);\n\t\t\t\t\t\t\tpropertyMixers[j].accumulate(accuIndex, weight);\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_updateWeight(time) {\n\t\t\tlet weight = 0;\n\n\t\t\tif (this.enabled) {\n\t\t\t\tweight = this.weight;\n\t\t\t\tconst interpolant = this._weightInterpolant;\n\n\t\t\t\tif (interpolant !== null) {\n\t\t\t\t\tconst interpolantValue = interpolant.evaluate(time)[0];\n\t\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\t\tif (time > interpolant.parameterPositions[1]) {\n\t\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\t\tif (interpolantValue === 0) {\n\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\tthis.enabled = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._effectiveWeight = weight;\n\t\t\treturn weight;\n\t\t}\n\n\t\t_updateTimeScale(time) {\n\t\t\tlet timeScale = 0;\n\n\t\t\tif (!this.paused) {\n\t\t\t\ttimeScale = this.timeScale;\n\t\t\t\tconst interpolant = this._timeScaleInterpolant;\n\n\t\t\t\tif (interpolant !== null) {\n\t\t\t\t\tconst interpolantValue = interpolant.evaluate(time)[0];\n\t\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\t\tif (time > interpolant.parameterPositions[1]) {\n\t\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\t\tif (timeScale === 0) {\n\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\tthis.paused = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\treturn timeScale;\n\t\t}\n\n\t\t_updateTime(deltaTime) {\n\t\t\tconst duration = this._clip.duration;\n\t\t\tconst loop = this.loop;\n\t\t\tlet time = this.time + deltaTime;\n\t\t\tlet loopCount = this._loopCount;\n\t\t\tconst pingPong = loop === LoopPingPong;\n\n\t\t\tif (deltaTime === 0) {\n\t\t\t\tif (loopCount === -1) return time;\n\t\t\t\treturn pingPong && (loopCount & 1) === 1 ? duration - time : time;\n\t\t\t}\n\n\t\t\tif (loop === LoopOnce) {\n\t\t\t\tif (loopCount === -1) {\n\t\t\t\t\t// just started\n\t\t\t\t\tthis._loopCount = 0;\n\n\t\t\t\t\tthis._setEndings(true, true, false);\n\t\t\t\t}\n\n\t\t\t\thandle_stop: {\n\t\t\t\t\tif (time >= duration) {\n\t\t\t\t\t\ttime = duration;\n\t\t\t\t\t} else if (time < 0) {\n\t\t\t\t\t\ttime = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.time = time;\n\t\t\t\t\t\tbreak handle_stop;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\ttype: 'finished',\n\t\t\t\t\t\taction: this,\n\t\t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// repetitive Repeat or PingPong\n\t\t\t\tif (loopCount === -1) {\n\t\t\t\t\t// just started\n\t\t\t\t\tif (deltaTime >= 0) {\n\t\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\t\tthis._setEndings(true, this.repetitions === 0, pingPong);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t// so leave loopCount at -1\n\t\t\t\t\t\tthis._setEndings(this.repetitions === 0, true, pingPong);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (time >= duration || time < 0) {\n\t\t\t\t\t// wrap around\n\t\t\t\t\tconst loopDelta = Math.floor(time / duration); // signed\n\n\t\t\t\t\ttime -= duration * loopDelta;\n\t\t\t\t\tloopCount += Math.abs(loopDelta);\n\t\t\t\t\tconst pending = this.repetitions - loopCount;\n\n\t\t\t\t\tif (pending <= 0) {\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\t\t\t\t\t\tif (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'finished',\n\t\t\t\t\t\t\taction: this,\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// keep running\n\t\t\t\t\t\tif (pending === 1) {\n\t\t\t\t\t\t\t// entering the last round\n\t\t\t\t\t\t\tconst atStart = deltaTime < 0;\n\n\t\t\t\t\t\t\tthis._setEndings(atStart, !atStart, pingPong);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._setEndings(false, false, pingPong);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._loopCount = loopCount;\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'loop',\n\t\t\t\t\t\t\taction: this,\n\t\t\t\t\t\t\tloopDelta: loopDelta\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.time = time;\n\t\t\t\t}\n\n\t\t\t\tif (pingPong && (loopCount & 1) === 1) {\n\t\t\t\t\t// invert time for the \"pong round\"\n\t\t\t\t\treturn duration - time;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn time;\n\t\t}\n\n\t\t_setEndings(atStart, atEnd, pingPong) {\n\t\t\tconst settings = this._interpolantSettings;\n\n\t\t\tif (pingPong) {\n\t\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\t\t\t} else {\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\t\t\t\tif (atStart) {\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\t\t\t\t} else {\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\t\t\t\t}\n\n\t\t\t\tif (atEnd) {\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\t\t\t\t} else {\n\t\t\t\t\tsettings.endingEnd = WrapAroundEnding;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_scheduleFading(duration, weightNow, weightThen) {\n\t\t\tconst mixer = this._mixer,\n\t\t\t\t\t\tnow = mixer.time;\n\t\t\tlet interpolant = this._weightInterpolant;\n\n\t\t\tif (interpolant === null) {\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._weightInterpolant = interpolant;\n\t\t\t}\n\n\t\t\tconst times = interpolant.parameterPositions,\n\t\t\t\t\t\tvalues = interpolant.sampleValues;\n\t\t\ttimes[0] = now;\n\t\t\tvalues[0] = weightNow;\n\t\t\ttimes[1] = now + duration;\n\t\t\tvalues[1] = weightThen;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass AnimationMixer extends EventDispatcher {\n\t\tconstructor(root) {\n\t\t\tsuper();\n\t\t\tthis._root = root;\n\n\t\t\tthis._initMemoryManager();\n\n\t\t\tthis._accuIndex = 0;\n\t\t\tthis.time = 0;\n\t\t\tthis.timeScale = 1.0;\n\t\t}\n\n\t\t_bindAction(action, prototypeAction) {\n\t\t\tconst root = action._localRoot || this._root,\n\t\t\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\t\t\tnTracks = tracks.length,\n\t\t\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\t\t\trootUuid = root.uuid,\n\t\t\t\t\t\tbindingsByRoot = this._bindingsByRootAndName;\n\t\t\tlet bindingsByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingsByName === undefined) {\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[rootUuid] = bindingsByName;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i !== nTracks; ++i) {\n\t\t\t\tconst track = tracks[i],\n\t\t\t\t\t\t\ttrackName = track.name;\n\t\t\t\tlet binding = bindingsByName[trackName];\n\n\t\t\t\tif (binding !== undefined) {\n\t\t\t\t\tbindings[i] = binding;\n\t\t\t\t} else {\n\t\t\t\t\tbinding = bindings[i];\n\n\t\t\t\t\tif (binding !== undefined) {\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\t\t\t\t\t\tif (binding._cacheIndex === null) {\n\t\t\t\t\t\t\t++binding.referenceCount;\n\n\t\t\t\t\t\t\tthis._addInactiveBinding(binding, rootUuid, trackName);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;\n\t\t\t\t\tbinding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());\n\t\t\t\t\t++binding.referenceCount;\n\n\t\t\t\t\tthis._addInactiveBinding(binding, rootUuid, trackName);\n\n\t\t\t\t\tbindings[i] = binding;\n\t\t\t\t}\n\n\t\t\t\tinterpolants[i].resultBuffer = binding.buffer;\n\t\t\t}\n\t\t}\n\n\t\t_activateAction(action) {\n\t\t\tif (!this._isActiveAction(action)) {\n\t\t\t\tif (action._cacheIndex === null) {\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\t\t\t\t\tconst rootUuid = (action._localRoot || this._root).uuid,\n\t\t\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\t\t\tactionsForClip = this._actionsByClip[clipUuid];\n\n\t\t\t\t\tthis._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);\n\n\t\t\t\t\tthis._addInactiveAction(action, clipUuid, rootUuid);\n\t\t\t\t}\n\n\t\t\t\tconst bindings = action._propertyBindings; // increment reference counts / sort out state\n\n\t\t\t\tfor (let i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\t\tconst binding = bindings[i];\n\n\t\t\t\t\tif (binding.useCount++ === 0) {\n\t\t\t\t\t\tthis._lendBinding(binding);\n\n\t\t\t\t\t\tbinding.saveOriginalState();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._lendAction(action);\n\t\t\t}\n\t\t}\n\n\t\t_deactivateAction(action) {\n\t\t\tif (this._isActiveAction(action)) {\n\t\t\t\tconst bindings = action._propertyBindings; // decrement reference counts / sort out state\n\n\t\t\t\tfor (let i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\t\tconst binding = bindings[i];\n\n\t\t\t\t\tif (--binding.useCount === 0) {\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\n\t\t\t\t\t\tthis._takeBackBinding(binding);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._takeBackAction(action);\n\t\t\t}\n\t\t} // Memory manager\n\n\n\t\t_initMemoryManager() {\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\n\t\t\tthis._nActiveActions = 0;\n\t\t\tthis._actionsByClip = {}; // inside:\n\t\t\t// {\n\t\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t\t// }\n\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\n\t\t\tthis._nActiveBindings = 0;\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\t\t\tthis._controlInterpolants = []; // same game as above\n\n\t\t\tthis._nActiveControlInterpolants = 0;\n\t\t\tconst scope = this;\n\t\t\tthis.stats = {\n\t\t\t\tactions: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._actions.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveActions;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._bindings.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveBindings;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._controlInterpolants.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t};\n\t\t} // Memory management for AnimationAction objects\n\n\n\t\t_isActiveAction(action) {\n\t\t\tconst index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\t\t}\n\n\t\t_addInactiveAction(action, clipUuid, rootUuid) {\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tactionsByClip = this._actionsByClip;\n\t\t\tlet actionsForClip = actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip === undefined) {\n\t\t\t\tactionsForClip = {\n\t\t\t\t\tknownActions: [action],\n\t\t\t\t\tactionByRoot: {}\n\t\t\t\t};\n\t\t\t\taction._byClipCacheIndex = 0;\n\t\t\t\tactionsByClip[clipUuid] = actionsForClip;\n\t\t\t} else {\n\t\t\t\tconst knownActions = actionsForClip.knownActions;\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push(action);\n\t\t\t}\n\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push(action);\n\t\t\tactionsForClip.actionByRoot[rootUuid] = action;\n\t\t}\n\n\t\t_removeInactiveAction(action) {\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tlastInactiveAction = actions[actions.length - 1],\n\t\t\t\t\t\tcacheIndex = action._cacheIndex;\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[cacheIndex] = lastInactiveAction;\n\t\t\tactions.pop();\n\t\t\taction._cacheIndex = null;\n\t\t\tconst clipUuid = action._clip.uuid,\n\t\t\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\t\t\tactionsForClip = actionsByClip[clipUuid],\n\t\t\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\t\t\t\t\t\tlastKnownAction = knownActionsForClip[knownActionsForClip.length - 1],\n\t\t\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[byClipCacheIndex] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\t\t\taction._byClipCacheIndex = null;\n\t\t\tconst actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\t\t\trootUuid = (action._localRoot || this._root).uuid;\n\t\t\tdelete actionByRoot[rootUuid];\n\n\t\t\tif (knownActionsForClip.length === 0) {\n\t\t\t\tdelete actionsByClip[clipUuid];\n\t\t\t}\n\n\t\t\tthis._removeInactiveBindingsForAction(action);\n\t\t}\n\n\t\t_removeInactiveBindingsForAction(action) {\n\t\t\tconst bindings = action._propertyBindings;\n\n\t\t\tfor (let i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\tconst binding = bindings[i];\n\n\t\t\t\tif (--binding.referenceCount === 0) {\n\t\t\t\t\tthis._removeInactiveBinding(binding);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_lendAction(action) {\n\t\t\t// [ active actions |\tinactive actions\t]\n\t\t\t// [\tactive actions >| inactive actions ]\n\t\t\t//\t\t\t\t\t\t\t\t s\t\t\t\ta\n\t\t\t//\t\t\t\t\t\t\t\t\t<-swap->\n\t\t\t//\t\t\t\t\t\t\t\t a\t\t\t\ts\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tprevIndex = action._cacheIndex,\n\t\t\t\t\t\tlastActiveIndex = this._nActiveActions++,\n\t\t\t\t\t\tfirstInactiveAction = actions[lastActiveIndex];\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[lastActiveIndex] = action;\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[prevIndex] = firstInactiveAction;\n\t\t}\n\n\t\t_takeBackAction(action) {\n\t\t\t// [\tactive actions\t| inactive actions ]\n\t\t\t// [ active actions |< inactive actions\t]\n\t\t\t//\t\t\t\ta\t\t\t\ts\n\t\t\t//\t\t\t\t <-swap->\n\t\t\t//\t\t\t\ts\t\t\t\ta\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tprevIndex = action._cacheIndex,\n\t\t\t\t\t\tfirstInactiveIndex = --this._nActiveActions,\n\t\t\t\t\t\tlastActiveAction = actions[firstInactiveIndex];\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[firstInactiveIndex] = action;\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[prevIndex] = lastActiveAction;\n\t\t} // Memory management for PropertyMixer objects\n\n\n\t\t_addInactiveBinding(binding, rootUuid, trackName) {\n\t\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\t\tbindings = this._bindings;\n\t\t\tlet bindingByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingByName === undefined) {\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[rootUuid] = bindingByName;\n\t\t\t}\n\n\t\t\tbindingByName[trackName] = binding;\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push(binding);\n\t\t}\n\n\t\t_removeInactiveBinding(binding) {\n\t\t\tconst bindings = this._bindings,\n\t\t\t\t\t\tpropBinding = binding.binding,\n\t\t\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\t\t\ttrackName = propBinding.path,\n\t\t\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\t\tbindingByName = bindingsByRoot[rootUuid],\n\t\t\t\t\t\tlastInactiveBinding = bindings[bindings.length - 1],\n\t\t\t\t\t\tcacheIndex = binding._cacheIndex;\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[cacheIndex] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\t\t\tdelete bindingByName[trackName];\n\n\t\t\tif (Object.keys(bindingByName).length === 0) {\n\t\t\t\tdelete bindingsByRoot[rootUuid];\n\t\t\t}\n\t\t}\n\n\t\t_lendBinding(binding) {\n\t\t\tconst bindings = this._bindings,\n\t\t\t\t\t\tprevIndex = binding._cacheIndex,\n\t\t\t\t\t\tlastActiveIndex = this._nActiveBindings++,\n\t\t\t\t\t\tfirstInactiveBinding = bindings[lastActiveIndex];\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[lastActiveIndex] = binding;\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[prevIndex] = firstInactiveBinding;\n\t\t}\n\n\t\t_takeBackBinding(binding) {\n\t\t\tconst bindings = this._bindings,\n\t\t\t\t\t\tprevIndex = binding._cacheIndex,\n\t\t\t\t\t\tfirstInactiveIndex = --this._nActiveBindings,\n\t\t\t\t\t\tlastActiveBinding = bindings[firstInactiveIndex];\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[firstInactiveIndex] = binding;\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[prevIndex] = lastActiveBinding;\n\t\t} // Memory management of Interpolants for weight and time scale\n\n\n\t\t_lendControlInterpolant() {\n\t\t\tconst interpolants = this._controlInterpolants,\n\t\t\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants++;\n\t\t\tlet interpolant = interpolants[lastActiveIndex];\n\n\t\t\tif (interpolant === undefined) {\n\t\t\t\tinterpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[lastActiveIndex] = interpolant;\n\t\t\t}\n\n\t\t\treturn interpolant;\n\t\t}\n\n\t\t_takeBackControlInterpolant(interpolant) {\n\t\t\tconst interpolants = this._controlInterpolants,\n\t\t\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\t\t\t\t\t\tfirstInactiveIndex = --this._nActiveControlInterpolants,\n\t\t\t\t\t\tlastActiveInterpolant = interpolants[firstInactiveIndex];\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[firstInactiveIndex] = interpolant;\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[prevIndex] = lastActiveInterpolant;\n\t\t} // return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\n\n\t\tclipAction(clip, optionalRoot, blendMode) {\n\t\t\tconst root = optionalRoot || this._root,\n\t\t\t\t\t\trootUuid = root.uuid;\n\t\t\tlet clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip;\n\t\t\tconst clipUuid = clipObject !== null ? clipObject.uuid : clip;\n\t\t\tconst actionsForClip = this._actionsByClip[clipUuid];\n\t\t\tlet prototypeAction = null;\n\n\t\t\tif (blendMode === undefined) {\n\t\t\t\tif (clipObject !== null) {\n\t\t\t\t\tblendMode = clipObject.blendMode;\n\t\t\t\t} else {\n\t\t\t\t\tblendMode = NormalAnimationBlendMode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\tconst existingAction = actionsForClip.actionByRoot[rootUuid];\n\n\t\t\t\tif (existingAction !== undefined && existingAction.blendMode === blendMode) {\n\t\t\t\t\treturn existingAction;\n\t\t\t\t} // we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\n\n\t\t\t\tprototypeAction = actionsForClip.knownActions[0]; // also, take the clip from the prototype action\n\n\t\t\t\tif (clipObject === null) clipObject = prototypeAction._clip;\n\t\t\t} // clip must be known when specified via string\n\n\n\t\t\tif (clipObject === null) return null; // allocate all resources required to run it\n\n\t\t\tconst newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);\n\n\t\t\tthis._bindAction(newAction, prototypeAction); // and make the action known to the memory manager\n\n\n\t\t\tthis._addInactiveAction(newAction, clipUuid, rootUuid);\n\n\t\t\treturn newAction;\n\t\t} // get an existing action\n\n\n\t\texistingAction(clip, optionalRoot) {\n\t\t\tconst root = optionalRoot || this._root,\n\t\t\t\t\t\trootUuid = root.uuid,\n\t\t\t\t\t\tclipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip,\n\t\t\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\t\t\t\t\t\tactionsForClip = this._actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\treturn actionsForClip.actionByRoot[rootUuid] || null;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t} // deactivates all previously scheduled actions\n\n\n\t\tstopAllAction() {\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tnActions = this._nActiveActions;\n\n\t\t\tfor (let i = nActions - 1; i >= 0; --i) {\n\t\t\t\tactions[i].stop();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // advance the time and update apply the animation\n\n\n\t\tupdate(deltaTime) {\n\t\t\tdeltaTime *= this.timeScale;\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tnActions = this._nActiveActions,\n\t\t\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\t\t\ttimeDirection = Math.sign(deltaTime),\n\t\t\t\t\t\taccuIndex = this._accuIndex ^= 1; // run active actions\n\n\t\t\tfor (let i = 0; i !== nActions; ++i) {\n\t\t\t\tconst action = actions[i];\n\n\t\t\t\taction._update(time, deltaTime, timeDirection, accuIndex);\n\t\t\t} // update scene graph\n\n\n\t\t\tconst bindings = this._bindings,\n\t\t\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tfor (let i = 0; i !== nBindings; ++i) {\n\t\t\t\tbindings[i].apply(accuIndex);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Allows you to seek to a specific time in an animation.\n\n\n\t\tsetTime(timeInSeconds) {\n\t\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\n\t\t\tfor (let i = 0; i < this._actions.length; i++) {\n\t\t\t\tthis._actions[i].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\t\t\t}\n\n\t\t\treturn this.update(timeInSeconds); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\t\t} // return this mixer's root target object\n\n\n\t\tgetRoot() {\n\t\t\treturn this._root;\n\t\t} // free all resources specific to a particular clip\n\n\n\t\tuncacheClip(clip) {\n\t\t\tconst actions = this._actions,\n\t\t\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\t\t\tactionsForClip = actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\t\t\t\tconst actionsToRemove = actionsForClip.knownActions;\n\n\t\t\t\tfor (let i = 0, n = actionsToRemove.length; i !== n; ++i) {\n\t\t\t\t\tconst action = actionsToRemove[i];\n\n\t\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\t\tconst cacheIndex = action._cacheIndex,\n\t\t\t\t\t\t\t\tlastInactiveAction = actions[actions.length - 1];\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[cacheIndex] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\n\t\t\t\t\tthis._removeInactiveBindingsForAction(action);\n\t\t\t\t}\n\n\t\t\t\tdelete actionsByClip[clipUuid];\n\t\t\t}\n\t\t} // free all resources specific to a particular root target object\n\n\n\t\tuncacheRoot(root) {\n\t\t\tconst rootUuid = root.uuid,\n\t\t\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tfor (const clipUuid in actionsByClip) {\n\t\t\t\tconst actionByRoot = actionsByClip[clipUuid].actionByRoot,\n\t\t\t\t\t\t\taction = actionByRoot[rootUuid];\n\n\t\t\t\tif (action !== undefined) {\n\t\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\t\tthis._removeInactiveAction(action);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\t\tbindingByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingByName !== undefined) {\n\t\t\t\tfor (const trackName in bindingByName) {\n\t\t\t\t\tconst binding = bindingByName[trackName];\n\t\t\t\t\tbinding.restoreOriginalState();\n\n\t\t\t\t\tthis._removeInactiveBinding(binding);\n\t\t\t\t}\n\t\t\t}\n\t\t} // remove a targeted clip from the cache\n\n\n\t\tuncacheAction(clip, optionalRoot) {\n\t\t\tconst action = this.existingAction(clip, optionalRoot);\n\n\t\t\tif (action !== null) {\n\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\tthis._removeInactiveAction(action);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tAnimationMixer.prototype._controlInterpolantsResultBuffer = new Float32Array(1);\n\n\tclass Uniform {\n\t\tconstructor(value) {\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tconsole.warn('THREE.Uniform: Type parameter is no longer needed.');\n\t\t\t\tvalue = arguments[1];\n\t\t\t}\n\n\t\t\tthis.value = value;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new Uniform(this.value.clone === undefined ? this.value : this.value.clone());\n\t\t}\n\n\t}\n\n\tclass InstancedInterleavedBuffer extends InterleavedBuffer {\n\t\tconstructor(array, stride, meshPerAttribute = 1) {\n\t\t\tsuper(array, stride);\n\t\t\tthis.meshPerAttribute = meshPerAttribute;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source);\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone(data) {\n\t\t\tconst ib = super.clone(data);\n\t\t\tib.meshPerAttribute = this.meshPerAttribute;\n\t\t\treturn ib;\n\t\t}\n\n\t\ttoJSON(data) {\n\t\t\tconst json = super.toJSON(data);\n\t\t\tjson.isInstancedInterleavedBuffer = true;\n\t\t\tjson.meshPerAttribute = this.meshPerAttribute;\n\t\t\treturn json;\n\t\t}\n\n\t}\n\n\tInstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;\n\n\tclass GLBufferAttribute {\n\t\tconstructor(buffer, type, itemSize, elementSize, count) {\n\t\t\tthis.buffer = buffer;\n\t\t\tthis.type = type;\n\t\t\tthis.itemSize = itemSize;\n\t\t\tthis.elementSize = elementSize;\n\t\t\tthis.count = count;\n\t\t\tthis.version = 0;\n\t\t}\n\n\t\tset needsUpdate(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\n\t\tsetBuffer(buffer) {\n\t\t\tthis.buffer = buffer;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetType(type, elementSize) {\n\t\t\tthis.type = type;\n\t\t\tthis.elementSize = elementSize;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetItemSize(itemSize) {\n\t\t\tthis.itemSize = itemSize;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetCount(count) {\n\t\t\tthis.count = count;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tGLBufferAttribute.prototype.isGLBufferAttribute = true;\n\n\tclass Raycaster {\n\t\tconstructor(origin, direction, near = 0, far = Infinity) {\n\t\t\tthis.ray = new Ray(origin, direction); // direction is assumed to be normalized (for accurate distance calculations)\n\n\t\t\tthis.near = near;\n\t\t\tthis.far = far;\n\t\t\tthis.camera = null;\n\t\t\tthis.layers = new Layers();\n\t\t\tthis.params = {\n\t\t\t\tMesh: {},\n\t\t\t\tLine: {\n\t\t\t\t\tthreshold: 1\n\t\t\t\t},\n\t\t\t\tLOD: {},\n\t\t\t\tPoints: {\n\t\t\t\t\tthreshold: 1\n\t\t\t\t},\n\t\t\t\tSprite: {}\n\t\t\t};\n\t\t}\n\n\t\tset(origin, direction) {\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\t\t\tthis.ray.set(origin, direction);\n\t\t}\n\n\t\tsetFromCamera(coords, camera) {\n\t\t\tif (camera && camera.isPerspectiveCamera) {\n\t\t\t\tthis.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n\t\t\t\tthis.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();\n\t\t\t\tthis.camera = camera;\n\t\t\t} else if (camera && camera.isOrthographicCamera) {\n\t\t\t\tthis.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera\n\n\t\t\t\tthis.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n\t\t\t\tthis.camera = camera;\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Raycaster: Unsupported camera type: ' + camera.type);\n\t\t\t}\n\t\t}\n\n\t\tintersectObject(object, recursive = true, intersects = []) {\n\t\t\tintersectObject(object, this, intersects, recursive);\n\t\t\tintersects.sort(ascSort);\n\t\t\treturn intersects;\n\t\t}\n\n\t\tintersectObjects(objects, recursive = true, intersects = []) {\n\t\t\tfor (let i = 0, l = objects.length; i < l; i++) {\n\t\t\t\tintersectObject(objects[i], this, intersects, recursive);\n\t\t\t}\n\n\t\t\tintersects.sort(ascSort);\n\t\t\treturn intersects;\n\t\t}\n\n\t}\n\n\tfunction ascSort(a, b) {\n\t\treturn a.distance - b.distance;\n\t}\n\n\tfunction intersectObject(object, raycaster, intersects, recursive) {\n\t\tif (object.layers.test(raycaster.layers)) {\n\t\t\tobject.raycast(raycaster, intersects);\n\t\t}\n\n\t\tif (recursive === true) {\n\t\t\tconst children = object.children;\n\n\t\t\tfor (let i = 0, l = children.length; i < l; i++) {\n\t\t\t\tintersectObject(children[i], raycaster, intersects, true);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n\t * The azimuthal angle (theta) is measured from the positive z-axis.\n\t */\n\n\tclass Spherical {\n\t\tconstructor(radius = 1, phi = 0, theta = 0) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi; // polar angle\n\n\t\t\tthis.theta = theta; // azimuthal angle\n\n\t\t\treturn this;\n\t\t}\n\n\t\tset(radius, phi, theta) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi;\n\t\t\tthis.theta = theta;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(other) {\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.phi = other.phi;\n\t\t\tthis.theta = other.theta;\n\t\t\treturn this;\n\t\t} // restrict phi to be betwee EPS and PI-EPS\n\n\n\t\tmakeSafe() {\n\t\t\tconst EPS = 0.000001;\n\t\t\tthis.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromVector3(v) {\n\t\t\treturn this.setFromCartesianCoords(v.x, v.y, v.z);\n\t\t}\n\n\t\tsetFromCartesianCoords(x, y, z) {\n\t\t\tthis.radius = Math.sqrt(x * x + y * y + z * z);\n\n\t\t\tif (this.radius === 0) {\n\t\t\t\tthis.theta = 0;\n\t\t\t\tthis.phi = 0;\n\t\t\t} else {\n\t\t\t\tthis.theta = Math.atan2(x, z);\n\t\t\t\tthis.phi = Math.acos(clamp(y / this.radius, -1, 1));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\t/**\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n\t */\n\tclass Cylindrical {\n\t\tconstructor(radius = 1, theta = 0, y = 0) {\n\t\t\tthis.radius = radius; // distance from the origin to a point in the x-z plane\n\n\t\t\tthis.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\n\t\t\tthis.y = y; // height above the x-z plane\n\n\t\t\treturn this;\n\t\t}\n\n\t\tset(radius, theta, y) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.theta = theta;\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(other) {\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.theta = other.theta;\n\t\t\tthis.y = other.y;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromVector3(v) {\n\t\t\treturn this.setFromCartesianCoords(v.x, v.y, v.z);\n\t\t}\n\n\t\tsetFromCartesianCoords(x, y, z) {\n\t\t\tthis.radius = Math.sqrt(x * x + z * z);\n\t\t\tthis.theta = Math.atan2(x, z);\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tconst _vector$4 = /*@__PURE__*/new Vector2();\n\n\tclass Box2 {\n\t\tconstructor(min = new Vector2(+Infinity, +Infinity), max = new Vector2(-Infinity, -Infinity)) {\n\t\t\tthis.min = min;\n\t\t\tthis.max = max;\n\t\t}\n\n\t\tset(min, max) {\n\t\t\tthis.min.copy(min);\n\t\t\tthis.max.copy(max);\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromPoints(points) {\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor (let i = 0, il = points.length; i < il; i++) {\n\t\t\t\tthis.expandByPoint(points[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tsetFromCenterAndSize(center, size) {\n\t\t\tconst halfSize = _vector$4.copy(size).multiplyScalar(0.5);\n\n\t\t\tthis.min.copy(center).sub(halfSize);\n\t\t\tthis.max.copy(center).add(halfSize);\n\t\t\treturn this;\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t\tcopy(box) {\n\t\t\tthis.min.copy(box.min);\n\t\t\tthis.max.copy(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\tmakeEmpty() {\n\t\t\tthis.min.x = this.min.y = +Infinity;\n\t\t\tthis.max.x = this.max.y = -Infinity;\n\t\t\treturn this;\n\t\t}\n\n\t\tisEmpty() {\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\t\treturn this.max.x < this.min.x || this.max.y < this.min.y;\n\t\t}\n\n\t\tgetCenter(target) {\n\t\t\treturn this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n\t\t}\n\n\t\tgetSize(target) {\n\t\t\treturn this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);\n\t\t}\n\n\t\texpandByPoint(point) {\n\t\t\tthis.min.min(point);\n\t\t\tthis.max.max(point);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByVector(vector) {\n\t\t\tthis.min.sub(vector);\n\t\t\tthis.max.add(vector);\n\t\t\treturn this;\n\t\t}\n\n\t\texpandByScalar(scalar) {\n\t\t\tthis.min.addScalar(-scalar);\n\t\t\tthis.max.addScalar(scalar);\n\t\t\treturn this;\n\t\t}\n\n\t\tcontainsPoint(point) {\n\t\t\treturn point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;\n\t\t}\n\n\t\tcontainsBox(box) {\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;\n\t\t}\n\n\t\tgetParameter(point, target) {\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\t\t\treturn target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));\n\t\t}\n\n\t\tintersectsBox(box) {\n\t\t\t// using 4 splitting planes to rule out intersections\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\t\t}\n\n\t\tclampPoint(point, target) {\n\t\t\treturn target.copy(point).clamp(this.min, this.max);\n\t\t}\n\n\t\tdistanceToPoint(point) {\n\t\t\tconst clampedPoint = _vector$4.copy(point).clamp(this.min, this.max);\n\n\t\t\treturn clampedPoint.sub(point).length();\n\t\t}\n\n\t\tintersect(box) {\n\t\t\tthis.min.max(box.min);\n\t\t\tthis.max.min(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\tunion(box) {\n\t\t\tthis.min.min(box.min);\n\t\t\tthis.max.max(box.max);\n\t\t\treturn this;\n\t\t}\n\n\t\ttranslate(offset) {\n\t\t\tthis.min.add(offset);\n\t\t\tthis.max.add(offset);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(box) {\n\t\t\treturn box.min.equals(this.min) && box.max.equals(this.max);\n\t\t}\n\n\t}\n\n\tBox2.prototype.isBox2 = true;\n\n\tconst _startP = /*@__PURE__*/new Vector3();\n\n\tconst _startEnd = /*@__PURE__*/new Vector3();\n\n\tclass Line3 {\n\t\tconstructor(start = new Vector3(), end = new Vector3()) {\n\t\t\tthis.start = start;\n\t\t\tthis.end = end;\n\t\t}\n\n\t\tset(start, end) {\n\t\t\tthis.start.copy(start);\n\t\t\tthis.end.copy(end);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(line) {\n\t\t\tthis.start.copy(line.start);\n\t\t\tthis.end.copy(line.end);\n\t\t\treturn this;\n\t\t}\n\n\t\tgetCenter(target) {\n\t\t\treturn target.addVectors(this.start, this.end).multiplyScalar(0.5);\n\t\t}\n\n\t\tdelta(target) {\n\t\t\treturn target.subVectors(this.end, this.start);\n\t\t}\n\n\t\tdistanceSq() {\n\t\t\treturn this.start.distanceToSquared(this.end);\n\t\t}\n\n\t\tdistance() {\n\t\t\treturn this.start.distanceTo(this.end);\n\t\t}\n\n\t\tat(t, target) {\n\t\t\treturn this.delta(target).multiplyScalar(t).add(this.start);\n\t\t}\n\n\t\tclosestPointToPointParameter(point, clampToLine) {\n\t\t\t_startP.subVectors(point, this.start);\n\n\t\t\t_startEnd.subVectors(this.end, this.start);\n\n\t\t\tconst startEnd2 = _startEnd.dot(_startEnd);\n\n\t\t\tconst startEnd_startP = _startEnd.dot(_startP);\n\n\t\t\tlet t = startEnd_startP / startEnd2;\n\n\t\t\tif (clampToLine) {\n\t\t\t\tt = clamp(t, 0, 1);\n\t\t\t}\n\n\t\t\treturn t;\n\t\t}\n\n\t\tclosestPointToPoint(point, clampToLine, target) {\n\t\t\tconst t = this.closestPointToPointParameter(point, clampToLine);\n\t\t\treturn this.delta(target).multiplyScalar(t).add(this.start);\n\t\t}\n\n\t\tapplyMatrix4(matrix) {\n\t\t\tthis.start.applyMatrix4(matrix);\n\t\t\tthis.end.applyMatrix4(matrix);\n\t\t\treturn this;\n\t\t}\n\n\t\tequals(line) {\n\t\t\treturn line.start.equals(this.start) && line.end.equals(this.end);\n\t\t}\n\n\t\tclone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\n\t}\n\n\tconst _vector$3 = /*@__PURE__*/new Vector3();\n\n\tclass SpotLightHelper extends Object3D {\n\t\tconstructor(light, color) {\n\t\t\tsuper();\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tthis.matrix = light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.color = color;\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tconst positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];\n\n\t\t\tfor (let i = 0, j = 1, l = 32; i < l; i++, j++) {\n\t\t\t\tconst p1 = i / l * Math.PI * 2;\n\t\t\t\tconst p2 = j / l * Math.PI * 2;\n\t\t\t\tpositions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tthis.cone = new LineSegments(geometry, material);\n\t\t\tthis.add(this.cone);\n\t\t\tthis.update();\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.cone.geometry.dispose();\n\t\t\tthis.cone.material.dispose();\n\t\t}\n\n\t\tupdate() {\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tconst coneLength = this.light.distance ? this.light.distance : 1000;\n\t\t\tconst coneWidth = coneLength * Math.tan(this.light.angle);\n\t\t\tthis.cone.scale.set(coneWidth, coneWidth, coneLength);\n\n\t\t\t_vector$3.setFromMatrixPosition(this.light.target.matrixWorld);\n\n\t\t\tthis.cone.lookAt(_vector$3);\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.cone.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.cone.material.color.copy(this.light.color);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tconst _vector$2 = /*@__PURE__*/new Vector3();\n\n\tconst _boneMatrix = /*@__PURE__*/new Matrix4();\n\n\tconst _matrixWorldInv = /*@__PURE__*/new Matrix4();\n\n\tclass SkeletonHelper extends LineSegments {\n\t\tconstructor(object) {\n\t\t\tconst bones = getBoneList(object);\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tconst vertices = [];\n\t\t\tconst colors = [];\n\t\t\tconst color1 = new Color(0, 0, 1);\n\t\t\tconst color2 = new Color(0, 1, 0);\n\n\t\t\tfor (let i = 0; i < bones.length; i++) {\n\t\t\t\tconst bone = bones[i];\n\n\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\t\tcolors.push(color1.r, color1.g, color1.b);\n\t\t\t\t\tcolors.push(color2.r, color2.g, color2.b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\tdepthTest: false,\n\t\t\t\tdepthWrite: false,\n\t\t\t\ttoneMapped: false,\n\t\t\t\ttransparent: true\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'SkeletonHelper';\n\t\t\tthis.isSkeletonHelper = true;\n\t\t\tthis.root = object;\n\t\t\tthis.bones = bones;\n\t\t\tthis.matrix = object.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tconst bones = this.bones;\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst position = geometry.getAttribute('position');\n\n\t\t\t_matrixWorldInv.copy(this.root.matrixWorld).invert();\n\n\t\t\tfor (let i = 0, j = 0; i < bones.length; i++) {\n\t\t\t\tconst bone = bones[i];\n\n\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\t_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);\n\n\t\t\t\t\t_vector$2.setFromMatrixPosition(_boneMatrix);\n\n\t\t\t\t\tposition.setXYZ(j, _vector$2.x, _vector$2.y, _vector$2.z);\n\n\t\t\t\t\t_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);\n\n\t\t\t\t\t_vector$2.setFromMatrixPosition(_boneMatrix);\n\n\t\t\t\t\tposition.setXYZ(j + 1, _vector$2.x, _vector$2.y, _vector$2.z);\n\t\t\t\t\tj += 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeometry.getAttribute('position').needsUpdate = true;\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t}\n\n\t}\n\n\tfunction getBoneList(object) {\n\t\tconst boneList = [];\n\n\t\tif (object && object.isBone) {\n\t\t\tboneList.push(object);\n\t\t}\n\n\t\tfor (let i = 0; i < object.children.length; i++) {\n\t\t\tboneList.push.apply(boneList, getBoneList(object.children[i]));\n\t\t}\n\n\t\treturn boneList;\n\t}\n\n\tclass PointLightHelper extends Mesh {\n\t\tconstructor(light, sphereSize, color) {\n\t\t\tconst geometry = new SphereGeometry(sphereSize, 4, 2);\n\t\t\tconst material = new MeshBasicMaterial({\n\t\t\t\twireframe: true,\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tthis.color = color;\n\t\t\tthis.type = 'PointLightHelper';\n\t\t\tthis.matrix = this.light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.update();\n\t\t\t/*\n\t\t\t// TODO: delete this comment?\n\t\t\tconst distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\n\t\t\tconst distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\t\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\t\t\tconst d = light.distance;\n\t\t\tif ( d === 0.0 ) {\n\t\t\t\tthis.lightDistance.visible = false;\n\t\t\t} else {\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\n\t\t\t}\n\t\t\tthis.add( this.lightDistance );\n\t\t\t*/\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.geometry.dispose();\n\t\t\tthis.material.dispose();\n\t\t}\n\n\t\tupdate() {\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.material.color.copy(this.light.color);\n\t\t\t}\n\t\t\t/*\n\t\t\tconst d = this.light.distance;\n\t\t\t\tif ( d === 0.0 ) {\n\t\t\t\t\tthis.lightDistance.visible = false;\n\t\t\t\t} else {\n\t\t\t\t\tthis.lightDistance.visible = true;\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\n\t\t\t\t}\n\t\t\t*/\n\n\t\t}\n\n\t}\n\n\tconst _vector$1 = /*@__PURE__*/new Vector3();\n\n\tconst _color1 = /*@__PURE__*/new Color();\n\n\tconst _color2 = /*@__PURE__*/new Color();\n\n\tclass HemisphereLightHelper extends Object3D {\n\t\tconstructor(light, size, color) {\n\t\t\tsuper();\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tthis.matrix = light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.color = color;\n\t\t\tconst geometry = new OctahedronGeometry(size);\n\t\t\tgeometry.rotateY(Math.PI * 0.5);\n\t\t\tthis.material = new MeshBasicMaterial({\n\t\t\t\twireframe: true,\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tif (this.color === undefined) this.material.vertexColors = true;\n\t\t\tconst position = geometry.getAttribute('position');\n\t\t\tconst colors = new Float32Array(position.count * 3);\n\t\t\tgeometry.setAttribute('color', new BufferAttribute(colors, 3));\n\t\t\tthis.add(new Mesh(geometry, this.material));\n\t\t\tthis.update();\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.children[0].geometry.dispose();\n\t\t\tthis.children[0].material.dispose();\n\t\t}\n\n\t\tupdate() {\n\t\t\tconst mesh = this.children[0];\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tconst colors = mesh.geometry.getAttribute('color');\n\n\t\t\t\t_color1.copy(this.light.color);\n\n\t\t\t\t_color2.copy(this.light.groundColor);\n\n\t\t\t\tfor (let i = 0, l = colors.count; i < l; i++) {\n\t\t\t\t\tconst color = i < l / 2 ? _color1 : _color2;\n\t\t\t\t\tcolors.setXYZ(i, color.r, color.g, color.b);\n\t\t\t\t}\n\n\t\t\t\tcolors.needsUpdate = true;\n\t\t\t}\n\n\t\t\tmesh.lookAt(_vector$1.setFromMatrixPosition(this.light.matrixWorld).negate());\n\t\t}\n\n\t}\n\n\tclass GridHelper extends LineSegments {\n\t\tconstructor(size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888) {\n\t\t\tcolor1 = new Color(color1);\n\t\t\tcolor2 = new Color(color2);\n\t\t\tconst center = divisions / 2;\n\t\t\tconst step = size / divisions;\n\t\t\tconst halfSize = size / 2;\n\t\t\tconst vertices = [],\n\t\t\t\t\t\tcolors = [];\n\n\t\t\tfor (let i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {\n\t\t\t\tvertices.push(-halfSize, 0, k, halfSize, 0, k);\n\t\t\t\tvertices.push(k, 0, -halfSize, k, 0, halfSize);\n\t\t\t\tconst color = i === center ? color1 : color2;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t}\n\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'GridHelper';\n\t\t}\n\n\t}\n\n\tclass PolarGridHelper extends LineSegments {\n\t\tconstructor(radius = 10, radials = 16, circles = 8, divisions = 64, color1 = 0x444444, color2 = 0x888888) {\n\t\t\tcolor1 = new Color(color1);\n\t\t\tcolor2 = new Color(color2);\n\t\t\tconst vertices = [];\n\t\t\tconst colors = []; // create the radials\n\n\t\t\tfor (let i = 0; i <= radials; i++) {\n\t\t\t\tconst v = i / radials * (Math.PI * 2);\n\t\t\t\tconst x = Math.sin(v) * radius;\n\t\t\t\tconst z = Math.cos(v) * radius;\n\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\tvertices.push(x, 0, z);\n\t\t\t\tconst color = i & 1 ? color1 : color2;\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t} // create the circles\n\n\n\t\t\tfor (let i = 0; i <= circles; i++) {\n\t\t\t\tconst color = i & 1 ? color1 : color2;\n\t\t\t\tconst r = radius - radius / circles * i;\n\n\t\t\t\tfor (let j = 0; j < divisions; j++) {\n\t\t\t\t\t// first vertex\n\t\t\t\t\tlet v = j / divisions * (Math.PI * 2);\n\t\t\t\t\tlet x = Math.sin(v) * r;\n\t\t\t\t\tlet z = Math.cos(v) * r;\n\t\t\t\t\tvertices.push(x, 0, z);\n\t\t\t\t\tcolors.push(color.r, color.g, color.b); // second vertex\n\n\t\t\t\t\tv = (j + 1) / divisions * (Math.PI * 2);\n\t\t\t\t\tx = Math.sin(v) * r;\n\t\t\t\t\tz = Math.cos(v) * r;\n\t\t\t\t\tvertices.push(x, 0, z);\n\t\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'PolarGridHelper';\n\t\t}\n\n\t}\n\n\tconst _v1 = /*@__PURE__*/new Vector3();\n\n\tconst _v2 = /*@__PURE__*/new Vector3();\n\n\tconst _v3 = /*@__PURE__*/new Vector3();\n\n\tclass DirectionalLightHelper extends Object3D {\n\t\tconstructor(light, size, color) {\n\t\t\tsuper();\n\t\t\tthis.light = light;\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tthis.matrix = light.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.color = color;\n\t\t\tif (size === undefined) size = 1;\n\t\t\tlet geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute([-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0], 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tthis.lightPlane = new Line(geometry, material);\n\t\t\tthis.add(this.lightPlane);\n\t\t\tgeometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));\n\t\t\tthis.targetLine = new Line(geometry, material);\n\t\t\tthis.add(this.targetLine);\n\t\t\tthis.update();\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.lightPlane.geometry.dispose();\n\t\t\tthis.lightPlane.material.dispose();\n\t\t\tthis.targetLine.geometry.dispose();\n\t\t\tthis.targetLine.material.dispose();\n\t\t}\n\n\t\tupdate() {\n\t\t\t_v1.setFromMatrixPosition(this.light.matrixWorld);\n\n\t\t\t_v2.setFromMatrixPosition(this.light.target.matrixWorld);\n\n\t\t\t_v3.subVectors(_v2, _v1);\n\n\t\t\tthis.lightPlane.lookAt(_v2);\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.lightPlane.material.color.set(this.color);\n\t\t\t\tthis.targetLine.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.lightPlane.material.color.copy(this.light.color);\n\t\t\t\tthis.targetLine.material.color.copy(this.light.color);\n\t\t\t}\n\n\t\t\tthis.targetLine.lookAt(_v2);\n\t\t\tthis.targetLine.scale.z = _v3.length();\n\t\t}\n\n\t}\n\n\tconst _vector = /*@__PURE__*/new Vector3();\n\n\tconst _camera = /*@__PURE__*/new Camera();\n\t/**\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\n\n\tclass CameraHelper extends LineSegments {\n\t\tconstructor(camera) {\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tcolor: 0xffffff,\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tconst vertices = [];\n\t\t\tconst colors = [];\n\t\t\tconst pointMap = {}; // colors\n\n\t\t\tconst colorFrustum = new Color(0xffaa00);\n\t\t\tconst colorCone = new Color(0xff0000);\n\t\t\tconst colorUp = new Color(0x00aaff);\n\t\t\tconst colorTarget = new Color(0xffffff);\n\t\t\tconst colorCross = new Color(0x333333); // near\n\n\t\t\taddLine('n1', 'n2', colorFrustum);\n\t\t\taddLine('n2', 'n4', colorFrustum);\n\t\t\taddLine('n4', 'n3', colorFrustum);\n\t\t\taddLine('n3', 'n1', colorFrustum); // far\n\n\t\t\taddLine('f1', 'f2', colorFrustum);\n\t\t\taddLine('f2', 'f4', colorFrustum);\n\t\t\taddLine('f4', 'f3', colorFrustum);\n\t\t\taddLine('f3', 'f1', colorFrustum); // sides\n\n\t\t\taddLine('n1', 'f1', colorFrustum);\n\t\t\taddLine('n2', 'f2', colorFrustum);\n\t\t\taddLine('n3', 'f3', colorFrustum);\n\t\t\taddLine('n4', 'f4', colorFrustum); // cone\n\n\t\t\taddLine('p', 'n1', colorCone);\n\t\t\taddLine('p', 'n2', colorCone);\n\t\t\taddLine('p', 'n3', colorCone);\n\t\t\taddLine('p', 'n4', colorCone); // up\n\n\t\t\taddLine('u1', 'u2', colorUp);\n\t\t\taddLine('u2', 'u3', colorUp);\n\t\t\taddLine('u3', 'u1', colorUp); // target\n\n\t\t\taddLine('c', 't', colorTarget);\n\t\t\taddLine('p', 'c', colorCross); // cross\n\n\t\t\taddLine('cn1', 'cn2', colorCross);\n\t\t\taddLine('cn3', 'cn4', colorCross);\n\t\t\taddLine('cf1', 'cf2', colorCross);\n\t\t\taddLine('cf3', 'cf4', colorCross);\n\n\t\t\tfunction addLine(a, b, color) {\n\t\t\t\taddPoint(a, color);\n\t\t\t\taddPoint(b, color);\n\t\t\t}\n\n\t\t\tfunction addPoint(id, color) {\n\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\n\t\t\t\tif (pointMap[id] === undefined) {\n\t\t\t\t\tpointMap[id] = [];\n\t\t\t\t}\n\n\t\t\t\tpointMap[id].push(vertices.length / 3 - 1);\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'CameraHelper';\n\t\t\tthis.camera = camera;\n\t\t\tif (this.camera.updateProjectionMatrix) this.camera.updateProjectionMatrix();\n\t\t\tthis.matrix = camera.matrixWorld;\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.pointMap = pointMap;\n\t\t\tthis.update();\n\t\t}\n\n\t\tupdate() {\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst pointMap = this.pointMap;\n\t\t\tconst w = 1,\n\t\t\t\t\t\th = 1; // we need just camera projection matrix inverse\n\t\t\t// world matrix must be identity\n\n\t\t\t_camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse); // center / target\n\n\n\t\t\tsetPoint('c', pointMap, geometry, _camera, 0, 0, -1);\n\t\t\tsetPoint('t', pointMap, geometry, _camera, 0, 0, 1); // near\n\n\t\t\tsetPoint('n1', pointMap, geometry, _camera, -w, -h, -1);\n\t\t\tsetPoint('n2', pointMap, geometry, _camera, w, -h, -1);\n\t\t\tsetPoint('n3', pointMap, geometry, _camera, -w, h, -1);\n\t\t\tsetPoint('n4', pointMap, geometry, _camera, w, h, -1); // far\n\n\t\t\tsetPoint('f1', pointMap, geometry, _camera, -w, -h, 1);\n\t\t\tsetPoint('f2', pointMap, geometry, _camera, w, -h, 1);\n\t\t\tsetPoint('f3', pointMap, geometry, _camera, -w, h, 1);\n\t\t\tsetPoint('f4', pointMap, geometry, _camera, w, h, 1); // up\n\n\t\t\tsetPoint('u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, -1);\n\t\t\tsetPoint('u2', pointMap, geometry, _camera, -w * 0.7, h * 1.1, -1);\n\t\t\tsetPoint('u3', pointMap, geometry, _camera, 0, h * 2, -1); // cross\n\n\t\t\tsetPoint('cf1', pointMap, geometry, _camera, -w, 0, 1);\n\t\t\tsetPoint('cf2', pointMap, geometry, _camera, w, 0, 1);\n\t\t\tsetPoint('cf3', pointMap, geometry, _camera, 0, -h, 1);\n\t\t\tsetPoint('cf4', pointMap, geometry, _camera, 0, h, 1);\n\t\t\tsetPoint('cn1', pointMap, geometry, _camera, -w, 0, -1);\n\t\t\tsetPoint('cn2', pointMap, geometry, _camera, w, 0, -1);\n\t\t\tsetPoint('cn3', pointMap, geometry, _camera, 0, -h, -1);\n\t\t\tsetPoint('cn4', pointMap, geometry, _camera, 0, h, -1);\n\t\t\tgeometry.getAttribute('position').needsUpdate = true;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.geometry.dispose();\n\t\t\tthis.material.dispose();\n\t\t}\n\n\t}\n\n\tfunction setPoint(point, pointMap, geometry, camera, x, y, z) {\n\t\t_vector.set(x, y, z).unproject(camera);\n\n\t\tconst points = pointMap[point];\n\n\t\tif (points !== undefined) {\n\t\t\tconst position = geometry.getAttribute('position');\n\n\t\t\tfor (let i = 0, l = points.length; i < l; i++) {\n\t\t\t\tposition.setXYZ(points[i], _vector.x, _vector.y, _vector.z);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst _box = /*@__PURE__*/new Box3();\n\n\tclass BoxHelper extends LineSegments {\n\t\tconstructor(object, color = 0xffff00) {\n\t\t\tconst indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n\t\t\tconst positions = new Float32Array(8 * 3);\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex(new BufferAttribute(indices, 1));\n\t\t\tgeometry.setAttribute('position', new BufferAttribute(positions, 3));\n\t\t\tsuper(geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.object = object;\n\t\t\tthis.type = 'BoxHelper';\n\t\t\tthis.matrixAutoUpdate = false;\n\t\t\tthis.update();\n\t\t}\n\n\t\tupdate(object) {\n\t\t\tif (object !== undefined) {\n\t\t\t\tconsole.warn('THREE.BoxHelper: .update() has no longer arguments.');\n\t\t\t}\n\n\t\t\tif (this.object !== undefined) {\n\t\t\t\t_box.setFromObject(this.object);\n\t\t\t}\n\n\t\t\tif (_box.isEmpty()) return;\n\t\t\tconst min = _box.min;\n\t\t\tconst max = _box.max;\n\t\t\t/*\n\t\t\t\t5____4\n\t\t\t1/___0/|\n\t\t\t| 6__|_7\n\t\t\t2/___3/\n\t\t\t\t0: max.x, max.y, max.z\n\t\t\t1: min.x, max.y, max.z\n\t\t\t2: min.x, min.y, max.z\n\t\t\t3: max.x, min.y, max.z\n\t\t\t4: max.x, max.y, min.z\n\t\t\t5: min.x, max.y, min.z\n\t\t\t6: min.x, min.y, min.z\n\t\t\t7: max.x, min.y, min.z\n\t\t\t*/\n\n\t\t\tconst position = this.geometry.attributes.position;\n\t\t\tconst array = position.array;\n\t\t\tarray[0] = max.x;\n\t\t\tarray[1] = max.y;\n\t\t\tarray[2] = max.z;\n\t\t\tarray[3] = min.x;\n\t\t\tarray[4] = max.y;\n\t\t\tarray[5] = max.z;\n\t\t\tarray[6] = min.x;\n\t\t\tarray[7] = min.y;\n\t\t\tarray[8] = max.z;\n\t\t\tarray[9] = max.x;\n\t\t\tarray[10] = min.y;\n\t\t\tarray[11] = max.z;\n\t\t\tarray[12] = max.x;\n\t\t\tarray[13] = max.y;\n\t\t\tarray[14] = min.z;\n\t\t\tarray[15] = min.x;\n\t\t\tarray[16] = max.y;\n\t\t\tarray[17] = min.z;\n\t\t\tarray[18] = min.x;\n\t\t\tarray[19] = min.y;\n\t\t\tarray[20] = min.z;\n\t\t\tarray[21] = max.x;\n\t\t\tarray[22] = min.y;\n\t\t\tarray[23] = min.z;\n\t\t\tposition.needsUpdate = true;\n\t\t\tthis.geometry.computeBoundingSphere();\n\t\t}\n\n\t\tsetFromObject(object) {\n\t\t\tthis.object = object;\n\t\t\tthis.update();\n\t\t\treturn this;\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tLineSegments.prototype.copy.call(this, source);\n\t\t\tthis.object = source.object;\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass Box3Helper extends LineSegments {\n\t\tconstructor(box, color = 0xffff00) {\n\t\t\tconst indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n\t\t\tconst positions = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1];\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex(new BufferAttribute(indices, 1));\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tsuper(geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.box = box;\n\t\t\tthis.type = 'Box3Helper';\n\t\t\tthis.geometry.computeBoundingSphere();\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tconst box = this.box;\n\t\t\tif (box.isEmpty()) return;\n\t\t\tbox.getCenter(this.position);\n\t\t\tbox.getSize(this.scale);\n\t\t\tthis.scale.multiplyScalar(0.5);\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t}\n\n\t}\n\n\tclass PlaneHelper extends Line {\n\t\tconstructor(plane, size = 1, hex = 0xffff00) {\n\t\t\tconst color = hex;\n\t\t\tconst positions = [1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0];\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tgeometry.computeBoundingSphere();\n\t\t\tsuper(geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.type = 'PlaneHelper';\n\t\t\tthis.plane = plane;\n\t\t\tthis.size = size;\n\t\t\tconst positions2 = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1];\n\t\t\tconst geometry2 = new BufferGeometry();\n\t\t\tgeometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));\n\t\t\tgeometry2.computeBoundingSphere();\n\t\t\tthis.add(new Mesh(geometry2, new MeshBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\topacity: 0.2,\n\t\t\t\ttransparent: true,\n\t\t\t\tdepthWrite: false,\n\t\t\t\ttoneMapped: false\n\t\t\t})));\n\t\t}\n\n\t\tupdateMatrixWorld(force) {\n\t\t\tlet scale = -this.plane.constant;\n\t\t\tif (Math.abs(scale) < 1e-8) scale = 1e-8; // sign does not matter\n\n\t\t\tthis.scale.set(0.5 * this.size, 0.5 * this.size, scale);\n\t\t\tthis.children[0].material.side = scale < 0 ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n\t\t\tthis.lookAt(this.plane.normal);\n\t\t\tsuper.updateMatrixWorld(force);\n\t\t}\n\n\t}\n\n\tconst _axis = /*@__PURE__*/new Vector3();\n\n\tlet _lineGeometry, _coneGeometry;\n\n\tclass ArrowHelper extends Object3D {\n\t\t// dir is assumed to be normalized\n\t\tconstructor(dir = new Vector3(0, 0, 1), origin = new Vector3(0, 0, 0), length = 1, color = 0xffff00, headLength = length * 0.2, headWidth = headLength * 0.2) {\n\t\t\tsuper();\n\t\t\tthis.type = 'ArrowHelper';\n\n\t\t\tif (_lineGeometry === undefined) {\n\t\t\t\t_lineGeometry = new BufferGeometry();\n\n\t\t\t\t_lineGeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));\n\n\t\t\t\t_coneGeometry = new CylinderGeometry(0, 0.5, 1, 5, 1);\n\n\t\t\t\t_coneGeometry.translate(0, -0.5, 0);\n\t\t\t}\n\n\t\t\tthis.position.copy(origin);\n\t\t\tthis.line = new Line(_lineGeometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.line.matrixAutoUpdate = false;\n\t\t\tthis.add(this.line);\n\t\t\tthis.cone = new Mesh(_coneGeometry, new MeshBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\tthis.cone.matrixAutoUpdate = false;\n\t\t\tthis.add(this.cone);\n\t\t\tthis.setDirection(dir);\n\t\t\tthis.setLength(length, headLength, headWidth);\n\t\t}\n\n\t\tsetDirection(dir) {\n\t\t\t// dir is assumed to be normalized\n\t\t\tif (dir.y > 0.99999) {\n\t\t\t\tthis.quaternion.set(0, 0, 0, 1);\n\t\t\t} else if (dir.y < -0.99999) {\n\t\t\t\tthis.quaternion.set(1, 0, 0, 0);\n\t\t\t} else {\n\t\t\t\t_axis.set(dir.z, 0, -dir.x).normalize();\n\n\t\t\t\tconst radians = Math.acos(dir.y);\n\t\t\t\tthis.quaternion.setFromAxisAngle(_axis, radians);\n\t\t\t}\n\t\t}\n\n\t\tsetLength(length, headLength = length * 0.2, headWidth = headLength * 0.2) {\n\t\t\tthis.line.scale.set(1, Math.max(0.0001, length - headLength), 1); // see #17458\n\n\t\t\tthis.line.updateMatrix();\n\t\t\tthis.cone.scale.set(headWidth, headLength, headWidth);\n\t\t\tthis.cone.position.y = length;\n\t\t\tthis.cone.updateMatrix();\n\t\t}\n\n\t\tsetColor(color) {\n\t\t\tthis.line.material.color.set(color);\n\t\t\tthis.cone.material.color.set(color);\n\t\t}\n\n\t\tcopy(source) {\n\t\t\tsuper.copy(source, false);\n\t\t\tthis.line.copy(source.line);\n\t\t\tthis.cone.copy(source.cone);\n\t\t\treturn this;\n\t\t}\n\n\t}\n\n\tclass AxesHelper extends LineSegments {\n\t\tconstructor(size = 1) {\n\t\t\tconst vertices = [0, 0, 0, size, 0, 0, 0, 0, 0, 0, size, 0, 0, 0, 0, 0, 0, size];\n\t\t\tconst colors = [1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1];\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tconst material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tsuper(geometry, material);\n\t\t\tthis.type = 'AxesHelper';\n\t\t}\n\n\t\tsetColors(xAxisColor, yAxisColor, zAxisColor) {\n\t\t\tconst color = new Color();\n\t\t\tconst array = this.geometry.attributes.color.array;\n\t\t\tcolor.set(xAxisColor);\n\t\t\tcolor.toArray(array, 0);\n\t\t\tcolor.toArray(array, 3);\n\t\t\tcolor.set(yAxisColor);\n\t\t\tcolor.toArray(array, 6);\n\t\t\tcolor.toArray(array, 9);\n\t\t\tcolor.set(zAxisColor);\n\t\t\tcolor.toArray(array, 12);\n\t\t\tcolor.toArray(array, 15);\n\t\t\tthis.geometry.attributes.color.needsUpdate = true;\n\t\t\treturn this;\n\t\t}\n\n\t\tdispose() {\n\t\t\tthis.geometry.dispose();\n\t\t\tthis.material.dispose();\n\t\t}\n\n\t}\n\n\tclass ShapePath {\n\t\tconstructor() {\n\t\t\tthis.type = 'ShapePath';\n\t\t\tthis.color = new Color();\n\t\t\tthis.subPaths = [];\n\t\t\tthis.currentPath = null;\n\t\t}\n\n\t\tmoveTo(x, y) {\n\t\t\tthis.currentPath = new Path();\n\t\t\tthis.subPaths.push(this.currentPath);\n\t\t\tthis.currentPath.moveTo(x, y);\n\t\t\treturn this;\n\t\t}\n\n\t\tlineTo(x, y) {\n\t\t\tthis.currentPath.lineTo(x, y);\n\t\t\treturn this;\n\t\t}\n\n\t\tquadraticCurveTo(aCPx, aCPy, aX, aY) {\n\t\t\tthis.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);\n\t\t\treturn this;\n\t\t}\n\n\t\tbezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n\t\t\tthis.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);\n\t\t\treturn this;\n\t\t}\n\n\t\tsplineThru(pts) {\n\t\t\tthis.currentPath.splineThru(pts);\n\t\t\treturn this;\n\t\t}\n\n\t\ttoShapes(isCCW, noHoles) {\n\t\t\tfunction toShapesNoHoles(inSubpaths) {\n\t\t\t\tconst shapes = [];\n\n\t\t\t\tfor (let i = 0, l = inSubpaths.length; i < l; i++) {\n\t\t\t\t\tconst tmpPath = inSubpaths[i];\n\t\t\t\t\tconst tmpShape = new Shape();\n\t\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\t\tshapes.push(tmpShape);\n\t\t\t\t}\n\n\t\t\t\treturn shapes;\n\t\t\t}\n\n\t\t\tfunction isPointInsidePolygon(inPt, inPolygon) {\n\t\t\t\tconst polyLen = inPolygon.length; // inPt on polygon contour => immediate success\t\tor\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//\twith the horizontal line through inPt, left of inPt\n\t\t\t\t//\tnot counting lowerY endpoints of edges and whole edges on that line\n\n\t\t\t\tlet inside = false;\n\n\t\t\t\tfor (let p = polyLen - 1, q = 0; q < polyLen; p = q++) {\n\t\t\t\t\tlet edgeLowPt = inPolygon[p];\n\t\t\t\t\tlet edgeHighPt = inPolygon[q];\n\t\t\t\t\tlet edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tlet edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\t\tif (Math.abs(edgeDy) > Number.EPSILON) {\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif (edgeDy < 0) {\n\t\t\t\t\t\t\tedgeLowPt = inPolygon[q];\n\t\t\t\t\t\t\tedgeDx = -edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[p];\n\t\t\t\t\t\t\tedgeDy = -edgeDy;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;\n\n\t\t\t\t\t\tif (inPt.y === edgeLowPt.y) {\n\t\t\t\t\t\t\tif (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);\n\t\t\t\t\t\t\tif (perpEdge === 0) return true; // inPt is on contour ?\n\n\t\t\t\t\t\t\tif (perpEdge < 0) continue;\n\t\t\t\t\t\t\tinside = !inside; // true intersection left of inPt\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif (inPt.y !== edgeLowPt.y) continue; // parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\n\t\t\t\t\t\tif (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true; // inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn inside;\n\t\t\t}\n\n\t\t\tconst isClockWise = ShapeUtils.isClockWise;\n\t\t\tconst subPaths = this.subPaths;\n\t\t\tif (subPaths.length === 0) return [];\n\t\t\tif (noHoles === true) return toShapesNoHoles(subPaths);\n\t\t\tlet solid, tmpPath, tmpShape;\n\t\t\tconst shapes = [];\n\n\t\t\tif (subPaths.length === 1) {\n\t\t\t\ttmpPath = subPaths[0];\n\t\t\t\ttmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push(tmpShape);\n\t\t\t\treturn shapes;\n\t\t\t}\n\n\t\t\tlet holesFirst = !isClockWise(subPaths[0].getPoints());\n\t\t\tholesFirst = isCCW ? !holesFirst : holesFirst; // console.log(\"Holes first\", holesFirst);\n\n\t\t\tconst betterShapeHoles = [];\n\t\t\tconst newShapes = [];\n\t\t\tlet newShapeHoles = [];\n\t\t\tlet mainIdx = 0;\n\t\t\tlet tmpPoints;\n\t\t\tnewShapes[mainIdx] = undefined;\n\t\t\tnewShapeHoles[mainIdx] = [];\n\n\t\t\tfor (let i = 0, l = subPaths.length; i < l; i++) {\n\t\t\t\ttmpPath = subPaths[i];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise(tmpPoints);\n\t\t\t\tsolid = isCCW ? !solid : solid;\n\n\t\t\t\tif (solid) {\n\t\t\t\t\tif (!holesFirst && newShapes[mainIdx]) mainIdx++;\n\t\t\t\t\tnewShapes[mainIdx] = {\n\t\t\t\t\t\ts: new Shape(),\n\t\t\t\t\t\tp: tmpPoints\n\t\t\t\t\t};\n\t\t\t\t\tnewShapes[mainIdx].s.curves = tmpPath.curves;\n\t\t\t\t\tif (holesFirst) mainIdx++;\n\t\t\t\t\tnewShapeHoles[mainIdx] = []; //console.log('cw', i);\n\t\t\t\t} else {\n\t\t\t\t\tnewShapeHoles[mainIdx].push({\n\t\t\t\t\t\th: tmpPath,\n\t\t\t\t\t\tp: tmpPoints[0]\n\t\t\t\t\t}); //console.log('ccw', i);\n\t\t\t\t}\n\t\t\t} // only Holes? -> probably all Shapes with wrong orientation\n\n\n\t\t\tif (!newShapes[0]) return toShapesNoHoles(subPaths);\n\n\t\t\tif (newShapes.length > 1) {\n\t\t\t\tlet ambiguous = false;\n\t\t\t\tconst toChange = [];\n\n\t\t\t\tfor (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n\t\t\t\t\tbetterShapeHoles[sIdx] = [];\n\t\t\t\t}\n\n\t\t\t\tfor (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n\t\t\t\t\tconst sho = newShapeHoles[sIdx];\n\n\t\t\t\t\tfor (let hIdx = 0; hIdx < sho.length; hIdx++) {\n\t\t\t\t\t\tconst ho = sho[hIdx];\n\t\t\t\t\t\tlet hole_unassigned = true;\n\n\t\t\t\t\t\tfor (let s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {\n\t\t\t\t\t\t\tif (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {\n\t\t\t\t\t\t\t\tif (sIdx !== s2Idx) toChange.push({\n\t\t\t\t\t\t\t\t\tfroms: sIdx,\n\t\t\t\t\t\t\t\t\ttos: s2Idx,\n\t\t\t\t\t\t\t\t\thole: hIdx\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tif (hole_unassigned) {\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[s2Idx].push(ho);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (hole_unassigned) {\n\t\t\t\t\t\t\tbetterShapeHoles[sIdx].push(ho);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // console.log(\"ambiguous: \", ambiguous);\n\n\n\t\t\t\tif (toChange.length > 0) {\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif (!ambiguous) newShapeHoles = betterShapeHoles;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet tmpHoles;\n\n\t\t\tfor (let i = 0, il = newShapes.length; i < il; i++) {\n\t\t\t\ttmpShape = newShapes[i].s;\n\t\t\t\tshapes.push(tmpShape);\n\t\t\t\ttmpHoles = newShapeHoles[i];\n\n\t\t\t\tfor (let j = 0, jl = tmpHoles.length; j < jl; j++) {\n\t\t\t\t\ttmpShape.holes.push(tmpHoles[j].h);\n\t\t\t\t}\n\t\t\t} //console.log(\"shape\", shapes);\n\n\n\t\t\treturn shapes;\n\t\t}\n\n\t}\n\n\tconst _floatView = new Float32Array(1);\n\n\tconst _int32View = new Int32Array(_floatView.buffer);\n\n\tclass DataUtils {\n\t\t// Converts float32 to float16 (stored as uint16 value).\n\t\tstatic toHalfFloat(val) {\n\t\t\tif (val > 65504) {\n\t\t\t\tconsole.warn('THREE.DataUtils.toHalfFloat(): value exceeds 65504.');\n\t\t\t\tval = 65504; // maximum representable value in float16\n\t\t\t} // Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410\n\n\t\t\t/* This method is faster than the OpenEXR implementation (very often\n\t\t\t* used, eg. in Ogre), with the additional benefit of rounding, inspired\n\t\t\t* by James Tursa?s half-precision code. */\n\n\n\t\t\t_floatView[0] = val;\n\t\t\tconst x = _int32View[0];\n\t\t\tlet bits = x >> 16 & 0x8000;\n\t\t\t/* Get the sign */\n\n\t\t\tlet m = x >> 12 & 0x07ff;\n\t\t\t/* Keep one extra bit for rounding */\n\n\t\t\tconst e = x >> 23 & 0xff;\n\t\t\t/* Using int is faster here */\n\n\t\t\t/* If zero, or denormal, or exponent underflows too much for a denormal\n\t\t\t\t* half, return signed zero. */\n\n\t\t\tif (e < 103) return bits;\n\t\t\t/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n\n\t\t\tif (e > 142) {\n\t\t\t\tbits |= 0x7c00;\n\t\t\t\t/* If exponent was 0xff and one mantissa bit was set, it means NaN,\n\t\t\t\t\t\t\t* not Inf, so make sure we set one mantissa bit too. */\n\n\t\t\t\tbits |= (e == 255 ? 0 : 1) && x & 0x007fffff;\n\t\t\t\treturn bits;\n\t\t\t}\n\t\t\t/* If exponent underflows but not too much, return a denormal */\n\n\n\t\t\tif (e < 113) {\n\t\t\t\tm |= 0x0800;\n\t\t\t\t/* Extra rounding may overflow and set mantissa to 0 and exponent\n\t\t\t\t\t* to 1, which is OK. */\n\n\t\t\t\tbits |= (m >> 114 - e) + (m >> 113 - e & 1);\n\t\t\t\treturn bits;\n\t\t\t}\n\n\t\t\tbits |= e - 112 << 10 | m >> 1;\n\t\t\t/* Extra rounding. An overflow will set mantissa to 0 and increment\n\t\t\t\t* the exponent, which is OK. */\n\n\t\t\tbits += m & 1;\n\t\t\treturn bits;\n\t\t}\n\n\t}\n\n\tconst LineStrip = 0;\n\tconst LinePieces = 1;\n\tconst NoColors = 0;\n\tconst FaceColors = 1;\n\tconst VertexColors = 2;\n\tfunction MeshFaceMaterial(materials) {\n\t\tconsole.warn('THREE.MeshFaceMaterial has been removed. Use an Array instead.');\n\t\treturn materials;\n\t}\n\tfunction MultiMaterial(materials = []) {\n\t\tconsole.warn('THREE.MultiMaterial has been removed. Use an Array instead.');\n\t\tmaterials.isMultiMaterial = true;\n\t\tmaterials.materials = materials;\n\n\t\tmaterials.clone = function () {\n\t\t\treturn materials.slice();\n\t\t};\n\n\t\treturn materials;\n\t}\n\tfunction PointCloud(geometry, material) {\n\t\tconsole.warn('THREE.PointCloud has been renamed to THREE.Points.');\n\t\treturn new Points(geometry, material);\n\t}\n\tfunction Particle(material) {\n\t\tconsole.warn('THREE.Particle has been renamed to THREE.Sprite.');\n\t\treturn new Sprite(material);\n\t}\n\tfunction ParticleSystem(geometry, material) {\n\t\tconsole.warn('THREE.ParticleSystem has been renamed to THREE.Points.');\n\t\treturn new Points(geometry, material);\n\t}\n\tfunction PointCloudMaterial(parameters) {\n\t\tconsole.warn('THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction ParticleBasicMaterial(parameters) {\n\t\tconsole.warn('THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction ParticleSystemMaterial(parameters) {\n\t\tconsole.warn('THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction Vertex(x, y, z) {\n\t\tconsole.warn('THREE.Vertex has been removed. Use THREE.Vector3 instead.');\n\t\treturn new Vector3(x, y, z);\n\t} //\n\n\tfunction DynamicBufferAttribute(array, itemSize) {\n\t\tconsole.warn('THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.');\n\t\treturn new BufferAttribute(array, itemSize).setUsage(DynamicDrawUsage);\n\t}\n\tfunction Int8Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.');\n\t\treturn new Int8BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint8Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.');\n\t\treturn new Uint8BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint8ClampedAttribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.');\n\t\treturn new Uint8ClampedBufferAttribute(array, itemSize);\n\t}\n\tfunction Int16Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.');\n\t\treturn new Int16BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint16Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.');\n\t\treturn new Uint16BufferAttribute(array, itemSize);\n\t}\n\tfunction Int32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.');\n\t\treturn new Int32BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.');\n\t\treturn new Uint32BufferAttribute(array, itemSize);\n\t}\n\tfunction Float32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.');\n\t\treturn new Float32BufferAttribute(array, itemSize);\n\t}\n\tfunction Float64Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.');\n\t\treturn new Float64BufferAttribute(array, itemSize);\n\t} //\n\n\tCurve.create = function (construct, getPoint) {\n\t\tconsole.log('THREE.Curve.create() has been deprecated');\n\t\tconstruct.prototype = Object.create(Curve.prototype);\n\t\tconstruct.prototype.constructor = construct;\n\t\tconstruct.prototype.getPoint = getPoint;\n\t\treturn construct;\n\t}; //\n\n\n\tPath.prototype.fromPoints = function (points) {\n\t\tconsole.warn('THREE.Path: .fromPoints() has been renamed to .setFromPoints().');\n\t\treturn this.setFromPoints(points);\n\t}; //\n\n\n\tfunction AxisHelper(size) {\n\t\tconsole.warn('THREE.AxisHelper has been renamed to THREE.AxesHelper.');\n\t\treturn new AxesHelper(size);\n\t}\n\tfunction BoundingBoxHelper(object, color) {\n\t\tconsole.warn('THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.');\n\t\treturn new BoxHelper(object, color);\n\t}\n\tfunction EdgesHelper(object, hex) {\n\t\tconsole.warn('THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.');\n\t\treturn new LineSegments(new EdgesGeometry(object.geometry), new LineBasicMaterial({\n\t\t\tcolor: hex !== undefined ? hex : 0xffffff\n\t\t}));\n\t}\n\n\tGridHelper.prototype.setColors = function () {\n\t\tconsole.error('THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.');\n\t};\n\n\tSkeletonHelper.prototype.update = function () {\n\t\tconsole.error('THREE.SkeletonHelper: update() no longer needs to be called.');\n\t};\n\n\tfunction WireframeHelper(object, hex) {\n\t\tconsole.warn('THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.');\n\t\treturn new LineSegments(new WireframeGeometry(object.geometry), new LineBasicMaterial({\n\t\t\tcolor: hex !== undefined ? hex : 0xffffff\n\t\t}));\n\t} //\n\n\tLoader.prototype.extractUrlBase = function (url) {\n\t\tconsole.warn('THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.');\n\t\treturn LoaderUtils.extractUrlBase(url);\n\t};\n\n\tLoader.Handlers = {\n\t\tadd: function () {\n\t\t\tconsole.error('THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.');\n\t\t},\n\t\tget: function () {\n\t\t\tconsole.error('THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.');\n\t\t}\n\t};\n\tfunction XHRLoader(manager) {\n\t\tconsole.warn('THREE.XHRLoader has been renamed to THREE.FileLoader.');\n\t\treturn new FileLoader(manager);\n\t}\n\tfunction BinaryTextureLoader(manager) {\n\t\tconsole.warn('THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.');\n\t\treturn new DataTextureLoader(manager);\n\t} //\n\n\tBox2.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box2: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t};\n\n\tBox2.prototype.empty = function () {\n\t\tconsole.warn('THREE.Box2: .empty() has been renamed to .isEmpty().');\n\t\treturn this.isEmpty();\n\t};\n\n\tBox2.prototype.isIntersectionBox = function (box) {\n\t\tconsole.warn('THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\treturn this.intersectsBox(box);\n\t};\n\n\tBox2.prototype.size = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box2: .size() has been renamed to .getSize().');\n\t\treturn this.getSize(optionalTarget);\n\t}; //\n\n\n\tBox3.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box3: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t};\n\n\tBox3.prototype.empty = function () {\n\t\tconsole.warn('THREE.Box3: .empty() has been renamed to .isEmpty().');\n\t\treturn this.isEmpty();\n\t};\n\n\tBox3.prototype.isIntersectionBox = function (box) {\n\t\tconsole.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\treturn this.intersectsBox(box);\n\t};\n\n\tBox3.prototype.isIntersectionSphere = function (sphere) {\n\t\tconsole.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n\t\treturn this.intersectsSphere(sphere);\n\t};\n\n\tBox3.prototype.size = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box3: .size() has been renamed to .getSize().');\n\t\treturn this.getSize(optionalTarget);\n\t}; //\n\n\n\tSphere.prototype.empty = function () {\n\t\tconsole.warn('THREE.Sphere: .empty() has been renamed to .isEmpty().');\n\t\treturn this.isEmpty();\n\t}; //\n\n\n\tFrustum.prototype.setFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().');\n\t\treturn this.setFromProjectionMatrix(m);\n\t}; //\n\n\n\tLine3.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Line3: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t}; //\n\n\n\tMatrix3.prototype.flattenToArrayOffset = function (array, offset) {\n\t\tconsole.warn('THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');\n\t\treturn this.toArray(array, offset);\n\t};\n\n\tMatrix3.prototype.multiplyVector3 = function (vector) {\n\t\tconsole.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.');\n\t\treturn vector.applyMatrix3(this);\n\t};\n\n\tMatrix3.prototype.multiplyVector3Array = function () {\n\t\tconsole.error('THREE.Matrix3: .multiplyVector3Array() has been removed.');\n\t};\n\n\tMatrix3.prototype.applyToBufferAttribute = function (attribute) {\n\t\tconsole.warn('THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.');\n\t\treturn attribute.applyMatrix3(this);\n\t};\n\n\tMatrix3.prototype.applyToVector3Array = function () {\n\t\tconsole.error('THREE.Matrix3: .applyToVector3Array() has been removed.');\n\t};\n\n\tMatrix3.prototype.getInverse = function (matrix) {\n\t\tconsole.warn('THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');\n\t\treturn this.copy(matrix).invert();\n\t}; //\n\n\n\tMatrix4.prototype.extractPosition = function (m) {\n\t\tconsole.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');\n\t\treturn this.copyPosition(m);\n\t};\n\n\tMatrix4.prototype.flattenToArrayOffset = function (array, offset) {\n\t\tconsole.warn('THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');\n\t\treturn this.toArray(array, offset);\n\t};\n\n\tMatrix4.prototype.getPosition = function () {\n\t\tconsole.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.');\n\t\treturn new Vector3().setFromMatrixColumn(this, 3);\n\t};\n\n\tMatrix4.prototype.setRotationFromQuaternion = function (q) {\n\t\tconsole.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().');\n\t\treturn this.makeRotationFromQuaternion(q);\n\t};\n\n\tMatrix4.prototype.multiplyToArray = function () {\n\t\tconsole.warn('THREE.Matrix4: .multiplyToArray() has been removed.');\n\t};\n\n\tMatrix4.prototype.multiplyVector3 = function (vector) {\n\t\tconsole.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\treturn vector.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.multiplyVector4 = function (vector) {\n\t\tconsole.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\treturn vector.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.multiplyVector3Array = function () {\n\t\tconsole.error('THREE.Matrix4: .multiplyVector3Array() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateAxis = function (v) {\n\t\tconsole.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.');\n\t\tv.transformDirection(this);\n\t};\n\n\tMatrix4.prototype.crossVector = function (vector) {\n\t\tconsole.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\treturn vector.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.translate = function () {\n\t\tconsole.error('THREE.Matrix4: .translate() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateX = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateX() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateY = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateY() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateZ = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateZ() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateByAxis = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateByAxis() has been removed.');\n\t};\n\n\tMatrix4.prototype.applyToBufferAttribute = function (attribute) {\n\t\tconsole.warn('THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.');\n\t\treturn attribute.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.applyToVector3Array = function () {\n\t\tconsole.error('THREE.Matrix4: .applyToVector3Array() has been removed.');\n\t};\n\n\tMatrix4.prototype.makeFrustum = function (left, right, bottom, top, near, far) {\n\t\tconsole.warn('THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.');\n\t\treturn this.makePerspective(left, right, top, bottom, near, far);\n\t};\n\n\tMatrix4.prototype.getInverse = function (matrix) {\n\t\tconsole.warn('THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');\n\t\treturn this.copy(matrix).invert();\n\t}; //\n\n\n\tPlane.prototype.isIntersectionLine = function (line) {\n\t\tconsole.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().');\n\t\treturn this.intersectsLine(line);\n\t}; //\n\n\n\tQuaternion.prototype.multiplyVector3 = function (vector) {\n\t\tconsole.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.');\n\t\treturn vector.applyQuaternion(this);\n\t};\n\n\tQuaternion.prototype.inverse = function () {\n\t\tconsole.warn('THREE.Quaternion: .inverse() has been renamed to invert().');\n\t\treturn this.invert();\n\t}; //\n\n\n\tRay.prototype.isIntersectionBox = function (box) {\n\t\tconsole.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\treturn this.intersectsBox(box);\n\t};\n\n\tRay.prototype.isIntersectionPlane = function (plane) {\n\t\tconsole.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().');\n\t\treturn this.intersectsPlane(plane);\n\t};\n\n\tRay.prototype.isIntersectionSphere = function (sphere) {\n\t\tconsole.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n\t\treturn this.intersectsSphere(sphere);\n\t}; //\n\n\n\tTriangle.prototype.area = function () {\n\t\tconsole.warn('THREE.Triangle: .area() has been renamed to .getArea().');\n\t\treturn this.getArea();\n\t};\n\n\tTriangle.prototype.barycoordFromPoint = function (point, target) {\n\t\tconsole.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');\n\t\treturn this.getBarycoord(point, target);\n\t};\n\n\tTriangle.prototype.midpoint = function (target) {\n\t\tconsole.warn('THREE.Triangle: .midpoint() has been renamed to .getMidpoint().');\n\t\treturn this.getMidpoint(target);\n\t};\n\n\tTriangle.prototypenormal = function (target) {\n\t\tconsole.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');\n\t\treturn this.getNormal(target);\n\t};\n\n\tTriangle.prototype.plane = function (target) {\n\t\tconsole.warn('THREE.Triangle: .plane() has been renamed to .getPlane().');\n\t\treturn this.getPlane(target);\n\t};\n\n\tTriangle.barycoordFromPoint = function (point, a, b, c, target) {\n\t\tconsole.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');\n\t\treturn Triangle.getBarycoord(point, a, b, c, target);\n\t};\n\n\tTriangle.normal = function (a, b, c, target) {\n\t\tconsole.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');\n\t\treturn Triangle.getNormal(a, b, c, target);\n\t}; //\n\n\n\tShape.prototype.extractAllPoints = function (divisions) {\n\t\tconsole.warn('THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.');\n\t\treturn this.extractPoints(divisions);\n\t};\n\n\tShape.prototype.extrude = function (options) {\n\t\tconsole.warn('THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.');\n\t\treturn new ExtrudeGeometry(this, options);\n\t};\n\n\tShape.prototype.makeGeometry = function (options) {\n\t\tconsole.warn('THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.');\n\t\treturn new ShapeGeometry(this, options);\n\t}; //\n\n\n\tVector2.prototype.fromAttribute = function (attribute, index, offset) {\n\t\tconsole.warn('THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t};\n\n\tVector2.prototype.distanceToManhattan = function (v) {\n\t\tconsole.warn('THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');\n\t\treturn this.manhattanDistanceTo(v);\n\t};\n\n\tVector2.prototype.lengthManhattan = function () {\n\t\tconsole.warn('THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\treturn this.manhattanLength();\n\t}; //\n\n\n\tVector3.prototype.setEulerFromRotationMatrix = function () {\n\t\tconsole.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');\n\t};\n\n\tVector3.prototype.setEulerFromQuaternion = function () {\n\t\tconsole.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');\n\t};\n\n\tVector3.prototype.getPositionFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');\n\t\treturn this.setFromMatrixPosition(m);\n\t};\n\n\tVector3.prototype.getScaleFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');\n\t\treturn this.setFromMatrixScale(m);\n\t};\n\n\tVector3.prototype.getColumnFromMatrix = function (index, matrix) {\n\t\tconsole.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');\n\t\treturn this.setFromMatrixColumn(matrix, index);\n\t};\n\n\tVector3.prototype.applyProjection = function (m) {\n\t\tconsole.warn('THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.');\n\t\treturn this.applyMatrix4(m);\n\t};\n\n\tVector3.prototype.fromAttribute = function (attribute, index, offset) {\n\t\tconsole.warn('THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t};\n\n\tVector3.prototype.distanceToManhattan = function (v) {\n\t\tconsole.warn('THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');\n\t\treturn this.manhattanDistanceTo(v);\n\t};\n\n\tVector3.prototype.lengthManhattan = function () {\n\t\tconsole.warn('THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\treturn this.manhattanLength();\n\t}; //\n\n\n\tVector4.prototype.fromAttribute = function (attribute, index, offset) {\n\t\tconsole.warn('THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t};\n\n\tVector4.prototype.lengthManhattan = function () {\n\t\tconsole.warn('THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\treturn this.manhattanLength();\n\t}; //\n\n\n\tObject3D.prototype.getChildByName = function (name) {\n\t\tconsole.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().');\n\t\treturn this.getObjectByName(name);\n\t};\n\n\tObject3D.prototype.renderDepth = function () {\n\t\tconsole.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');\n\t};\n\n\tObject3D.prototype.translate = function (distance, axis) {\n\t\tconsole.warn('THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.');\n\t\treturn this.translateOnAxis(axis, distance);\n\t};\n\n\tObject3D.prototype.getWorldRotation = function () {\n\t\tconsole.error('THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.');\n\t};\n\n\tObject3D.prototype.applyMatrix = function (matrix) {\n\t\tconsole.warn('THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().');\n\t\treturn this.applyMatrix4(matrix);\n\t};\n\n\tObject.defineProperties(Object3D.prototype, {\n\t\teulerOrder: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n\t\t\t\treturn this.rotation.order;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n\t\t\t\tthis.rotation.order = value;\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n\t\t\t}\n\t\t}\n\t});\n\n\tMesh.prototype.setDrawMode = function () {\n\t\tconsole.error('THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');\n\t};\n\n\tObject.defineProperties(Mesh.prototype, {\n\t\tdrawMode: {\n\t\t\tget: function () {\n\t\t\t\tconsole.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.');\n\t\t\t\treturn TrianglesDrawMode;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');\n\t\t\t}\n\t\t}\n\t});\n\n\tSkinnedMesh.prototype.initBones = function () {\n\t\tconsole.error('THREE.SkinnedMesh: initBones() has been removed.');\n\t}; //\n\n\n\tPerspectiveCamera.prototype.setLens = function (focalLength, filmGauge) {\n\t\tconsole.warn('THREE.PerspectiveCamera.setLens is deprecated. ' + 'Use .setFocalLength and .filmGauge for a photographic setup.');\n\t\tif (filmGauge !== undefined) this.filmGauge = filmGauge;\n\t\tthis.setFocalLength(focalLength);\n\t}; //\n\n\n\tObject.defineProperties(Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Light: .onlyShadow has been removed.');\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.');\n\t\t\t\tthis.shadow.camera.fov = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.');\n\t\t\t\tthis.shadow.camera.left = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.');\n\t\t\t\tthis.shadow.camera.right = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.');\n\t\t\t\tthis.shadow.camera.top = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.');\n\t\t\t\tthis.shadow.camera.bottom = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.');\n\t\t\t\tthis.shadow.camera.near = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.');\n\t\t\t\tthis.shadow.camera.far = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.');\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowBias is now .shadow.bias.');\n\t\t\t\tthis.shadow.bias = value;\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Light: .shadowDarkness has been removed.');\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.');\n\t\t\t\tthis.shadow.mapSize.width = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.');\n\t\t\t\tthis.shadow.mapSize.height = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tObject.defineProperties(BufferAttribute.prototype, {\n\t\tlength: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .length has been deprecated. Use .count instead.');\n\t\t\t\treturn this.array.length;\n\t\t\t}\n\t\t},\n\t\tdynamic: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');\n\t\t\t\tthis.setUsage(DynamicDrawUsage);\n\t\t\t}\n\t\t}\n\t});\n\n\tBufferAttribute.prototype.setDynamic = function (value) {\n\t\tconsole.warn('THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.');\n\t\tthis.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);\n\t\treturn this;\n\t};\n\n\tBufferAttribute.prototype.copyIndicesArray = function () {\n\t\tconsole.error('THREE.BufferAttribute: .copyIndicesArray() has been removed.');\n\t}, BufferAttribute.prototype.setArray = function () {\n\t\tconsole.error('THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');\n\t}; //\n\n\tBufferGeometry.prototype.addIndex = function (index) {\n\t\tconsole.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().');\n\t\tthis.setIndex(index);\n\t};\n\n\tBufferGeometry.prototype.addAttribute = function (name, attribute) {\n\t\tconsole.warn('THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().');\n\n\t\tif (!(attribute && attribute.isBufferAttribute) && !(attribute && attribute.isInterleavedBufferAttribute)) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');\n\t\t\treturn this.setAttribute(name, new BufferAttribute(arguments[1], arguments[2]));\n\t\t}\n\n\t\tif (name === 'index') {\n\t\t\tconsole.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');\n\t\t\tthis.setIndex(attribute);\n\t\t\treturn this;\n\t\t}\n\n\t\treturn this.setAttribute(name, attribute);\n\t};\n\n\tBufferGeometry.prototype.addDrawCall = function (start, count, indexOffset) {\n\t\tif (indexOffset !== undefined) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.');\n\t\t}\n\n\t\tconsole.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().');\n\t\tthis.addGroup(start, count);\n\t};\n\n\tBufferGeometry.prototype.clearDrawCalls = function () {\n\t\tconsole.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().');\n\t\tthis.clearGroups();\n\t};\n\n\tBufferGeometry.prototype.computeOffsets = function () {\n\t\tconsole.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');\n\t};\n\n\tBufferGeometry.prototype.removeAttribute = function (name) {\n\t\tconsole.warn('THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().');\n\t\treturn this.deleteAttribute(name);\n\t};\n\n\tBufferGeometry.prototype.applyMatrix = function (matrix) {\n\t\tconsole.warn('THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().');\n\t\treturn this.applyMatrix4(matrix);\n\t};\n\n\tObject.defineProperties(BufferGeometry.prototype, {\n\t\tdrawcalls: {\n\t\t\tget: function () {\n\t\t\t\tconsole.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.');\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.');\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t}\n\t});\n\n\tInterleavedBuffer.prototype.setDynamic = function (value) {\n\t\tconsole.warn('THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.');\n\t\tthis.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);\n\t\treturn this;\n\t};\n\n\tInterleavedBuffer.prototype.setArray = function () {\n\t\tconsole.error('THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');\n\t}; //\n\n\n\tExtrudeGeometry.prototype.getArrays = function () {\n\t\tconsole.error('THREE.ExtrudeGeometry: .getArrays() has been removed.');\n\t};\n\n\tExtrudeGeometry.prototype.addShapeList = function () {\n\t\tconsole.error('THREE.ExtrudeGeometry: .addShapeList() has been removed.');\n\t};\n\n\tExtrudeGeometry.prototype.addShape = function () {\n\t\tconsole.error('THREE.ExtrudeGeometry: .addShape() has been removed.');\n\t}; //\n\n\n\tScene.prototype.dispose = function () {\n\t\tconsole.error('THREE.Scene: .dispose() has been removed.');\n\t}; //\n\n\n\tUniform.prototype.onUpdate = function () {\n\t\tconsole.warn('THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.');\n\t\treturn this;\n\t}; //\n\n\n\tObject.defineProperties(Material.prototype, {\n\t\twrapAround: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Material: .wrapAround has been removed.');\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Material: .wrapAround has been removed.');\n\t\t\t}\n\t\t},\n\t\toverdraw: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Material: .overdraw has been removed.');\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.Material: .overdraw has been removed.');\n\t\t\t}\n\t\t},\n\t\twrapRGB: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.Material: .wrapRGB has been removed.');\n\t\t\t\treturn new Color();\n\t\t\t}\n\t\t},\n\t\tshading: {\n\t\t\tget: function () {\n\t\t\t\tconsole.error('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t\tthis.flatShading = value === FlatShading;\n\t\t\t}\n\t\t},\n\t\tstencilMask: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');\n\t\t\t\treturn this.stencilFuncMask;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');\n\t\t\t\tthis.stencilFuncMask = value;\n\t\t\t}\n\t\t},\n\t\tvertexTangents: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .vertexTangents has been removed.');\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .vertexTangents has been removed.');\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(ShaderMaterial.prototype, {\n\t\tderivatives: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n\t\t\t\treturn this.extensions.derivatives;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n\t\t\t\tthis.extensions.derivatives = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tWebGLRenderer.prototype.clearTarget = function (renderTarget, color, depth, stencil) {\n\t\tconsole.warn('THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.');\n\t\tthis.setRenderTarget(renderTarget);\n\t\tthis.clear(color, depth, stencil);\n\t};\n\n\tWebGLRenderer.prototype.animate = function (callback) {\n\t\tconsole.warn('THREE.WebGLRenderer: .animate() is now .setAnimationLoop().');\n\t\tthis.setAnimationLoop(callback);\n\t};\n\n\tWebGLRenderer.prototype.getCurrentRenderTarget = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().');\n\t\treturn this.getRenderTarget();\n\t};\n\n\tWebGLRenderer.prototype.getMaxAnisotropy = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().');\n\t\treturn this.capabilities.getMaxAnisotropy();\n\t};\n\n\tWebGLRenderer.prototype.getPrecision = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.');\n\t\treturn this.capabilities.precision;\n\t};\n\n\tWebGLRenderer.prototype.resetGLState = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .resetGLState() is now .state.reset().');\n\t\treturn this.state.reset();\n\t};\n\n\tWebGLRenderer.prototype.supportsFloatTextures = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).');\n\t\treturn this.extensions.get('OES_texture_float');\n\t};\n\n\tWebGLRenderer.prototype.supportsHalfFloatTextures = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).');\n\t\treturn this.extensions.get('OES_texture_half_float');\n\t};\n\n\tWebGLRenderer.prototype.supportsStandardDerivatives = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).');\n\t\treturn this.extensions.get('OES_standard_derivatives');\n\t};\n\n\tWebGLRenderer.prototype.supportsCompressedTextureS3TC = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).');\n\t\treturn this.extensions.get('WEBGL_compressed_texture_s3tc');\n\t};\n\n\tWebGLRenderer.prototype.supportsCompressedTexturePVRTC = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).');\n\t\treturn this.extensions.get('WEBGL_compressed_texture_pvrtc');\n\t};\n\n\tWebGLRenderer.prototype.supportsBlendMinMax = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).');\n\t\treturn this.extensions.get('EXT_blend_minmax');\n\t};\n\n\tWebGLRenderer.prototype.supportsVertexTextures = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.');\n\t\treturn this.capabilities.vertexTextures;\n\t};\n\n\tWebGLRenderer.prototype.supportsInstancedArrays = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).');\n\t\treturn this.extensions.get('ANGLE_instanced_arrays');\n\t};\n\n\tWebGLRenderer.prototype.enableScissorTest = function (boolean) {\n\t\tconsole.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().');\n\t\tthis.setScissorTest(boolean);\n\t};\n\n\tWebGLRenderer.prototype.initMaterial = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.addPrePlugin = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.addPostPlugin = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.updateShadowMap = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setFaceCulling = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setFaceCulling() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.allocTextureUnit = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .allocTextureUnit() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setTexture = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setTexture() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setTexture2D = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setTexture2D() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setTextureCube = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setTextureCube() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.getActiveMipMapLevel = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().');\n\t\treturn this.getActiveMipmapLevel();\n\t};\n\n\tObject.defineProperties(WebGLRenderer.prototype, {\n\t\tshadowMapEnabled: {\n\t\t\tget: function () {\n\t\t\t\treturn this.shadowMap.enabled;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.');\n\t\t\t\tthis.shadowMap.enabled = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function () {\n\t\t\t\treturn this.shadowMap.type;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.');\n\t\t\t\tthis.shadowMap.type = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\tcontext: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.');\n\t\t\t\treturn this.getContext();\n\t\t\t}\n\t\t},\n\t\tvr: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .vr has been renamed to .xr');\n\t\t\t\treturn this.xr;\n\t\t\t}\n\t\t},\n\t\tgammaInput: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');\n\t\t\t}\n\t\t},\n\t\tgammaOutput: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');\n\t\t\t\tthis.outputEncoding = value === true ? sRGBEncoding : LinearEncoding;\n\t\t\t}\n\t\t},\n\t\ttoneMappingWhitePoint: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');\n\t\t\t\treturn 1.0;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(WebGLShadowMap.prototype, {\n\t\tcullFace: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\trenderReverseSided: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\trenderSingleSided: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t}\n\t});\n\tfunction WebGLRenderTargetCube(width, height, options) {\n\t\tconsole.warn('THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).');\n\t\treturn new WebGLCubeRenderTarget(width, options);\n\t} //\n\n\tObject.defineProperties(WebGLRenderTarget.prototype, {\n\t\twrapS: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n\t\t\t\treturn this.texture.wrapS;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n\t\t\t\tthis.texture.wrapS = value;\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n\t\t\t\treturn this.texture.wrapT;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n\t\t\t\tthis.texture.wrapT = value;\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n\t\t\t\treturn this.texture.magFilter;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n\t\t\t\tthis.texture.magFilter = value;\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n\t\t\t\treturn this.texture.minFilter;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n\t\t\t\tthis.texture.minFilter = value;\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n\t\t\t\treturn this.texture.anisotropy;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n\t\t\t\tthis.texture.anisotropy = value;\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n\t\t\t\treturn this.texture.offset;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n\t\t\t\tthis.texture.offset = value;\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n\t\t\t\treturn this.texture.repeat;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n\t\t\t\tthis.texture.repeat = value;\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n\t\t\t\treturn this.texture.format;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n\t\t\t\tthis.texture.format = value;\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n\t\t\t\treturn this.texture.type;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n\t\t\t\tthis.texture.type = value;\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n\t\t\t\treturn this.texture.generateMipmaps;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n\t\t\t\tthis.texture.generateMipmaps = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tAudio.prototype.load = function (file) {\n\t\tconsole.warn('THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.');\n\t\tconst scope = this;\n\t\tconst audioLoader = new AudioLoader();\n\t\taudioLoader.load(file, function (buffer) {\n\t\t\tscope.setBuffer(buffer);\n\t\t});\n\t\treturn this;\n\t};\n\n\tAudioAnalyser.prototype.getData = function () {\n\t\tconsole.warn('THREE.AudioAnalyser: .getData() is now .getFrequencyData().');\n\t\treturn this.getFrequencyData();\n\t}; //\n\n\n\tCubeCamera.prototype.updateCubeMap = function (renderer, scene) {\n\t\tconsole.warn('THREE.CubeCamera: .updateCubeMap() is now .update().');\n\t\treturn this.update(renderer, scene);\n\t};\n\n\tCubeCamera.prototype.clear = function (renderer, color, depth, stencil) {\n\t\tconsole.warn('THREE.CubeCamera: .clear() is now .renderTarget.clear().');\n\t\treturn this.renderTarget.clear(renderer, color, depth, stencil);\n\t};\n\n\tImageUtils.crossOrigin = undefined;\n\n\tImageUtils.loadTexture = function (url, mapping, onLoad, onError) {\n\t\tconsole.warn('THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.');\n\t\tconst loader = new TextureLoader();\n\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\tconst texture = loader.load(url, onLoad, undefined, onError);\n\t\tif (mapping) texture.mapping = mapping;\n\t\treturn texture;\n\t};\n\n\tImageUtils.loadTextureCube = function (urls, mapping, onLoad, onError) {\n\t\tconsole.warn('THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.');\n\t\tconst loader = new CubeTextureLoader();\n\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\tconst texture = loader.load(urls, onLoad, undefined, onError);\n\t\tif (mapping) texture.mapping = mapping;\n\t\treturn texture;\n\t};\n\n\tImageUtils.loadCompressedTexture = function () {\n\t\tconsole.error('THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.');\n\t};\n\n\tImageUtils.loadCompressedTextureCube = function () {\n\t\tconsole.error('THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.');\n\t}; //\n\n\n\tfunction CanvasRenderer() {\n\t\tconsole.error('THREE.CanvasRenderer has been removed');\n\t} //\n\n\tfunction JSONLoader() {\n\t\tconsole.error('THREE.JSONLoader has been removed.');\n\t} //\n\n\tconst SceneUtils = {\n\t\tcreateMultiMaterialObject: function () {\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t},\n\t\tdetach: function () {\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t},\n\t\tattach: function () {\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t}\n\t}; //\n\n\tfunction LensFlare() {\n\t\tconsole.error('THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js');\n\t} //\n\n\tfunction ParametricGeometry() {\n\t\tconsole.error('THREE.ParametricGeometry has been moved to /examples/jsm/geometries/ParametricGeometry.js');\n\t\treturn new BufferGeometry();\n\t}\n\tfunction TextGeometry() {\n\t\tconsole.error('THREE.TextGeometry has been moved to /examples/jsm/geometries/TextGeometry.js');\n\t\treturn new BufferGeometry();\n\t}\n\tfunction FontLoader() {\n\t\tconsole.error('THREE.FontLoader has been moved to /examples/jsm/loaders/FontLoader.js');\n\t}\n\tfunction Font() {\n\t\tconsole.error('THREE.Font has been moved to /examples/jsm/loaders/FontLoader.js');\n\t}\n\tfunction ImmediateRenderObject() {\n\t\tconsole.error('THREE.ImmediateRenderObject has been removed.');\n\t}\n\n\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t/* eslint-disable no-undef */\n\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register', {\n\t\t\tdetail: {\n\t\t\t\trevision: REVISION\n\t\t\t}\n\t\t}));\n\t\t/* eslint-enable no-undef */\n\n\t}\n\n\tif (typeof window !== 'undefined') {\n\t\tif (window.__THREE__) {\n\t\t\tconsole.warn('WARNING: Multiple instances of Three.js being imported.');\n\t\t} else {\n\t\t\twindow.__THREE__ = REVISION;\n\t\t}\n\t}\n\n\texports.ACESFilmicToneMapping = ACESFilmicToneMapping;\n\texports.AddEquation = AddEquation;\n\texports.AddOperation = AddOperation;\n\texports.AdditiveAnimationBlendMode = AdditiveAnimationBlendMode;\n\texports.AdditiveBlending = AdditiveBlending;\n\texports.AlphaFormat = AlphaFormat;\n\texports.AlwaysDepth = AlwaysDepth;\n\texports.AlwaysStencilFunc = AlwaysStencilFunc;\n\texports.AmbientLight = AmbientLight;\n\texports.AmbientLightProbe = AmbientLightProbe;\n\texports.AnimationClip = AnimationClip;\n\texports.AnimationLoader = AnimationLoader;\n\texports.AnimationMixer = AnimationMixer;\n\texports.AnimationObjectGroup = AnimationObjectGroup;\n\texports.AnimationUtils = AnimationUtils;\n\texports.ArcCurve = ArcCurve;\n\texports.ArrayCamera = ArrayCamera;\n\texports.ArrowHelper = ArrowHelper;\n\texports.Audio = Audio;\n\texports.AudioAnalyser = AudioAnalyser;\n\texports.AudioContext = AudioContext;\n\texports.AudioListener = AudioListener;\n\texports.AudioLoader = AudioLoader;\n\texports.AxesHelper = AxesHelper;\n\texports.AxisHelper = AxisHelper;\n\texports.BackSide = BackSide;\n\texports.BasicDepthPacking = BasicDepthPacking;\n\texports.BasicShadowMap = BasicShadowMap;\n\texports.BinaryTextureLoader = BinaryTextureLoader;\n\texports.Bone = Bone;\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\texports.BoundingBoxHelper = BoundingBoxHelper;\n\texports.Box2 = Box2;\n\texports.Box3 = Box3;\n\texports.Box3Helper = Box3Helper;\n\texports.BoxBufferGeometry = BoxGeometry;\n\texports.BoxGeometry = BoxGeometry;\n\texports.BoxHelper = BoxHelper;\n\texports.BufferAttribute = BufferAttribute;\n\texports.BufferGeometry = BufferGeometry;\n\texports.BufferGeometryLoader = BufferGeometryLoader;\n\texports.ByteType = ByteType;\n\texports.Cache = Cache;\n\texports.Camera = Camera;\n\texports.CameraHelper = CameraHelper;\n\texports.CanvasRenderer = CanvasRenderer;\n\texports.CanvasTexture = CanvasTexture;\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\n\texports.CineonToneMapping = CineonToneMapping;\n\texports.CircleBufferGeometry = CircleGeometry;\n\texports.CircleGeometry = CircleGeometry;\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\texports.Clock = Clock;\n\texports.Color = Color;\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\n\texports.CompressedTexture = CompressedTexture;\n\texports.CompressedTextureLoader = CompressedTextureLoader;\n\texports.ConeBufferGeometry = ConeGeometry;\n\texports.ConeGeometry = ConeGeometry;\n\texports.CubeCamera = CubeCamera;\n\texports.CubeReflectionMapping = CubeReflectionMapping;\n\texports.CubeRefractionMapping = CubeRefractionMapping;\n\texports.CubeTexture = CubeTexture;\n\texports.CubeTextureLoader = CubeTextureLoader;\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\texports.CubicBezierCurve = CubicBezierCurve;\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\n\texports.CubicInterpolant = CubicInterpolant;\n\texports.CullFaceBack = CullFaceBack;\n\texports.CullFaceFront = CullFaceFront;\n\texports.CullFaceFrontBack = CullFaceFrontBack;\n\texports.CullFaceNone = CullFaceNone;\n\texports.Curve = Curve;\n\texports.CurvePath = CurvePath;\n\texports.CustomBlending = CustomBlending;\n\texports.CustomToneMapping = CustomToneMapping;\n\texports.CylinderBufferGeometry = CylinderGeometry;\n\texports.CylinderGeometry = CylinderGeometry;\n\texports.Cylindrical = Cylindrical;\n\texports.DataTexture = DataTexture;\n\texports.DataTexture2DArray = DataTexture2DArray;\n\texports.DataTexture3D = DataTexture3D;\n\texports.DataTextureLoader = DataTextureLoader;\n\texports.DataUtils = DataUtils;\n\texports.DecrementStencilOp = DecrementStencilOp;\n\texports.DecrementWrapStencilOp = DecrementWrapStencilOp;\n\texports.DefaultLoadingManager = DefaultLoadingManager;\n\texports.DepthFormat = DepthFormat;\n\texports.DepthStencilFormat = DepthStencilFormat;\n\texports.DepthTexture = DepthTexture;\n\texports.DirectionalLight = DirectionalLight;\n\texports.DirectionalLightHelper = DirectionalLightHelper;\n\texports.DiscreteInterpolant = DiscreteInterpolant;\n\texports.DodecahedronBufferGeometry = DodecahedronGeometry;\n\texports.DodecahedronGeometry = DodecahedronGeometry;\n\texports.DoubleSide = DoubleSide;\n\texports.DstAlphaFactor = DstAlphaFactor;\n\texports.DstColorFactor = DstColorFactor;\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\n\texports.DynamicCopyUsage = DynamicCopyUsage;\n\texports.DynamicDrawUsage = DynamicDrawUsage;\n\texports.DynamicReadUsage = DynamicReadUsage;\n\texports.EdgesGeometry = EdgesGeometry;\n\texports.EdgesHelper = EdgesHelper;\n\texports.EllipseCurve = EllipseCurve;\n\texports.EqualDepth = EqualDepth;\n\texports.EqualStencilFunc = EqualStencilFunc;\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\texports.Euler = Euler;\n\texports.EventDispatcher = EventDispatcher;\n\texports.ExtrudeBufferGeometry = ExtrudeGeometry;\n\texports.ExtrudeGeometry = ExtrudeGeometry;\n\texports.FaceColors = FaceColors;\n\texports.FileLoader = FileLoader;\n\texports.FlatShading = FlatShading;\n\texports.Float16BufferAttribute = Float16BufferAttribute;\n\texports.Float32Attribute = Float32Attribute;\n\texports.Float32BufferAttribute = Float32BufferAttribute;\n\texports.Float64Attribute = Float64Attribute;\n\texports.Float64BufferAttribute = Float64BufferAttribute;\n\texports.FloatType = FloatType;\n\texports.Fog = Fog;\n\texports.FogExp2 = FogExp2;\n\texports.Font = Font;\n\texports.FontLoader = FontLoader;\n\texports.FrontSide = FrontSide;\n\texports.Frustum = Frustum;\n\texports.GLBufferAttribute = GLBufferAttribute;\n\texports.GLSL1 = GLSL1;\n\texports.GLSL3 = GLSL3;\n\texports.GammaEncoding = GammaEncoding;\n\texports.GreaterDepth = GreaterDepth;\n\texports.GreaterEqualDepth = GreaterEqualDepth;\n\texports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;\n\texports.GreaterStencilFunc = GreaterStencilFunc;\n\texports.GridHelper = GridHelper;\n\texports.Group = Group;\n\texports.HalfFloatType = HalfFloatType;\n\texports.HemisphereLight = HemisphereLight;\n\texports.HemisphereLightHelper = HemisphereLightHelper;\n\texports.HemisphereLightProbe = HemisphereLightProbe;\n\texports.IcosahedronBufferGeometry = IcosahedronGeometry;\n\texports.IcosahedronGeometry = IcosahedronGeometry;\n\texports.ImageBitmapLoader = ImageBitmapLoader;\n\texports.ImageLoader = ImageLoader;\n\texports.ImageUtils = ImageUtils;\n\texports.ImmediateRenderObject = ImmediateRenderObject;\n\texports.IncrementStencilOp = IncrementStencilOp;\n\texports.IncrementWrapStencilOp = IncrementWrapStencilOp;\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\texports.InstancedMesh = InstancedMesh;\n\texports.Int16Attribute = Int16Attribute;\n\texports.Int16BufferAttribute = Int16BufferAttribute;\n\texports.Int32Attribute = Int32Attribute;\n\texports.Int32BufferAttribute = Int32BufferAttribute;\n\texports.Int8Attribute = Int8Attribute;\n\texports.Int8BufferAttribute = Int8BufferAttribute;\n\texports.IntType = IntType;\n\texports.InterleavedBuffer = InterleavedBuffer;\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\texports.Interpolant = Interpolant;\n\texports.InterpolateDiscrete = InterpolateDiscrete;\n\texports.InterpolateLinear = InterpolateLinear;\n\texports.InterpolateSmooth = InterpolateSmooth;\n\texports.InvertStencilOp = InvertStencilOp;\n\texports.JSONLoader = JSONLoader;\n\texports.KeepStencilOp = KeepStencilOp;\n\texports.KeyframeTrack = KeyframeTrack;\n\texports.LOD = LOD;\n\texports.LatheBufferGeometry = LatheGeometry;\n\texports.LatheGeometry = LatheGeometry;\n\texports.Layers = Layers;\n\texports.LensFlare = LensFlare;\n\texports.LessDepth = LessDepth;\n\texports.LessEqualDepth = LessEqualDepth;\n\texports.LessEqualStencilFunc = LessEqualStencilFunc;\n\texports.LessStencilFunc = LessStencilFunc;\n\texports.Light = Light;\n\texports.LightProbe = LightProbe;\n\texports.Line = Line;\n\texports.Line3 = Line3;\n\texports.LineBasicMaterial = LineBasicMaterial;\n\texports.LineCurve = LineCurve;\n\texports.LineCurve3 = LineCurve3;\n\texports.LineDashedMaterial = LineDashedMaterial;\n\texports.LineLoop = LineLoop;\n\texports.LinePieces = LinePieces;\n\texports.LineSegments = LineSegments;\n\texports.LineStrip = LineStrip;\n\texports.LinearEncoding = LinearEncoding;\n\texports.LinearFilter = LinearFilter;\n\texports.LinearInterpolant = LinearInterpolant;\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\texports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;\n\texports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;\n\texports.LinearToneMapping = LinearToneMapping;\n\texports.Loader = Loader;\n\texports.LoaderUtils = LoaderUtils;\n\texports.LoadingManager = LoadingManager;\n\texports.LogLuvEncoding = LogLuvEncoding;\n\texports.LoopOnce = LoopOnce;\n\texports.LoopPingPong = LoopPingPong;\n\texports.LoopRepeat = LoopRepeat;\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\texports.LuminanceFormat = LuminanceFormat;\n\texports.MOUSE = MOUSE;\n\texports.Material = Material;\n\texports.MaterialLoader = MaterialLoader;\n\texports.Math = MathUtils;\n\texports.MathUtils = MathUtils;\n\texports.Matrix3 = Matrix3;\n\texports.Matrix4 = Matrix4;\n\texports.MaxEquation = MaxEquation;\n\texports.Mesh = Mesh;\n\texports.MeshBasicMaterial = MeshBasicMaterial;\n\texports.MeshDepthMaterial = MeshDepthMaterial;\n\texports.MeshDistanceMaterial = MeshDistanceMaterial;\n\texports.MeshFaceMaterial = MeshFaceMaterial;\n\texports.MeshLambertMaterial = MeshLambertMaterial;\n\texports.MeshMatcapMaterial = MeshMatcapMaterial;\n\texports.MeshNormalMaterial = MeshNormalMaterial;\n\texports.MeshPhongMaterial = MeshPhongMaterial;\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\texports.MeshStandardMaterial = MeshStandardMaterial;\n\texports.MeshToonMaterial = MeshToonMaterial;\n\texports.MinEquation = MinEquation;\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\texports.MixOperation = MixOperation;\n\texports.MultiMaterial = MultiMaterial;\n\texports.MultiplyBlending = MultiplyBlending;\n\texports.MultiplyOperation = MultiplyOperation;\n\texports.NearestFilter = NearestFilter;\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\texports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;\n\texports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;\n\texports.NeverDepth = NeverDepth;\n\texports.NeverStencilFunc = NeverStencilFunc;\n\texports.NoBlending = NoBlending;\n\texports.NoColors = NoColors;\n\texports.NoToneMapping = NoToneMapping;\n\texports.NormalAnimationBlendMode = NormalAnimationBlendMode;\n\texports.NormalBlending = NormalBlending;\n\texports.NotEqualDepth = NotEqualDepth;\n\texports.NotEqualStencilFunc = NotEqualStencilFunc;\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\n\texports.Object3D = Object3D;\n\texports.ObjectLoader = ObjectLoader;\n\texports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\n\texports.OctahedronBufferGeometry = OctahedronGeometry;\n\texports.OctahedronGeometry = OctahedronGeometry;\n\texports.OneFactor = OneFactor;\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\texports.OrthographicCamera = OrthographicCamera;\n\texports.PCFShadowMap = PCFShadowMap;\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\n\texports.PMREMGenerator = PMREMGenerator;\n\texports.ParametricGeometry = ParametricGeometry;\n\texports.Particle = Particle;\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\n\texports.ParticleSystem = ParticleSystem;\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\n\texports.Path = Path;\n\texports.PerspectiveCamera = PerspectiveCamera;\n\texports.Plane = Plane;\n\texports.PlaneBufferGeometry = PlaneGeometry;\n\texports.PlaneGeometry = PlaneGeometry;\n\texports.PlaneHelper = PlaneHelper;\n\texports.PointCloud = PointCloud;\n\texports.PointCloudMaterial = PointCloudMaterial;\n\texports.PointLight = PointLight;\n\texports.PointLightHelper = PointLightHelper;\n\texports.Points = Points;\n\texports.PointsMaterial = PointsMaterial;\n\texports.PolarGridHelper = PolarGridHelper;\n\texports.PolyhedronBufferGeometry = PolyhedronGeometry;\n\texports.PolyhedronGeometry = PolyhedronGeometry;\n\texports.PositionalAudio = PositionalAudio;\n\texports.PropertyBinding = PropertyBinding;\n\texports.PropertyMixer = PropertyMixer;\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n\texports.Quaternion = Quaternion;\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\texports.REVISION = REVISION;\n\texports.RGBADepthPacking = RGBADepthPacking;\n\texports.RGBAFormat = RGBAFormat;\n\texports.RGBAIntegerFormat = RGBAIntegerFormat;\n\texports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\n\texports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\n\texports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\n\texports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\n\texports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\n\texports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\n\texports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\n\texports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\n\texports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\n\texports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\n\texports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\n\texports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\n\texports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\n\texports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\n\texports.RGBA_BPTC_Format = RGBA_BPTC_Format;\n\texports.RGBA_ETC2_EAC_Format = RGBA_ETC2_EAC_Format;\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\texports.RGBDEncoding = RGBDEncoding;\n\texports.RGBEEncoding = RGBEEncoding;\n\texports.RGBEFormat = RGBEFormat;\n\texports.RGBFormat = RGBFormat;\n\texports.RGBIntegerFormat = RGBIntegerFormat;\n\texports.RGBM16Encoding = RGBM16Encoding;\n\texports.RGBM7Encoding = RGBM7Encoding;\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\n\texports.RGB_ETC2_Format = RGB_ETC2_Format;\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\texports.RGFormat = RGFormat;\n\texports.RGIntegerFormat = RGIntegerFormat;\n\texports.RawShaderMaterial = RawShaderMaterial;\n\texports.Ray = Ray;\n\texports.Raycaster = Raycaster;\n\texports.RectAreaLight = RectAreaLight;\n\texports.RedFormat = RedFormat;\n\texports.RedIntegerFormat = RedIntegerFormat;\n\texports.ReinhardToneMapping = ReinhardToneMapping;\n\texports.RepeatWrapping = RepeatWrapping;\n\texports.ReplaceStencilOp = ReplaceStencilOp;\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\n\texports.RingBufferGeometry = RingGeometry;\n\texports.RingGeometry = RingGeometry;\n\texports.SRGB8_ALPHA8_ASTC_10x10_Format = SRGB8_ALPHA8_ASTC_10x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x5_Format = SRGB8_ALPHA8_ASTC_10x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x6_Format = SRGB8_ALPHA8_ASTC_10x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x8_Format = SRGB8_ALPHA8_ASTC_10x8_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x10_Format = SRGB8_ALPHA8_ASTC_12x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x12_Format = SRGB8_ALPHA8_ASTC_12x12_Format;\n\texports.SRGB8_ALPHA8_ASTC_4x4_Format = SRGB8_ALPHA8_ASTC_4x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x4_Format = SRGB8_ALPHA8_ASTC_5x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x5_Format = SRGB8_ALPHA8_ASTC_5x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x5_Format = SRGB8_ALPHA8_ASTC_6x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x6_Format = SRGB8_ALPHA8_ASTC_6x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x5_Format = SRGB8_ALPHA8_ASTC_8x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x6_Format = SRGB8_ALPHA8_ASTC_8x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x8_Format = SRGB8_ALPHA8_ASTC_8x8_Format;\n\texports.Scene = Scene;\n\texports.SceneUtils = SceneUtils;\n\texports.ShaderChunk = ShaderChunk;\n\texports.ShaderLib = ShaderLib;\n\texports.ShaderMaterial = ShaderMaterial;\n\texports.ShadowMaterial = ShadowMaterial;\n\texports.Shape = Shape;\n\texports.ShapeBufferGeometry = ShapeGeometry;\n\texports.ShapeGeometry = ShapeGeometry;\n\texports.ShapePath = ShapePath;\n\texports.ShapeUtils = ShapeUtils;\n\texports.ShortType = ShortType;\n\texports.Skeleton = Skeleton;\n\texports.SkeletonHelper = SkeletonHelper;\n\texports.SkinnedMesh = SkinnedMesh;\n\texports.SmoothShading = SmoothShading;\n\texports.Sphere = Sphere;\n\texports.SphereBufferGeometry = SphereGeometry;\n\texports.SphereGeometry = SphereGeometry;\n\texports.Spherical = Spherical;\n\texports.SphericalHarmonics3 = SphericalHarmonics3;\n\texports.SplineCurve = SplineCurve;\n\texports.SpotLight = SpotLight;\n\texports.SpotLightHelper = SpotLightHelper;\n\texports.Sprite = Sprite;\n\texports.SpriteMaterial = SpriteMaterial;\n\texports.SrcAlphaFactor = SrcAlphaFactor;\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\texports.SrcColorFactor = SrcColorFactor;\n\texports.StaticCopyUsage = StaticCopyUsage;\n\texports.StaticDrawUsage = StaticDrawUsage;\n\texports.StaticReadUsage = StaticReadUsage;\n\texports.StereoCamera = StereoCamera;\n\texports.StreamCopyUsage = StreamCopyUsage;\n\texports.StreamDrawUsage = StreamDrawUsage;\n\texports.StreamReadUsage = StreamReadUsage;\n\texports.StringKeyframeTrack = StringKeyframeTrack;\n\texports.SubtractEquation = SubtractEquation;\n\texports.SubtractiveBlending = SubtractiveBlending;\n\texports.TOUCH = TOUCH;\n\texports.TangentSpaceNormalMap = TangentSpaceNormalMap;\n\texports.TetrahedronBufferGeometry = TetrahedronGeometry;\n\texports.TetrahedronGeometry = TetrahedronGeometry;\n\texports.TextGeometry = TextGeometry;\n\texports.Texture = Texture;\n\texports.TextureLoader = TextureLoader;\n\texports.TorusBufferGeometry = TorusGeometry;\n\texports.TorusGeometry = TorusGeometry;\n\texports.TorusKnotBufferGeometry = TorusKnotGeometry;\n\texports.TorusKnotGeometry = TorusKnotGeometry;\n\texports.Triangle = Triangle;\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\n\texports.TrianglesDrawMode = TrianglesDrawMode;\n\texports.TubeBufferGeometry = TubeGeometry;\n\texports.TubeGeometry = TubeGeometry;\n\texports.UVMapping = UVMapping;\n\texports.Uint16Attribute = Uint16Attribute;\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\n\texports.Uint32Attribute = Uint32Attribute;\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\n\texports.Uint8Attribute = Uint8Attribute;\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\n\texports.Uniform = Uniform;\n\texports.UniformsLib = UniformsLib;\n\texports.UniformsUtils = UniformsUtils;\n\texports.UnsignedByteType = UnsignedByteType;\n\texports.UnsignedInt248Type = UnsignedInt248Type;\n\texports.UnsignedIntType = UnsignedIntType;\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\n\texports.UnsignedShort565Type = UnsignedShort565Type;\n\texports.UnsignedShortType = UnsignedShortType;\n\texports.VSMShadowMap = VSMShadowMap;\n\texports.Vector2 = Vector2;\n\texports.Vector3 = Vector3;\n\texports.Vector4 = Vector4;\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\n\texports.Vertex = Vertex;\n\texports.VertexColors = VertexColors;\n\texports.VideoTexture = VideoTexture;\n\texports.WebGL1Renderer = WebGL1Renderer;\n\texports.WebGLCubeRenderTarget = WebGLCubeRenderTarget;\n\texports.WebGLMultipleRenderTargets = WebGLMultipleRenderTargets;\n\texports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;\n\texports.WebGLRenderTarget = WebGLRenderTarget;\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\texports.WebGLRenderer = WebGLRenderer;\n\texports.WebGLUtils = WebGLUtils;\n\texports.WireframeGeometry = WireframeGeometry;\n\texports.WireframeHelper = WireframeHelper;\n\texports.WrapAroundEnding = WrapAroundEnding;\n\texports.XHRLoader = XHRLoader;\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\texports.ZeroFactor = ZeroFactor;\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\n\texports.ZeroStencilOp = ZeroStencilOp;\n\texports.sRGBEncoding = sRGBEncoding;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]},"metadata":{},"sourceType":"script"}