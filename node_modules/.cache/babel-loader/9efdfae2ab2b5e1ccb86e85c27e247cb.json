{"ast":null,"code":"var _jsxFileName = \"/Users/arnaudavocatgros/Documents/GitHub/AR_VR_Map_WebSite/src/ItemViewer.js\";\n// copier coller code iss tracker\nimport * as THREE from \"../node_modules/three/build/three.js\";\nimport { GLTFLoader } from '../node_modules/three/examples/jsm/loaders/GLTFLoader.js';\nimport { RoughnessMipmapper } from '../node_modules/three/examples/jsm/utils/RoughnessMipmapper.js';\nimport Stats from './Stats';\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { OrbitControls } from \"../node_modules/three/examples/jsm/controls/OrbitControls\";\nimport { Object3D } from \"three\";\nexport default function ItemViewer(props) {\n  let pointclouds;\n  const scene = new THREE.Scene();\n  scene.add(new THREE.AxesHelper(5));\n  const raycaster = new THREE.Raycaster();\n  const mouse = new THREE.Vector2();\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n  camera.position.z = 2;\n  const renderer = new THREE.WebGLRenderer();\n  renderer.setSize(window.innerWidth, window.innerHeight); //document.getElementById(\"3d\").appendChild(renderer.domElement)\n\n  const controls = new OrbitControls(camera, renderer.domElement);\n  controls.enableDamping = true;\n  const loader = new GLTFLoader();\n  loader.load(\"https://lauriaristorage.blob.core.windows.net/\" + props.link, function (gltf) {\n    gltf.scene.name = \"gltf\";\n    var box = new THREE.Box3().setFromObject(gltf.scene);\n    console.log(box.min, box.max);\n    scene.add(gltf.scene);\n  }, xhr => {\n    console.log(xhr.loaded / xhr.total * 100 + '% loaded');\n  }, error => {\n    console.log(error);\n  });\n  const mgeo = new THREE.SphereGeometry(1, 1);\n  const mmat = new THREE.MeshStandardMaterial({\n    color: 0xFFFFFF\n  });\n  const moon = new THREE.Mesh(mgeo, mmat);\n  moon.name = \"intersection\";\n  const pointLight = new THREE.PointLight(0xFFFFFF);\n  pointLight.position.set(0, 0, 0);\n  const ambientLight = new THREE.AmbientLight(0xFFFFFF);\n  scene.add(ambientLight);\n  window.addEventListener('resize', onWindowResize, false);\n\n  function onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    render();\n  }\n\n  window.addEventListener('pointermove', onMouseMove);\n\n  function onMouseMove(event) {\n    mouse.x = event.clientX / window.innerWidth * 2 - 1;\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n  }\n\n  const stats = Stats();\n  document.body.appendChild(stats.dom);\n\n  function animate() {\n    requestAnimationFrame(animate);\n    controls.update();\n    render();\n    stats.update();\n  }\n\n  function render() {\n    raycaster.setFromCamera(mouse, camera); // calculate objects intersecting the picking ray\n\n    const point = new Object3D();\n    const intersects = raycaster.intersectObjects(scene.children);\n\n    for (let i = 0; i < intersects.length; i++) {\n      // You can do anything you want here, this is just an example to make the hovered object transparent\n      //console.log(intersects[i].object.parent.name); \n      const newMaterial = intersects[i].object.material.clone();\n      newMaterial.transparent = false;\n      newMaterial.opacity = 0.5;\n      intersects[i].object.material = newMaterial;\n\n      if (i === 2) {\n        x = intersects[2].point.x;\n        y = intersects[2].point.y;\n        z = intersects[2].point.z;\n      }\n    }\n\n    window.addEventListener(\"click\", onClick);\n\n    function onClick(event) {\n      console.log(moon.position);\n    }\n\n    moon.position.set(x, y, z);\n    scene.add(moon);\n    renderer.render(scene, camera);\n  }\n\n  console.log(scene);\n  animate();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"3d\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, renderer.domElement);\n}","map":{"version":3,"sources":["/Users/arnaudavocatgros/Documents/GitHub/AR_VR_Map_WebSite/src/ItemViewer.js"],"names":["THREE","GLTFLoader","RoughnessMipmapper","Stats","React","Component","ReactDOM","OrbitControls","Object3D","ItemViewer","props","pointclouds","scene","Scene","add","AxesHelper","raycaster","Raycaster","mouse","Vector2","x","y","z","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","renderer","WebGLRenderer","setSize","controls","domElement","enableDamping","loader","load","link","gltf","name","box","Box3","setFromObject","console","log","min","max","xhr","loaded","total","error","mgeo","SphereGeometry","mmat","MeshStandardMaterial","color","moon","Mesh","pointLight","PointLight","set","ambientLight","AmbientLight","addEventListener","onWindowResize","aspect","updateProjectionMatrix","render","onMouseMove","event","clientX","clientY","stats","document","body","appendChild","dom","animate","requestAnimationFrame","update","setFromCamera","point","intersects","intersectObjects","children","i","length","newMaterial","object","material","clone","transparent","opacity","onClick"],"mappings":"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","sourcesContent":["// copier coller code iss tracker\nimport * as THREE from \"../node_modules/three/build/three.js\";\nimport {GLTFLoader} from '../node_modules/three/examples/jsm/loaders/GLTFLoader.js'\n\nimport { RoughnessMipmapper } from '../node_modules/three/examples/jsm/utils/RoughnessMipmapper.js';\nimport Stats from './Stats';\n\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {OrbitControls} from \"../node_modules/three/examples/jsm/controls/OrbitControls\"\nimport { Object3D } from \"three\";\n\n\nexport default function ItemViewer(props){\n\n    let pointclouds;\nconst scene = new THREE.Scene()\nscene.add(new THREE.AxesHelper(5))\nconst raycaster = new THREE.Raycaster();\nconst mouse = new THREE.Vector2();\nlet x = 0\nlet y = 0;\nlet z = 0;\n\nconst camera = new THREE.PerspectiveCamera(\n    75,\n    window.innerWidth / window.innerHeight,\n    0.1,\n    1000\n)\ncamera.position.z = 2\nconst renderer = new THREE.WebGLRenderer()\nrenderer.setSize(window.innerWidth, window.innerHeight)\n//document.getElementById(\"3d\").appendChild(renderer.domElement)\n\nconst controls = new OrbitControls(camera, renderer.domElement)\ncontrols.enableDamping = true\n\n    \nconst loader = new GLTFLoader()\nloader.load(\n    \"https://lauriaristorage.blob.core.windows.net/\" + props.link,\n    function (gltf) {\n        gltf.scene.name = \"gltf\"\n        var box = new THREE.Box3().setFromObject(gltf.scene);\n        console.log(box.min, box.max);\n        scene.add(gltf.scene)\n    },\n    (xhr) => {\n        console.log((xhr.loaded / xhr.total) * 100 + '% loaded')\n    },\n    (error) => {\n        console.log(error)\n    }\n)\nconst mgeo = new THREE.SphereGeometry(1,1);\n  const mmat = new THREE.MeshStandardMaterial({color: 0xFFFFFF});\n  const moon = new THREE.Mesh(mgeo,mmat);\n  moon.name = \"intersection\";\nconst pointLight = new THREE.PointLight(0xFFFFFF);\n    pointLight.position.set(0,0,0);\n    const ambientLight = new THREE.AmbientLight(0xFFFFFF);\n    scene.add( ambientLight)\nwindow.addEventListener('resize', onWindowResize, false)\nfunction onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight\n    camera.updateProjectionMatrix()\n    renderer.setSize(window.innerWidth, window.innerHeight)\n    render()\n}\nwindow.addEventListener('pointermove', onMouseMove);\n\nfunction onMouseMove(event){\n  mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n\tmouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n}\nconst stats = Stats()\ndocument.body.appendChild(stats.dom)\n\nfunction animate() {\n    requestAnimationFrame(animate)\n\n    controls.update()\n\n    render()\n\n    stats.update()\n}\n\nfunction render() {\n  raycaster.setFromCamera( mouse, camera );\n\n\t// calculate objects intersecting the picking ray\n\n\n  const point = new Object3D();\n  const intersects = raycaster.intersectObjects( scene.children );\n  for (let i = 0; i < intersects.length; i++) {\n    // You can do anything you want here, this is just an example to make the hovered object transparent\n    //console.log(intersects[i].object.parent.name); \n    const newMaterial = intersects[i].object.material.clone();\n    newMaterial.transparent = false;\n    newMaterial.opacity = 0.5;\n    intersects[i].object.material = newMaterial;\n    if(i === 2){\n      x = intersects[2].point.x;\n      y = intersects[2].point.y;\n      z = intersects[2].point.z;\n    }\n     \n\n   \n    \n  }\n\n  window.addEventListener(\"click\", onClick);\n\n  function onClick(event){\n    console.log(moon.position);\n  }\n  \n  \nmoon.position.set(x,y,z);\n  scene.add(moon);\n    renderer.render(scene, camera)\n}\n\n\n\nconsole.log(scene);\nanimate()\n    \n\n    return (\n        <div id=\"3d\">\n            {renderer.domElement}\n        </div>\n    )\n  \n}"]},"metadata":{},"sourceType":"module"}