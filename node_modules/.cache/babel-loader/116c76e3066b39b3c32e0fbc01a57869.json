{"ast":null,"code":"var _jsxFileName = \"/Users/arnaudavocatgros/Documents/GitHub/AR_VR_Map_WebSite/src/GLTF.js\";\nimport * as THREE from \"../node_modules/three/build/three.module.js\";\nimport { OrbitControls } from \"../node_modules/three/examples/jsm/controls/OrbitControls.js\";\nimport { GLTF, GLTFLoader } from \"../node_modules/three/examples/jsm/loaders/GLTFLoader.js\";\nimport React, { useEffect, useRef } from \"react\";\nexport default function GLTFView(props) {\n  const ref = useRef();\n  var scene = new THREE.Scene();\n  var camera = new THREE.PerspectiveCamera(75, window.innnerWidth / window.innerHeight, 0.1, 1000);\n  const canvas = document.querySelector('.3DObject');\n  useEffect(() => {\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera(75, window.innnerWidth / window.innerHeight, 0.1, 1000);\n  });\n  var renderer = new THREE.WebGLRenderer({\n    canvas: canvas\n  });\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  ref.current.appendChild(renderer.domElement);\n  const loader = new GLTFLoader();\n  loader.load('https://lauriaristorage.blob.core.windows.net/objects/aa78b917-914f-4fda-bd1b-4e9ff8972e77/corridorFloor.gltf', function (gltf) {\n    scene.add(gltf.scene);\n  });\n  const light = new THREE.PointLight(0xffffff, 2, 200);\n  light.position.set(4.5, 10, 4.5);\n  scene.add(light);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"canvas\", {\n    class: \"3DObject\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }));\n}\n/*const Vis = () => {\n    const { useRef, useEffect, useState } = React\n    const mount = useRef(null)\n    const [isAnimating, setAnimating] = useState(true)\n    const controls = useRef(null)\n    \n    useEffect(() => {\n      let width = mount.current.clientWidth\n      let height = mount.current.clientHeight\n      let frameId\n  \n      const scene = new THREE.Scene()\n      const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000)\n      const renderer = new THREE.WebGLRenderer({ antialias: true })\n      const geometry = new THREE.BoxGeometry(1, 1, 1)\n      const material = new THREE.MeshBasicMaterial({ color: 0xff00ff })\n      const cube = new THREE.Mesh(geometry, material)\n  \n      camera.position.z = 4\n      scene.add(cube)\n      renderer.setClearColor('#000000')\n      renderer.setSize(width, height)\n  \n      const renderScene = () => {\n        renderer.render(scene, camera)\n      }\n  \n      const handleResize = () => {\n        width = mount.current.clientWidth\n        height = mount.current.clientHeight\n        renderer.setSize(width, height)\n        camera.aspect = width / height\n        camera.updateProjectionMatrix()\n        renderScene()\n      }\n      \n      const animate = () => {\n        cube.rotation.x += 0.01\n        cube.rotation.y += 0.01\n  \n        renderScene()\n        frameId = window.requestAnimationFrame(animate)\n      }\n  \n      const start = () => {\n        if (!frameId) {\n          frameId = requestAnimationFrame(animate)\n        }\n      }\n  \n      const stop = () => {\n        cancelAnimationFrame(frameId)\n        frameId = null\n      }\n  \n      mount.current.appendChild(renderer.domElement)\n      window.addEventListener('resize', handleResize)\n      start()\n  \n      controls.current = { start, stop }\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      mount.current.appendChild(renderer.domElement);\n\n      const loader = new GLTFLoader();\n      loader.load('https://lauriaristorage.blob.core.windows.net/objects/aa78b917-914f-4fda-bd1b-4e9ff8972e77/corridorFloor.gltf', function(gltf){\n          scene.add(gltf.scene);\n      });\n      const light = new THREE.PointLight(0xffffff, 2, 200);\n      light.position.set(4.5,10,4.5);\n      scene.add(light);\n      \n      return () => {\n        stop()\n        window.removeEventListener('resize', handleResize)\n        mount.current.removeChild(renderer.domElement)\n  \n        scene.remove(cube)\n        geometry.dispose()\n        material.dispose()\n      }\n    }, [])\n\n   \n    \n\n  \n    \n    return (\n      <>\n      <canvas class=\"3DObject\"></canvas>\n      </>\n      )\n  }\n\n  export default Vis;*/","map":{"version":3,"sources":["/Users/arnaudavocatgros/Documents/GitHub/AR_VR_Map_WebSite/src/GLTF.js"],"names":["THREE","OrbitControls","GLTF","GLTFLoader","React","useEffect","useRef","GLTFView","props","ref","scene","Scene","camera","PerspectiveCamera","window","innnerWidth","innerHeight","canvas","document","querySelector","renderer","WebGLRenderer","setSize","innerWidth","current","appendChild","domElement","loader","load","gltf","add","light","PointLight","position","set"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,6CAAvB;AACA,SAAQC,aAAR,QAA4B,8DAA5B;AACA,SAAQC,IAAR,EAAcC,UAAd,QAA+B,0DAA/B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA0BC,MAA1B,QAAuC,OAAvC;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAwB;AACnC,QAAMC,GAAG,GAAGH,MAAM,EAAlB;AACA,MAAII,KAAK,GAAG,IAAIV,KAAK,CAACW,KAAV,EAAZ;AACA,MAAIC,MAAM,GAAG,IAAIZ,KAAK,CAACa,iBAAV,CAA4B,EAA5B,EAAgCC,MAAM,CAACC,WAAP,GAAqBD,MAAM,CAACE,WAA5D,EAAyE,GAAzE,EAA8E,IAA9E,CAAb;AACA,QAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,WAAvB,CAAf;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,KAAK,GAAG,IAAIV,KAAK,CAACW,KAAV,EAAR;AACAC,IAAAA,MAAM,GAAG,IAAIZ,KAAK,CAACa,iBAAV,CAA4B,EAA5B,EAAgCC,MAAM,CAACC,WAAP,GAAqBD,MAAM,CAACE,WAA5D,EAAyE,GAAzE,EAA8E,IAA9E,CAAT;AACH,GAHQ,CAAT;AAMI,MAAII,QAAQ,GAAG,IAAIpB,KAAK,CAACqB,aAAV,CAAwB;AACrCJ,IAAAA,MAAM,EAAEA;AAD6B,GAAxB,CAAf;AAGAG,EAAAA,QAAQ,CAACE,OAAT,CAAiBR,MAAM,CAACS,UAAxB,EAAoCT,MAAM,CAACE,WAA3C;AACAP,EAAAA,GAAG,CAACe,OAAJ,CAAYC,WAAZ,CAAwBL,QAAQ,CAACM,UAAjC;AAEA,QAAMC,MAAM,GAAG,IAAIxB,UAAJ,EAAf;AACAwB,EAAAA,MAAM,CAACC,IAAP,CAAY,+GAAZ,EAA6H,UAASC,IAAT,EAAc;AACvInB,IAAAA,KAAK,CAACoB,GAAN,CAAUD,IAAI,CAACnB,KAAf;AACH,GAFD;AAGA,QAAMqB,KAAK,GAAG,IAAI/B,KAAK,CAACgC,UAAV,CAAqB,QAArB,EAA+B,CAA/B,EAAkC,GAAlC,CAAd;AACAD,EAAAA,KAAK,CAACE,QAAN,CAAeC,GAAf,CAAmB,GAAnB,EAAuB,EAAvB,EAA0B,GAA1B;AACAxB,EAAAA,KAAK,CAACoB,GAAN,CAAUC,KAAV;AAKJ,sBACI,uDACI;AAAQ,IAAA,KAAK,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import * as THREE from \"../node_modules/three/build/three.module.js\"\nimport {OrbitControls} from \"../node_modules/three/examples/jsm/controls/OrbitControls.js\"\nimport {GLTF, GLTFLoader} from \"../node_modules/three/examples/jsm/loaders/GLTFLoader.js\"\nimport React, { useEffect,useRef} from \"react\";\n\nexport default function GLTFView(props){\n    const ref = useRef();\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera(75, window.innnerWidth / window.innerHeight, 0.1, 1000);\n    const canvas = document.querySelector('.3DObject');\n\n    useEffect(() => {\n        scene = new THREE.Scene();\n        camera = new THREE.PerspectiveCamera(75, window.innnerWidth / window.innerHeight, 0.1, 1000);\n    })\n        \n        \n        var renderer = new THREE.WebGLRenderer({\n          canvas: canvas\n        });\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        ref.current.appendChild(renderer.domElement);\n\n        const loader = new GLTFLoader();\n        loader.load('https://lauriaristorage.blob.core.windows.net/objects/aa78b917-914f-4fda-bd1b-4e9ff8972e77/corridorFloor.gltf', function(gltf){\n            scene.add(gltf.scene);\n        });\n        const light = new THREE.PointLight(0xffffff, 2, 200);\n        light.position.set(4.5,10,4.5);\n        scene.add(light);\n    \n\n\n\n    return(\n        <>\n            <canvas class=\"3DObject\"></canvas>\n        </>\n    )\n}\n\n/*const Vis = () => {\n    const { useRef, useEffect, useState } = React\n    const mount = useRef(null)\n    const [isAnimating, setAnimating] = useState(true)\n    const controls = useRef(null)\n    \n    useEffect(() => {\n      let width = mount.current.clientWidth\n      let height = mount.current.clientHeight\n      let frameId\n  \n      const scene = new THREE.Scene()\n      const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000)\n      const renderer = new THREE.WebGLRenderer({ antialias: true })\n      const geometry = new THREE.BoxGeometry(1, 1, 1)\n      const material = new THREE.MeshBasicMaterial({ color: 0xff00ff })\n      const cube = new THREE.Mesh(geometry, material)\n  \n      camera.position.z = 4\n      scene.add(cube)\n      renderer.setClearColor('#000000')\n      renderer.setSize(width, height)\n  \n      const renderScene = () => {\n        renderer.render(scene, camera)\n      }\n  \n      const handleResize = () => {\n        width = mount.current.clientWidth\n        height = mount.current.clientHeight\n        renderer.setSize(width, height)\n        camera.aspect = width / height\n        camera.updateProjectionMatrix()\n        renderScene()\n      }\n      \n      const animate = () => {\n        cube.rotation.x += 0.01\n        cube.rotation.y += 0.01\n  \n        renderScene()\n        frameId = window.requestAnimationFrame(animate)\n      }\n  \n      const start = () => {\n        if (!frameId) {\n          frameId = requestAnimationFrame(animate)\n        }\n      }\n  \n      const stop = () => {\n        cancelAnimationFrame(frameId)\n        frameId = null\n      }\n  \n      mount.current.appendChild(renderer.domElement)\n      window.addEventListener('resize', handleResize)\n      start()\n  \n      controls.current = { start, stop }\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      mount.current.appendChild(renderer.domElement);\n\n      const loader = new GLTFLoader();\n      loader.load('https://lauriaristorage.blob.core.windows.net/objects/aa78b917-914f-4fda-bd1b-4e9ff8972e77/corridorFloor.gltf', function(gltf){\n          scene.add(gltf.scene);\n      });\n      const light = new THREE.PointLight(0xffffff, 2, 200);\n      light.position.set(4.5,10,4.5);\n      scene.add(light);\n      \n      return () => {\n        stop()\n        window.removeEventListener('resize', handleResize)\n        mount.current.removeChild(renderer.domElement)\n  \n        scene.remove(cube)\n        geometry.dispose()\n        material.dispose()\n      }\n    }, [])\n\n   \n    \n\n  \n    \n    return (\n      <>\n      <canvas class=\"3DObject\"></canvas>\n      </>\n      )\n  }\n\n  export default Vis;*/"]},"metadata":{},"sourceType":"module"}