{"ast":null,"code":"/**\n * This class generates custom mipmaps for a roughness map by encoding the lost variation in the\n * normal map mip levels as increased roughness in the corresponding roughness mip levels. This\n * helps with rendering accuracy for MeshStandardMaterial, and also helps with anti-aliasing when\n * using PMREM. If the normal map is larger than the roughness map, the roughness map will be\n * enlarged to match the dimensions of the normal map.\n */\nimport { MathUtils, Mesh, NoBlending, OrthographicCamera, PlaneGeometry, RawShaderMaterial, Vector2, WebGLRenderTarget } from 'three';\n\nconst _mipmapMaterial = _getMipmapMaterial();\n\nconst _mesh = new Mesh(new PlaneGeometry(2, 2), _mipmapMaterial);\n\nconst _flatCamera = new OrthographicCamera(0, 1, 0, 1, 0, 1);\n\nlet _tempTarget = null;\nlet _renderer = null;\n\nclass RoughnessMipmapper {\n  constructor(renderer) {\n    _renderer = renderer;\n\n    _renderer.compile(_mesh, _flatCamera);\n  }\n\n  generateMipmaps(material) {\n    if ('roughnessMap' in material === false) return;\n    const {\n      roughnessMap,\n      normalMap\n    } = material;\n    if (roughnessMap === null || normalMap === null || !roughnessMap.generateMipmaps || material.userData.roughnessUpdated) return;\n    material.userData.roughnessUpdated = true;\n    let width = Math.max(roughnessMap.image.width, normalMap.image.width);\n    let height = Math.max(roughnessMap.image.height, normalMap.image.height);\n    if (!MathUtils.isPowerOfTwo(width) || !MathUtils.isPowerOfTwo(height)) return;\n\n    const oldTarget = _renderer.getRenderTarget();\n\n    const autoClear = _renderer.autoClear;\n    _renderer.autoClear = false;\n\n    if (_tempTarget === null || _tempTarget.width !== width || _tempTarget.height !== height) {\n      if (_tempTarget !== null) _tempTarget.dispose();\n      _tempTarget = new WebGLRenderTarget(width, height, {\n        depthBuffer: false\n      });\n      _tempTarget.scissorTest = true;\n    }\n\n    if (width !== roughnessMap.image.width || height !== roughnessMap.image.height) {\n      const params = {\n        wrapS: roughnessMap.wrapS,\n        wrapT: roughnessMap.wrapT,\n        magFilter: roughnessMap.magFilter,\n        minFilter: roughnessMap.minFilter,\n        depthBuffer: false\n      };\n      const newRoughnessTarget = new WebGLRenderTarget(width, height, params);\n      newRoughnessTarget.texture.generateMipmaps = true; // Setting the render target causes the memory to be allocated.\n\n      _renderer.setRenderTarget(newRoughnessTarget);\n\n      material.roughnessMap = newRoughnessTarget.texture;\n      if (material.metalnessMap == roughnessMap) material.metalnessMap = material.roughnessMap;\n      if (material.aoMap == roughnessMap) material.aoMap = material.roughnessMap; // Copy UV transform parameters\n\n      material.roughnessMap.offset.copy(roughnessMap.offset);\n      material.roughnessMap.repeat.copy(roughnessMap.repeat);\n      material.roughnessMap.center.copy(roughnessMap.center);\n      material.roughnessMap.rotation = roughnessMap.rotation;\n      material.roughnessMap.image = roughnessMap.image;\n      material.roughnessMap.matrixAutoUpdate = roughnessMap.matrixAutoUpdate;\n      material.roughnessMap.matrix.copy(roughnessMap.matrix);\n    }\n\n    _mipmapMaterial.uniforms.roughnessMap.value = roughnessMap;\n    _mipmapMaterial.uniforms.normalMap.value = normalMap;\n    const position = new Vector2(0, 0);\n    const texelSize = _mipmapMaterial.uniforms.texelSize.value;\n\n    for (let mip = 0; width >= 1 && height >= 1; ++mip, width /= 2, height /= 2) {\n      // Rendering to a mip level is not allowed in webGL1. Instead we must set\n      // up a secondary texture to write the result to, then copy it back to the\n      // proper mipmap level.\n      texelSize.set(1.0 / width, 1.0 / height);\n      if (mip == 0) texelSize.set(0.0, 0.0);\n\n      _tempTarget.viewport.set(position.x, position.y, width, height);\n\n      _tempTarget.scissor.set(position.x, position.y, width, height);\n\n      _renderer.setRenderTarget(_tempTarget);\n\n      _renderer.render(_mesh, _flatCamera);\n\n      _renderer.copyFramebufferToTexture(position, material.roughnessMap, mip);\n\n      _mipmapMaterial.uniforms.roughnessMap.value = material.roughnessMap;\n    }\n\n    if (roughnessMap !== material.roughnessMap) roughnessMap.dispose();\n\n    _renderer.setRenderTarget(oldTarget);\n\n    _renderer.autoClear = autoClear;\n  }\n\n  dispose() {\n    _mipmapMaterial.dispose();\n\n    _mesh.geometry.dispose();\n\n    if (_tempTarget != null) _tempTarget.dispose();\n  }\n\n}\n\nfunction _getMipmapMaterial() {\n  const shaderMaterial = new RawShaderMaterial({\n    uniforms: {\n      roughnessMap: {\n        value: null\n      },\n      normalMap: {\n        value: null\n      },\n      texelSize: {\n        value: new Vector2(1, 1)\n      }\n    },\n    vertexShader:\n    /* glsl */\n    `\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tattribute vec3 position;\n\t\t\tattribute vec2 uv;\n\n\t\t\tvarying vec2 vUv;\n\n\t\t\tvoid main() {\n\n\t\t\t\tvUv = uv;\n\n\t\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t\t}\n\t\t`,\n    fragmentShader:\n    /* glsl */\n    `\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec2 vUv;\n\n\t\t\tuniform sampler2D roughnessMap;\n\t\t\tuniform sampler2D normalMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\n\t\t\tvec4 envMapTexelToLinear( vec4 a ) { return a; }\n\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tfloat roughnessToVariance( float roughness ) {\n\n\t\t\t\tfloat variance = 0.0;\n\n\t\t\t\tif ( roughness >= r1 ) {\n\n\t\t\t\t\tvariance = ( r0 - roughness ) * ( v1 - v0 ) / ( r0 - r1 ) + v0;\n\n\t\t\t\t} else if ( roughness >= r4 ) {\n\n\t\t\t\t\tvariance = ( r1 - roughness ) * ( v4 - v1 ) / ( r1 - r4 ) + v1;\n\n\t\t\t\t} else if ( roughness >= r5 ) {\n\n\t\t\t\t\tvariance = ( r4 - roughness ) * ( v5 - v4 ) / ( r4 - r5 ) + v4;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfloat roughness2 = roughness * roughness;\n\n\t\t\t\t\tvariance = 1.79 * roughness2 * roughness2;\n\n\t\t\t\t}\n\n\t\t\t\treturn variance;\n\n\t\t\t}\n\n\t\t\tfloat varianceToRoughness( float variance ) {\n\n\t\t\t\tfloat roughness = 0.0;\n\n\t\t\t\tif ( variance >= v1 ) {\n\n\t\t\t\t\troughness = ( v0 - variance ) * ( r1 - r0 ) / ( v0 - v1 ) + r0;\n\n\t\t\t\t} else if ( variance >= v4 ) {\n\n\t\t\t\t\troughness = ( v1 - variance ) * ( r4 - r1 ) / ( v1 - v4 ) + r1;\n\n\t\t\t\t} else if ( variance >= v5 ) {\n\n\t\t\t\t\troughness = ( v4 - variance ) * ( r5 - r4 ) / ( v4 - v5 ) + r4;\n\n\t\t\t\t} else {\n\n\t\t\t\t\troughness = pow( 0.559 * variance, 0.25 ); // 0.559 = 1.0 / 1.79\n\n\t\t\t\t}\n\n\t\t\t\treturn roughness;\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = texture2D( roughnessMap, vUv, - 1.0 );\n\n\t\t\t\tif ( texelSize.x == 0.0 ) return;\n\n\t\t\t\tfloat roughness = gl_FragColor.g;\n\n\t\t\t\tfloat variance = roughnessToVariance( roughness );\n\n\t\t\t\tvec3 avgNormal;\n\n\t\t\t\tfor ( float x = - 1.0; x < 2.0; x += 2.0 ) {\n\n\t\t\t\t\tfor ( float y = - 1.0; y < 2.0; y += 2.0 ) {\n\n\t\t\t\t\t\tvec2 uv = vUv + vec2( x, y ) * 0.25 * texelSize;\n\n\t\t\t\t\t\tavgNormal += normalize( texture2D( normalMap, uv, - 1.0 ).xyz - 0.5 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvariance += 1.0 - 0.25 * length( avgNormal );\n\n\t\t\t\tgl_FragColor.g = varianceToRoughness( variance );\n\n\t\t\t}\n\t\t`,\n    blending: NoBlending,\n    depthTest: false,\n    depthWrite: false\n  });\n  shaderMaterial.type = 'RoughnessMipmapper';\n  return shaderMaterial;\n}\n\nexport { RoughnessMipmapper };","map":{"version":3,"sources":["/Users/arnaudavocatgros/Documents/GitHub/AReaExplorerWebApp/node_modules/three/examples/jsm/utils/RoughnessMipmapper.js"],"names":["MathUtils","Mesh","NoBlending","OrthographicCamera","PlaneGeometry","RawShaderMaterial","Vector2","WebGLRenderTarget","_mipmapMaterial","_getMipmapMaterial","_mesh","_flatCamera","_tempTarget","_renderer","RoughnessMipmapper","constructor","renderer","compile","generateMipmaps","material","roughnessMap","normalMap","userData","roughnessUpdated","width","Math","max","image","height","isPowerOfTwo","oldTarget","getRenderTarget","autoClear","dispose","depthBuffer","scissorTest","params","wrapS","wrapT","magFilter","minFilter","newRoughnessTarget","texture","setRenderTarget","metalnessMap","aoMap","offset","copy","repeat","center","rotation","matrixAutoUpdate","matrix","uniforms","value","position","texelSize","mip","set","viewport","x","y","scissor","render","copyFramebufferToTexture","geometry","shaderMaterial","vertexShader","fragmentShader","blending","depthTest","depthWrite","type"],"mappings":"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","sourcesContent":["/**\n * This class generates custom mipmaps for a roughness map by encoding the lost variation in the\n * normal map mip levels as increased roughness in the corresponding roughness mip levels. This\n * helps with rendering accuracy for MeshStandardMaterial, and also helps with anti-aliasing when\n * using PMREM. If the normal map is larger than the roughness map, the roughness map will be\n * enlarged to match the dimensions of the normal map.\n */\n\nimport {\n\tMathUtils,\n\tMesh,\n\tNoBlending,\n\tOrthographicCamera,\n\tPlaneGeometry,\n\tRawShaderMaterial,\n\tVector2,\n\tWebGLRenderTarget\n} from 'three';\n\nconst _mipmapMaterial = _getMipmapMaterial();\n\nconst _mesh = new Mesh( new PlaneGeometry( 2, 2 ), _mipmapMaterial );\n\nconst _flatCamera = new OrthographicCamera( 0, 1, 0, 1, 0, 1 );\n\nlet _tempTarget = null;\n\nlet _renderer = null;\n\nclass RoughnessMipmapper {\n\n\tconstructor( renderer ) {\n\n\t\t_renderer = renderer;\n\n\t\t_renderer.compile( _mesh, _flatCamera );\n\n\t}\n\n\tgenerateMipmaps( material ) {\n\n\t\tif ( 'roughnessMap' in material === false ) return;\n\n\t\tconst { roughnessMap, normalMap } = material;\n\n\t\tif ( roughnessMap === null || normalMap === null || ! roughnessMap.generateMipmaps || material.userData.roughnessUpdated ) return;\n\n\t\tmaterial.userData.roughnessUpdated = true;\n\n\t\tlet width = Math.max( roughnessMap.image.width, normalMap.image.width );\n\t\tlet height = Math.max( roughnessMap.image.height, normalMap.image.height );\n\n\t\tif ( ! MathUtils.isPowerOfTwo( width ) || ! MathUtils.isPowerOfTwo( height ) ) return;\n\n\t\tconst oldTarget = _renderer.getRenderTarget();\n\n\t\tconst autoClear = _renderer.autoClear;\n\n\t\t_renderer.autoClear = false;\n\n\t\tif ( _tempTarget === null || _tempTarget.width !== width || _tempTarget.height !== height ) {\n\n\t\t\tif ( _tempTarget !== null ) _tempTarget.dispose();\n\n\t\t\t_tempTarget = new WebGLRenderTarget( width, height, { depthBuffer: false } );\n\n\t\t\t_tempTarget.scissorTest = true;\n\n\t\t}\n\n\t\tif ( width !== roughnessMap.image.width || height !== roughnessMap.image.height ) {\n\n\t\t\tconst params = {\n\t\t\t\twrapS: roughnessMap.wrapS,\n\t\t\t\twrapT: roughnessMap.wrapT,\n\t\t\t\tmagFilter: roughnessMap.magFilter,\n\t\t\t\tminFilter: roughnessMap.minFilter,\n\t\t\t\tdepthBuffer: false\n\t\t\t};\n\n\t\t\tconst newRoughnessTarget = new WebGLRenderTarget( width, height, params );\n\n\t\t\tnewRoughnessTarget.texture.generateMipmaps = true;\n\n\t\t\t// Setting the render target causes the memory to be allocated.\n\n\t\t\t_renderer.setRenderTarget( newRoughnessTarget );\n\n\t\t\tmaterial.roughnessMap = newRoughnessTarget.texture;\n\n\t\t\tif ( material.metalnessMap == roughnessMap ) material.metalnessMap = material.roughnessMap;\n\n\t\t\tif ( material.aoMap == roughnessMap ) material.aoMap = material.roughnessMap;\n\n\t\t\t// Copy UV transform parameters\n\n\t\t\tmaterial.roughnessMap.offset.copy( roughnessMap.offset );\n\t\t\tmaterial.roughnessMap.repeat.copy( roughnessMap.repeat );\n\t\t\tmaterial.roughnessMap.center.copy( roughnessMap.center );\n\t\t\tmaterial.roughnessMap.rotation = roughnessMap.rotation;\n\t\t\tmaterial.roughnessMap.image = roughnessMap.image;\n\n\t\t\tmaterial.roughnessMap.matrixAutoUpdate = roughnessMap.matrixAutoUpdate;\n\t\t\tmaterial.roughnessMap.matrix.copy( roughnessMap.matrix );\n\n\t\t}\n\n\t\t_mipmapMaterial.uniforms.roughnessMap.value = roughnessMap;\n\n\t\t_mipmapMaterial.uniforms.normalMap.value = normalMap;\n\n\t\tconst position = new Vector2( 0, 0 );\n\n\t\tconst texelSize = _mipmapMaterial.uniforms.texelSize.value;\n\n\t\tfor ( let mip = 0; width >= 1 && height >= 1; ++ mip, width /= 2, height /= 2 ) {\n\n\t\t\t// Rendering to a mip level is not allowed in webGL1. Instead we must set\n\t\t\t// up a secondary texture to write the result to, then copy it back to the\n\t\t\t// proper mipmap level.\n\n\t\t\ttexelSize.set( 1.0 / width, 1.0 / height );\n\n\t\t\tif ( mip == 0 ) texelSize.set( 0.0, 0.0 );\n\n\t\t\t_tempTarget.viewport.set( position.x, position.y, width, height );\n\n\t\t\t_tempTarget.scissor.set( position.x, position.y, width, height );\n\n\t\t\t_renderer.setRenderTarget( _tempTarget );\n\n\t\t\t_renderer.render( _mesh, _flatCamera );\n\n\t\t\t_renderer.copyFramebufferToTexture( position, material.roughnessMap, mip );\n\n\t\t\t_mipmapMaterial.uniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t}\n\n\t\tif ( roughnessMap !== material.roughnessMap ) roughnessMap.dispose();\n\n\t\t_renderer.setRenderTarget( oldTarget );\n\n\t\t_renderer.autoClear = autoClear;\n\n\t}\n\n\tdispose() {\n\n\t\t_mipmapMaterial.dispose();\n\n\t\t_mesh.geometry.dispose();\n\n\t\tif ( _tempTarget != null ) _tempTarget.dispose();\n\n\t}\n\n}\n\nfunction _getMipmapMaterial() {\n\n\tconst shaderMaterial = new RawShaderMaterial( {\n\n\t\tuniforms: {\n\t\t\troughnessMap: { value: null },\n\t\t\tnormalMap: { value: null },\n\t\t\ttexelSize: { value: new Vector2( 1, 1 ) }\n\t\t},\n\n\t\tvertexShader: /* glsl */`\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tattribute vec3 position;\n\t\t\tattribute vec2 uv;\n\n\t\t\tvarying vec2 vUv;\n\n\t\t\tvoid main() {\n\n\t\t\t\tvUv = uv;\n\n\t\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t\t}\n\t\t`,\n\n\t\tfragmentShader: /* glsl */`\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec2 vUv;\n\n\t\t\tuniform sampler2D roughnessMap;\n\t\t\tuniform sampler2D normalMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\n\t\t\tvec4 envMapTexelToLinear( vec4 a ) { return a; }\n\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tfloat roughnessToVariance( float roughness ) {\n\n\t\t\t\tfloat variance = 0.0;\n\n\t\t\t\tif ( roughness >= r1 ) {\n\n\t\t\t\t\tvariance = ( r0 - roughness ) * ( v1 - v0 ) / ( r0 - r1 ) + v0;\n\n\t\t\t\t} else if ( roughness >= r4 ) {\n\n\t\t\t\t\tvariance = ( r1 - roughness ) * ( v4 - v1 ) / ( r1 - r4 ) + v1;\n\n\t\t\t\t} else if ( roughness >= r5 ) {\n\n\t\t\t\t\tvariance = ( r4 - roughness ) * ( v5 - v4 ) / ( r4 - r5 ) + v4;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfloat roughness2 = roughness * roughness;\n\n\t\t\t\t\tvariance = 1.79 * roughness2 * roughness2;\n\n\t\t\t\t}\n\n\t\t\t\treturn variance;\n\n\t\t\t}\n\n\t\t\tfloat varianceToRoughness( float variance ) {\n\n\t\t\t\tfloat roughness = 0.0;\n\n\t\t\t\tif ( variance >= v1 ) {\n\n\t\t\t\t\troughness = ( v0 - variance ) * ( r1 - r0 ) / ( v0 - v1 ) + r0;\n\n\t\t\t\t} else if ( variance >= v4 ) {\n\n\t\t\t\t\troughness = ( v1 - variance ) * ( r4 - r1 ) / ( v1 - v4 ) + r1;\n\n\t\t\t\t} else if ( variance >= v5 ) {\n\n\t\t\t\t\troughness = ( v4 - variance ) * ( r5 - r4 ) / ( v4 - v5 ) + r4;\n\n\t\t\t\t} else {\n\n\t\t\t\t\troughness = pow( 0.559 * variance, 0.25 ); // 0.559 = 1.0 / 1.79\n\n\t\t\t\t}\n\n\t\t\t\treturn roughness;\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = texture2D( roughnessMap, vUv, - 1.0 );\n\n\t\t\t\tif ( texelSize.x == 0.0 ) return;\n\n\t\t\t\tfloat roughness = gl_FragColor.g;\n\n\t\t\t\tfloat variance = roughnessToVariance( roughness );\n\n\t\t\t\tvec3 avgNormal;\n\n\t\t\t\tfor ( float x = - 1.0; x < 2.0; x += 2.0 ) {\n\n\t\t\t\t\tfor ( float y = - 1.0; y < 2.0; y += 2.0 ) {\n\n\t\t\t\t\t\tvec2 uv = vUv + vec2( x, y ) * 0.25 * texelSize;\n\n\t\t\t\t\t\tavgNormal += normalize( texture2D( normalMap, uv, - 1.0 ).xyz - 0.5 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvariance += 1.0 - 0.25 * length( avgNormal );\n\n\t\t\t\tgl_FragColor.g = varianceToRoughness( variance );\n\n\t\t\t}\n\t\t`,\n\n\t\tblending: NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false\n\n\t} );\n\n\tshaderMaterial.type = 'RoughnessMipmapper';\n\n\treturn shaderMaterial;\n\n}\n\nexport { RoughnessMipmapper };\n"]},"metadata":{},"sourceType":"module"}